// Code generated by Kitex v0.9.1. DO NOT EDIT.

package memberservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	member "rpc_gen/kitex_gen/member"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateMember": kitex.NewMethodInfo(
		createMemberHandler,
		newMemberServiceCreateMemberArgs,
		newMemberServiceCreateMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMember": kitex.NewMethodInfo(
		updateMemberHandler,
		newMemberServiceUpdateMemberArgs,
		newMemberServiceUpdateMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberInfo": kitex.NewMethodInfo(
		memberInfoHandler,
		newMemberServiceMemberInfoArgs,
		newMemberServiceMemberInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberList": kitex.NewMethodInfo(
		memberListHandler,
		newMemberServiceMemberListArgs,
		newMemberServiceMemberListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMemberStatus": kitex.NewMethodInfo(
		updateMemberStatusHandler,
		newMemberServiceUpdateMemberStatusArgs,
		newMemberServiceUpdateMemberStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberSearch": kitex.NewMethodInfo(
		memberSearchHandler,
		newMemberServiceMemberSearchArgs,
		newMemberServiceMemberSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberProductList": kitex.NewMethodInfo(
		memberProductListHandler,
		newMemberServiceMemberProductListArgs,
		newMemberServiceMemberProductListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberPropertyList": kitex.NewMethodInfo(
		memberPropertyListHandler,
		newMemberServiceMemberPropertyListArgs,
		newMemberServiceMemberPropertyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberProductDetail": kitex.NewMethodInfo(
		memberProductDetailHandler,
		newMemberServiceMemberProductDetailArgs,
		newMemberServiceMemberProductDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberPropertyDetail": kitex.NewMethodInfo(
		memberPropertyDetailHandler,
		newMemberServiceMemberPropertyDetailArgs,
		newMemberServiceMemberPropertyDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberPropertyUpdate": kitex.NewMethodInfo(
		memberPropertyUpdateHandler,
		newMemberServiceMemberPropertyUpdateArgs,
		newMemberServiceMemberPropertyUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberContractList": kitex.NewMethodInfo(
		memberContractListHandler,
		newMemberServiceMemberContractListArgs,
		newMemberServiceMemberContractListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberProductSearch": kitex.NewMethodInfo(
		memberProductSearchHandler,
		newMemberServiceMemberProductSearchArgs,
		newMemberServiceMemberProductSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberPropertySearch": kitex.NewMethodInfo(
		memberPropertySearchHandler,
		newMemberServiceMemberPropertySearchArgs,
		newMemberServiceMemberPropertySearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	memberServiceServiceInfo                = NewServiceInfo()
	memberServiceServiceInfoForClient       = NewServiceInfoForClient()
	memberServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return memberServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return memberServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return memberServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MemberService"
	handlerType := (*member.MemberService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "member",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceCreateMemberArgs)
	realResult := result.(*member.MemberServiceCreateMemberResult)
	success, err := handler.(member.MemberService).CreateMember(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceCreateMemberArgs() interface{} {
	return member.NewMemberServiceCreateMemberArgs()
}

func newMemberServiceCreateMemberResult() interface{} {
	return member.NewMemberServiceCreateMemberResult()
}

func updateMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceUpdateMemberArgs)
	realResult := result.(*member.MemberServiceUpdateMemberResult)
	success, err := handler.(member.MemberService).UpdateMember(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceUpdateMemberArgs() interface{} {
	return member.NewMemberServiceUpdateMemberArgs()
}

func newMemberServiceUpdateMemberResult() interface{} {
	return member.NewMemberServiceUpdateMemberResult()
}

func memberInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberInfoArgs)
	realResult := result.(*member.MemberServiceMemberInfoResult)
	success, err := handler.(member.MemberService).MemberInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberInfoArgs() interface{} {
	return member.NewMemberServiceMemberInfoArgs()
}

func newMemberServiceMemberInfoResult() interface{} {
	return member.NewMemberServiceMemberInfoResult()
}

func memberListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberListArgs)
	realResult := result.(*member.MemberServiceMemberListResult)
	success, err := handler.(member.MemberService).MemberList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberListArgs() interface{} {
	return member.NewMemberServiceMemberListArgs()
}

func newMemberServiceMemberListResult() interface{} {
	return member.NewMemberServiceMemberListResult()
}

func updateMemberStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceUpdateMemberStatusArgs)
	realResult := result.(*member.MemberServiceUpdateMemberStatusResult)
	success, err := handler.(member.MemberService).UpdateMemberStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceUpdateMemberStatusArgs() interface{} {
	return member.NewMemberServiceUpdateMemberStatusArgs()
}

func newMemberServiceUpdateMemberStatusResult() interface{} {
	return member.NewMemberServiceUpdateMemberStatusResult()
}

func memberSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberSearchArgs)
	realResult := result.(*member.MemberServiceMemberSearchResult)
	success, err := handler.(member.MemberService).MemberSearch(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberSearchArgs() interface{} {
	return member.NewMemberServiceMemberSearchArgs()
}

func newMemberServiceMemberSearchResult() interface{} {
	return member.NewMemberServiceMemberSearchResult()
}

func memberProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberProductListArgs)
	realResult := result.(*member.MemberServiceMemberProductListResult)
	success, err := handler.(member.MemberService).MemberProductList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberProductListArgs() interface{} {
	return member.NewMemberServiceMemberProductListArgs()
}

func newMemberServiceMemberProductListResult() interface{} {
	return member.NewMemberServiceMemberProductListResult()
}

func memberPropertyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberPropertyListArgs)
	realResult := result.(*member.MemberServiceMemberPropertyListResult)
	success, err := handler.(member.MemberService).MemberPropertyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberPropertyListArgs() interface{} {
	return member.NewMemberServiceMemberPropertyListArgs()
}

func newMemberServiceMemberPropertyListResult() interface{} {
	return member.NewMemberServiceMemberPropertyListResult()
}

func memberProductDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberProductDetailArgs)
	realResult := result.(*member.MemberServiceMemberProductDetailResult)
	success, err := handler.(member.MemberService).MemberProductDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberProductDetailArgs() interface{} {
	return member.NewMemberServiceMemberProductDetailArgs()
}

func newMemberServiceMemberProductDetailResult() interface{} {
	return member.NewMemberServiceMemberProductDetailResult()
}

func memberPropertyDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberPropertyDetailArgs)
	realResult := result.(*member.MemberServiceMemberPropertyDetailResult)
	success, err := handler.(member.MemberService).MemberPropertyDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberPropertyDetailArgs() interface{} {
	return member.NewMemberServiceMemberPropertyDetailArgs()
}

func newMemberServiceMemberPropertyDetailResult() interface{} {
	return member.NewMemberServiceMemberPropertyDetailResult()
}

func memberPropertyUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberPropertyUpdateArgs)
	realResult := result.(*member.MemberServiceMemberPropertyUpdateResult)
	success, err := handler.(member.MemberService).MemberPropertyUpdate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberPropertyUpdateArgs() interface{} {
	return member.NewMemberServiceMemberPropertyUpdateArgs()
}

func newMemberServiceMemberPropertyUpdateResult() interface{} {
	return member.NewMemberServiceMemberPropertyUpdateResult()
}

func memberContractListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberContractListArgs)
	realResult := result.(*member.MemberServiceMemberContractListResult)
	success, err := handler.(member.MemberService).MemberContractList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberContractListArgs() interface{} {
	return member.NewMemberServiceMemberContractListArgs()
}

func newMemberServiceMemberContractListResult() interface{} {
	return member.NewMemberServiceMemberContractListResult()
}

func memberProductSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberProductSearchArgs)
	realResult := result.(*member.MemberServiceMemberProductSearchResult)
	success, err := handler.(member.MemberService).MemberProductSearch(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberProductSearchArgs() interface{} {
	return member.NewMemberServiceMemberProductSearchArgs()
}

func newMemberServiceMemberProductSearchResult() interface{} {
	return member.NewMemberServiceMemberProductSearchResult()
}

func memberPropertySearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*member.MemberServiceMemberPropertySearchArgs)
	realResult := result.(*member.MemberServiceMemberPropertySearchResult)
	success, err := handler.(member.MemberService).MemberPropertySearch(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMemberServiceMemberPropertySearchArgs() interface{} {
	return member.NewMemberServiceMemberPropertySearchArgs()
}

func newMemberServiceMemberPropertySearchResult() interface{} {
	return member.NewMemberServiceMemberPropertySearchResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateMember(ctx context.Context, req *member.CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceCreateMemberArgs
	_args.Req = req
	var _result member.MemberServiceCreateMemberResult
	if err = p.c.Call(ctx, "CreateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMember(ctx context.Context, req *member.CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceUpdateMemberArgs
	_args.Req = req
	var _result member.MemberServiceUpdateMemberResult
	if err = p.c.Call(ctx, "UpdateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberInfoArgs
	_args.Req = req
	var _result member.MemberServiceMemberInfoResult
	if err = p.c.Call(ctx, "MemberInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberList(ctx context.Context, req *member.MemberListReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberListArgs
	_args.Req = req
	var _result member.MemberServiceMemberListResult
	if err = p.c.Call(ctx, "MemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceUpdateMemberStatusArgs
	_args.Req = req
	var _result member.MemberServiceUpdateMemberStatusResult
	if err = p.c.Call(ctx, "UpdateMemberStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberSearch(ctx context.Context, req *member.MemberSearchReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberSearchArgs
	_args.Req = req
	var _result member.MemberServiceMemberSearchResult
	if err = p.c.Call(ctx, "MemberSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberProductList(ctx context.Context, req *member.MemberProductListReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberProductListArgs
	_args.Req = req
	var _result member.MemberServiceMemberProductListResult
	if err = p.c.Call(ctx, "MemberProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPropertyList(ctx context.Context, req *member.MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberPropertyListArgs
	_args.Req = req
	var _result member.MemberServiceMemberPropertyListResult
	if err = p.c.Call(ctx, "MemberPropertyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberProductDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberProductDetailArgs
	_args.Req = req
	var _result member.MemberServiceMemberProductDetailResult
	if err = p.c.Call(ctx, "MemberProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPropertyDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberPropertyDetailArgs
	_args.Req = req
	var _result member.MemberServiceMemberPropertyDetailResult
	if err = p.c.Call(ctx, "MemberPropertyDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPropertyUpdate(ctx context.Context, req *member.MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberPropertyUpdateArgs
	_args.Req = req
	var _result member.MemberServiceMemberPropertyUpdateResult
	if err = p.c.Call(ctx, "MemberPropertyUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberContractList(ctx context.Context, req *member.MemberPropertyListReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberContractListArgs
	_args.Req = req
	var _result member.MemberServiceMemberContractListResult
	if err = p.c.Call(ctx, "MemberContractList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberProductSearch(ctx context.Context, req *member.MemberProductSearchReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberProductSearchArgs
	_args.Req = req
	var _result member.MemberServiceMemberProductSearchResult
	if err = p.c.Call(ctx, "MemberProductSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberPropertySearch(ctx context.Context, req *member.MemberPropertySearchReq) (r *base.NilResponse, err error) {
	var _args member.MemberServiceMemberPropertySearchArgs
	_args.Req = req
	var _result member.MemberServiceMemberPropertySearchResult
	if err = p.c.Call(ctx, "MemberPropertySearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

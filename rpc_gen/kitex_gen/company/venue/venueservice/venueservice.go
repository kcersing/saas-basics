// Code generated by Kitex v0.9.1. DO NOT EDIT.

package venueservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	venue "rpc_gen/kitex_gen/company/venue"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateVenuePlace": kitex.NewMethodInfo(
		createVenuePlaceHandler,
		newVenueServiceCreateVenuePlaceArgs,
		newVenueServiceCreateVenuePlaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVenuePlace": kitex.NewMethodInfo(
		updateVenuePlaceHandler,
		newVenueServiceUpdateVenuePlaceArgs,
		newVenueServiceUpdateVenuePlaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVenuePlaceStatus": kitex.NewMethodInfo(
		updateVenuePlaceStatusHandler,
		newVenueServiceUpdateVenuePlaceStatusArgs,
		newVenueServiceUpdateVenuePlaceStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VenuePlaceList": kitex.NewMethodInfo(
		venuePlaceListHandler,
		newVenueServiceVenuePlaceListArgs,
		newVenueServiceVenuePlaceListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateVenue": kitex.NewMethodInfo(
		createVenueHandler,
		newVenueServiceCreateVenueArgs,
		newVenueServiceCreateVenueResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVenue": kitex.NewMethodInfo(
		updateVenueHandler,
		newVenueServiceUpdateVenueArgs,
		newVenueServiceUpdateVenueResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateVenueStatus": kitex.NewMethodInfo(
		updateVenueStatusHandler,
		newVenueServiceUpdateVenueStatusArgs,
		newVenueServiceUpdateVenueStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VenueList": kitex.NewMethodInfo(
		venueListHandler,
		newVenueServiceVenueListArgs,
		newVenueServiceVenueListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	venueServiceServiceInfo                = NewServiceInfo()
	venueServiceServiceInfoForClient       = NewServiceInfoForClient()
	venueServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return venueServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return venueServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return venueServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VenueService"
	handlerType := (*venue.VenueService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "venue",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createVenuePlaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceCreateVenuePlaceArgs)
	realResult := result.(*venue.VenueServiceCreateVenuePlaceResult)
	success, err := handler.(venue.VenueService).CreateVenuePlace(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceCreateVenuePlaceArgs() interface{} {
	return venue.NewVenueServiceCreateVenuePlaceArgs()
}

func newVenueServiceCreateVenuePlaceResult() interface{} {
	return venue.NewVenueServiceCreateVenuePlaceResult()
}

func updateVenuePlaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceUpdateVenuePlaceArgs)
	realResult := result.(*venue.VenueServiceUpdateVenuePlaceResult)
	success, err := handler.(venue.VenueService).UpdateVenuePlace(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceUpdateVenuePlaceArgs() interface{} {
	return venue.NewVenueServiceUpdateVenuePlaceArgs()
}

func newVenueServiceUpdateVenuePlaceResult() interface{} {
	return venue.NewVenueServiceUpdateVenuePlaceResult()
}

func updateVenuePlaceStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceUpdateVenuePlaceStatusArgs)
	realResult := result.(*venue.VenueServiceUpdateVenuePlaceStatusResult)
	success, err := handler.(venue.VenueService).UpdateVenuePlaceStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceUpdateVenuePlaceStatusArgs() interface{} {
	return venue.NewVenueServiceUpdateVenuePlaceStatusArgs()
}

func newVenueServiceUpdateVenuePlaceStatusResult() interface{} {
	return venue.NewVenueServiceUpdateVenuePlaceStatusResult()
}

func venuePlaceListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceVenuePlaceListArgs)
	realResult := result.(*venue.VenueServiceVenuePlaceListResult)
	success, err := handler.(venue.VenueService).VenuePlaceList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceVenuePlaceListArgs() interface{} {
	return venue.NewVenueServiceVenuePlaceListArgs()
}

func newVenueServiceVenuePlaceListResult() interface{} {
	return venue.NewVenueServiceVenuePlaceListResult()
}

func createVenueHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceCreateVenueArgs)
	realResult := result.(*venue.VenueServiceCreateVenueResult)
	success, err := handler.(venue.VenueService).CreateVenue(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceCreateVenueArgs() interface{} {
	return venue.NewVenueServiceCreateVenueArgs()
}

func newVenueServiceCreateVenueResult() interface{} {
	return venue.NewVenueServiceCreateVenueResult()
}

func updateVenueHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceUpdateVenueArgs)
	realResult := result.(*venue.VenueServiceUpdateVenueResult)
	success, err := handler.(venue.VenueService).UpdateVenue(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceUpdateVenueArgs() interface{} {
	return venue.NewVenueServiceUpdateVenueArgs()
}

func newVenueServiceUpdateVenueResult() interface{} {
	return venue.NewVenueServiceUpdateVenueResult()
}

func updateVenueStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceUpdateVenueStatusArgs)
	realResult := result.(*venue.VenueServiceUpdateVenueStatusResult)
	success, err := handler.(venue.VenueService).UpdateVenueStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceUpdateVenueStatusArgs() interface{} {
	return venue.NewVenueServiceUpdateVenueStatusArgs()
}

func newVenueServiceUpdateVenueStatusResult() interface{} {
	return venue.NewVenueServiceUpdateVenueStatusResult()
}

func venueListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*venue.VenueServiceVenueListArgs)
	realResult := result.(*venue.VenueServiceVenueListResult)
	success, err := handler.(venue.VenueService).VenueList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVenueServiceVenueListArgs() interface{} {
	return venue.NewVenueServiceVenueListArgs()
}

func newVenueServiceVenueListResult() interface{} {
	return venue.NewVenueServiceVenueListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVenuePlace(ctx context.Context, req *venue.VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceCreateVenuePlaceArgs
	_args.Req = req
	var _result venue.VenueServiceCreateVenuePlaceResult
	if err = p.c.Call(ctx, "CreateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVenuePlace(ctx context.Context, req *venue.VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceUpdateVenuePlaceArgs
	_args.Req = req
	var _result venue.VenueServiceUpdateVenuePlaceResult
	if err = p.c.Call(ctx, "UpdateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVenuePlaceStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceUpdateVenuePlaceStatusArgs
	_args.Req = req
	var _result venue.VenueServiceUpdateVenuePlaceStatusResult
	if err = p.c.Call(ctx, "UpdateVenuePlaceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VenuePlaceList(ctx context.Context, req *venue.VenuePlaceListReq) (r *venue.VenuePlaceListResp, err error) {
	var _args venue.VenueServiceVenuePlaceListArgs
	_args.Req = req
	var _result venue.VenueServiceVenuePlaceListResult
	if err = p.c.Call(ctx, "VenuePlaceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateVenue(ctx context.Context, req *venue.VenueInfo) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceCreateVenueArgs
	_args.Req = req
	var _result venue.VenueServiceCreateVenueResult
	if err = p.c.Call(ctx, "CreateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVenue(ctx context.Context, req *venue.VenueInfo) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceUpdateVenueArgs
	_args.Req = req
	var _result venue.VenueServiceUpdateVenueResult
	if err = p.c.Call(ctx, "UpdateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVenueStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args venue.VenueServiceUpdateVenueStatusArgs
	_args.Req = req
	var _result venue.VenueServiceUpdateVenueStatusResult
	if err = p.c.Call(ctx, "UpdateVenueStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VenueList(ctx context.Context, req *venue.VenueListReq) (r *venue.VenueListResp, err error) {
	var _args venue.VenueServiceVenueListArgs
	_args.Req = req
	var _result venue.VenueServiceVenueListResult
	if err = p.c.Call(ctx, "VenueList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package venue

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc_gen/kitex_gen/base"
	"strings"
)

type VenuePlaceListReq struct {
	Page     *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Name     *string `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Status   *int64  `thrift:"status,11,optional" frugal:"11,optional,i64" json:"status,omitempty"`
}

func NewVenuePlaceListReq() *VenuePlaceListReq {
	return &VenuePlaceListReq{}
}

func (p *VenuePlaceListReq) InitDefault() {
}

var VenuePlaceListReq_Page_DEFAULT int64

func (p *VenuePlaceListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return VenuePlaceListReq_Page_DEFAULT
	}
	return *p.Page
}

var VenuePlaceListReq_PageSize_DEFAULT int64

func (p *VenuePlaceListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return VenuePlaceListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var VenuePlaceListReq_Name_DEFAULT string

func (p *VenuePlaceListReq) GetName() (v string) {
	if !p.IsSetName() {
		return VenuePlaceListReq_Name_DEFAULT
	}
	return *p.Name
}

var VenuePlaceListReq_Status_DEFAULT int64

func (p *VenuePlaceListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenuePlaceListReq_Status_DEFAULT
	}
	return *p.Status
}
func (p *VenuePlaceListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *VenuePlaceListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *VenuePlaceListReq) SetName(val *string) {
	p.Name = val
}
func (p *VenuePlaceListReq) SetStatus(val *int64) {
	p.Status = val
}

var fieldIDToName_VenuePlaceListReq = map[int16]string{
	1:  "page",
	2:  "pageSize",
	3:  "name",
	11: "status",
}

func (p *VenuePlaceListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *VenuePlaceListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *VenuePlaceListReq) IsSetName() bool {
	return p.Name != nil
}

func (p *VenuePlaceListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *VenuePlaceListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenuePlaceListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenuePlaceListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}

func (p *VenuePlaceListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenuePlaceListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenuePlaceListReq(%+v)", *p)

}

func (p *VenuePlaceListReq) DeepEqual(ano *VenuePlaceListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *VenuePlaceListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *VenuePlaceListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *VenuePlaceListReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *VenuePlaceListReq) Field11DeepEqual(src *int64) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}

type VenueListReq struct {
	Page     *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Name     *string `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Status   *int64  `thrift:"status,11,optional" frugal:"11,optional,i64" json:"status,omitempty"`
}

func NewVenueListReq() *VenueListReq {
	return &VenueListReq{}
}

func (p *VenueListReq) InitDefault() {
}

var VenueListReq_Page_DEFAULT int64

func (p *VenueListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return VenueListReq_Page_DEFAULT
	}
	return *p.Page
}

var VenueListReq_PageSize_DEFAULT int64

func (p *VenueListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return VenueListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var VenueListReq_Name_DEFAULT string

func (p *VenueListReq) GetName() (v string) {
	if !p.IsSetName() {
		return VenueListReq_Name_DEFAULT
	}
	return *p.Name
}

var VenueListReq_Status_DEFAULT int64

func (p *VenueListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenueListReq_Status_DEFAULT
	}
	return *p.Status
}
func (p *VenueListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *VenueListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *VenueListReq) SetName(val *string) {
	p.Name = val
}
func (p *VenueListReq) SetStatus(val *int64) {
	p.Status = val
}

var fieldIDToName_VenueListReq = map[int16]string{
	1:  "page",
	2:  "pageSize",
	3:  "name",
	11: "status",
}

func (p *VenueListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *VenueListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *VenueListReq) IsSetName() bool {
	return p.Name != nil
}

func (p *VenueListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *VenueListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *VenueListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *VenueListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *VenueListReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}

func (p *VenueListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenueListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenueListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenueListReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenueListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueListReq(%+v)", *p)

}

func (p *VenueListReq) DeepEqual(ano *VenueListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *VenueListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *VenueListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *VenueListReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueListReq) Field11DeepEqual(src *int64) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}

type VenueInfo struct {
	Id            *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name          *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Address       *string `thrift:"address,3,optional" frugal:"3,optional,string" json:"address,omitempty"`
	AddressDetail *string `thrift:"addressDetail,4,optional" frugal:"4,optional,string" json:"addressDetail,omitempty"`
	Latitude      *string `thrift:"latitude,5,optional" frugal:"5,optional,string" json:"latitude,omitempty"`
	Longitude     *string `thrift:"longitude,6,optional" frugal:"6,optional,string" json:"longitude,omitempty"`
	Mobile        *string `thrift:"mobile,7,optional" frugal:"7,optional,string" json:"mobile,omitempty"`
	Pic           *string `thrift:"pic,8,optional" frugal:"8,optional,string" json:"pic,omitempty"`
	Information   *string `thrift:"information,9,optional" frugal:"9,optional,string" json:"information,omitempty"`
	Status        *int64  `thrift:"status,10,optional" frugal:"10,optional,i64" json:"status,omitempty"`
	CreatedAt     *string `thrift:"CreatedAt,11,optional" frugal:"11,optional,string" json:"CreatedAt,omitempty"`
	UpdatedAt     *string `thrift:"UpdatedAt,12,optional" frugal:"12,optional,string" json:"UpdatedAt,omitempty"`
}

func NewVenueInfo() *VenueInfo {
	return &VenueInfo{}
}

func (p *VenueInfo) InitDefault() {
}

var VenueInfo_Id_DEFAULT int64

func (p *VenueInfo) GetId() (v int64) {
	if !p.IsSetId() {
		return VenueInfo_Id_DEFAULT
	}
	return *p.Id
}

var VenueInfo_Name_DEFAULT string

func (p *VenueInfo) GetName() (v string) {
	if !p.IsSetName() {
		return VenueInfo_Name_DEFAULT
	}
	return *p.Name
}

var VenueInfo_Address_DEFAULT string

func (p *VenueInfo) GetAddress() (v string) {
	if !p.IsSetAddress() {
		return VenueInfo_Address_DEFAULT
	}
	return *p.Address
}

var VenueInfo_AddressDetail_DEFAULT string

func (p *VenueInfo) GetAddressDetail() (v string) {
	if !p.IsSetAddressDetail() {
		return VenueInfo_AddressDetail_DEFAULT
	}
	return *p.AddressDetail
}

var VenueInfo_Latitude_DEFAULT string

func (p *VenueInfo) GetLatitude() (v string) {
	if !p.IsSetLatitude() {
		return VenueInfo_Latitude_DEFAULT
	}
	return *p.Latitude
}

var VenueInfo_Longitude_DEFAULT string

func (p *VenueInfo) GetLongitude() (v string) {
	if !p.IsSetLongitude() {
		return VenueInfo_Longitude_DEFAULT
	}
	return *p.Longitude
}

var VenueInfo_Mobile_DEFAULT string

func (p *VenueInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return VenueInfo_Mobile_DEFAULT
	}
	return *p.Mobile
}

var VenueInfo_Pic_DEFAULT string

func (p *VenueInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return VenueInfo_Pic_DEFAULT
	}
	return *p.Pic
}

var VenueInfo_Information_DEFAULT string

func (p *VenueInfo) GetInformation() (v string) {
	if !p.IsSetInformation() {
		return VenueInfo_Information_DEFAULT
	}
	return *p.Information
}

var VenueInfo_Status_DEFAULT int64

func (p *VenueInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenueInfo_Status_DEFAULT
	}
	return *p.Status
}

var VenueInfo_CreatedAt_DEFAULT string

func (p *VenueInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return VenueInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var VenueInfo_UpdatedAt_DEFAULT string

func (p *VenueInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return VenueInfo_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *VenueInfo) SetId(val *int64) {
	p.Id = val
}
func (p *VenueInfo) SetName(val *string) {
	p.Name = val
}
func (p *VenueInfo) SetAddress(val *string) {
	p.Address = val
}
func (p *VenueInfo) SetAddressDetail(val *string) {
	p.AddressDetail = val
}
func (p *VenueInfo) SetLatitude(val *string) {
	p.Latitude = val
}
func (p *VenueInfo) SetLongitude(val *string) {
	p.Longitude = val
}
func (p *VenueInfo) SetMobile(val *string) {
	p.Mobile = val
}
func (p *VenueInfo) SetPic(val *string) {
	p.Pic = val
}
func (p *VenueInfo) SetInformation(val *string) {
	p.Information = val
}
func (p *VenueInfo) SetStatus(val *int64) {
	p.Status = val
}
func (p *VenueInfo) SetCreatedAt(val *string) {
	p.CreatedAt = val
}
func (p *VenueInfo) SetUpdatedAt(val *string) {
	p.UpdatedAt = val
}

var fieldIDToName_VenueInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "address",
	4:  "addressDetail",
	5:  "latitude",
	6:  "longitude",
	7:  "mobile",
	8:  "pic",
	9:  "information",
	10: "status",
	11: "CreatedAt",
	12: "UpdatedAt",
}

func (p *VenueInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *VenueInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *VenueInfo) IsSetAddress() bool {
	return p.Address != nil
}

func (p *VenueInfo) IsSetAddressDetail() bool {
	return p.AddressDetail != nil
}

func (p *VenueInfo) IsSetLatitude() bool {
	return p.Latitude != nil
}

func (p *VenueInfo) IsSetLongitude() bool {
	return p.Longitude != nil
}

func (p *VenueInfo) IsSetMobile() bool {
	return p.Mobile != nil
}

func (p *VenueInfo) IsSetPic() bool {
	return p.Pic != nil
}

func (p *VenueInfo) IsSetInformation() bool {
	return p.Information != nil
}

func (p *VenueInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *VenueInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *VenueInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *VenueInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *VenueInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *VenueInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Address = _field
	return nil
}
func (p *VenueInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AddressDetail = _field
	return nil
}
func (p *VenueInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Latitude = _field
	return nil
}
func (p *VenueInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Longitude = _field
	return nil
}
func (p *VenueInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Mobile = _field
	return nil
}
func (p *VenueInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pic = _field
	return nil
}
func (p *VenueInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Information = _field
	return nil
}
func (p *VenueInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *VenueInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *VenueInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *VenueInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenueInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenueInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err = oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Address); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenueInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddressDetail() {
		if err = oprot.WriteFieldBegin("addressDetail", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AddressDetail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VenueInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err = oprot.WriteFieldBegin("latitude", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Latitude); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VenueInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err = oprot.WriteFieldBegin("longitude", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Longitude); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VenueInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VenueInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *VenueInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInformation() {
		if err = oprot.WriteFieldBegin("information", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Information); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *VenueInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *VenueInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenueInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *VenueInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueInfo(%+v)", *p)

}

func (p *VenueInfo) DeepEqual(ano *VenueInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Address) {
		return false
	}
	if !p.Field4DeepEqual(ano.AddressDetail) {
		return false
	}
	if !p.Field5DeepEqual(ano.Latitude) {
		return false
	}
	if !p.Field6DeepEqual(ano.Longitude) {
		return false
	}
	if !p.Field7DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field8DeepEqual(ano.Pic) {
		return false
	}
	if !p.Field9DeepEqual(ano.Information) {
		return false
	}
	if !p.Field10DeepEqual(ano.Status) {
		return false
	}
	if !p.Field11DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *VenueInfo) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *VenueInfo) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field3DeepEqual(src *string) bool {

	if p.Address == src {
		return true
	} else if p.Address == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Address, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field4DeepEqual(src *string) bool {

	if p.AddressDetail == src {
		return true
	} else if p.AddressDetail == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AddressDetail, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field5DeepEqual(src *string) bool {

	if p.Latitude == src {
		return true
	} else if p.Latitude == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Latitude, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field6DeepEqual(src *string) bool {

	if p.Longitude == src {
		return true
	} else if p.Longitude == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Longitude, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field7DeepEqual(src *string) bool {

	if p.Mobile == src {
		return true
	} else if p.Mobile == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mobile, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field8DeepEqual(src *string) bool {

	if p.Pic == src {
		return true
	} else if p.Pic == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Pic, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field9DeepEqual(src *string) bool {

	if p.Information == src {
		return true
	} else if p.Information == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Information, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field10DeepEqual(src *int64) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *VenueInfo) Field11DeepEqual(src *string) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedAt, *src) != 0 {
		return false
	}
	return true
}
func (p *VenueInfo) Field12DeepEqual(src *string) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedAt, *src) != 0 {
		return false
	}
	return true
}

type VenuePlaceInfo struct {
	Id        *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name      *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	VenueId   *int64  `thrift:"venueId,3,optional" frugal:"3,optional,i64" json:"venueId,omitempty"`
	Pic       *string `thrift:"pic,4,optional" frugal:"4,optional,string" json:"pic,omitempty"`
	Status    *int64  `thrift:"status,5,optional" frugal:"5,optional,i64" json:"status,omitempty"`
	CreatedAt *string `thrift:"CreatedAt,6,optional" frugal:"6,optional,string" json:"CreatedAt,omitempty"`
	UpdatedAt *string `thrift:"UpdatedAt,7,optional" frugal:"7,optional,string" json:"UpdatedAt,omitempty"`
}

func NewVenuePlaceInfo() *VenuePlaceInfo {
	return &VenuePlaceInfo{}
}

func (p *VenuePlaceInfo) InitDefault() {
}

var VenuePlaceInfo_Id_DEFAULT int64

func (p *VenuePlaceInfo) GetId() (v int64) {
	if !p.IsSetId() {
		return VenuePlaceInfo_Id_DEFAULT
	}
	return *p.Id
}

var VenuePlaceInfo_Name_DEFAULT string

func (p *VenuePlaceInfo) GetName() (v string) {
	if !p.IsSetName() {
		return VenuePlaceInfo_Name_DEFAULT
	}
	return *p.Name
}

var VenuePlaceInfo_VenueId_DEFAULT int64

func (p *VenuePlaceInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return VenuePlaceInfo_VenueId_DEFAULT
	}
	return *p.VenueId
}

var VenuePlaceInfo_Pic_DEFAULT string

func (p *VenuePlaceInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return VenuePlaceInfo_Pic_DEFAULT
	}
	return *p.Pic
}

var VenuePlaceInfo_Status_DEFAULT int64

func (p *VenuePlaceInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenuePlaceInfo_Status_DEFAULT
	}
	return *p.Status
}

var VenuePlaceInfo_CreatedAt_DEFAULT string

func (p *VenuePlaceInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return VenuePlaceInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var VenuePlaceInfo_UpdatedAt_DEFAULT string

func (p *VenuePlaceInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return VenuePlaceInfo_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *VenuePlaceInfo) SetId(val *int64) {
	p.Id = val
}
func (p *VenuePlaceInfo) SetName(val *string) {
	p.Name = val
}
func (p *VenuePlaceInfo) SetVenueId(val *int64) {
	p.VenueId = val
}
func (p *VenuePlaceInfo) SetPic(val *string) {
	p.Pic = val
}
func (p *VenuePlaceInfo) SetStatus(val *int64) {
	p.Status = val
}
func (p *VenuePlaceInfo) SetCreatedAt(val *string) {
	p.CreatedAt = val
}
func (p *VenuePlaceInfo) SetUpdatedAt(val *string) {
	p.UpdatedAt = val
}

var fieldIDToName_VenuePlaceInfo = map[int16]string{
	1: "id",
	2: "name",
	3: "venueId",
	4: "pic",
	5: "status",
	6: "CreatedAt",
	7: "UpdatedAt",
}

func (p *VenuePlaceInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *VenuePlaceInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *VenuePlaceInfo) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *VenuePlaceInfo) IsSetPic() bool {
	return p.Pic != nil
}

func (p *VenuePlaceInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *VenuePlaceInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *VenuePlaceInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *VenuePlaceInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenuePlaceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenuePlaceInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueId = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pic = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *VenuePlaceInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VenuePlaceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenuePlaceInfo(%+v)", *p)

}

func (p *VenuePlaceInfo) DeepEqual(ano *VenuePlaceInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Pic) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *VenuePlaceInfo) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field3DeepEqual(src *int64) bool {

	if p.VenueId == src {
		return true
	} else if p.VenueId == nil || src == nil {
		return false
	}
	if *p.VenueId != *src {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field4DeepEqual(src *string) bool {

	if p.Pic == src {
		return true
	} else if p.Pic == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Pic, *src) != 0 {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field5DeepEqual(src *int64) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field6DeepEqual(src *string) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedAt, *src) != 0 {
		return false
	}
	return true
}
func (p *VenuePlaceInfo) Field7DeepEqual(src *string) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedAt, *src) != 0 {
		return false
	}
	return true
}

type VenueListResp struct {
	Resp  *base.BaseResp `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*VenueInfo   `thrift:"extra,2,optional" frugal:"2,optional,list<VenueInfo>" json:"extra,omitempty"`
}

func NewVenueListResp() *VenueListResp {
	return &VenueListResp{}
}

func (p *VenueListResp) InitDefault() {
}

var VenueListResp_Resp_DEFAULT *base.BaseResp

func (p *VenueListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return VenueListResp_Resp_DEFAULT
	}
	return p.Resp
}

var VenueListResp_Extra_DEFAULT []*VenueInfo

func (p *VenueListResp) GetExtra() (v []*VenueInfo) {
	if !p.IsSetExtra() {
		return VenueListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *VenueListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *VenueListResp) SetExtra(val []*VenueInfo) {
	p.Extra = val
}

var fieldIDToName_VenueListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *VenueListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *VenueListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *VenueListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *VenueListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VenueInfo, 0, size)
	values := make([]VenueInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *VenueListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenueListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenueListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueListResp(%+v)", *p)

}

func (p *VenueListResp) DeepEqual(ano *VenueListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *VenueListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VenueListResp) Field2DeepEqual(src []*VenueInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type VenuePlaceListResp struct {
	Resp  *base.BaseResp    `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*VenuePlaceInfo `thrift:"extra,2,optional" frugal:"2,optional,list<VenuePlaceInfo>" json:"extra,omitempty"`
}

func NewVenuePlaceListResp() *VenuePlaceListResp {
	return &VenuePlaceListResp{}
}

func (p *VenuePlaceListResp) InitDefault() {
}

var VenuePlaceListResp_Resp_DEFAULT *base.BaseResp

func (p *VenuePlaceListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return VenuePlaceListResp_Resp_DEFAULT
	}
	return p.Resp
}

var VenuePlaceListResp_Extra_DEFAULT []*VenuePlaceInfo

func (p *VenuePlaceListResp) GetExtra() (v []*VenuePlaceInfo) {
	if !p.IsSetExtra() {
		return VenuePlaceListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *VenuePlaceListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *VenuePlaceListResp) SetExtra(val []*VenuePlaceInfo) {
	p.Extra = val
}

var fieldIDToName_VenuePlaceListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *VenuePlaceListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *VenuePlaceListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *VenuePlaceListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenuePlaceListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenuePlaceListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *VenuePlaceListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VenuePlaceInfo, 0, size)
	values := make([]VenuePlaceInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *VenuePlaceListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenuePlaceListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenuePlaceListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenuePlaceListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenuePlaceListResp(%+v)", *p)

}

func (p *VenuePlaceListResp) DeepEqual(ano *VenuePlaceListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *VenuePlaceListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VenuePlaceListResp) Field2DeepEqual(src []*VenuePlaceInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type VenueService interface {
	CreateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error)

	UpdateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error)

	UpdateVenuePlaceStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	VenuePlaceList(ctx context.Context, req *VenuePlaceListReq) (r *VenuePlaceListResp, err error)

	CreateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error)

	UpdateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error)

	UpdateVenueStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	VenueList(ctx context.Context, req *VenueListReq) (r *VenueListResp, err error)
}

type VenueServiceClient struct {
	c thrift.TClient
}

func NewVenueServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VenueServiceClient {
	return &VenueServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewVenueServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VenueServiceClient {
	return &VenueServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewVenueServiceClient(c thrift.TClient) *VenueServiceClient {
	return &VenueServiceClient{
		c: c,
	}
}

func (p *VenueServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *VenueServiceClient) CreateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceCreateVenuePlaceArgs
	_args.Req = req
	var _result VenueServiceCreateVenuePlaceResult
	if err = p.Client_().Call(ctx, "CreateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenuePlaceArgs
	_args.Req = req
	var _result VenueServiceUpdateVenuePlaceResult
	if err = p.Client_().Call(ctx, "UpdateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenuePlaceStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenuePlaceStatusArgs
	_args.Req = req
	var _result VenueServiceUpdateVenuePlaceStatusResult
	if err = p.Client_().Call(ctx, "UpdateVenuePlaceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) VenuePlaceList(ctx context.Context, req *VenuePlaceListReq) (r *VenuePlaceListResp, err error) {
	var _args VenueServiceVenuePlaceListArgs
	_args.Req = req
	var _result VenueServiceVenuePlaceListResult
	if err = p.Client_().Call(ctx, "VenuePlaceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) CreateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceCreateVenueArgs
	_args.Req = req
	var _result VenueServiceCreateVenueResult
	if err = p.Client_().Call(ctx, "CreateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenueArgs
	_args.Req = req
	var _result VenueServiceUpdateVenueResult
	if err = p.Client_().Call(ctx, "UpdateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenueStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenueStatusArgs
	_args.Req = req
	var _result VenueServiceUpdateVenueStatusResult
	if err = p.Client_().Call(ctx, "UpdateVenueStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) VenueList(ctx context.Context, req *VenueListReq) (r *VenueListResp, err error) {
	var _args VenueServiceVenueListArgs
	_args.Req = req
	var _result VenueServiceVenueListResult
	if err = p.Client_().Call(ctx, "VenueList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type VenueServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VenueService
}

func (p *VenueServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VenueServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VenueServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVenueServiceProcessor(handler VenueService) *VenueServiceProcessor {
	self := &VenueServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateVenuePlace", &venueServiceProcessorCreateVenuePlace{handler: handler})
	self.AddToProcessorMap("UpdateVenuePlace", &venueServiceProcessorUpdateVenuePlace{handler: handler})
	self.AddToProcessorMap("UpdateVenuePlaceStatus", &venueServiceProcessorUpdateVenuePlaceStatus{handler: handler})
	self.AddToProcessorMap("VenuePlaceList", &venueServiceProcessorVenuePlaceList{handler: handler})
	self.AddToProcessorMap("CreateVenue", &venueServiceProcessorCreateVenue{handler: handler})
	self.AddToProcessorMap("UpdateVenue", &venueServiceProcessorUpdateVenue{handler: handler})
	self.AddToProcessorMap("UpdateVenueStatus", &venueServiceProcessorUpdateVenueStatus{handler: handler})
	self.AddToProcessorMap("VenueList", &venueServiceProcessorVenueList{handler: handler})
	return self
}
func (p *VenueServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type venueServiceProcessorCreateVenuePlace struct {
	handler VenueService
}

func (p *venueServiceProcessorCreateVenuePlace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceCreateVenuePlaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceCreateVenuePlaceResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateVenuePlace(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVenuePlace: "+err2.Error())
		oprot.WriteMessageBegin("CreateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVenuePlace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenuePlace struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenuePlace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenuePlaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenuePlaceResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenuePlace(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenuePlace: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenuePlace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenuePlaceStatus struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenuePlaceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenuePlaceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenuePlaceStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenuePlaceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenuePlaceStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorVenuePlaceList struct {
	handler VenueService
}

func (p *venueServiceProcessorVenuePlaceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceVenuePlaceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VenuePlaceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceVenuePlaceListResult{}
	var retval *VenuePlaceListResp
	if retval, err2 = p.handler.VenuePlaceList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VenuePlaceList: "+err2.Error())
		oprot.WriteMessageBegin("VenuePlaceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VenuePlaceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorCreateVenue struct {
	handler VenueService
}

func (p *venueServiceProcessorCreateVenue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceCreateVenueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceCreateVenueResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateVenue(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVenue: "+err2.Error())
		oprot.WriteMessageBegin("CreateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVenue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenue struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenueResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenue(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenue: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenueStatus struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenueStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenueStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenueStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenueStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenueStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenueStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenueStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenueStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorVenueList struct {
	handler VenueService
}

func (p *venueServiceProcessorVenueList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceVenueListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VenueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceVenueListResult{}
	var retval *VenueListResp
	if retval, err2 = p.handler.VenueList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VenueList: "+err2.Error())
		oprot.WriteMessageBegin("VenueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VenueList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type VenueServiceCreateVenuePlaceArgs struct {
	Req *VenuePlaceInfo `thrift:"req,1" frugal:"1,default,VenuePlaceInfo" json:"req"`
}

func NewVenueServiceCreateVenuePlaceArgs() *VenueServiceCreateVenuePlaceArgs {
	return &VenueServiceCreateVenuePlaceArgs{}
}

func (p *VenueServiceCreateVenuePlaceArgs) InitDefault() {
}

var VenueServiceCreateVenuePlaceArgs_Req_DEFAULT *VenuePlaceInfo

func (p *VenueServiceCreateVenuePlaceArgs) GetReq() (v *VenuePlaceInfo) {
	if !p.IsSetReq() {
		return VenueServiceCreateVenuePlaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceCreateVenuePlaceArgs) SetReq(val *VenuePlaceInfo) {
	p.Req = val
}

var fieldIDToName_VenueServiceCreateVenuePlaceArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceCreateVenuePlaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceCreateVenuePlaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenuePlaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceCreateVenuePlaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenuePlace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenuePlaceArgs(%+v)", *p)

}

func (p *VenueServiceCreateVenuePlaceArgs) DeepEqual(ano *VenueServiceCreateVenuePlaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceCreateVenuePlaceArgs) Field1DeepEqual(src *VenuePlaceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceCreateVenuePlaceResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceCreateVenuePlaceResult() *VenueServiceCreateVenuePlaceResult {
	return &VenueServiceCreateVenuePlaceResult{}
}

func (p *VenueServiceCreateVenuePlaceResult) InitDefault() {
}

var VenueServiceCreateVenuePlaceResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceCreateVenuePlaceResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceCreateVenuePlaceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceCreateVenuePlaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceCreateVenuePlaceResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceCreateVenuePlaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceCreateVenuePlaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenuePlaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceCreateVenuePlaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenuePlace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenuePlaceResult(%+v)", *p)

}

func (p *VenueServiceCreateVenuePlaceResult) DeepEqual(ano *VenueServiceCreateVenuePlaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceCreateVenuePlaceResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenuePlaceArgs struct {
	Req *VenuePlaceInfo `thrift:"req,1" frugal:"1,default,VenuePlaceInfo" json:"req"`
}

func NewVenueServiceUpdateVenuePlaceArgs() *VenueServiceUpdateVenuePlaceArgs {
	return &VenueServiceUpdateVenuePlaceArgs{}
}

func (p *VenueServiceUpdateVenuePlaceArgs) InitDefault() {
}

var VenueServiceUpdateVenuePlaceArgs_Req_DEFAULT *VenuePlaceInfo

func (p *VenueServiceUpdateVenuePlaceArgs) GetReq() (v *VenuePlaceInfo) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenuePlaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceUpdateVenuePlaceArgs) SetReq(val *VenuePlaceInfo) {
	p.Req = val
}

var fieldIDToName_VenueServiceUpdateVenuePlaceArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenuePlaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenuePlaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceArgs(%+v)", *p)

}

func (p *VenueServiceUpdateVenuePlaceArgs) DeepEqual(ano *VenueServiceUpdateVenuePlaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenuePlaceArgs) Field1DeepEqual(src *VenuePlaceInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenuePlaceResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceUpdateVenuePlaceResult() *VenueServiceUpdateVenuePlaceResult {
	return &VenueServiceUpdateVenuePlaceResult{}
}

func (p *VenueServiceUpdateVenuePlaceResult) InitDefault() {
}

var VenueServiceUpdateVenuePlaceResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenuePlaceResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenuePlaceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceUpdateVenuePlaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceUpdateVenuePlaceResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenuePlaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenuePlaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceResult(%+v)", *p)

}

func (p *VenueServiceUpdateVenuePlaceResult) DeepEqual(ano *VenueServiceUpdateVenuePlaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenuePlaceResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenuePlaceStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewVenueServiceUpdateVenuePlaceStatusArgs() *VenueServiceUpdateVenuePlaceStatusArgs {
	return &VenueServiceUpdateVenuePlaceStatusArgs{}
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) InitDefault() {
}

var VenueServiceUpdateVenuePlaceStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *VenueServiceUpdateVenuePlaceStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenuePlaceStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceUpdateVenuePlaceStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_VenueServiceUpdateVenuePlaceStatusArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlaceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceStatusArgs(%+v)", *p)

}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) DeepEqual(ano *VenueServiceUpdateVenuePlaceStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenuePlaceStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceUpdateVenuePlaceStatusResult() *VenueServiceUpdateVenuePlaceStatusResult {
	return &VenueServiceUpdateVenuePlaceStatusResult{}
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) InitDefault() {
}

var VenueServiceUpdateVenuePlaceStatusResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenuePlaceStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenuePlaceStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceUpdateVenuePlaceStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceUpdateVenuePlaceStatusResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlaceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceStatusResult(%+v)", *p)

}

func (p *VenueServiceUpdateVenuePlaceStatusResult) DeepEqual(ano *VenueServiceUpdateVenuePlaceStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceVenuePlaceListArgs struct {
	Req *VenuePlaceListReq `thrift:"req,1" frugal:"1,default,VenuePlaceListReq" json:"req"`
}

func NewVenueServiceVenuePlaceListArgs() *VenueServiceVenuePlaceListArgs {
	return &VenueServiceVenuePlaceListArgs{}
}

func (p *VenueServiceVenuePlaceListArgs) InitDefault() {
}

var VenueServiceVenuePlaceListArgs_Req_DEFAULT *VenuePlaceListReq

func (p *VenueServiceVenuePlaceListArgs) GetReq() (v *VenuePlaceListReq) {
	if !p.IsSetReq() {
		return VenueServiceVenuePlaceListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceVenuePlaceListArgs) SetReq(val *VenuePlaceListReq) {
	p.Req = val
}

var fieldIDToName_VenueServiceVenuePlaceListArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceVenuePlaceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceVenuePlaceListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenuePlaceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceVenuePlaceListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenuePlaceListArgs(%+v)", *p)

}

func (p *VenueServiceVenuePlaceListArgs) DeepEqual(ano *VenueServiceVenuePlaceListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceVenuePlaceListArgs) Field1DeepEqual(src *VenuePlaceListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceVenuePlaceListResult struct {
	Success *VenuePlaceListResp `thrift:"success,0,optional" frugal:"0,optional,VenuePlaceListResp" json:"success,omitempty"`
}

func NewVenueServiceVenuePlaceListResult() *VenueServiceVenuePlaceListResult {
	return &VenueServiceVenuePlaceListResult{}
}

func (p *VenueServiceVenuePlaceListResult) InitDefault() {
}

var VenueServiceVenuePlaceListResult_Success_DEFAULT *VenuePlaceListResp

func (p *VenueServiceVenuePlaceListResult) GetSuccess() (v *VenuePlaceListResp) {
	if !p.IsSetSuccess() {
		return VenueServiceVenuePlaceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceVenuePlaceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VenuePlaceListResp)
}

var fieldIDToName_VenueServiceVenuePlaceListResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceVenuePlaceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceVenuePlaceListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenuePlaceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceVenuePlaceListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenuePlaceListResult(%+v)", *p)

}

func (p *VenueServiceVenuePlaceListResult) DeepEqual(ano *VenueServiceVenuePlaceListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceVenuePlaceListResult) Field0DeepEqual(src *VenuePlaceListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceCreateVenueArgs struct {
	Req *VenueInfo `thrift:"req,1" frugal:"1,default,VenueInfo" json:"req"`
}

func NewVenueServiceCreateVenueArgs() *VenueServiceCreateVenueArgs {
	return &VenueServiceCreateVenueArgs{}
}

func (p *VenueServiceCreateVenueArgs) InitDefault() {
}

var VenueServiceCreateVenueArgs_Req_DEFAULT *VenueInfo

func (p *VenueServiceCreateVenueArgs) GetReq() (v *VenueInfo) {
	if !p.IsSetReq() {
		return VenueServiceCreateVenueArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceCreateVenueArgs) SetReq(val *VenueInfo) {
	p.Req = val
}

var fieldIDToName_VenueServiceCreateVenueArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceCreateVenueArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceCreateVenueArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenueArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceCreateVenueArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenue_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenueArgs(%+v)", *p)

}

func (p *VenueServiceCreateVenueArgs) DeepEqual(ano *VenueServiceCreateVenueArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceCreateVenueArgs) Field1DeepEqual(src *VenueInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceCreateVenueResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceCreateVenueResult() *VenueServiceCreateVenueResult {
	return &VenueServiceCreateVenueResult{}
}

func (p *VenueServiceCreateVenueResult) InitDefault() {
}

var VenueServiceCreateVenueResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceCreateVenueResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceCreateVenueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceCreateVenueResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceCreateVenueResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceCreateVenueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceCreateVenueResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenueResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceCreateVenueResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenue_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenueResult(%+v)", *p)

}

func (p *VenueServiceCreateVenueResult) DeepEqual(ano *VenueServiceCreateVenueResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceCreateVenueResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenueArgs struct {
	Req *VenueInfo `thrift:"req,1" frugal:"1,default,VenueInfo" json:"req"`
}

func NewVenueServiceUpdateVenueArgs() *VenueServiceUpdateVenueArgs {
	return &VenueServiceUpdateVenueArgs{}
}

func (p *VenueServiceUpdateVenueArgs) InitDefault() {
}

var VenueServiceUpdateVenueArgs_Req_DEFAULT *VenueInfo

func (p *VenueServiceUpdateVenueArgs) GetReq() (v *VenueInfo) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenueArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceUpdateVenueArgs) SetReq(val *VenueInfo) {
	p.Req = val
}

var fieldIDToName_VenueServiceUpdateVenueArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenueArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenueArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenueArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenue_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueArgs(%+v)", *p)

}

func (p *VenueServiceUpdateVenueArgs) DeepEqual(ano *VenueServiceUpdateVenueArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenueArgs) Field1DeepEqual(src *VenueInfo) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenueResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceUpdateVenueResult() *VenueServiceUpdateVenueResult {
	return &VenueServiceUpdateVenueResult{}
}

func (p *VenueServiceUpdateVenueResult) InitDefault() {
}

var VenueServiceUpdateVenueResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenueResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenueResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceUpdateVenueResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceUpdateVenueResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenueResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenueResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenue_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueResult(%+v)", *p)

}

func (p *VenueServiceUpdateVenueResult) DeepEqual(ano *VenueServiceUpdateVenueResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenueResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenueStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewVenueServiceUpdateVenueStatusArgs() *VenueServiceUpdateVenueStatusArgs {
	return &VenueServiceUpdateVenueStatusArgs{}
}

func (p *VenueServiceUpdateVenueStatusArgs) InitDefault() {
}

var VenueServiceUpdateVenueStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *VenueServiceUpdateVenueStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenueStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceUpdateVenueStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_VenueServiceUpdateVenueStatusArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenueStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenueStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenueStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenueStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueStatusArgs(%+v)", *p)

}

func (p *VenueServiceUpdateVenueStatusArgs) DeepEqual(ano *VenueServiceUpdateVenueStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenueStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceUpdateVenueStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewVenueServiceUpdateVenueStatusResult() *VenueServiceUpdateVenueStatusResult {
	return &VenueServiceUpdateVenueStatusResult{}
}

func (p *VenueServiceUpdateVenueStatusResult) InitDefault() {
}

var VenueServiceUpdateVenueStatusResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenueStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenueStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceUpdateVenueStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_VenueServiceUpdateVenueStatusResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenueStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenueStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenueStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenueStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueStatusResult(%+v)", *p)

}

func (p *VenueServiceUpdateVenueStatusResult) DeepEqual(ano *VenueServiceUpdateVenueStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceUpdateVenueStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceVenueListArgs struct {
	Req *VenueListReq `thrift:"req,1" frugal:"1,default,VenueListReq" json:"req"`
}

func NewVenueServiceVenueListArgs() *VenueServiceVenueListArgs {
	return &VenueServiceVenueListArgs{}
}

func (p *VenueServiceVenueListArgs) InitDefault() {
}

var VenueServiceVenueListArgs_Req_DEFAULT *VenueListReq

func (p *VenueServiceVenueListArgs) GetReq() (v *VenueListReq) {
	if !p.IsSetReq() {
		return VenueServiceVenueListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VenueServiceVenueListArgs) SetReq(val *VenueListReq) {
	p.Req = val
}

var fieldIDToName_VenueServiceVenueListArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceVenueListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceVenueListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenueListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceVenueListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenueList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenueListArgs(%+v)", *p)

}

func (p *VenueServiceVenueListArgs) DeepEqual(ano *VenueServiceVenueListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VenueServiceVenueListArgs) Field1DeepEqual(src *VenueListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type VenueServiceVenueListResult struct {
	Success *VenueListResp `thrift:"success,0,optional" frugal:"0,optional,VenueListResp" json:"success,omitempty"`
}

func NewVenueServiceVenueListResult() *VenueServiceVenueListResult {
	return &VenueServiceVenueListResult{}
}

func (p *VenueServiceVenueListResult) InitDefault() {
}

var VenueServiceVenueListResult_Success_DEFAULT *VenueListResp

func (p *VenueServiceVenueListResult) GetSuccess() (v *VenueListResp) {
	if !p.IsSetSuccess() {
		return VenueServiceVenueListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VenueServiceVenueListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VenueListResp)
}

var fieldIDToName_VenueServiceVenueListResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceVenueListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceVenueListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenueListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenueListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewVenueListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceVenueListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VenueList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenueListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceVenueListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenueListResult(%+v)", *p)

}

func (p *VenueServiceVenueListResult) DeepEqual(ano *VenueServiceVenueListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VenueServiceVenueListResult) Field0DeepEqual(src *VenueListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package entry

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc_gen/kitex_gen/base"
	"strings"
)

type CreateEntry struct {
	MemberProductId  int64 `thrift:"MemberProductId,1" frugal:"1,default,i64" json:"MemberProductId"`
	MemberPropertyId int64 `thrift:"MemberPropertyId,2" frugal:"2,default,i64" json:"MemberPropertyId"`
	EntryTime        int64 `thrift:"EntryTime,3" frugal:"3,default,i64" json:"EntryTime"`
	LeavingTime      int64 `thrift:"LeavingTime,4" frugal:"4,default,i64" json:"LeavingTime"`
	MemberId         int64 `thrift:"MemberId,5" frugal:"5,default,i64" json:"MemberId"`
	UserId           int64 `thrift:"UserId,6" frugal:"6,default,i64" json:"UserId"`
	VenueId          int64 `thrift:"VenueId,7" frugal:"7,default,i64" json:"VenueId"`
}

func NewCreateEntry() *CreateEntry {
	return &CreateEntry{}
}

func (p *CreateEntry) InitDefault() {
}

func (p *CreateEntry) GetMemberProductId() (v int64) {
	return p.MemberProductId
}

func (p *CreateEntry) GetMemberPropertyId() (v int64) {
	return p.MemberPropertyId
}

func (p *CreateEntry) GetEntryTime() (v int64) {
	return p.EntryTime
}

func (p *CreateEntry) GetLeavingTime() (v int64) {
	return p.LeavingTime
}

func (p *CreateEntry) GetMemberId() (v int64) {
	return p.MemberId
}

func (p *CreateEntry) GetUserId() (v int64) {
	return p.UserId
}

func (p *CreateEntry) GetVenueId() (v int64) {
	return p.VenueId
}
func (p *CreateEntry) SetMemberProductId(val int64) {
	p.MemberProductId = val
}
func (p *CreateEntry) SetMemberPropertyId(val int64) {
	p.MemberPropertyId = val
}
func (p *CreateEntry) SetEntryTime(val int64) {
	p.EntryTime = val
}
func (p *CreateEntry) SetLeavingTime(val int64) {
	p.LeavingTime = val
}
func (p *CreateEntry) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *CreateEntry) SetUserId(val int64) {
	p.UserId = val
}
func (p *CreateEntry) SetVenueId(val int64) {
	p.VenueId = val
}

var fieldIDToName_CreateEntry = map[int16]string{
	1: "MemberProductId",
	2: "MemberPropertyId",
	3: "EntryTime",
	4: "LeavingTime",
	5: "MemberId",
	6: "UserId",
	7: "VenueId",
}

func (p *CreateEntry) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEntry[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEntry) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *CreateEntry) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberPropertyId = _field
	return nil
}
func (p *CreateEntry) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryTime = _field
	return nil
}
func (p *CreateEntry) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeavingTime = _field
	return nil
}
func (p *CreateEntry) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *CreateEntry) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *CreateEntry) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}

func (p *CreateEntry) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEntry"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberPropertyId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberPropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EntryTime", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EntryTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LeavingTime", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LeavingTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateEntry) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateEntry) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VenueId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEntry(%+v)", *p)

}

func (p *CreateEntry) DeepEqual(ano *CreateEntry) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MemberProductId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberPropertyId) {
		return false
	}
	if !p.Field3DeepEqual(ano.EntryTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.LeavingTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field7DeepEqual(ano.VenueId) {
		return false
	}
	return true
}

func (p *CreateEntry) Field1DeepEqual(src int64) bool {

	if p.MemberProductId != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field2DeepEqual(src int64) bool {

	if p.MemberPropertyId != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field3DeepEqual(src int64) bool {

	if p.EntryTime != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field4DeepEqual(src int64) bool {

	if p.LeavingTime != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field5DeepEqual(src int64) bool {

	if p.MemberId != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field6DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CreateEntry) Field7DeepEqual(src int64) bool {

	if p.VenueId != src {
		return false
	}
	return true
}

type EntryListResp struct {
	Resp  *base.BaseResp `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*EntryInfo   `thrift:"extra,2,optional" frugal:"2,optional,list<EntryInfo>" json:"extra,omitempty"`
}

func NewEntryListResp() *EntryListResp {
	return &EntryListResp{}
}

func (p *EntryListResp) InitDefault() {
}

var EntryListResp_Resp_DEFAULT *base.BaseResp

func (p *EntryListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return EntryListResp_Resp_DEFAULT
	}
	return p.Resp
}

var EntryListResp_Extra_DEFAULT []*EntryInfo

func (p *EntryListResp) GetExtra() (v []*EntryInfo) {
	if !p.IsSetExtra() {
		return EntryListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *EntryListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *EntryListResp) SetExtra(val []*EntryInfo) {
	p.Extra = val
}

var fieldIDToName_EntryListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *EntryListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *EntryListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *EntryListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EntryListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EntryListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *EntryListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EntryInfo, 0, size)
	values := make([]EntryInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *EntryListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EntryListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EntryListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EntryListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EntryListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntryListResp(%+v)", *p)

}

func (p *EntryListResp) DeepEqual(ano *EntryListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *EntryListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EntryListResp) Field2DeepEqual(src []*EntryInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type EntryInfo struct {
	Id                 int64  `thrift:"Id,1" frugal:"1,default,i64" json:"Id"`
	MemberProductId    int64  `thrift:"MemberProductId,2" frugal:"2,default,i64" json:"MemberProductId"`
	MemberPropertyId   int64  `thrift:"MemberPropertyId,3" frugal:"3,default,i64" json:"MemberPropertyId"`
	EntryTime          int64  `thrift:"EntryTime,4" frugal:"4,default,i64" json:"EntryTime"`
	LeavingTime        int64  `thrift:"LeavingTime,5" frugal:"5,default,i64" json:"LeavingTime"`
	MemberId           int64  `thrift:"MemberId,6" frugal:"6,default,i64" json:"MemberId"`
	UserId             int64  `thrift:"UserId,7" frugal:"7,default,i64" json:"UserId"`
	VenueId            int64  `thrift:"VenueId,8" frugal:"8,default,i64" json:"VenueId"`
	CreatedAt          string `thrift:"CreatedAt,9" frugal:"9,default,string" json:"CreatedAt"`
	UpdatedAt          string `thrift:"UpdatedAt,10" frugal:"10,default,string" json:"UpdatedAt"`
	VenueName          string `thrift:"VenueName,11" frugal:"11,default,string" json:"VenueName"`
	UserName           string `thrift:"UserName,12" frugal:"12,default,string" json:"UserName"`
	MemberName         string `thrift:"MemberName,13" frugal:"13,default,string" json:"MemberName"`
	MemberProductName  string `thrift:"MemberProductName,14" frugal:"14,default,string" json:"MemberProductName"`
	MemberPropertyName string `thrift:"MemberPropertyName,15" frugal:"15,default,string" json:"MemberPropertyName"`
}

func NewEntryInfo() *EntryInfo {
	return &EntryInfo{}
}

func (p *EntryInfo) InitDefault() {
}

func (p *EntryInfo) GetId() (v int64) {
	return p.Id
}

func (p *EntryInfo) GetMemberProductId() (v int64) {
	return p.MemberProductId
}

func (p *EntryInfo) GetMemberPropertyId() (v int64) {
	return p.MemberPropertyId
}

func (p *EntryInfo) GetEntryTime() (v int64) {
	return p.EntryTime
}

func (p *EntryInfo) GetLeavingTime() (v int64) {
	return p.LeavingTime
}

func (p *EntryInfo) GetMemberId() (v int64) {
	return p.MemberId
}

func (p *EntryInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *EntryInfo) GetVenueId() (v int64) {
	return p.VenueId
}

func (p *EntryInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *EntryInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *EntryInfo) GetVenueName() (v string) {
	return p.VenueName
}

func (p *EntryInfo) GetUserName() (v string) {
	return p.UserName
}

func (p *EntryInfo) GetMemberName() (v string) {
	return p.MemberName
}

func (p *EntryInfo) GetMemberProductName() (v string) {
	return p.MemberProductName
}

func (p *EntryInfo) GetMemberPropertyName() (v string) {
	return p.MemberPropertyName
}
func (p *EntryInfo) SetId(val int64) {
	p.Id = val
}
func (p *EntryInfo) SetMemberProductId(val int64) {
	p.MemberProductId = val
}
func (p *EntryInfo) SetMemberPropertyId(val int64) {
	p.MemberPropertyId = val
}
func (p *EntryInfo) SetEntryTime(val int64) {
	p.EntryTime = val
}
func (p *EntryInfo) SetLeavingTime(val int64) {
	p.LeavingTime = val
}
func (p *EntryInfo) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *EntryInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *EntryInfo) SetVenueId(val int64) {
	p.VenueId = val
}
func (p *EntryInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *EntryInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *EntryInfo) SetVenueName(val string) {
	p.VenueName = val
}
func (p *EntryInfo) SetUserName(val string) {
	p.UserName = val
}
func (p *EntryInfo) SetMemberName(val string) {
	p.MemberName = val
}
func (p *EntryInfo) SetMemberProductName(val string) {
	p.MemberProductName = val
}
func (p *EntryInfo) SetMemberPropertyName(val string) {
	p.MemberPropertyName = val
}

var fieldIDToName_EntryInfo = map[int16]string{
	1:  "Id",
	2:  "MemberProductId",
	3:  "MemberPropertyId",
	4:  "EntryTime",
	5:  "LeavingTime",
	6:  "MemberId",
	7:  "UserId",
	8:  "VenueId",
	9:  "CreatedAt",
	10: "UpdatedAt",
	11: "VenueName",
	12: "UserName",
	13: "MemberName",
	14: "MemberProductName",
	15: "MemberPropertyName",
}

func (p *EntryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EntryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EntryInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *EntryInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *EntryInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberPropertyId = _field
	return nil
}
func (p *EntryInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryTime = _field
	return nil
}
func (p *EntryInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LeavingTime = _field
	return nil
}
func (p *EntryInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *EntryInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *EntryInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *EntryInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *EntryInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *EntryInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *EntryInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserName = _field
	return nil
}
func (p *EntryInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *EntryInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *EntryInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberPropertyName = _field
	return nil
}

func (p *EntryInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EntryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EntryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EntryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EntryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberPropertyId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberPropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EntryInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EntryTime", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EntryTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EntryInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LeavingTime", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LeavingTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *EntryInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EntryInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EntryInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueId", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VenueId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EntryInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *EntryInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *EntryInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueName", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VenueName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *EntryInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserName", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *EntryInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberName", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *EntryInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductName", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *EntryInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberPropertyName", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberPropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *EntryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntryInfo(%+v)", *p)

}

func (p *EntryInfo) DeepEqual(ano *EntryInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberProductId) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemberPropertyId) {
		return false
	}
	if !p.Field4DeepEqual(ano.EntryTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.LeavingTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field7DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field8DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.VenueName) {
		return false
	}
	if !p.Field12DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field13DeepEqual(ano.MemberName) {
		return false
	}
	if !p.Field14DeepEqual(ano.MemberProductName) {
		return false
	}
	if !p.Field15DeepEqual(ano.MemberPropertyName) {
		return false
	}
	return true
}

func (p *EntryInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field2DeepEqual(src int64) bool {

	if p.MemberProductId != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field3DeepEqual(src int64) bool {

	if p.MemberPropertyId != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field4DeepEqual(src int64) bool {

	if p.EntryTime != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field5DeepEqual(src int64) bool {

	if p.LeavingTime != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field6DeepEqual(src int64) bool {

	if p.MemberId != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field7DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field8DeepEqual(src int64) bool {

	if p.VenueId != src {
		return false
	}
	return true
}
func (p *EntryInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.VenueName, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.MemberName, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field14DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductName, src) != 0 {
		return false
	}
	return true
}
func (p *EntryInfo) Field15DeepEqual(src string) bool {

	if strings.Compare(p.MemberPropertyName, src) != 0 {
		return false
	}
	return true
}

type EntryListReq struct {
	Page             *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize         *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	MemberId         *int64  `thrift:"memberId,3,optional" frugal:"3,optional,i64" json:"memberId,omitempty"`
	VenueId          *int64  `thrift:"venueId,4,optional" frugal:"4,optional,i64" json:"venueId,omitempty"`
	MemberProductId  *int64  `thrift:"memberProductId,5,optional" frugal:"5,optional,i64" json:"memberProductId,omitempty"`
	MemberPropertyId *int64  `thrift:"memberPropertyId,6,optional" frugal:"6,optional,i64" json:"memberPropertyId,omitempty"`
	UserId           *int64  `thrift:"userId,7,optional" frugal:"7,optional,i64" json:"userId,omitempty"`
	EntryTime        *string `thrift:"entryTime,8,optional" frugal:"8,optional,string" json:"entryTime,omitempty"`
	LeavingTime      *string `thrift:"leavingTime,9,optional" frugal:"9,optional,string" json:"leavingTime,omitempty"`
}

func NewEntryListReq() *EntryListReq {
	return &EntryListReq{}
}

func (p *EntryListReq) InitDefault() {
}

var EntryListReq_Page_DEFAULT int64

func (p *EntryListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return EntryListReq_Page_DEFAULT
	}
	return *p.Page
}

var EntryListReq_PageSize_DEFAULT int64

func (p *EntryListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return EntryListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var EntryListReq_MemberId_DEFAULT int64

func (p *EntryListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return EntryListReq_MemberId_DEFAULT
	}
	return *p.MemberId
}

var EntryListReq_VenueId_DEFAULT int64

func (p *EntryListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return EntryListReq_VenueId_DEFAULT
	}
	return *p.VenueId
}

var EntryListReq_MemberProductId_DEFAULT int64

func (p *EntryListReq) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return EntryListReq_MemberProductId_DEFAULT
	}
	return *p.MemberProductId
}

var EntryListReq_MemberPropertyId_DEFAULT int64

func (p *EntryListReq) GetMemberPropertyId() (v int64) {
	if !p.IsSetMemberPropertyId() {
		return EntryListReq_MemberPropertyId_DEFAULT
	}
	return *p.MemberPropertyId
}

var EntryListReq_UserId_DEFAULT int64

func (p *EntryListReq) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return EntryListReq_UserId_DEFAULT
	}
	return *p.UserId
}

var EntryListReq_EntryTime_DEFAULT string

func (p *EntryListReq) GetEntryTime() (v string) {
	if !p.IsSetEntryTime() {
		return EntryListReq_EntryTime_DEFAULT
	}
	return *p.EntryTime
}

var EntryListReq_LeavingTime_DEFAULT string

func (p *EntryListReq) GetLeavingTime() (v string) {
	if !p.IsSetLeavingTime() {
		return EntryListReq_LeavingTime_DEFAULT
	}
	return *p.LeavingTime
}
func (p *EntryListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *EntryListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *EntryListReq) SetMemberId(val *int64) {
	p.MemberId = val
}
func (p *EntryListReq) SetVenueId(val *int64) {
	p.VenueId = val
}
func (p *EntryListReq) SetMemberProductId(val *int64) {
	p.MemberProductId = val
}
func (p *EntryListReq) SetMemberPropertyId(val *int64) {
	p.MemberPropertyId = val
}
func (p *EntryListReq) SetUserId(val *int64) {
	p.UserId = val
}
func (p *EntryListReq) SetEntryTime(val *string) {
	p.EntryTime = val
}
func (p *EntryListReq) SetLeavingTime(val *string) {
	p.LeavingTime = val
}

var fieldIDToName_EntryListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "memberId",
	4: "venueId",
	5: "memberProductId",
	6: "memberPropertyId",
	7: "userId",
	8: "entryTime",
	9: "leavingTime",
}

func (p *EntryListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *EntryListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *EntryListReq) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *EntryListReq) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *EntryListReq) IsSetMemberProductId() bool {
	return p.MemberProductId != nil
}

func (p *EntryListReq) IsSetMemberPropertyId() bool {
	return p.MemberPropertyId != nil
}

func (p *EntryListReq) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *EntryListReq) IsSetEntryTime() bool {
	return p.EntryTime != nil
}

func (p *EntryListReq) IsSetLeavingTime() bool {
	return p.LeavingTime != nil
}

func (p *EntryListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EntryListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EntryListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *EntryListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *EntryListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberId = _field
	return nil
}
func (p *EntryListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueId = _field
	return nil
}
func (p *EntryListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberProductId = _field
	return nil
}
func (p *EntryListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberPropertyId = _field
	return nil
}
func (p *EntryListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserId = _field
	return nil
}
func (p *EntryListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EntryTime = _field
	return nil
}
func (p *EntryListReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LeavingTime = _field
	return nil
}

func (p *EntryListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EntryListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EntryListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EntryListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EntryListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EntryListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EntryListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *EntryListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberPropertyId() {
		if err = oprot.WriteFieldBegin("memberPropertyId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EntryListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err = oprot.WriteFieldBegin("userId", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EntryListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryTime() {
		if err = oprot.WriteFieldBegin("entryTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntryTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EntryListReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeavingTime() {
		if err = oprot.WriteFieldBegin("leavingTime", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LeavingTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *EntryListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntryListReq(%+v)", *p)

}

func (p *EntryListReq) DeepEqual(ano *EntryListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field4DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field5DeepEqual(ano.MemberProductId) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemberPropertyId) {
		return false
	}
	if !p.Field7DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field8DeepEqual(ano.EntryTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.LeavingTime) {
		return false
	}
	return true
}

func (p *EntryListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field3DeepEqual(src *int64) bool {

	if p.MemberId == src {
		return true
	} else if p.MemberId == nil || src == nil {
		return false
	}
	if *p.MemberId != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field4DeepEqual(src *int64) bool {

	if p.VenueId == src {
		return true
	} else if p.VenueId == nil || src == nil {
		return false
	}
	if *p.VenueId != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field5DeepEqual(src *int64) bool {

	if p.MemberProductId == src {
		return true
	} else if p.MemberProductId == nil || src == nil {
		return false
	}
	if *p.MemberProductId != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field6DeepEqual(src *int64) bool {

	if p.MemberPropertyId == src {
		return true
	} else if p.MemberPropertyId == nil || src == nil {
		return false
	}
	if *p.MemberPropertyId != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field7DeepEqual(src *int64) bool {

	if p.UserId == src {
		return true
	} else if p.UserId == nil || src == nil {
		return false
	}
	if *p.UserId != *src {
		return false
	}
	return true
}
func (p *EntryListReq) Field8DeepEqual(src *string) bool {

	if p.EntryTime == src {
		return true
	} else if p.EntryTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EntryTime, *src) != 0 {
		return false
	}
	return true
}
func (p *EntryListReq) Field9DeepEqual(src *string) bool {

	if p.LeavingTime == src {
		return true
	} else if p.LeavingTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LeavingTime, *src) != 0 {
		return false
	}
	return true
}

type CompanyService interface {
	CreateEntry(ctx context.Context, req *CreateEntry) (r *base.NilResponse, err error)

	EntryList(ctx context.Context, req *EntryListReq) (r *EntryListResp, err error)
}

type CompanyServiceClient struct {
	c thrift.TClient
}

func NewCompanyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCompanyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCompanyServiceClient(c thrift.TClient) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: c,
	}
}

func (p *CompanyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CompanyServiceClient) CreateEntry(ctx context.Context, req *CreateEntry) (r *base.NilResponse, err error) {
	var _args CompanyServiceCreateEntryArgs
	_args.Req = req
	var _result CompanyServiceCreateEntryResult
	if err = p.Client_().Call(ctx, "CreateEntry", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CompanyServiceClient) EntryList(ctx context.Context, req *EntryListReq) (r *EntryListResp, err error) {
	var _args CompanyServiceEntryListArgs
	_args.Req = req
	var _result CompanyServiceEntryListResult
	if err = p.Client_().Call(ctx, "EntryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CompanyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CompanyService
}

func (p *CompanyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CompanyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CompanyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCompanyServiceProcessor(handler CompanyService) *CompanyServiceProcessor {
	self := &CompanyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEntry", &companyServiceProcessorCreateEntry{handler: handler})
	self.AddToProcessorMap("EntryList", &companyServiceProcessorEntryList{handler: handler})
	return self
}
func (p *CompanyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type companyServiceProcessorCreateEntry struct {
	handler CompanyService
}

func (p *companyServiceProcessorCreateEntry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceCreateEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceCreateEntryResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateEntry(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEntry: "+err2.Error())
		oprot.WriteMessageBegin("CreateEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type companyServiceProcessorEntryList struct {
	handler CompanyService
}

func (p *companyServiceProcessorEntryList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceEntryListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EntryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceEntryListResult{}
	var retval *EntryListResp
	if retval, err2 = p.handler.EntryList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EntryList: "+err2.Error())
		oprot.WriteMessageBegin("EntryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EntryList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CompanyServiceCreateEntryArgs struct {
	Req *CreateEntry `thrift:"req,1" frugal:"1,default,CreateEntry" json:"req"`
}

func NewCompanyServiceCreateEntryArgs() *CompanyServiceCreateEntryArgs {
	return &CompanyServiceCreateEntryArgs{}
}

func (p *CompanyServiceCreateEntryArgs) InitDefault() {
}

var CompanyServiceCreateEntryArgs_Req_DEFAULT *CreateEntry

func (p *CompanyServiceCreateEntryArgs) GetReq() (v *CreateEntry) {
	if !p.IsSetReq() {
		return CompanyServiceCreateEntryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceCreateEntryArgs) SetReq(val *CreateEntry) {
	p.Req = val
}

var fieldIDToName_CompanyServiceCreateEntryArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceCreateEntryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceCreateEntryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceCreateEntryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceCreateEntryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEntry()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceCreateEntryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEntry_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceCreateEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceCreateEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceCreateEntryArgs(%+v)", *p)

}

func (p *CompanyServiceCreateEntryArgs) DeepEqual(ano *CompanyServiceCreateEntryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceCreateEntryArgs) Field1DeepEqual(src *CreateEntry) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceCreateEntryResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewCompanyServiceCreateEntryResult() *CompanyServiceCreateEntryResult {
	return &CompanyServiceCreateEntryResult{}
}

func (p *CompanyServiceCreateEntryResult) InitDefault() {
}

var CompanyServiceCreateEntryResult_Success_DEFAULT *base.NilResponse

func (p *CompanyServiceCreateEntryResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CompanyServiceCreateEntryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceCreateEntryResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_CompanyServiceCreateEntryResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceCreateEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceCreateEntryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceCreateEntryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceCreateEntryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceCreateEntryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEntry_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceCreateEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceCreateEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceCreateEntryResult(%+v)", *p)

}

func (p *CompanyServiceCreateEntryResult) DeepEqual(ano *CompanyServiceCreateEntryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceCreateEntryResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceEntryListArgs struct {
	Req *EntryListReq `thrift:"req,1" frugal:"1,default,EntryListReq" json:"req"`
}

func NewCompanyServiceEntryListArgs() *CompanyServiceEntryListArgs {
	return &CompanyServiceEntryListArgs{}
}

func (p *CompanyServiceEntryListArgs) InitDefault() {
}

var CompanyServiceEntryListArgs_Req_DEFAULT *EntryListReq

func (p *CompanyServiceEntryListArgs) GetReq() (v *EntryListReq) {
	if !p.IsSetReq() {
		return CompanyServiceEntryListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceEntryListArgs) SetReq(val *EntryListReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceEntryListArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceEntryListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceEntryListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceEntryListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceEntryListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEntryListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceEntryListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EntryList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceEntryListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceEntryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceEntryListArgs(%+v)", *p)

}

func (p *CompanyServiceEntryListArgs) DeepEqual(ano *CompanyServiceEntryListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceEntryListArgs) Field1DeepEqual(src *EntryListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceEntryListResult struct {
	Success *EntryListResp `thrift:"success,0,optional" frugal:"0,optional,EntryListResp" json:"success,omitempty"`
}

func NewCompanyServiceEntryListResult() *CompanyServiceEntryListResult {
	return &CompanyServiceEntryListResult{}
}

func (p *CompanyServiceEntryListResult) InitDefault() {
}

var CompanyServiceEntryListResult_Success_DEFAULT *EntryListResp

func (p *CompanyServiceEntryListResult) GetSuccess() (v *EntryListResp) {
	if !p.IsSetSuccess() {
		return CompanyServiceEntryListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceEntryListResult) SetSuccess(x interface{}) {
	p.Success = x.(*EntryListResp)
}

var fieldIDToName_CompanyServiceEntryListResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceEntryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceEntryListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceEntryListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceEntryListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewEntryListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceEntryListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EntryList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceEntryListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceEntryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceEntryListResult(%+v)", *p)

}

func (p *CompanyServiceEntryListResult) DeepEqual(ano *CompanyServiceEntryListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceEntryListResult) Field0DeepEqual(src *EntryListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

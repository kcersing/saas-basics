// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package contract

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc_gen/kitex_gen/base"
	"strings"
)

type ContractListReq struct {
	Page     *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Name     *string `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Status   *string `thrift:"status,4,optional" frugal:"4,optional,string" json:"status,omitempty"`
}

func NewContractListReq() *ContractListReq {
	return &ContractListReq{}
}

func (p *ContractListReq) InitDefault() {
}

var ContractListReq_Page_DEFAULT int64

func (p *ContractListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ContractListReq_Page_DEFAULT
	}
	return *p.Page
}

var ContractListReq_PageSize_DEFAULT int64

func (p *ContractListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ContractListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ContractListReq_Name_DEFAULT string

func (p *ContractListReq) GetName() (v string) {
	if !p.IsSetName() {
		return ContractListReq_Name_DEFAULT
	}
	return *p.Name
}

var ContractListReq_Status_DEFAULT string

func (p *ContractListReq) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return ContractListReq_Status_DEFAULT
	}
	return *p.Status
}
func (p *ContractListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *ContractListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *ContractListReq) SetName(val *string) {
	p.Name = val
}
func (p *ContractListReq) SetStatus(val *string) {
	p.Status = val
}

var fieldIDToName_ContractListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "status",
}

func (p *ContractListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *ContractListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ContractListReq) IsSetName() bool {
	return p.Name != nil
}

func (p *ContractListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ContractListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContractListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContractListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *ContractListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ContractListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ContractListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}

func (p *ContractListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContractListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContractListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContractListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContractListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContractListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContractListReq(%+v)", *p)

}

func (p *ContractListReq) DeepEqual(ano *ContractListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ContractListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *ContractListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ContractListReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ContractListReq) Field4DeepEqual(src *string) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}

type CreateOrUpdateContractReq struct {
	Id      *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name    *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Status  *int64  `thrift:"status,3,optional" frugal:"3,optional,i64" json:"status,omitempty"`
	Content *string `thrift:"content,4,optional" frugal:"4,optional,string" json:"content,omitempty"`
}

func NewCreateOrUpdateContractReq() *CreateOrUpdateContractReq {
	return &CreateOrUpdateContractReq{}
}

func (p *CreateOrUpdateContractReq) InitDefault() {
}

var CreateOrUpdateContractReq_Id_DEFAULT int64

func (p *CreateOrUpdateContractReq) GetId() (v int64) {
	if !p.IsSetId() {
		return CreateOrUpdateContractReq_Id_DEFAULT
	}
	return *p.Id
}

var CreateOrUpdateContractReq_Name_DEFAULT string

func (p *CreateOrUpdateContractReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateOrUpdateContractReq_Name_DEFAULT
	}
	return *p.Name
}

var CreateOrUpdateContractReq_Status_DEFAULT int64

func (p *CreateOrUpdateContractReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return CreateOrUpdateContractReq_Status_DEFAULT
	}
	return *p.Status
}

var CreateOrUpdateContractReq_Content_DEFAULT string

func (p *CreateOrUpdateContractReq) GetContent() (v string) {
	if !p.IsSetContent() {
		return CreateOrUpdateContractReq_Content_DEFAULT
	}
	return *p.Content
}
func (p *CreateOrUpdateContractReq) SetId(val *int64) {
	p.Id = val
}
func (p *CreateOrUpdateContractReq) SetName(val *string) {
	p.Name = val
}
func (p *CreateOrUpdateContractReq) SetStatus(val *int64) {
	p.Status = val
}
func (p *CreateOrUpdateContractReq) SetContent(val *string) {
	p.Content = val
}

var fieldIDToName_CreateOrUpdateContractReq = map[int16]string{
	1: "id",
	2: "name",
	3: "status",
	4: "content",
}

func (p *CreateOrUpdateContractReq) IsSetId() bool {
	return p.Id != nil
}

func (p *CreateOrUpdateContractReq) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateOrUpdateContractReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CreateOrUpdateContractReq) IsSetContent() bool {
	return p.Content != nil
}

func (p *CreateOrUpdateContractReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateContractReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *CreateOrUpdateContractReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateOrUpdateContractReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *CreateOrUpdateContractReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}

func (p *CreateOrUpdateContractReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateContractReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOrUpdateContractReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateContractReq(%+v)", *p)

}

func (p *CreateOrUpdateContractReq) DeepEqual(ano *CreateOrUpdateContractReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *CreateOrUpdateContractReq) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateContractReq) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateOrUpdateContractReq) Field3DeepEqual(src *int64) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateContractReq) Field4DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}

type ContractInfo struct {
	Id        int64  `thrift:"Id,1" frugal:"1,default,i64" json:"Id"`
	Name      string `thrift:"Name,2" frugal:"2,default,string" json:"Name"`
	Status    int64  `thrift:"Status,3" frugal:"3,default,i64" json:"Status"`
	Content   string `thrift:"Content,4" frugal:"4,default,string" json:"Content"`
	CreatedAt string `thrift:"CreatedAt,5" frugal:"5,default,string" json:"CreatedAt"`
	UpdatedAt string `thrift:"UpdatedAt,6" frugal:"6,default,string" json:"UpdatedAt"`
}

func NewContractInfo() *ContractInfo {
	return &ContractInfo{}
}

func (p *ContractInfo) InitDefault() {
}

func (p *ContractInfo) GetId() (v int64) {
	return p.Id
}

func (p *ContractInfo) GetName() (v string) {
	return p.Name
}

func (p *ContractInfo) GetStatus() (v int64) {
	return p.Status
}

func (p *ContractInfo) GetContent() (v string) {
	return p.Content
}

func (p *ContractInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ContractInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *ContractInfo) SetId(val int64) {
	p.Id = val
}
func (p *ContractInfo) SetName(val string) {
	p.Name = val
}
func (p *ContractInfo) SetStatus(val int64) {
	p.Status = val
}
func (p *ContractInfo) SetContent(val string) {
	p.Content = val
}
func (p *ContractInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ContractInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_ContractInfo = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Status",
	4: "Content",
	5: "CreatedAt",
	6: "UpdatedAt",
}

func (p *ContractInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContractInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContractInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ContractInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ContractInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ContractInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Content = _field
	return nil
}
func (p *ContractInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ContractInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *ContractInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContractInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContractInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContractInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContractInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContractInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContractInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContractInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContractInfo(%+v)", *p)

}

func (p *ContractInfo) DeepEqual(ano *ContractInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *ContractInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ContractInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ContractInfo) Field3DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ContractInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *ContractInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ContractInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type ContractListResp struct {
	Resp  *base.BaseResp  `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*ContractInfo `thrift:"extra,2,optional" frugal:"2,optional,list<ContractInfo>" json:"extra,omitempty"`
}

func NewContractListResp() *ContractListResp {
	return &ContractListResp{}
}

func (p *ContractListResp) InitDefault() {
}

var ContractListResp_Resp_DEFAULT *base.BaseResp

func (p *ContractListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return ContractListResp_Resp_DEFAULT
	}
	return p.Resp
}

var ContractListResp_Extra_DEFAULT []*ContractInfo

func (p *ContractListResp) GetExtra() (v []*ContractInfo) {
	if !p.IsSetExtra() {
		return ContractListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *ContractListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *ContractListResp) SetExtra(val []*ContractInfo) {
	p.Extra = val
}

var fieldIDToName_ContractListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *ContractListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ContractListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ContractListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContractListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContractListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *ContractListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ContractInfo, 0, size)
	values := make([]ContractInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *ContractListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContractListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContractListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContractListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContractListResp(%+v)", *p)

}

func (p *ContractListResp) DeepEqual(ano *ContractListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *ContractListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContractListResp) Field2DeepEqual(src []*ContractInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CompanyService interface {
	ContractList(ctx context.Context, req *ContractListReq) (r *ContractListResp, err error)

	ContractCreate(ctx context.Context, req *CreateOrUpdateContractReq) (r *base.NilResponse, err error)

	ContractUpdate(ctx context.Context, req *CreateOrUpdateContractReq) (r *base.NilResponse, err error)

	ContractUpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	ContractByID(ctx context.Context, req *base.IDReq) (r *ContractInfo, err error)
}

type CompanyServiceClient struct {
	c thrift.TClient
}

func NewCompanyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCompanyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCompanyServiceClient(c thrift.TClient) *CompanyServiceClient {
	return &CompanyServiceClient{
		c: c,
	}
}

func (p *CompanyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CompanyServiceClient) ContractList(ctx context.Context, req *ContractListReq) (r *ContractListResp, err error) {
	var _args CompanyServiceContractListArgs
	_args.Req = req
	var _result CompanyServiceContractListResult
	if err = p.Client_().Call(ctx, "ContractList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CompanyServiceClient) ContractCreate(ctx context.Context, req *CreateOrUpdateContractReq) (r *base.NilResponse, err error) {
	var _args CompanyServiceContractCreateArgs
	_args.Req = req
	var _result CompanyServiceContractCreateResult
	if err = p.Client_().Call(ctx, "ContractCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CompanyServiceClient) ContractUpdate(ctx context.Context, req *CreateOrUpdateContractReq) (r *base.NilResponse, err error) {
	var _args CompanyServiceContractUpdateArgs
	_args.Req = req
	var _result CompanyServiceContractUpdateResult
	if err = p.Client_().Call(ctx, "ContractUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CompanyServiceClient) ContractUpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args CompanyServiceContractUpdateStatusArgs
	_args.Req = req
	var _result CompanyServiceContractUpdateStatusResult
	if err = p.Client_().Call(ctx, "ContractUpdateStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CompanyServiceClient) ContractByID(ctx context.Context, req *base.IDReq) (r *ContractInfo, err error) {
	var _args CompanyServiceContractByIDArgs
	_args.Req = req
	var _result CompanyServiceContractByIDResult
	if err = p.Client_().Call(ctx, "ContractByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CompanyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CompanyService
}

func (p *CompanyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CompanyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CompanyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCompanyServiceProcessor(handler CompanyService) *CompanyServiceProcessor {
	self := &CompanyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ContractList", &companyServiceProcessorContractList{handler: handler})
	self.AddToProcessorMap("ContractCreate", &companyServiceProcessorContractCreate{handler: handler})
	self.AddToProcessorMap("ContractUpdate", &companyServiceProcessorContractUpdate{handler: handler})
	self.AddToProcessorMap("ContractUpdateStatus", &companyServiceProcessorContractUpdateStatus{handler: handler})
	self.AddToProcessorMap("ContractByID", &companyServiceProcessorContractByID{handler: handler})
	return self
}
func (p *CompanyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type companyServiceProcessorContractList struct {
	handler CompanyService
}

func (p *companyServiceProcessorContractList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceContractListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceContractListResult{}
	var retval *ContractListResp
	if retval, err2 = p.handler.ContractList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractList: "+err2.Error())
		oprot.WriteMessageBegin("ContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContractList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type companyServiceProcessorContractCreate struct {
	handler CompanyService
}

func (p *companyServiceProcessorContractCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceContractCreateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContractCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceContractCreateResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContractCreate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractCreate: "+err2.Error())
		oprot.WriteMessageBegin("ContractCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContractCreate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type companyServiceProcessorContractUpdate struct {
	handler CompanyService
}

func (p *companyServiceProcessorContractUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceContractUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContractUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceContractUpdateResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContractUpdate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractUpdate: "+err2.Error())
		oprot.WriteMessageBegin("ContractUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContractUpdate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type companyServiceProcessorContractUpdateStatus struct {
	handler CompanyService
}

func (p *companyServiceProcessorContractUpdateStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceContractUpdateStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContractUpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceContractUpdateStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContractUpdateStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractUpdateStatus: "+err2.Error())
		oprot.WriteMessageBegin("ContractUpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContractUpdateStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type companyServiceProcessorContractByID struct {
	handler CompanyService
}

func (p *companyServiceProcessorContractByID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CompanyServiceContractByIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContractByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CompanyServiceContractByIDResult{}
	var retval *ContractInfo
	if retval, err2 = p.handler.ContractByID(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractByID: "+err2.Error())
		oprot.WriteMessageBegin("ContractByID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContractByID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CompanyServiceContractListArgs struct {
	Req *ContractListReq `thrift:"req,1" frugal:"1,default,ContractListReq" json:"req"`
}

func NewCompanyServiceContractListArgs() *CompanyServiceContractListArgs {
	return &CompanyServiceContractListArgs{}
}

func (p *CompanyServiceContractListArgs) InitDefault() {
}

var CompanyServiceContractListArgs_Req_DEFAULT *ContractListReq

func (p *CompanyServiceContractListArgs) GetReq() (v *ContractListReq) {
	if !p.IsSetReq() {
		return CompanyServiceContractListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceContractListArgs) SetReq(val *ContractListReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceContractListArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceContractListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceContractListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContractListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceContractListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceContractListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractListArgs(%+v)", *p)

}

func (p *CompanyServiceContractListArgs) DeepEqual(ano *CompanyServiceContractListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceContractListArgs) Field1DeepEqual(src *ContractListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractListResult struct {
	Success *ContractListResp `thrift:"success,0,optional" frugal:"0,optional,ContractListResp" json:"success,omitempty"`
}

func NewCompanyServiceContractListResult() *CompanyServiceContractListResult {
	return &CompanyServiceContractListResult{}
}

func (p *CompanyServiceContractListResult) InitDefault() {
}

var CompanyServiceContractListResult_Success_DEFAULT *ContractListResp

func (p *CompanyServiceContractListResult) GetSuccess() (v *ContractListResp) {
	if !p.IsSetSuccess() {
		return CompanyServiceContractListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceContractListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ContractListResp)
}

var fieldIDToName_CompanyServiceContractListResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceContractListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceContractListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewContractListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceContractListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceContractListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractListResult(%+v)", *p)

}

func (p *CompanyServiceContractListResult) DeepEqual(ano *CompanyServiceContractListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceContractListResult) Field0DeepEqual(src *ContractListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractCreateArgs struct {
	Req *CreateOrUpdateContractReq `thrift:"req,1" frugal:"1,default,CreateOrUpdateContractReq" json:"req"`
}

func NewCompanyServiceContractCreateArgs() *CompanyServiceContractCreateArgs {
	return &CompanyServiceContractCreateArgs{}
}

func (p *CompanyServiceContractCreateArgs) InitDefault() {
}

var CompanyServiceContractCreateArgs_Req_DEFAULT *CreateOrUpdateContractReq

func (p *CompanyServiceContractCreateArgs) GetReq() (v *CreateOrUpdateContractReq) {
	if !p.IsSetReq() {
		return CompanyServiceContractCreateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceContractCreateArgs) SetReq(val *CreateOrUpdateContractReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceContractCreateArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceContractCreateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceContractCreateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractCreateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractCreateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateContractReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceContractCreateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractCreate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceContractCreateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractCreateArgs(%+v)", *p)

}

func (p *CompanyServiceContractCreateArgs) DeepEqual(ano *CompanyServiceContractCreateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceContractCreateArgs) Field1DeepEqual(src *CreateOrUpdateContractReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractCreateResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewCompanyServiceContractCreateResult() *CompanyServiceContractCreateResult {
	return &CompanyServiceContractCreateResult{}
}

func (p *CompanyServiceContractCreateResult) InitDefault() {
}

var CompanyServiceContractCreateResult_Success_DEFAULT *base.NilResponse

func (p *CompanyServiceContractCreateResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CompanyServiceContractCreateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceContractCreateResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_CompanyServiceContractCreateResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceContractCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceContractCreateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractCreateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractCreateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceContractCreateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractCreate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceContractCreateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractCreateResult(%+v)", *p)

}

func (p *CompanyServiceContractCreateResult) DeepEqual(ano *CompanyServiceContractCreateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceContractCreateResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractUpdateArgs struct {
	Req *CreateOrUpdateContractReq `thrift:"req,1" frugal:"1,default,CreateOrUpdateContractReq" json:"req"`
}

func NewCompanyServiceContractUpdateArgs() *CompanyServiceContractUpdateArgs {
	return &CompanyServiceContractUpdateArgs{}
}

func (p *CompanyServiceContractUpdateArgs) InitDefault() {
}

var CompanyServiceContractUpdateArgs_Req_DEFAULT *CreateOrUpdateContractReq

func (p *CompanyServiceContractUpdateArgs) GetReq() (v *CreateOrUpdateContractReq) {
	if !p.IsSetReq() {
		return CompanyServiceContractUpdateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceContractUpdateArgs) SetReq(val *CreateOrUpdateContractReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceContractUpdateArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceContractUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceContractUpdateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractUpdateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateContractReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceContractUpdateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractUpdate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceContractUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractUpdateArgs(%+v)", *p)

}

func (p *CompanyServiceContractUpdateArgs) DeepEqual(ano *CompanyServiceContractUpdateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceContractUpdateArgs) Field1DeepEqual(src *CreateOrUpdateContractReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractUpdateResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewCompanyServiceContractUpdateResult() *CompanyServiceContractUpdateResult {
	return &CompanyServiceContractUpdateResult{}
}

func (p *CompanyServiceContractUpdateResult) InitDefault() {
}

var CompanyServiceContractUpdateResult_Success_DEFAULT *base.NilResponse

func (p *CompanyServiceContractUpdateResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CompanyServiceContractUpdateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceContractUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_CompanyServiceContractUpdateResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceContractUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceContractUpdateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractUpdateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceContractUpdateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractUpdate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceContractUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractUpdateResult(%+v)", *p)

}

func (p *CompanyServiceContractUpdateResult) DeepEqual(ano *CompanyServiceContractUpdateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceContractUpdateResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractUpdateStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewCompanyServiceContractUpdateStatusArgs() *CompanyServiceContractUpdateStatusArgs {
	return &CompanyServiceContractUpdateStatusArgs{}
}

func (p *CompanyServiceContractUpdateStatusArgs) InitDefault() {
}

var CompanyServiceContractUpdateStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *CompanyServiceContractUpdateStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return CompanyServiceContractUpdateStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceContractUpdateStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceContractUpdateStatusArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceContractUpdateStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceContractUpdateStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractUpdateStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceContractUpdateStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractUpdateStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractUpdateStatusArgs(%+v)", *p)

}

func (p *CompanyServiceContractUpdateStatusArgs) DeepEqual(ano *CompanyServiceContractUpdateStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceContractUpdateStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractUpdateStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewCompanyServiceContractUpdateStatusResult() *CompanyServiceContractUpdateStatusResult {
	return &CompanyServiceContractUpdateStatusResult{}
}

func (p *CompanyServiceContractUpdateStatusResult) InitDefault() {
}

var CompanyServiceContractUpdateStatusResult_Success_DEFAULT *base.NilResponse

func (p *CompanyServiceContractUpdateStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CompanyServiceContractUpdateStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceContractUpdateStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_CompanyServiceContractUpdateStatusResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceContractUpdateStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceContractUpdateStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractUpdateStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceContractUpdateStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractUpdateStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceContractUpdateStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractUpdateStatusResult(%+v)", *p)

}

func (p *CompanyServiceContractUpdateStatusResult) DeepEqual(ano *CompanyServiceContractUpdateStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceContractUpdateStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractByIDArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewCompanyServiceContractByIDArgs() *CompanyServiceContractByIDArgs {
	return &CompanyServiceContractByIDArgs{}
}

func (p *CompanyServiceContractByIDArgs) InitDefault() {
}

var CompanyServiceContractByIDArgs_Req_DEFAULT *base.IDReq

func (p *CompanyServiceContractByIDArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return CompanyServiceContractByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CompanyServiceContractByIDArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_CompanyServiceContractByIDArgs = map[int16]string{
	1: "req",
}

func (p *CompanyServiceContractByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompanyServiceContractByIDArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractByIDArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CompanyServiceContractByIDArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractByID_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompanyServiceContractByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractByIDArgs(%+v)", *p)

}

func (p *CompanyServiceContractByIDArgs) DeepEqual(ano *CompanyServiceContractByIDArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CompanyServiceContractByIDArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CompanyServiceContractByIDResult struct {
	Success *ContractInfo `thrift:"success,0,optional" frugal:"0,optional,ContractInfo" json:"success,omitempty"`
}

func NewCompanyServiceContractByIDResult() *CompanyServiceContractByIDResult {
	return &CompanyServiceContractByIDResult{}
}

func (p *CompanyServiceContractByIDResult) InitDefault() {
}

var CompanyServiceContractByIDResult_Success_DEFAULT *ContractInfo

func (p *CompanyServiceContractByIDResult) GetSuccess() (v *ContractInfo) {
	if !p.IsSetSuccess() {
		return CompanyServiceContractByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CompanyServiceContractByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*ContractInfo)
}

var fieldIDToName_CompanyServiceContractByIDResult = map[int16]string{
	0: "success",
}

func (p *CompanyServiceContractByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompanyServiceContractByIDResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompanyServiceContractByIDResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompanyServiceContractByIDResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewContractInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CompanyServiceContractByIDResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContractByID_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompanyServiceContractByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CompanyServiceContractByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompanyServiceContractByIDResult(%+v)", *p)

}

func (p *CompanyServiceContractByIDResult) DeepEqual(ano *CompanyServiceContractByIDResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CompanyServiceContractByIDResult) Field0DeepEqual(src *ContractInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

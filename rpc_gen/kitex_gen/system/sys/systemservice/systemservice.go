// Code generated by Kitex v0.9.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	sys "rpc_gen/kitex_gen/system/sys"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ProductList": kitex.NewMethodInfo(
		productListHandler,
		newSystemServiceProductListArgs,
		newSystemServiceProductListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PropertyList": kitex.NewMethodInfo(
		propertyListHandler,
		newSystemServicePropertyListArgs,
		newSystemServicePropertyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PropertyType": kitex.NewMethodInfo(
		propertyTypeHandler,
		newSystemServicePropertyTypeArgs,
		newSystemServicePropertyTypeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VenueList": kitex.NewMethodInfo(
		venueListHandler,
		newSystemServiceVenueListArgs,
		newSystemServiceVenueListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MemberList": kitex.NewMethodInfo(
		memberListHandler,
		newSystemServiceMemberListArgs,
		newSystemServiceMemberListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ContractList": kitex.NewMethodInfo(
		contractListHandler,
		newSystemServiceContractListArgs,
		newSystemServiceContractListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StaffList": kitex.NewMethodInfo(
		staffListHandler,
		newSystemServiceStaffListArgs,
		newSystemServiceStaffListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PlaceList": kitex.NewMethodInfo(
		placeListHandler,
		newSystemServicePlaceListArgs,
		newSystemServicePlaceListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleList": kitex.NewMethodInfo(
		roleListHandler,
		newSystemServiceRoleListArgs,
		newSystemServiceRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*sys.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "sys",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func productListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceProductListArgs)
	realResult := result.(*sys.SystemServiceProductListResult)
	success, err := handler.(sys.SystemService).ProductList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceProductListArgs() interface{} {
	return sys.NewSystemServiceProductListArgs()
}

func newSystemServiceProductListResult() interface{} {
	return sys.NewSystemServiceProductListResult()
}

func propertyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServicePropertyListArgs)
	realResult := result.(*sys.SystemServicePropertyListResult)
	success, err := handler.(sys.SystemService).PropertyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServicePropertyListArgs() interface{} {
	return sys.NewSystemServicePropertyListArgs()
}

func newSystemServicePropertyListResult() interface{} {
	return sys.NewSystemServicePropertyListResult()
}

func propertyTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServicePropertyTypeArgs)
	realResult := result.(*sys.SystemServicePropertyTypeResult)
	success, err := handler.(sys.SystemService).PropertyType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServicePropertyTypeArgs() interface{} {
	return sys.NewSystemServicePropertyTypeArgs()
}

func newSystemServicePropertyTypeResult() interface{} {
	return sys.NewSystemServicePropertyTypeResult()
}

func venueListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceVenueListArgs)
	realResult := result.(*sys.SystemServiceVenueListResult)
	success, err := handler.(sys.SystemService).VenueList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceVenueListArgs() interface{} {
	return sys.NewSystemServiceVenueListArgs()
}

func newSystemServiceVenueListResult() interface{} {
	return sys.NewSystemServiceVenueListResult()
}

func memberListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceMemberListArgs)
	realResult := result.(*sys.SystemServiceMemberListResult)
	success, err := handler.(sys.SystemService).MemberList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMemberListArgs() interface{} {
	return sys.NewSystemServiceMemberListArgs()
}

func newSystemServiceMemberListResult() interface{} {
	return sys.NewSystemServiceMemberListResult()
}

func contractListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceContractListArgs)
	realResult := result.(*sys.SystemServiceContractListResult)
	success, err := handler.(sys.SystemService).ContractList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceContractListArgs() interface{} {
	return sys.NewSystemServiceContractListArgs()
}

func newSystemServiceContractListResult() interface{} {
	return sys.NewSystemServiceContractListResult()
}

func staffListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceStaffListArgs)
	realResult := result.(*sys.SystemServiceStaffListResult)
	success, err := handler.(sys.SystemService).StaffList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceStaffListArgs() interface{} {
	return sys.NewSystemServiceStaffListArgs()
}

func newSystemServiceStaffListResult() interface{} {
	return sys.NewSystemServiceStaffListResult()
}

func placeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServicePlaceListArgs)
	realResult := result.(*sys.SystemServicePlaceListResult)
	success, err := handler.(sys.SystemService).PlaceList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServicePlaceListArgs() interface{} {
	return sys.NewSystemServicePlaceListArgs()
}

func newSystemServicePlaceListResult() interface{} {
	return sys.NewSystemServicePlaceListResult()
}

func roleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*sys.SystemServiceRoleListArgs)
	realResult := result.(*sys.SystemServiceRoleListResult)
	success, err := handler.(sys.SystemService).RoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRoleListArgs() interface{} {
	return sys.NewSystemServiceRoleListArgs()
}

func newSystemServiceRoleListResult() interface{} {
	return sys.NewSystemServiceRoleListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ProductList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceProductListArgs
	_args.Req = req
	var _result sys.SystemServiceProductListResult
	if err = p.c.Call(ctx, "ProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PropertyList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServicePropertyListArgs
	_args.Req = req
	var _result sys.SystemServicePropertyListResult
	if err = p.c.Call(ctx, "PropertyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PropertyType(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServicePropertyTypeArgs
	_args.Req = req
	var _result sys.SystemServicePropertyTypeResult
	if err = p.c.Call(ctx, "PropertyType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VenueList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceVenueListArgs
	_args.Req = req
	var _result sys.SystemServiceVenueListResult
	if err = p.c.Call(ctx, "VenueList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MemberList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceMemberListArgs
	_args.Req = req
	var _result sys.SystemServiceMemberListResult
	if err = p.c.Call(ctx, "MemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ContractList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceContractListArgs
	_args.Req = req
	var _result sys.SystemServiceContractListResult
	if err = p.c.Call(ctx, "ContractList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StaffList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceStaffListArgs
	_args.Req = req
	var _result sys.SystemServiceStaffListResult
	if err = p.c.Call(ctx, "StaffList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PlaceList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServicePlaceListArgs
	_args.Req = req
	var _result sys.SystemServicePlaceListResult
	if err = p.c.Call(ctx, "PlaceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleList(ctx context.Context, req *sys.ListReq) (r *sys.SysListResp, err error) {
	var _args sys.SystemServiceRoleListArgs
	_args.Req = req
	var _result sys.SystemServiceRoleListResult
	if err = p.c.Call(ctx, "RoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	auth "rpc_gen/kitex_gen/system/auth"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newSystemServiceCreateRoleArgs,
		newSystemServiceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newSystemServiceUpdateRoleArgs,
		newSystemServiceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newSystemServiceDeleteRoleArgs,
		newSystemServiceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleByID": kitex.NewMethodInfo(
		roleByIDHandler,
		newSystemServiceRoleByIDArgs,
		newSystemServiceRoleByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenuAuth": kitex.NewMethodInfo(
		createMenuAuthHandler,
		newSystemServiceCreateMenuAuthArgs,
		newSystemServiceCreateMenuAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenuAuth": kitex.NewMethodInfo(
		updateMenuAuthHandler,
		newSystemServiceUpdateMenuAuthArgs,
		newSystemServiceUpdateMenuAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleList": kitex.NewMethodInfo(
		roleListHandler,
		newSystemServiceRoleListArgs,
		newSystemServiceRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRoleStatus": kitex.NewMethodInfo(
		updateRoleStatusHandler,
		newSystemServiceUpdateRoleStatusArgs,
		newSystemServiceUpdateRoleStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateAuth": kitex.NewMethodInfo(
		createAuthHandler,
		newSystemServiceCreateAuthArgs,
		newSystemServiceCreateAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApiAuth": kitex.NewMethodInfo(
		updateApiAuthHandler,
		newSystemServiceUpdateApiAuthArgs,
		newSystemServiceUpdateApiAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiAuth": kitex.NewMethodInfo(
		apiAuthHandler,
		newSystemServiceApiAuthArgs,
		newSystemServiceApiAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLogsList": kitex.NewMethodInfo(
		getLogsListHandler,
		newSystemServiceGetLogsListArgs,
		newSystemServiceGetLogsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteLogs": kitex.NewMethodInfo(
		deleteLogsHandler,
		newSystemServiceDeleteLogsArgs,
		newSystemServiceDeleteLogsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*auth.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceCreateRoleArgs)
	realResult := result.(*auth.SystemServiceCreateRoleResult)
	success, err := handler.(auth.SystemService).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateRoleArgs() interface{} {
	return auth.NewSystemServiceCreateRoleArgs()
}

func newSystemServiceCreateRoleResult() interface{} {
	return auth.NewSystemServiceCreateRoleResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceUpdateRoleArgs)
	realResult := result.(*auth.SystemServiceUpdateRoleResult)
	success, err := handler.(auth.SystemService).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateRoleArgs() interface{} {
	return auth.NewSystemServiceUpdateRoleArgs()
}

func newSystemServiceUpdateRoleResult() interface{} {
	return auth.NewSystemServiceUpdateRoleResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceDeleteRoleArgs)
	realResult := result.(*auth.SystemServiceDeleteRoleResult)
	success, err := handler.(auth.SystemService).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteRoleArgs() interface{} {
	return auth.NewSystemServiceDeleteRoleArgs()
}

func newSystemServiceDeleteRoleResult() interface{} {
	return auth.NewSystemServiceDeleteRoleResult()
}

func roleByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceRoleByIDArgs)
	realResult := result.(*auth.SystemServiceRoleByIDResult)
	success, err := handler.(auth.SystemService).RoleByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRoleByIDArgs() interface{} {
	return auth.NewSystemServiceRoleByIDArgs()
}

func newSystemServiceRoleByIDResult() interface{} {
	return auth.NewSystemServiceRoleByIDResult()
}

func createMenuAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceCreateMenuAuthArgs)
	realResult := result.(*auth.SystemServiceCreateMenuAuthResult)
	success, err := handler.(auth.SystemService).CreateMenuAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateMenuAuthArgs() interface{} {
	return auth.NewSystemServiceCreateMenuAuthArgs()
}

func newSystemServiceCreateMenuAuthResult() interface{} {
	return auth.NewSystemServiceCreateMenuAuthResult()
}

func updateMenuAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceUpdateMenuAuthArgs)
	realResult := result.(*auth.SystemServiceUpdateMenuAuthResult)
	success, err := handler.(auth.SystemService).UpdateMenuAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateMenuAuthArgs() interface{} {
	return auth.NewSystemServiceUpdateMenuAuthArgs()
}

func newSystemServiceUpdateMenuAuthResult() interface{} {
	return auth.NewSystemServiceUpdateMenuAuthResult()
}

func roleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceRoleListArgs)
	realResult := result.(*auth.SystemServiceRoleListResult)
	success, err := handler.(auth.SystemService).RoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceRoleListArgs() interface{} {
	return auth.NewSystemServiceRoleListArgs()
}

func newSystemServiceRoleListResult() interface{} {
	return auth.NewSystemServiceRoleListResult()
}

func updateRoleStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceUpdateRoleStatusArgs)
	realResult := result.(*auth.SystemServiceUpdateRoleStatusResult)
	success, err := handler.(auth.SystemService).UpdateRoleStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateRoleStatusArgs() interface{} {
	return auth.NewSystemServiceUpdateRoleStatusArgs()
}

func newSystemServiceUpdateRoleStatusResult() interface{} {
	return auth.NewSystemServiceUpdateRoleStatusResult()
}

func createAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceCreateAuthArgs)
	realResult := result.(*auth.SystemServiceCreateAuthResult)
	success, err := handler.(auth.SystemService).CreateAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateAuthArgs() interface{} {
	return auth.NewSystemServiceCreateAuthArgs()
}

func newSystemServiceCreateAuthResult() interface{} {
	return auth.NewSystemServiceCreateAuthResult()
}

func updateApiAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceUpdateApiAuthArgs)
	realResult := result.(*auth.SystemServiceUpdateApiAuthResult)
	success, err := handler.(auth.SystemService).UpdateApiAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateApiAuthArgs() interface{} {
	return auth.NewSystemServiceUpdateApiAuthArgs()
}

func newSystemServiceUpdateApiAuthResult() interface{} {
	return auth.NewSystemServiceUpdateApiAuthResult()
}

func apiAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceApiAuthArgs)
	realResult := result.(*auth.SystemServiceApiAuthResult)
	success, err := handler.(auth.SystemService).ApiAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiAuthArgs() interface{} {
	return auth.NewSystemServiceApiAuthArgs()
}

func newSystemServiceApiAuthResult() interface{} {
	return auth.NewSystemServiceApiAuthResult()
}

func getLogsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceGetLogsListArgs)
	realResult := result.(*auth.SystemServiceGetLogsListResult)
	success, err := handler.(auth.SystemService).GetLogsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceGetLogsListArgs() interface{} {
	return auth.NewSystemServiceGetLogsListArgs()
}

func newSystemServiceGetLogsListResult() interface{} {
	return auth.NewSystemServiceGetLogsListResult()
}

func deleteLogsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.SystemServiceDeleteLogsArgs)
	realResult := result.(*auth.SystemServiceDeleteLogsResult)
	success, err := handler.(auth.SystemService).DeleteLogs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteLogsArgs() interface{} {
	return auth.NewSystemServiceDeleteLogsArgs()
}

func newSystemServiceDeleteLogsResult() interface{} {
	return auth.NewSystemServiceDeleteLogsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRole(ctx context.Context, req *auth.RoleInfo) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceCreateRoleArgs
	_args.Req = req
	var _result auth.SystemServiceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *auth.RoleInfo) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceUpdateRoleArgs
	_args.Req = req
	var _result auth.SystemServiceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceDeleteRoleArgs
	_args.Req = req
	var _result auth.SystemServiceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleByID(ctx context.Context, req *base.IDReq) (r *auth.RoleInfo, err error) {
	var _args auth.SystemServiceRoleByIDArgs
	_args.Req = req
	var _result auth.SystemServiceRoleByIDResult
	if err = p.c.Call(ctx, "RoleByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenuAuth(ctx context.Context, req *auth.MenuAuthInfoReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceCreateMenuAuthArgs
	_args.Req = req
	var _result auth.SystemServiceCreateMenuAuthResult
	if err = p.c.Call(ctx, "CreateMenuAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenuAuth(ctx context.Context, req *auth.MenuAuthInfoReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceUpdateMenuAuthArgs
	_args.Req = req
	var _result auth.SystemServiceUpdateMenuAuthResult
	if err = p.c.Call(ctx, "UpdateMenuAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleList(ctx context.Context, req *base.PageInfoReq) (r *auth.RoleListResp, err error) {
	var _args auth.SystemServiceRoleListArgs
	_args.Req = req
	var _result auth.SystemServiceRoleListResult
	if err = p.c.Call(ctx, "RoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRoleStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceUpdateRoleStatusArgs
	_args.Req = req
	var _result auth.SystemServiceUpdateRoleStatusResult
	if err = p.c.Call(ctx, "UpdateRoleStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAuth(ctx context.Context, req *auth.CreateOrUpdateApiAuthReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceCreateAuthArgs
	_args.Req = req
	var _result auth.SystemServiceCreateAuthResult
	if err = p.c.Call(ctx, "CreateAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApiAuth(ctx context.Context, req *auth.CreateOrUpdateApiAuthReq) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceUpdateApiAuthArgs
	_args.Req = req
	var _result auth.SystemServiceUpdateApiAuthResult
	if err = p.c.Call(ctx, "UpdateApiAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiAuth(ctx context.Context, req *base.IDReq) (r []*auth.ApiAuthInfo, err error) {
	var _args auth.SystemServiceApiAuthArgs
	_args.Req = req
	var _result auth.SystemServiceApiAuthResult
	if err = p.c.Call(ctx, "ApiAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLogsList(ctx context.Context, req *auth.LogsListReq) (r *auth.LogsListReq, err error) {
	var _args auth.SystemServiceGetLogsListArgs
	_args.Req = req
	var _result auth.SystemServiceGetLogsListResult
	if err = p.c.Call(ctx, "GetLogsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLogs(ctx context.Context, req *base.Ids) (r *base.NilResponse, err error) {
	var _args auth.SystemServiceDeleteLogsArgs
	_args.Req = req
	var _result auth.SystemServiceDeleteLogsResult
	if err = p.c.Call(ctx, "DeleteLogs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

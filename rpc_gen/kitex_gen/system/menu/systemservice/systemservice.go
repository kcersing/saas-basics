// Code generated by Kitex v0.9.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	menu "rpc_gen/kitex_gen/system/menu"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MenuAuth": kitex.NewMethodInfo(
		menuAuthHandler,
		newSystemServiceMenuAuthArgs,
		newSystemServiceMenuAuthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuRole": kitex.NewMethodInfo(
		menuRoleHandler,
		newSystemServiceMenuRoleArgs,
		newSystemServiceMenuRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiList": kitex.NewMethodInfo(
		apiListHandler,
		newSystemServiceApiListArgs,
		newSystemServiceApiListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiTree": kitex.NewMethodInfo(
		apiTreeHandler,
		newSystemServiceApiTreeArgs,
		newSystemServiceApiTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuLists": kitex.NewMethodInfo(
		menuListsHandler,
		newSystemServiceMenuListsArgs,
		newSystemServiceMenuListsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuTree": kitex.NewMethodInfo(
		menuTreeHandler,
		newSystemServiceMenuTreeArgs,
		newSystemServiceMenuTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*menu.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "menu",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func menuAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceMenuAuthArgs)
	realResult := result.(*menu.SystemServiceMenuAuthResult)
	success, err := handler.(menu.SystemService).MenuAuth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuAuthArgs() interface{} {
	return menu.NewSystemServiceMenuAuthArgs()
}

func newSystemServiceMenuAuthResult() interface{} {
	return menu.NewSystemServiceMenuAuthResult()
}

func menuRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceMenuRoleArgs)
	realResult := result.(*menu.SystemServiceMenuRoleResult)
	success, err := handler.(menu.SystemService).MenuRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuRoleArgs() interface{} {
	return menu.NewSystemServiceMenuRoleArgs()
}

func newSystemServiceMenuRoleResult() interface{} {
	return menu.NewSystemServiceMenuRoleResult()
}

func apiListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceApiListArgs)
	realResult := result.(*menu.SystemServiceApiListResult)
	success, err := handler.(menu.SystemService).ApiList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiListArgs() interface{} {
	return menu.NewSystemServiceApiListArgs()
}

func newSystemServiceApiListResult() interface{} {
	return menu.NewSystemServiceApiListResult()
}

func apiTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceApiTreeArgs)
	realResult := result.(*menu.SystemServiceApiTreeResult)
	success, err := handler.(menu.SystemService).ApiTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceApiTreeArgs() interface{} {
	return menu.NewSystemServiceApiTreeArgs()
}

func newSystemServiceApiTreeResult() interface{} {
	return menu.NewSystemServiceApiTreeResult()
}

func menuListsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceMenuListsArgs)
	realResult := result.(*menu.SystemServiceMenuListsResult)
	success, err := handler.(menu.SystemService).MenuLists(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuListsArgs() interface{} {
	return menu.NewSystemServiceMenuListsArgs()
}

func newSystemServiceMenuListsResult() interface{} {
	return menu.NewSystemServiceMenuListsResult()
}

func menuTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.SystemServiceMenuTreeArgs)
	realResult := result.(*menu.SystemServiceMenuTreeResult)
	success, err := handler.(menu.SystemService).MenuTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceMenuTreeArgs() interface{} {
	return menu.NewSystemServiceMenuTreeArgs()
}

func newSystemServiceMenuTreeResult() interface{} {
	return menu.NewSystemServiceMenuTreeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MenuAuth(ctx context.Context, req *base.IDReq) (r []*menu.MenuInfoTree, err error) {
	var _args menu.SystemServiceMenuAuthArgs
	_args.Req = req
	var _result menu.SystemServiceMenuAuthResult
	if err = p.c.Call(ctx, "MenuAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuRole(ctx context.Context, req *base.IDReq) (r *base.Ids, err error) {
	var _args menu.SystemServiceMenuRoleArgs
	_args.Req = req
	var _result menu.SystemServiceMenuRoleResult
	if err = p.c.Call(ctx, "MenuRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiList(ctx context.Context, req *menu.ApiPageReq) (r *menu.ApiInfoResp, err error) {
	var _args menu.SystemServiceApiListArgs
	_args.Req = req
	var _result menu.SystemServiceApiListResult
	if err = p.c.Call(ctx, "ApiList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiTree(ctx context.Context, req *menu.ApiPageReq) (r []*base.Tree, err error) {
	var _args menu.SystemServiceApiTreeArgs
	_args.Req = req
	var _result menu.SystemServiceApiTreeResult
	if err = p.c.Call(ctx, "ApiTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuLists(ctx context.Context, req *base.PageInfoReq) (r *menu.MenuInfoResp, err error) {
	var _args menu.SystemServiceMenuListsArgs
	_args.Req = req
	var _result menu.SystemServiceMenuListsResult
	if err = p.c.Call(ctx, "MenuLists", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuTree(ctx context.Context, req *base.PageInfoReq) (r []*base.Tree, err error) {
	var _args menu.SystemServiceMenuTreeArgs
	_args.Req = req
	var _result menu.SystemServiceMenuTreeResult
	if err = p.c.Call(ctx, "MenuTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package menuservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	menu "rpc_gen/kitex_gen/system/menu"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateMenu": kitex.NewMethodInfo(
		createMenuHandler,
		newMenuServiceCreateMenuArgs,
		newMenuServiceCreateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenu": kitex.NewMethodInfo(
		updateMenuHandler,
		newMenuServiceUpdateMenuArgs,
		newMenuServiceUpdateMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenu": kitex.NewMethodInfo(
		deleteMenuHandler,
		newMenuServiceDeleteMenuArgs,
		newMenuServiceDeleteMenuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuByRole": kitex.NewMethodInfo(
		menuByRoleHandler,
		newMenuServiceMenuByRoleArgs,
		newMenuServiceMenuByRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuLists": kitex.NewMethodInfo(
		menuListsHandler,
		newMenuServiceMenuListsArgs,
		newMenuServiceMenuListsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuTree": kitex.NewMethodInfo(
		menuTreeHandler,
		newMenuServiceMenuTreeArgs,
		newMenuServiceMenuTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenuParam": kitex.NewMethodInfo(
		createMenuParamHandler,
		newMenuServiceCreateMenuParamArgs,
		newMenuServiceCreateMenuParamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenuParam": kitex.NewMethodInfo(
		updateMenuParamHandler,
		newMenuServiceUpdateMenuParamArgs,
		newMenuServiceUpdateMenuParamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMenuParam": kitex.NewMethodInfo(
		deleteMenuParamHandler,
		newMenuServiceDeleteMenuParamArgs,
		newMenuServiceDeleteMenuParamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuParamListByMenuID": kitex.NewMethodInfo(
		menuParamListByMenuIDHandler,
		newMenuServiceMenuParamListByMenuIDArgs,
		newMenuServiceMenuParamListByMenuIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	menuServiceServiceInfo                = NewServiceInfo()
	menuServiceServiceInfoForClient       = NewServiceInfoForClient()
	menuServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return menuServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return menuServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return menuServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MenuService"
	handlerType := (*menu.MenuService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "menu",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceCreateMenuArgs)
	realResult := result.(*menu.MenuServiceCreateMenuResult)
	success, err := handler.(menu.MenuService).CreateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceCreateMenuArgs() interface{} {
	return menu.NewMenuServiceCreateMenuArgs()
}

func newMenuServiceCreateMenuResult() interface{} {
	return menu.NewMenuServiceCreateMenuResult()
}

func updateMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceUpdateMenuArgs)
	realResult := result.(*menu.MenuServiceUpdateMenuResult)
	success, err := handler.(menu.MenuService).UpdateMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceUpdateMenuArgs() interface{} {
	return menu.NewMenuServiceUpdateMenuArgs()
}

func newMenuServiceUpdateMenuResult() interface{} {
	return menu.NewMenuServiceUpdateMenuResult()
}

func deleteMenuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceDeleteMenuArgs)
	realResult := result.(*menu.MenuServiceDeleteMenuResult)
	success, err := handler.(menu.MenuService).DeleteMenu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceDeleteMenuArgs() interface{} {
	return menu.NewMenuServiceDeleteMenuArgs()
}

func newMenuServiceDeleteMenuResult() interface{} {
	return menu.NewMenuServiceDeleteMenuResult()
}

func menuByRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceMenuByRoleArgs)
	realResult := result.(*menu.MenuServiceMenuByRoleResult)
	success, err := handler.(menu.MenuService).MenuByRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceMenuByRoleArgs() interface{} {
	return menu.NewMenuServiceMenuByRoleArgs()
}

func newMenuServiceMenuByRoleResult() interface{} {
	return menu.NewMenuServiceMenuByRoleResult()
}

func menuListsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceMenuListsArgs)
	realResult := result.(*menu.MenuServiceMenuListsResult)
	success, err := handler.(menu.MenuService).MenuLists(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceMenuListsArgs() interface{} {
	return menu.NewMenuServiceMenuListsArgs()
}

func newMenuServiceMenuListsResult() interface{} {
	return menu.NewMenuServiceMenuListsResult()
}

func menuTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceMenuTreeArgs)
	realResult := result.(*menu.MenuServiceMenuTreeResult)
	success, err := handler.(menu.MenuService).MenuTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceMenuTreeArgs() interface{} {
	return menu.NewMenuServiceMenuTreeArgs()
}

func newMenuServiceMenuTreeResult() interface{} {
	return menu.NewMenuServiceMenuTreeResult()
}

func createMenuParamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceCreateMenuParamArgs)
	realResult := result.(*menu.MenuServiceCreateMenuParamResult)
	success, err := handler.(menu.MenuService).CreateMenuParam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceCreateMenuParamArgs() interface{} {
	return menu.NewMenuServiceCreateMenuParamArgs()
}

func newMenuServiceCreateMenuParamResult() interface{} {
	return menu.NewMenuServiceCreateMenuParamResult()
}

func updateMenuParamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceUpdateMenuParamArgs)
	realResult := result.(*menu.MenuServiceUpdateMenuParamResult)
	success, err := handler.(menu.MenuService).UpdateMenuParam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceUpdateMenuParamArgs() interface{} {
	return menu.NewMenuServiceUpdateMenuParamArgs()
}

func newMenuServiceUpdateMenuParamResult() interface{} {
	return menu.NewMenuServiceUpdateMenuParamResult()
}

func deleteMenuParamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceDeleteMenuParamArgs)
	realResult := result.(*menu.MenuServiceDeleteMenuParamResult)
	success, err := handler.(menu.MenuService).DeleteMenuParam(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceDeleteMenuParamArgs() interface{} {
	return menu.NewMenuServiceDeleteMenuParamArgs()
}

func newMenuServiceDeleteMenuParamResult() interface{} {
	return menu.NewMenuServiceDeleteMenuParamResult()
}

func menuParamListByMenuIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*menu.MenuServiceMenuParamListByMenuIDArgs)
	realResult := result.(*menu.MenuServiceMenuParamListByMenuIDResult)
	success, err := handler.(menu.MenuService).MenuParamListByMenuID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMenuServiceMenuParamListByMenuIDArgs() interface{} {
	return menu.NewMenuServiceMenuParamListByMenuIDArgs()
}

func newMenuServiceMenuParamListByMenuIDResult() interface{} {
	return menu.NewMenuServiceMenuParamListByMenuIDResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateMenu(ctx context.Context, req *menu.CreateOrUpdateMenuReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceCreateMenuArgs
	_args.Req = req
	var _result menu.MenuServiceCreateMenuResult
	if err = p.c.Call(ctx, "CreateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenu(ctx context.Context, req *menu.CreateOrUpdateMenuReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceUpdateMenuArgs
	_args.Req = req
	var _result menu.MenuServiceUpdateMenuResult
	if err = p.c.Call(ctx, "UpdateMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenu(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceDeleteMenuArgs
	_args.Req = req
	var _result menu.MenuServiceDeleteMenuResult
	if err = p.c.Call(ctx, "DeleteMenu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuByRole(ctx context.Context, req *base.IDReq) (r *menu.MenuInfoTree, err error) {
	var _args menu.MenuServiceMenuByRoleArgs
	_args.Req = req
	var _result menu.MenuServiceMenuByRoleResult
	if err = p.c.Call(ctx, "MenuByRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuLists(ctx context.Context, req *base.PageInfoReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceMenuListsArgs
	_args.Req = req
	var _result menu.MenuServiceMenuListsResult
	if err = p.c.Call(ctx, "MenuLists", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuTree(ctx context.Context, req *base.PageInfoReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceMenuTreeArgs
	_args.Req = req
	var _result menu.MenuServiceMenuTreeResult
	if err = p.c.Call(ctx, "MenuTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenuParam(ctx context.Context, req *menu.CreateOrUpdateMenuParamReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceCreateMenuParamArgs
	_args.Req = req
	var _result menu.MenuServiceCreateMenuParamResult
	if err = p.c.Call(ctx, "CreateMenuParam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenuParam(ctx context.Context, req *menu.CreateOrUpdateMenuParamReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceUpdateMenuParamArgs
	_args.Req = req
	var _result menu.MenuServiceUpdateMenuParamResult
	if err = p.c.Call(ctx, "UpdateMenuParam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMenuParam(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceDeleteMenuParamArgs
	_args.Req = req
	var _result menu.MenuServiceDeleteMenuParamResult
	if err = p.c.Call(ctx, "DeleteMenuParam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuParamListByMenuID(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args menu.MenuServiceMenuParamListByMenuIDArgs
	_args.Req = req
	var _result menu.MenuServiceMenuParamListByMenuIDResult
	if err = p.c.Call(ctx, "MenuParamListByMenuID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

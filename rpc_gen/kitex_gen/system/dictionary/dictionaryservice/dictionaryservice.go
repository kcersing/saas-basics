// Code generated by Kitex v0.9.1. DO NOT EDIT.

package dictionaryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	dictionary "rpc_gen/kitex_gen/system/dictionary"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateDictionary": kitex.NewMethodInfo(
		createDictionaryHandler,
		newDictionaryServiceCreateDictionaryArgs,
		newDictionaryServiceCreateDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDictionary": kitex.NewMethodInfo(
		updateDictionaryHandler,
		newDictionaryServiceUpdateDictionaryArgs,
		newDictionaryServiceUpdateDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDictionary": kitex.NewMethodInfo(
		deleteDictionaryHandler,
		newDictionaryServiceDeleteDictionaryArgs,
		newDictionaryServiceDeleteDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DictionaryList": kitex.NewMethodInfo(
		dictionaryListHandler,
		newDictionaryServiceDictionaryListArgs,
		newDictionaryServiceDictionaryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateDictionaryDetail": kitex.NewMethodInfo(
		createDictionaryDetailHandler,
		newDictionaryServiceCreateDictionaryDetailArgs,
		newDictionaryServiceCreateDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDictionaryDetail": kitex.NewMethodInfo(
		updateDictionaryDetailHandler,
		newDictionaryServiceUpdateDictionaryDetailArgs,
		newDictionaryServiceUpdateDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDictionaryDetail": kitex.NewMethodInfo(
		deleteDictionaryDetailHandler,
		newDictionaryServiceDeleteDictionaryDetailArgs,
		newDictionaryServiceDeleteDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DetailByDictionaryList": kitex.NewMethodInfo(
		detailByDictionaryListHandler,
		newDictionaryServiceDetailByDictionaryListArgs,
		newDictionaryServiceDetailByDictionaryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	dictionaryServiceServiceInfo                = NewServiceInfo()
	dictionaryServiceServiceInfoForClient       = NewServiceInfoForClient()
	dictionaryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return dictionaryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return dictionaryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return dictionaryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "dictionaryService"
	handlerType := (*dictionary.DictionaryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "dictionary",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceCreateDictionaryArgs)
	realResult := result.(*dictionary.DictionaryServiceCreateDictionaryResult)
	success, err := handler.(dictionary.DictionaryService).CreateDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceCreateDictionaryArgs() interface{} {
	return dictionary.NewDictionaryServiceCreateDictionaryArgs()
}

func newDictionaryServiceCreateDictionaryResult() interface{} {
	return dictionary.NewDictionaryServiceCreateDictionaryResult()
}

func updateDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceUpdateDictionaryArgs)
	realResult := result.(*dictionary.DictionaryServiceUpdateDictionaryResult)
	success, err := handler.(dictionary.DictionaryService).UpdateDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceUpdateDictionaryArgs() interface{} {
	return dictionary.NewDictionaryServiceUpdateDictionaryArgs()
}

func newDictionaryServiceUpdateDictionaryResult() interface{} {
	return dictionary.NewDictionaryServiceUpdateDictionaryResult()
}

func deleteDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceDeleteDictionaryArgs)
	realResult := result.(*dictionary.DictionaryServiceDeleteDictionaryResult)
	success, err := handler.(dictionary.DictionaryService).DeleteDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceDeleteDictionaryArgs() interface{} {
	return dictionary.NewDictionaryServiceDeleteDictionaryArgs()
}

func newDictionaryServiceDeleteDictionaryResult() interface{} {
	return dictionary.NewDictionaryServiceDeleteDictionaryResult()
}

func dictionaryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceDictionaryListArgs)
	realResult := result.(*dictionary.DictionaryServiceDictionaryListResult)
	success, err := handler.(dictionary.DictionaryService).DictionaryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceDictionaryListArgs() interface{} {
	return dictionary.NewDictionaryServiceDictionaryListArgs()
}

func newDictionaryServiceDictionaryListResult() interface{} {
	return dictionary.NewDictionaryServiceDictionaryListResult()
}

func createDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceCreateDictionaryDetailArgs)
	realResult := result.(*dictionary.DictionaryServiceCreateDictionaryDetailResult)
	success, err := handler.(dictionary.DictionaryService).CreateDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceCreateDictionaryDetailArgs() interface{} {
	return dictionary.NewDictionaryServiceCreateDictionaryDetailArgs()
}

func newDictionaryServiceCreateDictionaryDetailResult() interface{} {
	return dictionary.NewDictionaryServiceCreateDictionaryDetailResult()
}

func updateDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceUpdateDictionaryDetailArgs)
	realResult := result.(*dictionary.DictionaryServiceUpdateDictionaryDetailResult)
	success, err := handler.(dictionary.DictionaryService).UpdateDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceUpdateDictionaryDetailArgs() interface{} {
	return dictionary.NewDictionaryServiceUpdateDictionaryDetailArgs()
}

func newDictionaryServiceUpdateDictionaryDetailResult() interface{} {
	return dictionary.NewDictionaryServiceUpdateDictionaryDetailResult()
}

func deleteDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceDeleteDictionaryDetailArgs)
	realResult := result.(*dictionary.DictionaryServiceDeleteDictionaryDetailResult)
	success, err := handler.(dictionary.DictionaryService).DeleteDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceDeleteDictionaryDetailArgs() interface{} {
	return dictionary.NewDictionaryServiceDeleteDictionaryDetailArgs()
}

func newDictionaryServiceDeleteDictionaryDetailResult() interface{} {
	return dictionary.NewDictionaryServiceDeleteDictionaryDetailResult()
}

func detailByDictionaryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.DictionaryServiceDetailByDictionaryListArgs)
	realResult := result.(*dictionary.DictionaryServiceDetailByDictionaryListResult)
	success, err := handler.(dictionary.DictionaryService).DetailByDictionaryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDictionaryServiceDetailByDictionaryListArgs() interface{} {
	return dictionary.NewDictionaryServiceDetailByDictionaryListArgs()
}

func newDictionaryServiceDetailByDictionaryListResult() interface{} {
	return dictionary.NewDictionaryServiceDetailByDictionaryListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateDictionary(ctx context.Context, req *dictionary.DictionaryInfo) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceCreateDictionaryArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceCreateDictionaryResult
	if err = p.c.Call(ctx, "CreateDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictionary(ctx context.Context, req *dictionary.DictionaryInfo) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceUpdateDictionaryArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceUpdateDictionaryResult
	if err = p.c.Call(ctx, "UpdateDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictionary(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceDeleteDictionaryArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceDeleteDictionaryResult
	if err = p.c.Call(ctx, "DeleteDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DictionaryList(ctx context.Context, req *dictionary.DictionaryPageReq) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceDictionaryListArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceDictionaryListResult
	if err = p.c.Call(ctx, "DictionaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDictionaryDetail(ctx context.Context, req *dictionary.DictionaryDetail) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceCreateDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceCreateDictionaryDetailResult
	if err = p.c.Call(ctx, "CreateDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictionaryDetail(ctx context.Context, req *dictionary.DictionaryDetail) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceUpdateDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceUpdateDictionaryDetailResult
	if err = p.c.Call(ctx, "UpdateDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictionaryDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceDeleteDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceDeleteDictionaryDetailResult
	if err = p.c.Call(ctx, "DeleteDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DetailByDictionaryList(ctx context.Context, req *dictionary.DictionaryDetailReq) (r *base.NilResponse, err error) {
	var _args dictionary.DictionaryServiceDetailByDictionaryListArgs
	_args.Req = req
	var _result dictionary.DictionaryServiceDetailByDictionaryListResult
	if err = p.c.Call(ctx, "DetailByDictionaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

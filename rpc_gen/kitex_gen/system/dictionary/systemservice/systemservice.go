// Code generated by Kitex v0.9.1. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	dictionary "rpc_gen/kitex_gen/system/dictionary"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateDictionary": kitex.NewMethodInfo(
		createDictionaryHandler,
		newSystemServiceCreateDictionaryArgs,
		newSystemServiceCreateDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDictionary": kitex.NewMethodInfo(
		updateDictionaryHandler,
		newSystemServiceUpdateDictionaryArgs,
		newSystemServiceUpdateDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDictionary": kitex.NewMethodInfo(
		deleteDictionaryHandler,
		newSystemServiceDeleteDictionaryArgs,
		newSystemServiceDeleteDictionaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DictionaryList": kitex.NewMethodInfo(
		dictionaryListHandler,
		newSystemServiceDictionaryListArgs,
		newSystemServiceDictionaryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateDictionaryDetail": kitex.NewMethodInfo(
		createDictionaryDetailHandler,
		newSystemServiceCreateDictionaryDetailArgs,
		newSystemServiceCreateDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDictionaryDetail": kitex.NewMethodInfo(
		updateDictionaryDetailHandler,
		newSystemServiceUpdateDictionaryDetailArgs,
		newSystemServiceUpdateDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDictionaryDetail": kitex.NewMethodInfo(
		deleteDictionaryDetailHandler,
		newSystemServiceDeleteDictionaryDetailArgs,
		newSystemServiceDeleteDictionaryDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DetailByDictionaryList": kitex.NewMethodInfo(
		detailByDictionaryListHandler,
		newSystemServiceDetailByDictionaryListArgs,
		newSystemServiceDetailByDictionaryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*dictionary.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "dictionary",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceCreateDictionaryArgs)
	realResult := result.(*dictionary.SystemServiceCreateDictionaryResult)
	success, err := handler.(dictionary.SystemService).CreateDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDictionaryArgs() interface{} {
	return dictionary.NewSystemServiceCreateDictionaryArgs()
}

func newSystemServiceCreateDictionaryResult() interface{} {
	return dictionary.NewSystemServiceCreateDictionaryResult()
}

func updateDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceUpdateDictionaryArgs)
	realResult := result.(*dictionary.SystemServiceUpdateDictionaryResult)
	success, err := handler.(dictionary.SystemService).UpdateDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDictionaryArgs() interface{} {
	return dictionary.NewSystemServiceUpdateDictionaryArgs()
}

func newSystemServiceUpdateDictionaryResult() interface{} {
	return dictionary.NewSystemServiceUpdateDictionaryResult()
}

func deleteDictionaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceDeleteDictionaryArgs)
	realResult := result.(*dictionary.SystemServiceDeleteDictionaryResult)
	success, err := handler.(dictionary.SystemService).DeleteDictionary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDictionaryArgs() interface{} {
	return dictionary.NewSystemServiceDeleteDictionaryArgs()
}

func newSystemServiceDeleteDictionaryResult() interface{} {
	return dictionary.NewSystemServiceDeleteDictionaryResult()
}

func dictionaryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceDictionaryListArgs)
	realResult := result.(*dictionary.SystemServiceDictionaryListResult)
	success, err := handler.(dictionary.SystemService).DictionaryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDictionaryListArgs() interface{} {
	return dictionary.NewSystemServiceDictionaryListArgs()
}

func newSystemServiceDictionaryListResult() interface{} {
	return dictionary.NewSystemServiceDictionaryListResult()
}

func createDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceCreateDictionaryDetailArgs)
	realResult := result.(*dictionary.SystemServiceCreateDictionaryDetailResult)
	success, err := handler.(dictionary.SystemService).CreateDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceCreateDictionaryDetailArgs() interface{} {
	return dictionary.NewSystemServiceCreateDictionaryDetailArgs()
}

func newSystemServiceCreateDictionaryDetailResult() interface{} {
	return dictionary.NewSystemServiceCreateDictionaryDetailResult()
}

func updateDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceUpdateDictionaryDetailArgs)
	realResult := result.(*dictionary.SystemServiceUpdateDictionaryDetailResult)
	success, err := handler.(dictionary.SystemService).UpdateDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceUpdateDictionaryDetailArgs() interface{} {
	return dictionary.NewSystemServiceUpdateDictionaryDetailArgs()
}

func newSystemServiceUpdateDictionaryDetailResult() interface{} {
	return dictionary.NewSystemServiceUpdateDictionaryDetailResult()
}

func deleteDictionaryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceDeleteDictionaryDetailArgs)
	realResult := result.(*dictionary.SystemServiceDeleteDictionaryDetailResult)
	success, err := handler.(dictionary.SystemService).DeleteDictionaryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDeleteDictionaryDetailArgs() interface{} {
	return dictionary.NewSystemServiceDeleteDictionaryDetailArgs()
}

func newSystemServiceDeleteDictionaryDetailResult() interface{} {
	return dictionary.NewSystemServiceDeleteDictionaryDetailResult()
}

func detailByDictionaryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dictionary.SystemServiceDetailByDictionaryListArgs)
	realResult := result.(*dictionary.SystemServiceDetailByDictionaryListResult)
	success, err := handler.(dictionary.SystemService).DetailByDictionaryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSystemServiceDetailByDictionaryListArgs() interface{} {
	return dictionary.NewSystemServiceDetailByDictionaryListArgs()
}

func newSystemServiceDetailByDictionaryListResult() interface{} {
	return dictionary.NewSystemServiceDetailByDictionaryListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateDictionary(ctx context.Context, req *dictionary.DictionaryInfo) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceCreateDictionaryArgs
	_args.Req = req
	var _result dictionary.SystemServiceCreateDictionaryResult
	if err = p.c.Call(ctx, "CreateDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictionary(ctx context.Context, req *dictionary.DictionaryInfo) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceUpdateDictionaryArgs
	_args.Req = req
	var _result dictionary.SystemServiceUpdateDictionaryResult
	if err = p.c.Call(ctx, "UpdateDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictionary(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceDeleteDictionaryArgs
	_args.Req = req
	var _result dictionary.SystemServiceDeleteDictionaryResult
	if err = p.c.Call(ctx, "DeleteDictionary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DictionaryList(ctx context.Context, req *dictionary.DictListReq) (r *dictionary.DictionaryListResp, err error) {
	var _args dictionary.SystemServiceDictionaryListArgs
	_args.Req = req
	var _result dictionary.SystemServiceDictionaryListResult
	if err = p.c.Call(ctx, "DictionaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDictionaryDetail(ctx context.Context, req *dictionary.DictionaryDetail) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceCreateDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.SystemServiceCreateDictionaryDetailResult
	if err = p.c.Call(ctx, "CreateDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDictionaryDetail(ctx context.Context, req *dictionary.DictionaryDetail) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceUpdateDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.SystemServiceUpdateDictionaryDetailResult
	if err = p.c.Call(ctx, "UpdateDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDictionaryDetail(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args dictionary.SystemServiceDeleteDictionaryDetailArgs
	_args.Req = req
	var _result dictionary.SystemServiceDeleteDictionaryDetailResult
	if err = p.c.Call(ctx, "DeleteDictionaryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DetailByDictionaryList(ctx context.Context, req *dictionary.DetailListReq) (r *dictionary.DetailByDictionaryListResp, err error) {
	var _args dictionary.SystemServiceDetailByDictionaryListArgs
	_args.Req = req
	var _result dictionary.SystemServiceDetailByDictionaryListResult
	if err = p.c.Call(ctx, "DetailByDictionaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package roleservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	role "rpc_gen/kitex_gen/system/role"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateRole": kitex.NewMethodInfo(
		createRoleHandler,
		newRoleServiceCreateRoleArgs,
		newRoleServiceCreateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newRoleServiceUpdateRoleArgs,
		newRoleServiceUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteRole": kitex.NewMethodInfo(
		deleteRoleHandler,
		newRoleServiceDeleteRoleArgs,
		newRoleServiceDeleteRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleByID": kitex.NewMethodInfo(
		roleByIDHandler,
		newRoleServiceRoleByIDArgs,
		newRoleServiceRoleByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleList": kitex.NewMethodInfo(
		roleListHandler,
		newRoleServiceRoleListArgs,
		newRoleServiceRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateRoleStatus": kitex.NewMethodInfo(
		updateRoleStatusHandler,
		newRoleServiceUpdateRoleStatusArgs,
		newRoleServiceUpdateRoleStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	roleServiceServiceInfo                = NewServiceInfo()
	roleServiceServiceInfoForClient       = NewServiceInfoForClient()
	roleServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return roleServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return roleServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return roleServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RoleService"
	handlerType := (*role.RoleService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "role",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceCreateRoleArgs)
	realResult := result.(*role.RoleServiceCreateRoleResult)
	success, err := handler.(role.RoleService).CreateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceCreateRoleArgs() interface{} {
	return role.NewRoleServiceCreateRoleArgs()
}

func newRoleServiceCreateRoleResult() interface{} {
	return role.NewRoleServiceCreateRoleResult()
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceUpdateRoleArgs)
	realResult := result.(*role.RoleServiceUpdateRoleResult)
	success, err := handler.(role.RoleService).UpdateRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceUpdateRoleArgs() interface{} {
	return role.NewRoleServiceUpdateRoleArgs()
}

func newRoleServiceUpdateRoleResult() interface{} {
	return role.NewRoleServiceUpdateRoleResult()
}

func deleteRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceDeleteRoleArgs)
	realResult := result.(*role.RoleServiceDeleteRoleResult)
	success, err := handler.(role.RoleService).DeleteRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceDeleteRoleArgs() interface{} {
	return role.NewRoleServiceDeleteRoleArgs()
}

func newRoleServiceDeleteRoleResult() interface{} {
	return role.NewRoleServiceDeleteRoleResult()
}

func roleByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceRoleByIDArgs)
	realResult := result.(*role.RoleServiceRoleByIDResult)
	success, err := handler.(role.RoleService).RoleByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceRoleByIDArgs() interface{} {
	return role.NewRoleServiceRoleByIDArgs()
}

func newRoleServiceRoleByIDResult() interface{} {
	return role.NewRoleServiceRoleByIDResult()
}

func roleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceRoleListArgs)
	realResult := result.(*role.RoleServiceRoleListResult)
	success, err := handler.(role.RoleService).RoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceRoleListArgs() interface{} {
	return role.NewRoleServiceRoleListArgs()
}

func newRoleServiceRoleListResult() interface{} {
	return role.NewRoleServiceRoleListResult()
}

func updateRoleStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.RoleServiceUpdateRoleStatusArgs)
	realResult := result.(*role.RoleServiceUpdateRoleStatusResult)
	success, err := handler.(role.RoleService).UpdateRoleStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRoleServiceUpdateRoleStatusArgs() interface{} {
	return role.NewRoleServiceUpdateRoleStatusArgs()
}

func newRoleServiceUpdateRoleStatusResult() interface{} {
	return role.NewRoleServiceUpdateRoleStatusResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateRole(ctx context.Context, req *role.RoleInfo) (r *base.NilResponse, err error) {
	var _args role.RoleServiceCreateRoleArgs
	_args.Req = req
	var _result role.RoleServiceCreateRoleResult
	if err = p.c.Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, req *role.RoleInfo) (r *base.NilResponse, err error) {
	var _args role.RoleServiceUpdateRoleArgs
	_args.Req = req
	var _result role.RoleServiceUpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRole(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args role.RoleServiceDeleteRoleArgs
	_args.Req = req
	var _result role.RoleServiceDeleteRoleResult
	if err = p.c.Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleByID(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args role.RoleServiceRoleByIDArgs
	_args.Req = req
	var _result role.RoleServiceRoleByIDResult
	if err = p.c.Call(ctx, "RoleByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleList(ctx context.Context, req *base.PageInfoReq) (r *base.NilResponse, err error) {
	var _args role.RoleServiceRoleListArgs
	_args.Req = req
	var _result role.RoleServiceRoleListResult
	if err = p.c.Call(ctx, "RoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRoleStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args role.RoleServiceUpdateRoleStatusArgs
	_args.Req = req
	var _result role.RoleServiceUpdateRoleStatusResult
	if err = p.c.Call(ctx, "UpdateRoleStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

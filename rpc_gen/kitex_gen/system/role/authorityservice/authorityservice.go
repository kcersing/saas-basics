// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authorityservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	role "rpc_gen/kitex_gen/system/role"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateAuthority": kitex.NewMethodInfo(
		createAuthorityHandler,
		newAuthorityServiceCreateAuthorityArgs,
		newAuthorityServiceCreateAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApiAuthority": kitex.NewMethodInfo(
		updateApiAuthorityHandler,
		newAuthorityServiceUpdateApiAuthorityArgs,
		newAuthorityServiceUpdateApiAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiAuthority": kitex.NewMethodInfo(
		apiAuthorityHandler,
		newAuthorityServiceApiAuthorityArgs,
		newAuthorityServiceApiAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateMenuAuthority": kitex.NewMethodInfo(
		createMenuAuthorityHandler,
		newAuthorityServiceCreateMenuAuthorityArgs,
		newAuthorityServiceCreateMenuAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateMenuAuthority": kitex.NewMethodInfo(
		updateMenuAuthorityHandler,
		newAuthorityServiceUpdateMenuAuthorityArgs,
		newAuthorityServiceUpdateMenuAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MenuAuthority": kitex.NewMethodInfo(
		menuAuthorityHandler,
		newAuthorityServiceMenuAuthorityArgs,
		newAuthorityServiceMenuAuthorityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	authorityServiceServiceInfo                = NewServiceInfo()
	authorityServiceServiceInfoForClient       = NewServiceInfoForClient()
	authorityServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authorityServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authorityServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authorityServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "authorityService"
	handlerType := (*role.AuthorityService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "role",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceCreateAuthorityArgs)
	realResult := result.(*role.AuthorityServiceCreateAuthorityResult)
	success, err := handler.(role.AuthorityService).CreateAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceCreateAuthorityArgs() interface{} {
	return role.NewAuthorityServiceCreateAuthorityArgs()
}

func newAuthorityServiceCreateAuthorityResult() interface{} {
	return role.NewAuthorityServiceCreateAuthorityResult()
}

func updateApiAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceUpdateApiAuthorityArgs)
	realResult := result.(*role.AuthorityServiceUpdateApiAuthorityResult)
	success, err := handler.(role.AuthorityService).UpdateApiAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceUpdateApiAuthorityArgs() interface{} {
	return role.NewAuthorityServiceUpdateApiAuthorityArgs()
}

func newAuthorityServiceUpdateApiAuthorityResult() interface{} {
	return role.NewAuthorityServiceUpdateApiAuthorityResult()
}

func apiAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceApiAuthorityArgs)
	realResult := result.(*role.AuthorityServiceApiAuthorityResult)
	success, err := handler.(role.AuthorityService).ApiAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceApiAuthorityArgs() interface{} {
	return role.NewAuthorityServiceApiAuthorityArgs()
}

func newAuthorityServiceApiAuthorityResult() interface{} {
	return role.NewAuthorityServiceApiAuthorityResult()
}

func createMenuAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceCreateMenuAuthorityArgs)
	realResult := result.(*role.AuthorityServiceCreateMenuAuthorityResult)
	success, err := handler.(role.AuthorityService).CreateMenuAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceCreateMenuAuthorityArgs() interface{} {
	return role.NewAuthorityServiceCreateMenuAuthorityArgs()
}

func newAuthorityServiceCreateMenuAuthorityResult() interface{} {
	return role.NewAuthorityServiceCreateMenuAuthorityResult()
}

func updateMenuAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceUpdateMenuAuthorityArgs)
	realResult := result.(*role.AuthorityServiceUpdateMenuAuthorityResult)
	success, err := handler.(role.AuthorityService).UpdateMenuAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceUpdateMenuAuthorityArgs() interface{} {
	return role.NewAuthorityServiceUpdateMenuAuthorityArgs()
}

func newAuthorityServiceUpdateMenuAuthorityResult() interface{} {
	return role.NewAuthorityServiceUpdateMenuAuthorityResult()
}

func menuAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.AuthorityServiceMenuAuthorityArgs)
	realResult := result.(*role.AuthorityServiceMenuAuthorityResult)
	success, err := handler.(role.AuthorityService).MenuAuthority(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthorityServiceMenuAuthorityArgs() interface{} {
	return role.NewAuthorityServiceMenuAuthorityArgs()
}

func newAuthorityServiceMenuAuthorityResult() interface{} {
	return role.NewAuthorityServiceMenuAuthorityResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateAuthority(ctx context.Context, req *role.CreateOrUpdateApiAuthorityReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceCreateAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceCreateAuthorityResult
	if err = p.c.Call(ctx, "CreateAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApiAuthority(ctx context.Context, req *role.CreateOrUpdateApiAuthorityReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceUpdateApiAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceUpdateApiAuthorityResult
	if err = p.c.Call(ctx, "UpdateApiAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiAuthority(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceApiAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceApiAuthorityResult
	if err = p.c.Call(ctx, "ApiAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMenuAuthority(ctx context.Context, req *role.MenuAuthorityInfoReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceCreateMenuAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceCreateMenuAuthorityResult
	if err = p.c.Call(ctx, "CreateMenuAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMenuAuthority(ctx context.Context, req *role.MenuAuthorityInfoReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceUpdateMenuAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceUpdateMenuAuthorityResult
	if err = p.c.Call(ctx, "UpdateMenuAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MenuAuthority(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args role.AuthorityServiceMenuAuthorityArgs
	_args.Req = req
	var _result role.AuthorityServiceMenuAuthorityResult
	if err = p.c.Call(ctx, "MenuAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

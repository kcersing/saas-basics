// Code generated by Kitex v0.9.1. DO NOT EDIT.

package apisservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	role "rpc_gen/kitex_gen/system/role"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApi": kitex.NewMethodInfo(
		createApiHandler,
		newApisServiceCreateApiArgs,
		newApisServiceCreateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApi": kitex.NewMethodInfo(
		updateApiHandler,
		newApisServiceUpdateApiArgs,
		newApisServiceUpdateApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteApi": kitex.NewMethodInfo(
		deleteApiHandler,
		newApisServiceDeleteApiArgs,
		newApisServiceDeleteApiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiList": kitex.NewMethodInfo(
		apiListHandler,
		newApisServiceApiListArgs,
		newApisServiceApiListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ApiTree": kitex.NewMethodInfo(
		apiTreeHandler,
		newApisServiceApiTreeArgs,
		newApisServiceApiTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	apisServiceServiceInfo                = NewServiceInfo()
	apisServiceServiceInfoForClient       = NewServiceInfoForClient()
	apisServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return apisServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return apisServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return apisServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ApisService"
	handlerType := (*role.ApisService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "role",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.ApisServiceCreateApiArgs)
	realResult := result.(*role.ApisServiceCreateApiResult)
	success, err := handler.(role.ApisService).CreateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApisServiceCreateApiArgs() interface{} {
	return role.NewApisServiceCreateApiArgs()
}

func newApisServiceCreateApiResult() interface{} {
	return role.NewApisServiceCreateApiResult()
}

func updateApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.ApisServiceUpdateApiArgs)
	realResult := result.(*role.ApisServiceUpdateApiResult)
	success, err := handler.(role.ApisService).UpdateApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApisServiceUpdateApiArgs() interface{} {
	return role.NewApisServiceUpdateApiArgs()
}

func newApisServiceUpdateApiResult() interface{} {
	return role.NewApisServiceUpdateApiResult()
}

func deleteApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.ApisServiceDeleteApiArgs)
	realResult := result.(*role.ApisServiceDeleteApiResult)
	success, err := handler.(role.ApisService).DeleteApi(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApisServiceDeleteApiArgs() interface{} {
	return role.NewApisServiceDeleteApiArgs()
}

func newApisServiceDeleteApiResult() interface{} {
	return role.NewApisServiceDeleteApiResult()
}

func apiListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.ApisServiceApiListArgs)
	realResult := result.(*role.ApisServiceApiListResult)
	success, err := handler.(role.ApisService).ApiList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApisServiceApiListArgs() interface{} {
	return role.NewApisServiceApiListArgs()
}

func newApisServiceApiListResult() interface{} {
	return role.NewApisServiceApiListResult()
}

func apiTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*role.ApisServiceApiTreeArgs)
	realResult := result.(*role.ApisServiceApiTreeResult)
	success, err := handler.(role.ApisService).ApiTree(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApisServiceApiTreeArgs() interface{} {
	return role.NewApisServiceApiTreeArgs()
}

func newApisServiceApiTreeResult() interface{} {
	return role.NewApisServiceApiTreeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApi(ctx context.Context, req *role.ApiInfo) (r *base.NilResponse, err error) {
	var _args role.ApisServiceCreateApiArgs
	_args.Req = req
	var _result role.ApisServiceCreateApiResult
	if err = p.c.Call(ctx, "CreateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApi(ctx context.Context, req *role.ApiInfo) (r *base.NilResponse, err error) {
	var _args role.ApisServiceUpdateApiArgs
	_args.Req = req
	var _result role.ApisServiceUpdateApiResult
	if err = p.c.Call(ctx, "UpdateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteApi(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args role.ApisServiceDeleteApiArgs
	_args.Req = req
	var _result role.ApisServiceDeleteApiResult
	if err = p.c.Call(ctx, "DeleteApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiList(ctx context.Context, req *role.ApiPageReq) (r *base.NilResponse, err error) {
	var _args role.ApisServiceApiListArgs
	_args.Req = req
	var _result role.ApisServiceApiListResult
	if err = p.c.Call(ctx, "ApiList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApiTree(ctx context.Context, req *role.ApiPageReq) (r *base.NilResponse, err error) {
	var _args role.ApisServiceApiTreeArgs
	_args.Req = req
	var _result role.ApisServiceApiTreeResult
	if err = p.c.Call(ctx, "ApiTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

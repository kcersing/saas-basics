// Code generated by Kitex v0.9.1. DO NOT EDIT.

package scheduleservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	base "rpc_gen/kitex_gen/base"
	schedule "rpc_gen/kitex_gen/schedule"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateSchedule(ctx context.Context, req *schedule.CreateOrUpdateScheduleReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	UpdateSchedule(ctx context.Context, req *schedule.CreateOrUpdateScheduleReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	UpdateStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	ScheduleListResp(ctx context.Context, req *schedule.ScheduleListReq, callOptions ...callopt.Option) (r *schedule.ScheduleListResp, err error)
	ScheduleDateList(ctx context.Context, req *schedule.ScheduleListReq, callOptions ...callopt.Option) (r *schedule.ScheduleListResp, err error)
	ScheduleInfo(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *schedule.ScheduleInfo, err error)
	MemberList(ctx context.Context, req *schedule.ScheduleMemberListReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberListResp, err error)
	CreateMember(ctx context.Context, req *schedule.CreateMemberReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberListResp, err error)
	UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
	SearchSubscribeByMember(ctx context.Context, req *schedule.SearchSubscribeByMemberReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberInfo, err error)
	CoachList(ctx context.Context, req *schedule.ScheduleCoachListReq, callOptions ...callopt.Option) (r *schedule.ScheduleCoachListResp, err error)
	UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kScheduleServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kScheduleServiceClient struct {
	*kClient
}

func (p *kScheduleServiceClient) CreateSchedule(ctx context.Context, req *schedule.CreateOrUpdateScheduleReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSchedule(ctx, req)
}

func (p *kScheduleServiceClient) UpdateSchedule(ctx context.Context, req *schedule.CreateOrUpdateScheduleReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSchedule(ctx, req)
}

func (p *kScheduleServiceClient) UpdateStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateStatus(ctx, req)
}

func (p *kScheduleServiceClient) ScheduleListResp(ctx context.Context, req *schedule.ScheduleListReq, callOptions ...callopt.Option) (r *schedule.ScheduleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScheduleListResp(ctx, req)
}

func (p *kScheduleServiceClient) ScheduleDateList(ctx context.Context, req *schedule.ScheduleListReq, callOptions ...callopt.Option) (r *schedule.ScheduleListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScheduleDateList(ctx, req)
}

func (p *kScheduleServiceClient) ScheduleInfo(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *schedule.ScheduleInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScheduleInfo(ctx, req)
}

func (p *kScheduleServiceClient) MemberList(ctx context.Context, req *schedule.ScheduleMemberListReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MemberList(ctx, req)
}

func (p *kScheduleServiceClient) CreateMember(ctx context.Context, req *schedule.CreateMemberReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateMember(ctx, req)
}

func (p *kScheduleServiceClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateMemberStatus(ctx, req)
}

func (p *kScheduleServiceClient) SearchSubscribeByMember(ctx context.Context, req *schedule.SearchSubscribeByMemberReq, callOptions ...callopt.Option) (r *schedule.ScheduleMemberInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchSubscribeByMember(ctx, req)
}

func (p *kScheduleServiceClient) CoachList(ctx context.Context, req *schedule.ScheduleCoachListReq, callOptions ...callopt.Option) (r *schedule.ScheduleCoachListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CoachList(ctx, req)
}

func (p *kScheduleServiceClient) UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq, callOptions ...callopt.Option) (r *base.NilResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCoachStatus(ctx, req)
}

// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package schedule

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc_gen/kitex_gen/base"
	"strings"
)

type CreateOrUpdateScheduleReq struct {
	Id                      *int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Type                    *string  `thrift:"type,2,optional" frugal:"2,optional,string" json:"type,omitempty"`
	PropertyId              *int64   `thrift:"propertyId,3,optional" frugal:"3,optional,i64" json:"propertyId,omitempty"`
	VenueId                 *int64   `thrift:"venueId,4,optional" frugal:"4,optional,i64" json:"venueId,omitempty"`
	PlaceId                 *int64   `thrift:"placeId,5,optional" frugal:"5,optional,i64" json:"placeId,omitempty"`
	Num                     *int64   `thrift:"num,6,optional" frugal:"6,optional,i64" json:"num,omitempty"`
	StartTime               *string  `thrift:"startTime,7,optional" frugal:"7,optional,string" json:"startTime,omitempty"`
	Price                   *float64 `thrift:"price,8,optional" frugal:"8,optional,double" json:"price,omitempty"`
	Remark                  *string  `thrift:"remark,9,optional" frugal:"9,optional,string" json:"remark,omitempty"`
	CoachId                 *int64   `thrift:"coachId,10,optional" frugal:"10,optional,i64" json:"coachId,omitempty"`
	MemberId                *int64   `thrift:"memberId,11,optional" frugal:"11,optional,i64" json:"memberId,omitempty"`
	MemberProductId         *int64   `thrift:"memberProductId,12,optional" frugal:"12,optional,i64" json:"memberProductId,omitempty"`
	MemberProductPropertyId *int64   `thrift:"memberProductPropertyId,13,optional" frugal:"13,optional,i64" json:"memberProductPropertyId,omitempty"`
}

func NewCreateOrUpdateScheduleReq() *CreateOrUpdateScheduleReq {
	return &CreateOrUpdateScheduleReq{}
}

func (p *CreateOrUpdateScheduleReq) InitDefault() {
}

var CreateOrUpdateScheduleReq_Id_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetId() (v int64) {
	if !p.IsSetId() {
		return CreateOrUpdateScheduleReq_Id_DEFAULT
	}
	return *p.Id
}

var CreateOrUpdateScheduleReq_Type_DEFAULT string

func (p *CreateOrUpdateScheduleReq) GetType() (v string) {
	if !p.IsSetType() {
		return CreateOrUpdateScheduleReq_Type_DEFAULT
	}
	return *p.Type
}

var CreateOrUpdateScheduleReq_PropertyId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return CreateOrUpdateScheduleReq_PropertyId_DEFAULT
	}
	return *p.PropertyId
}

var CreateOrUpdateScheduleReq_VenueId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return CreateOrUpdateScheduleReq_VenueId_DEFAULT
	}
	return *p.VenueId
}

var CreateOrUpdateScheduleReq_PlaceId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetPlaceId() (v int64) {
	if !p.IsSetPlaceId() {
		return CreateOrUpdateScheduleReq_PlaceId_DEFAULT
	}
	return *p.PlaceId
}

var CreateOrUpdateScheduleReq_Num_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetNum() (v int64) {
	if !p.IsSetNum() {
		return CreateOrUpdateScheduleReq_Num_DEFAULT
	}
	return *p.Num
}

var CreateOrUpdateScheduleReq_StartTime_DEFAULT string

func (p *CreateOrUpdateScheduleReq) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return CreateOrUpdateScheduleReq_StartTime_DEFAULT
	}
	return *p.StartTime
}

var CreateOrUpdateScheduleReq_Price_DEFAULT float64

func (p *CreateOrUpdateScheduleReq) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return CreateOrUpdateScheduleReq_Price_DEFAULT
	}
	return *p.Price
}

var CreateOrUpdateScheduleReq_Remark_DEFAULT string

func (p *CreateOrUpdateScheduleReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateOrUpdateScheduleReq_Remark_DEFAULT
	}
	return *p.Remark
}

var CreateOrUpdateScheduleReq_CoachId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetCoachId() (v int64) {
	if !p.IsSetCoachId() {
		return CreateOrUpdateScheduleReq_CoachId_DEFAULT
	}
	return *p.CoachId
}

var CreateOrUpdateScheduleReq_MemberId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return CreateOrUpdateScheduleReq_MemberId_DEFAULT
	}
	return *p.MemberId
}

var CreateOrUpdateScheduleReq_MemberProductId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return CreateOrUpdateScheduleReq_MemberProductId_DEFAULT
	}
	return *p.MemberProductId
}

var CreateOrUpdateScheduleReq_MemberProductPropertyId_DEFAULT int64

func (p *CreateOrUpdateScheduleReq) GetMemberProductPropertyId() (v int64) {
	if !p.IsSetMemberProductPropertyId() {
		return CreateOrUpdateScheduleReq_MemberProductPropertyId_DEFAULT
	}
	return *p.MemberProductPropertyId
}
func (p *CreateOrUpdateScheduleReq) SetId(val *int64) {
	p.Id = val
}
func (p *CreateOrUpdateScheduleReq) SetType(val *string) {
	p.Type = val
}
func (p *CreateOrUpdateScheduleReq) SetPropertyId(val *int64) {
	p.PropertyId = val
}
func (p *CreateOrUpdateScheduleReq) SetVenueId(val *int64) {
	p.VenueId = val
}
func (p *CreateOrUpdateScheduleReq) SetPlaceId(val *int64) {
	p.PlaceId = val
}
func (p *CreateOrUpdateScheduleReq) SetNum(val *int64) {
	p.Num = val
}
func (p *CreateOrUpdateScheduleReq) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *CreateOrUpdateScheduleReq) SetPrice(val *float64) {
	p.Price = val
}
func (p *CreateOrUpdateScheduleReq) SetRemark(val *string) {
	p.Remark = val
}
func (p *CreateOrUpdateScheduleReq) SetCoachId(val *int64) {
	p.CoachId = val
}
func (p *CreateOrUpdateScheduleReq) SetMemberId(val *int64) {
	p.MemberId = val
}
func (p *CreateOrUpdateScheduleReq) SetMemberProductId(val *int64) {
	p.MemberProductId = val
}
func (p *CreateOrUpdateScheduleReq) SetMemberProductPropertyId(val *int64) {
	p.MemberProductPropertyId = val
}

var fieldIDToName_CreateOrUpdateScheduleReq = map[int16]string{
	1:  "id",
	2:  "type",
	3:  "propertyId",
	4:  "venueId",
	5:  "placeId",
	6:  "num",
	7:  "startTime",
	8:  "price",
	9:  "remark",
	10: "coachId",
	11: "memberId",
	12: "memberProductId",
	13: "memberProductPropertyId",
}

func (p *CreateOrUpdateScheduleReq) IsSetId() bool {
	return p.Id != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetType() bool {
	return p.Type != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetPropertyId() bool {
	return p.PropertyId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetPlaceId() bool {
	return p.PlaceId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetNum() bool {
	return p.Num != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetPrice() bool {
	return p.Price != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetCoachId() bool {
	return p.CoachId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberProductId() bool {
	return p.MemberProductId != nil
}

func (p *CreateOrUpdateScheduleReq) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != nil
}

func (p *CreateOrUpdateScheduleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateScheduleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PropertyId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlaceId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Num = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Price = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CoachId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberProductId = _field
	return nil
}
func (p *CreateOrUpdateScheduleReq) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberProductPropertyId = _field
	return nil
}

func (p *CreateOrUpdateScheduleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateScheduleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceId() {
		if err = oprot.WriteFieldBegin("placeId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PlaceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err = oprot.WriteFieldBegin("num", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Num); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("startTime", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoachId() {
		if err = oprot.WriteFieldBegin("coachId", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CoachId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberProductPropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateOrUpdateScheduleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateScheduleReq(%+v)", *p)

}

func (p *CreateOrUpdateScheduleReq) DeepEqual(ano *CreateOrUpdateScheduleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.PropertyId) {
		return false
	}
	if !p.Field4DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field5DeepEqual(ano.PlaceId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Num) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.Price) {
		return false
	}
	if !p.Field9DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field10DeepEqual(ano.CoachId) {
		return false
	}
	if !p.Field11DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field12DeepEqual(ano.MemberProductId) {
		return false
	}
	if !p.Field13DeepEqual(ano.MemberProductPropertyId) {
		return false
	}
	return true
}

func (p *CreateOrUpdateScheduleReq) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field2DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field3DeepEqual(src *int64) bool {

	if p.PropertyId == src {
		return true
	} else if p.PropertyId == nil || src == nil {
		return false
	}
	if *p.PropertyId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field4DeepEqual(src *int64) bool {

	if p.VenueId == src {
		return true
	} else if p.VenueId == nil || src == nil {
		return false
	}
	if *p.VenueId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field5DeepEqual(src *int64) bool {

	if p.PlaceId == src {
		return true
	} else if p.PlaceId == nil || src == nil {
		return false
	}
	if *p.PlaceId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field6DeepEqual(src *int64) bool {

	if p.Num == src {
		return true
	} else if p.Num == nil || src == nil {
		return false
	}
	if *p.Num != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field7DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field8DeepEqual(src *float64) bool {

	if p.Price == src {
		return true
	} else if p.Price == nil || src == nil {
		return false
	}
	if *p.Price != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field9DeepEqual(src *string) bool {

	if p.Remark == src {
		return true
	} else if p.Remark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Remark, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field10DeepEqual(src *int64) bool {

	if p.CoachId == src {
		return true
	} else if p.CoachId == nil || src == nil {
		return false
	}
	if *p.CoachId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field11DeepEqual(src *int64) bool {

	if p.MemberId == src {
		return true
	} else if p.MemberId == nil || src == nil {
		return false
	}
	if *p.MemberId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field12DeepEqual(src *int64) bool {

	if p.MemberProductId == src {
		return true
	} else if p.MemberProductId == nil || src == nil {
		return false
	}
	if *p.MemberProductId != *src {
		return false
	}
	return true
}
func (p *CreateOrUpdateScheduleReq) Field13DeepEqual(src *int64) bool {

	if p.MemberProductPropertyId == src {
		return true
	} else if p.MemberProductPropertyId == nil || src == nil {
		return false
	}
	if *p.MemberProductPropertyId != *src {
		return false
	}
	return true
}

type ScheduleListReq struct {
	Page      *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize  *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Member    *int64  `thrift:"member,3,optional" frugal:"3,optional,i64" json:"member,omitempty"`
	Coach     []int64 `thrift:"coach,4,optional" frugal:"4,optional,list<i64>" json:"coach,omitempty"`
	Product   []int64 `thrift:"product,5,optional" frugal:"5,optional,list<i64>" json:"product,omitempty"`
	VenueId   *int64  `thrift:"venueId,6,optional" frugal:"6,optional,i64" json:"venueId,omitempty"`
	Property  []int64 `thrift:"property,7,optional" frugal:"7,optional,list<i64>" json:"property,omitempty"`
	StartTime *string `thrift:"startTime,8,optional" frugal:"8,optional,string" json:"startTime,omitempty"`
	Type      *string `thrift:"type,9,optional" frugal:"9,optional,string" json:"type,omitempty"`
	Place     *string `thrift:"place,10,optional" frugal:"10,optional,string" json:"place,omitempty"`
	EndTime   *string `thrift:"endTime,11,optional" frugal:"11,optional,string" json:"endTime,omitempty"`
}

func NewScheduleListReq() *ScheduleListReq {
	return &ScheduleListReq{}
}

func (p *ScheduleListReq) InitDefault() {
}

var ScheduleListReq_Page_DEFAULT int64

func (p *ScheduleListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleListReq_Page_DEFAULT
	}
	return *p.Page
}

var ScheduleListReq_PageSize_DEFAULT int64

func (p *ScheduleListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ScheduleListReq_Member_DEFAULT int64

func (p *ScheduleListReq) GetMember() (v int64) {
	if !p.IsSetMember() {
		return ScheduleListReq_Member_DEFAULT
	}
	return *p.Member
}

var ScheduleListReq_Coach_DEFAULT []int64

func (p *ScheduleListReq) GetCoach() (v []int64) {
	if !p.IsSetCoach() {
		return ScheduleListReq_Coach_DEFAULT
	}
	return p.Coach
}

var ScheduleListReq_Product_DEFAULT []int64

func (p *ScheduleListReq) GetProduct() (v []int64) {
	if !p.IsSetProduct() {
		return ScheduleListReq_Product_DEFAULT
	}
	return p.Product
}

var ScheduleListReq_VenueId_DEFAULT int64

func (p *ScheduleListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return ScheduleListReq_VenueId_DEFAULT
	}
	return *p.VenueId
}

var ScheduleListReq_Property_DEFAULT []int64

func (p *ScheduleListReq) GetProperty() (v []int64) {
	if !p.IsSetProperty() {
		return ScheduleListReq_Property_DEFAULT
	}
	return p.Property
}

var ScheduleListReq_StartTime_DEFAULT string

func (p *ScheduleListReq) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return ScheduleListReq_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ScheduleListReq_Type_DEFAULT string

func (p *ScheduleListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleListReq_Type_DEFAULT
	}
	return *p.Type
}

var ScheduleListReq_Place_DEFAULT string

func (p *ScheduleListReq) GetPlace() (v string) {
	if !p.IsSetPlace() {
		return ScheduleListReq_Place_DEFAULT
	}
	return *p.Place
}

var ScheduleListReq_EndTime_DEFAULT string

func (p *ScheduleListReq) GetEndTime() (v string) {
	if !p.IsSetEndTime() {
		return ScheduleListReq_EndTime_DEFAULT
	}
	return *p.EndTime
}
func (p *ScheduleListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *ScheduleListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *ScheduleListReq) SetMember(val *int64) {
	p.Member = val
}
func (p *ScheduleListReq) SetCoach(val []int64) {
	p.Coach = val
}
func (p *ScheduleListReq) SetProduct(val []int64) {
	p.Product = val
}
func (p *ScheduleListReq) SetVenueId(val *int64) {
	p.VenueId = val
}
func (p *ScheduleListReq) SetProperty(val []int64) {
	p.Property = val
}
func (p *ScheduleListReq) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *ScheduleListReq) SetType(val *string) {
	p.Type = val
}
func (p *ScheduleListReq) SetPlace(val *string) {
	p.Place = val
}
func (p *ScheduleListReq) SetEndTime(val *string) {
	p.EndTime = val
}

var fieldIDToName_ScheduleListReq = map[int16]string{
	1:  "page",
	2:  "pageSize",
	3:  "member",
	4:  "coach",
	5:  "product",
	6:  "venueId",
	7:  "property",
	8:  "startTime",
	9:  "type",
	10: "place",
	11: "endTime",
}

func (p *ScheduleListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *ScheduleListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ScheduleListReq) IsSetMember() bool {
	return p.Member != nil
}

func (p *ScheduleListReq) IsSetCoach() bool {
	return p.Coach != nil
}

func (p *ScheduleListReq) IsSetProduct() bool {
	return p.Product != nil
}

func (p *ScheduleListReq) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *ScheduleListReq) IsSetProperty() bool {
	return p.Property != nil
}

func (p *ScheduleListReq) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ScheduleListReq) IsSetType() bool {
	return p.Type != nil
}

func (p *ScheduleListReq) IsSetPlace() bool {
	return p.Place != nil
}

func (p *ScheduleListReq) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *ScheduleListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ScheduleListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Member = _field
	return nil
}
func (p *ScheduleListReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Coach = _field
	return nil
}
func (p *ScheduleListReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Product = _field
	return nil
}
func (p *ScheduleListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleListReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Property = _field
	return nil
}
func (p *ScheduleListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *ScheduleListReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleListReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Place = _field
	return nil
}
func (p *ScheduleListReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndTime = _field
	return nil
}

func (p *ScheduleListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMember() {
		if err = oprot.WriteFieldBegin("member", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Member); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoach() {
		if err = oprot.WriteFieldBegin("coach", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Coach)); err != nil {
			return err
		}
		for _, v := range p.Coach {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProduct() {
		if err = oprot.WriteFieldBegin("product", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Product)); err != nil {
			return err
		}
		for _, v := range p.Product {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperty() {
		if err = oprot.WriteFieldBegin("property", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Property)); err != nil {
			return err
		}
		for _, v := range p.Property {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("startTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleListReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleListReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlace() {
		if err = oprot.WriteFieldBegin("place", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Place); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleListReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("endTime", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleListReq(%+v)", *p)

}

func (p *ScheduleListReq) DeepEqual(ano *ScheduleListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Member) {
		return false
	}
	if !p.Field4DeepEqual(ano.Coach) {
		return false
	}
	if !p.Field5DeepEqual(ano.Product) {
		return false
	}
	if !p.Field6DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Property) {
		return false
	}
	if !p.Field8DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.Type) {
		return false
	}
	if !p.Field10DeepEqual(ano.Place) {
		return false
	}
	if !p.Field11DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *ScheduleListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field3DeepEqual(src *int64) bool {

	if p.Member == src {
		return true
	} else if p.Member == nil || src == nil {
		return false
	}
	if *p.Member != *src {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field4DeepEqual(src []int64) bool {

	if len(p.Coach) != len(src) {
		return false
	}
	for i, v := range p.Coach {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ScheduleListReq) Field5DeepEqual(src []int64) bool {

	if len(p.Product) != len(src) {
		return false
	}
	for i, v := range p.Product {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ScheduleListReq) Field6DeepEqual(src *int64) bool {

	if p.VenueId == src {
		return true
	} else if p.VenueId == nil || src == nil {
		return false
	}
	if *p.VenueId != *src {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field7DeepEqual(src []int64) bool {

	if len(p.Property) != len(src) {
		return false
	}
	for i, v := range p.Property {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ScheduleListReq) Field8DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field9DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field10DeepEqual(src *string) bool {

	if p.Place == src {
		return true
	} else if p.Place == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Place, *src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleListReq) Field11DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}

type ScheduleMemberListReq struct {
	Page     *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Member   *int64  `thrift:"member,3,optional" frugal:"3,optional,i64" json:"member,omitempty"`
	Schedule *int64  `thrift:"schedule,4,optional" frugal:"4,optional,i64" json:"schedule,omitempty"`
	Type     *string `thrift:"type,5,optional" frugal:"5,optional,string" json:"type,omitempty"`
}

func NewScheduleMemberListReq() *ScheduleMemberListReq {
	return &ScheduleMemberListReq{}
}

func (p *ScheduleMemberListReq) InitDefault() {
}

var ScheduleMemberListReq_Page_DEFAULT int64

func (p *ScheduleMemberListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleMemberListReq_Page_DEFAULT
	}
	return *p.Page
}

var ScheduleMemberListReq_PageSize_DEFAULT int64

func (p *ScheduleMemberListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleMemberListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ScheduleMemberListReq_Member_DEFAULT int64

func (p *ScheduleMemberListReq) GetMember() (v int64) {
	if !p.IsSetMember() {
		return ScheduleMemberListReq_Member_DEFAULT
	}
	return *p.Member
}

var ScheduleMemberListReq_Schedule_DEFAULT int64

func (p *ScheduleMemberListReq) GetSchedule() (v int64) {
	if !p.IsSetSchedule() {
		return ScheduleMemberListReq_Schedule_DEFAULT
	}
	return *p.Schedule
}

var ScheduleMemberListReq_Type_DEFAULT string

func (p *ScheduleMemberListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleMemberListReq_Type_DEFAULT
	}
	return *p.Type
}
func (p *ScheduleMemberListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *ScheduleMemberListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *ScheduleMemberListReq) SetMember(val *int64) {
	p.Member = val
}
func (p *ScheduleMemberListReq) SetSchedule(val *int64) {
	p.Schedule = val
}
func (p *ScheduleMemberListReq) SetType(val *string) {
	p.Type = val
}

var fieldIDToName_ScheduleMemberListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "member",
	4: "schedule",
	5: "type",
}

func (p *ScheduleMemberListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *ScheduleMemberListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ScheduleMemberListReq) IsSetMember() bool {
	return p.Member != nil
}

func (p *ScheduleMemberListReq) IsSetSchedule() bool {
	return p.Schedule != nil
}

func (p *ScheduleMemberListReq) IsSetType() bool {
	return p.Type != nil
}

func (p *ScheduleMemberListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleMemberListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleMemberListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Member = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Schedule = _field
	return nil
}
func (p *ScheduleMemberListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *ScheduleMemberListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleMemberListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMember() {
		if err = oprot.WriteFieldBegin("member", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Member); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedule() {
		if err = oprot.WriteFieldBegin("schedule", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Schedule); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleMemberListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleMemberListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleMemberListReq(%+v)", *p)

}

func (p *ScheduleMemberListReq) DeepEqual(ano *ScheduleMemberListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Member) {
		return false
	}
	if !p.Field4DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field5DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *ScheduleMemberListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *ScheduleMemberListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ScheduleMemberListReq) Field3DeepEqual(src *int64) bool {

	if p.Member == src {
		return true
	} else if p.Member == nil || src == nil {
		return false
	}
	if *p.Member != *src {
		return false
	}
	return true
}
func (p *ScheduleMemberListReq) Field4DeepEqual(src *int64) bool {

	if p.Schedule == src {
		return true
	} else if p.Schedule == nil || src == nil {
		return false
	}
	if *p.Schedule != *src {
		return false
	}
	return true
}
func (p *ScheduleMemberListReq) Field5DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type ScheduleCoachListReq struct {
	Page     *int64  `thrift:"page,1,optional" frugal:"1,optional,i64" json:"page,omitempty"`
	PageSize *int64  `thrift:"pageSize,2,optional" frugal:"2,optional,i64" json:"pageSize,omitempty"`
	Coach    *int64  `thrift:"coach,3,optional" frugal:"3,optional,i64" json:"coach,omitempty"`
	Schedule *int64  `thrift:"schedule,4,optional" frugal:"4,optional,i64" json:"schedule,omitempty"`
	Type     *string `thrift:"type,5,optional" frugal:"5,optional,string" json:"type,omitempty"`
}

func NewScheduleCoachListReq() *ScheduleCoachListReq {
	return &ScheduleCoachListReq{}
}

func (p *ScheduleCoachListReq) InitDefault() {
}

var ScheduleCoachListReq_Page_DEFAULT int64

func (p *ScheduleCoachListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ScheduleCoachListReq_Page_DEFAULT
	}
	return *p.Page
}

var ScheduleCoachListReq_PageSize_DEFAULT int64

func (p *ScheduleCoachListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ScheduleCoachListReq_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ScheduleCoachListReq_Coach_DEFAULT int64

func (p *ScheduleCoachListReq) GetCoach() (v int64) {
	if !p.IsSetCoach() {
		return ScheduleCoachListReq_Coach_DEFAULT
	}
	return *p.Coach
}

var ScheduleCoachListReq_Schedule_DEFAULT int64

func (p *ScheduleCoachListReq) GetSchedule() (v int64) {
	if !p.IsSetSchedule() {
		return ScheduleCoachListReq_Schedule_DEFAULT
	}
	return *p.Schedule
}

var ScheduleCoachListReq_Type_DEFAULT string

func (p *ScheduleCoachListReq) GetType() (v string) {
	if !p.IsSetType() {
		return ScheduleCoachListReq_Type_DEFAULT
	}
	return *p.Type
}
func (p *ScheduleCoachListReq) SetPage(val *int64) {
	p.Page = val
}
func (p *ScheduleCoachListReq) SetPageSize(val *int64) {
	p.PageSize = val
}
func (p *ScheduleCoachListReq) SetCoach(val *int64) {
	p.Coach = val
}
func (p *ScheduleCoachListReq) SetSchedule(val *int64) {
	p.Schedule = val
}
func (p *ScheduleCoachListReq) SetType(val *string) {
	p.Type = val
}

var fieldIDToName_ScheduleCoachListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "coach",
	4: "schedule",
	5: "type",
}

func (p *ScheduleCoachListReq) IsSetPage() bool {
	return p.Page != nil
}

func (p *ScheduleCoachListReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ScheduleCoachListReq) IsSetCoach() bool {
	return p.Coach != nil
}

func (p *ScheduleCoachListReq) IsSetSchedule() bool {
	return p.Schedule != nil
}

func (p *ScheduleCoachListReq) IsSetType() bool {
	return p.Type != nil
}

func (p *ScheduleCoachListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleCoachListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleCoachListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Page = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Coach = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Schedule = _field
	return nil
}
func (p *ScheduleCoachListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *ScheduleCoachListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleCoachListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoach() {
		if err = oprot.WriteFieldBegin("coach", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Coach); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedule() {
		if err = oprot.WriteFieldBegin("schedule", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Schedule); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleCoachListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleCoachListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleCoachListReq(%+v)", *p)

}

func (p *ScheduleCoachListReq) DeepEqual(ano *ScheduleCoachListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Coach) {
		return false
	}
	if !p.Field4DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field5DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *ScheduleCoachListReq) Field1DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *ScheduleCoachListReq) Field2DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ScheduleCoachListReq) Field3DeepEqual(src *int64) bool {

	if p.Coach == src {
		return true
	} else if p.Coach == nil || src == nil {
		return false
	}
	if *p.Coach != *src {
		return false
	}
	return true
}
func (p *ScheduleCoachListReq) Field4DeepEqual(src *int64) bool {

	if p.Schedule == src {
		return true
	} else if p.Schedule == nil || src == nil {
		return false
	}
	if *p.Schedule != *src {
		return false
	}
	return true
}
func (p *ScheduleCoachListReq) Field5DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type SearchSubscribeByMemberReq struct {
	PropertyId *int64  `thrift:"propertyId,1,optional" frugal:"1,optional,i64" json:"propertyId,omitempty"`
	Mobile     *string `thrift:"mobile,2,optional" frugal:"2,optional,string" json:"mobile,omitempty"`
	Venue      *int64  `thrift:"venue,3,optional" frugal:"3,optional,i64" json:"venue,omitempty"`
	Type       *string `thrift:"Type,4,optional" frugal:"4,optional,string" json:"Type,omitempty"`
}

func NewSearchSubscribeByMemberReq() *SearchSubscribeByMemberReq {
	return &SearchSubscribeByMemberReq{}
}

func (p *SearchSubscribeByMemberReq) InitDefault() {
}

var SearchSubscribeByMemberReq_PropertyId_DEFAULT int64

func (p *SearchSubscribeByMemberReq) GetPropertyId() (v int64) {
	if !p.IsSetPropertyId() {
		return SearchSubscribeByMemberReq_PropertyId_DEFAULT
	}
	return *p.PropertyId
}

var SearchSubscribeByMemberReq_Mobile_DEFAULT string

func (p *SearchSubscribeByMemberReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return SearchSubscribeByMemberReq_Mobile_DEFAULT
	}
	return *p.Mobile
}

var SearchSubscribeByMemberReq_Venue_DEFAULT int64

func (p *SearchSubscribeByMemberReq) GetVenue() (v int64) {
	if !p.IsSetVenue() {
		return SearchSubscribeByMemberReq_Venue_DEFAULT
	}
	return *p.Venue
}

var SearchSubscribeByMemberReq_Type_DEFAULT string

func (p *SearchSubscribeByMemberReq) GetType() (v string) {
	if !p.IsSetType() {
		return SearchSubscribeByMemberReq_Type_DEFAULT
	}
	return *p.Type
}
func (p *SearchSubscribeByMemberReq) SetPropertyId(val *int64) {
	p.PropertyId = val
}
func (p *SearchSubscribeByMemberReq) SetMobile(val *string) {
	p.Mobile = val
}
func (p *SearchSubscribeByMemberReq) SetVenue(val *int64) {
	p.Venue = val
}
func (p *SearchSubscribeByMemberReq) SetType(val *string) {
	p.Type = val
}

var fieldIDToName_SearchSubscribeByMemberReq = map[int16]string{
	1: "propertyId",
	2: "mobile",
	3: "venue",
	4: "Type",
}

func (p *SearchSubscribeByMemberReq) IsSetPropertyId() bool {
	return p.PropertyId != nil
}

func (p *SearchSubscribeByMemberReq) IsSetMobile() bool {
	return p.Mobile != nil
}

func (p *SearchSubscribeByMemberReq) IsSetVenue() bool {
	return p.Venue != nil
}

func (p *SearchSubscribeByMemberReq) IsSetType() bool {
	return p.Type != nil
}

func (p *SearchSubscribeByMemberReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchSubscribeByMemberReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PropertyId = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Mobile = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Venue = _field
	return nil
}
func (p *SearchSubscribeByMemberReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *SearchSubscribeByMemberReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMemberReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPropertyId() {
		if err = oprot.WriteFieldBegin("propertyId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PropertyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenue() {
		if err = oprot.WriteFieldBegin("venue", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Venue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SearchSubscribeByMemberReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchSubscribeByMemberReq(%+v)", *p)

}

func (p *SearchSubscribeByMemberReq) DeepEqual(ano *SearchSubscribeByMemberReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PropertyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.Venue) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *SearchSubscribeByMemberReq) Field1DeepEqual(src *int64) bool {

	if p.PropertyId == src {
		return true
	} else if p.PropertyId == nil || src == nil {
		return false
	}
	if *p.PropertyId != *src {
		return false
	}
	return true
}
func (p *SearchSubscribeByMemberReq) Field2DeepEqual(src *string) bool {

	if p.Mobile == src {
		return true
	} else if p.Mobile == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mobile, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchSubscribeByMemberReq) Field3DeepEqual(src *int64) bool {

	if p.Venue == src {
		return true
	} else if p.Venue == nil || src == nil {
		return false
	}
	if *p.Venue != *src {
		return false
	}
	return true
}
func (p *SearchSubscribeByMemberReq) Field4DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type CreateMemberReq struct {
	MemberProductPropertyId []int64 `thrift:"memberProductPropertyId,1,optional" frugal:"1,optional,list<i64>" json:"memberProductPropertyId,omitempty"`
	Schedule                *int64  `thrift:"schedule,2,optional" frugal:"2,optional,i64" json:"schedule,omitempty"`
	Remark                  *string `thrift:"remark,3,optional" frugal:"3,optional,string" json:"remark,omitempty"`
}

func NewCreateMemberReq() *CreateMemberReq {
	return &CreateMemberReq{}
}

func (p *CreateMemberReq) InitDefault() {
}

var CreateMemberReq_MemberProductPropertyId_DEFAULT []int64

func (p *CreateMemberReq) GetMemberProductPropertyId() (v []int64) {
	if !p.IsSetMemberProductPropertyId() {
		return CreateMemberReq_MemberProductPropertyId_DEFAULT
	}
	return p.MemberProductPropertyId
}

var CreateMemberReq_Schedule_DEFAULT int64

func (p *CreateMemberReq) GetSchedule() (v int64) {
	if !p.IsSetSchedule() {
		return CreateMemberReq_Schedule_DEFAULT
	}
	return *p.Schedule
}

var CreateMemberReq_Remark_DEFAULT string

func (p *CreateMemberReq) GetRemark() (v string) {
	if !p.IsSetRemark() {
		return CreateMemberReq_Remark_DEFAULT
	}
	return *p.Remark
}
func (p *CreateMemberReq) SetMemberProductPropertyId(val []int64) {
	p.MemberProductPropertyId = val
}
func (p *CreateMemberReq) SetSchedule(val *int64) {
	p.Schedule = val
}
func (p *CreateMemberReq) SetRemark(val *string) {
	p.Remark = val
}

var fieldIDToName_CreateMemberReq = map[int16]string{
	1: "memberProductPropertyId",
	2: "schedule",
	3: "remark",
}

func (p *CreateMemberReq) IsSetMemberProductPropertyId() bool {
	return p.MemberProductPropertyId != nil
}

func (p *CreateMemberReq) IsSetSchedule() bool {
	return p.Schedule != nil
}

func (p *CreateMemberReq) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *CreateMemberReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateMemberReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateMemberReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberProductPropertyId = _field
	return nil
}
func (p *CreateMemberReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Schedule = _field
	return nil
}
func (p *CreateMemberReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remark = _field
	return nil
}

func (p *CreateMemberReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMemberReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateMemberReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductPropertyId() {
		if err = oprot.WriteFieldBegin("memberProductPropertyId", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberProductPropertyId)); err != nil {
			return err
		}
		for _, v := range p.MemberProductPropertyId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateMemberReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedule() {
		if err = oprot.WriteFieldBegin("schedule", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Schedule); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateMemberReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err = oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Remark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateMemberReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateMemberReq(%+v)", *p)

}

func (p *CreateMemberReq) DeepEqual(ano *CreateMemberReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MemberProductPropertyId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field3DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *CreateMemberReq) Field1DeepEqual(src []int64) bool {

	if len(p.MemberProductPropertyId) != len(src) {
		return false
	}
	for i, v := range p.MemberProductPropertyId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreateMemberReq) Field2DeepEqual(src *int64) bool {

	if p.Schedule == src {
		return true
	} else if p.Schedule == nil || src == nil {
		return false
	}
	if *p.Schedule != *src {
		return false
	}
	return true
}
func (p *CreateMemberReq) Field3DeepEqual(src *string) bool {

	if p.Remark == src {
		return true
	} else if p.Remark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Remark, *src) != 0 {
		return false
	}
	return true
}

type ScheduleInfo struct {
	Id                        int64                 `thrift:"Id,1" frugal:"1,default,i64" json:"Id"`
	Type                      string                `thrift:"Type,2" frugal:"2,default,string" json:"Type"`
	PropertyId                int64                 `thrift:"PropertyId,3" frugal:"3,default,i64" json:"PropertyId"`
	VenueId                   int64                 `thrift:"VenueId,4" frugal:"4,default,i64" json:"VenueId"`
	PlaceID                   int64                 `thrift:"PlaceID,5" frugal:"5,default,i64" json:"PlaceID"`
	Num                       int64                 `thrift:"Num,6" frugal:"6,default,i64" json:"Num"`
	NumSurplus                int64                 `thrift:"NumSurplus,7" frugal:"7,default,i64" json:"NumSurplus"`
	Date                      string                `thrift:"Date,8" frugal:"8,default,string" json:"Date"`
	StartTime                 string                `thrift:"StartTime,9" frugal:"9,default,string" json:"StartTime"`
	EndTime                   string                `thrift:"EndTime,10" frugal:"10,default,string" json:"EndTime"`
	Price                     float64               `thrift:"Price,11" frugal:"11,default,double" json:"Price"`
	Name                      string                `thrift:"Name,12" frugal:"12,default,string" json:"Name"`
	Remark                    string                `thrift:"Remark,13" frugal:"13,default,string" json:"Remark"`
	CoachID                   int64                 `thrift:"CoachID,14" frugal:"14,default,i64" json:"CoachID"`
	MemberID                  int64                 `thrift:"MemberID,15" frugal:"15,default,i64" json:"MemberID"`
	MemberProductID           int64                 `thrift:"MemberProductID,16" frugal:"16,default,i64" json:"MemberProductID"`
	MemberProductPropertyID   int64                 `thrift:"MemberProductPropertyID,17" frugal:"17,default,i64" json:"MemberProductPropertyID"`
	Status                    int64                 `thrift:"Status,18" frugal:"18,default,i64" json:"Status"`
	PropertyName              string                `thrift:"PropertyName,19" frugal:"19,default,string" json:"PropertyName"`
	VenueName                 string                `thrift:"VenueName,20" frugal:"20,default,string" json:"VenueName"`
	PlaceName                 string                `thrift:"PlaceName,21" frugal:"21,default,string" json:"PlaceName"`
	CoachName                 string                `thrift:"CoachName,22" frugal:"22,default,string" json:"CoachName"`
	MemberName                string                `thrift:"MemberName,23" frugal:"23,default,string" json:"MemberName"`
	MemberProductName         string                `thrift:"MemberProductName,24" frugal:"24,default,string" json:"MemberProductName"`
	MemberProductPropertyName string                `thrift:"MemberProductPropertyName,25" frugal:"25,default,string" json:"MemberProductPropertyName"`
	ScheduleMember            []*ScheduleMemberInfo `thrift:"ScheduleMember,26" frugal:"26,default,list<ScheduleMemberInfo>" json:"ScheduleMember"`
	ScheduleCoach             []*ScheduleCoachInfo  `thrift:"ScheduleCoach,27" frugal:"27,default,list<ScheduleCoachInfo>" json:"ScheduleCoach"`
	CreatedAt                 string                `thrift:"CreatedAt,28" frugal:"28,default,string" json:"CreatedAt"`
	UpdatedAt                 string                `thrift:"UpdatedAt,29" frugal:"29,default,string" json:"UpdatedAt"`
}

func NewScheduleInfo() *ScheduleInfo {
	return &ScheduleInfo{}
}

func (p *ScheduleInfo) InitDefault() {
}

func (p *ScheduleInfo) GetId() (v int64) {
	return p.Id
}

func (p *ScheduleInfo) GetType() (v string) {
	return p.Type
}

func (p *ScheduleInfo) GetPropertyId() (v int64) {
	return p.PropertyId
}

func (p *ScheduleInfo) GetVenueId() (v int64) {
	return p.VenueId
}

func (p *ScheduleInfo) GetPlaceID() (v int64) {
	return p.PlaceID
}

func (p *ScheduleInfo) GetNum() (v int64) {
	return p.Num
}

func (p *ScheduleInfo) GetNumSurplus() (v int64) {
	return p.NumSurplus
}

func (p *ScheduleInfo) GetDate() (v string) {
	return p.Date
}

func (p *ScheduleInfo) GetStartTime() (v string) {
	return p.StartTime
}

func (p *ScheduleInfo) GetEndTime() (v string) {
	return p.EndTime
}

func (p *ScheduleInfo) GetPrice() (v float64) {
	return p.Price
}

func (p *ScheduleInfo) GetName() (v string) {
	return p.Name
}

func (p *ScheduleInfo) GetRemark() (v string) {
	return p.Remark
}

func (p *ScheduleInfo) GetCoachID() (v int64) {
	return p.CoachID
}

func (p *ScheduleInfo) GetMemberID() (v int64) {
	return p.MemberID
}

func (p *ScheduleInfo) GetMemberProductID() (v int64) {
	return p.MemberProductID
}

func (p *ScheduleInfo) GetMemberProductPropertyID() (v int64) {
	return p.MemberProductPropertyID
}

func (p *ScheduleInfo) GetStatus() (v int64) {
	return p.Status
}

func (p *ScheduleInfo) GetPropertyName() (v string) {
	return p.PropertyName
}

func (p *ScheduleInfo) GetVenueName() (v string) {
	return p.VenueName
}

func (p *ScheduleInfo) GetPlaceName() (v string) {
	return p.PlaceName
}

func (p *ScheduleInfo) GetCoachName() (v string) {
	return p.CoachName
}

func (p *ScheduleInfo) GetMemberName() (v string) {
	return p.MemberName
}

func (p *ScheduleInfo) GetMemberProductName() (v string) {
	return p.MemberProductName
}

func (p *ScheduleInfo) GetMemberProductPropertyName() (v string) {
	return p.MemberProductPropertyName
}

func (p *ScheduleInfo) GetScheduleMember() (v []*ScheduleMemberInfo) {
	return p.ScheduleMember
}

func (p *ScheduleInfo) GetScheduleCoach() (v []*ScheduleCoachInfo) {
	return p.ScheduleCoach
}

func (p *ScheduleInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ScheduleInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}
func (p *ScheduleInfo) SetId(val int64) {
	p.Id = val
}
func (p *ScheduleInfo) SetType(val string) {
	p.Type = val
}
func (p *ScheduleInfo) SetPropertyId(val int64) {
	p.PropertyId = val
}
func (p *ScheduleInfo) SetVenueId(val int64) {
	p.VenueId = val
}
func (p *ScheduleInfo) SetPlaceID(val int64) {
	p.PlaceID = val
}
func (p *ScheduleInfo) SetNum(val int64) {
	p.Num = val
}
func (p *ScheduleInfo) SetNumSurplus(val int64) {
	p.NumSurplus = val
}
func (p *ScheduleInfo) SetDate(val string) {
	p.Date = val
}
func (p *ScheduleInfo) SetStartTime(val string) {
	p.StartTime = val
}
func (p *ScheduleInfo) SetEndTime(val string) {
	p.EndTime = val
}
func (p *ScheduleInfo) SetPrice(val float64) {
	p.Price = val
}
func (p *ScheduleInfo) SetName(val string) {
	p.Name = val
}
func (p *ScheduleInfo) SetRemark(val string) {
	p.Remark = val
}
func (p *ScheduleInfo) SetCoachID(val int64) {
	p.CoachID = val
}
func (p *ScheduleInfo) SetMemberID(val int64) {
	p.MemberID = val
}
func (p *ScheduleInfo) SetMemberProductID(val int64) {
	p.MemberProductID = val
}
func (p *ScheduleInfo) SetMemberProductPropertyID(val int64) {
	p.MemberProductPropertyID = val
}
func (p *ScheduleInfo) SetStatus(val int64) {
	p.Status = val
}
func (p *ScheduleInfo) SetPropertyName(val string) {
	p.PropertyName = val
}
func (p *ScheduleInfo) SetVenueName(val string) {
	p.VenueName = val
}
func (p *ScheduleInfo) SetPlaceName(val string) {
	p.PlaceName = val
}
func (p *ScheduleInfo) SetCoachName(val string) {
	p.CoachName = val
}
func (p *ScheduleInfo) SetMemberName(val string) {
	p.MemberName = val
}
func (p *ScheduleInfo) SetMemberProductName(val string) {
	p.MemberProductName = val
}
func (p *ScheduleInfo) SetMemberProductPropertyName(val string) {
	p.MemberProductPropertyName = val
}
func (p *ScheduleInfo) SetScheduleMember(val []*ScheduleMemberInfo) {
	p.ScheduleMember = val
}
func (p *ScheduleInfo) SetScheduleCoach(val []*ScheduleCoachInfo) {
	p.ScheduleCoach = val
}
func (p *ScheduleInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ScheduleInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}

var fieldIDToName_ScheduleInfo = map[int16]string{
	1:  "Id",
	2:  "Type",
	3:  "PropertyId",
	4:  "VenueId",
	5:  "PlaceID",
	6:  "Num",
	7:  "NumSurplus",
	8:  "Date",
	9:  "StartTime",
	10: "EndTime",
	11: "Price",
	12: "Name",
	13: "Remark",
	14: "CoachID",
	15: "MemberID",
	16: "MemberProductID",
	17: "MemberProductPropertyID",
	18: "Status",
	19: "PropertyName",
	20: "VenueName",
	21: "PlaceName",
	22: "CoachName",
	23: "MemberName",
	24: "MemberProductName",
	25: "MemberProductPropertyName",
	26: "ScheduleMember",
	27: "ScheduleCoach",
	28: "CreatedAt",
	29: "UpdatedAt",
}

func (p *ScheduleInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ScheduleInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceID = _field
	return nil
}
func (p *ScheduleInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Num = _field
	return nil
}
func (p *ScheduleInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumSurplus = _field
	return nil
}
func (p *ScheduleInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Date = _field
	return nil
}
func (p *ScheduleInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ScheduleInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *ScheduleInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *ScheduleInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ScheduleInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ScheduleInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachID = _field
	return nil
}
func (p *ScheduleInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberID = _field
	return nil
}
func (p *ScheduleInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductID = _field
	return nil
}
func (p *ScheduleInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyID = _field
	return nil
}
func (p *ScheduleInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyName = _field
	return nil
}
func (p *ScheduleInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceName = _field
	return nil
}
func (p *ScheduleInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachName = _field
	return nil
}
func (p *ScheduleInfo) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *ScheduleInfo) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *ScheduleInfo) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}
func (p *ScheduleInfo) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleMemberInfo, 0, size)
	values := make([]ScheduleMemberInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ScheduleMember = _field
	return nil
}
func (p *ScheduleInfo) ReadField27(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleCoachInfo, 0, size)
	values := make([]ScheduleCoachInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ScheduleCoach = _field
	return nil
}
func (p *ScheduleInfo) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleInfo) ReadField29(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *ScheduleInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PropertyId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VenueId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PlaceID", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PlaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Num", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NumSurplus", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NumSurplus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Date", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Date); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Price", thrift.DOUBLE, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Price); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Remark", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CoachID", thrift.I64, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CoachID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ScheduleInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberID", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ScheduleInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductID", thrift.I64, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ScheduleInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyID", thrift.I64, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductPropertyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ScheduleInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I64, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PropertyName", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueName", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VenueName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ScheduleInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PlaceName", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ScheduleInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CoachName", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CoachName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ScheduleInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberName", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ScheduleInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductName", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ScheduleInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyName", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ScheduleInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleMember", thrift.LIST, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ScheduleMember)); err != nil {
		return err
	}
	for _, v := range p.ScheduleMember {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ScheduleInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleCoach", thrift.LIST, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ScheduleCoach)); err != nil {
		return err
	}
	for _, v := range p.ScheduleCoach {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *ScheduleInfo) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *ScheduleInfo) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *ScheduleInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleInfo(%+v)", *p)

}

func (p *ScheduleInfo) DeepEqual(ano *ScheduleInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.PropertyId) {
		return false
	}
	if !p.Field4DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field5DeepEqual(ano.PlaceID) {
		return false
	}
	if !p.Field6DeepEqual(ano.Num) {
		return false
	}
	if !p.Field7DeepEqual(ano.NumSurplus) {
		return false
	}
	if !p.Field8DeepEqual(ano.Date) {
		return false
	}
	if !p.Field9DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.Price) {
		return false
	}
	if !p.Field12DeepEqual(ano.Name) {
		return false
	}
	if !p.Field13DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field14DeepEqual(ano.CoachID) {
		return false
	}
	if !p.Field15DeepEqual(ano.MemberID) {
		return false
	}
	if !p.Field16DeepEqual(ano.MemberProductID) {
		return false
	}
	if !p.Field17DeepEqual(ano.MemberProductPropertyID) {
		return false
	}
	if !p.Field18DeepEqual(ano.Status) {
		return false
	}
	if !p.Field19DeepEqual(ano.PropertyName) {
		return false
	}
	if !p.Field20DeepEqual(ano.VenueName) {
		return false
	}
	if !p.Field21DeepEqual(ano.PlaceName) {
		return false
	}
	if !p.Field22DeepEqual(ano.CoachName) {
		return false
	}
	if !p.Field23DeepEqual(ano.MemberName) {
		return false
	}
	if !p.Field24DeepEqual(ano.MemberProductName) {
		return false
	}
	if !p.Field25DeepEqual(ano.MemberProductPropertyName) {
		return false
	}
	if !p.Field26DeepEqual(ano.ScheduleMember) {
		return false
	}
	if !p.Field27DeepEqual(ano.ScheduleCoach) {
		return false
	}
	if !p.Field28DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field29DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *ScheduleInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field3DeepEqual(src int64) bool {

	if p.PropertyId != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field4DeepEqual(src int64) bool {

	if p.VenueId != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field5DeepEqual(src int64) bool {

	if p.PlaceID != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field6DeepEqual(src int64) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field7DeepEqual(src int64) bool {

	if p.NumSurplus != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Date, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field11DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field14DeepEqual(src int64) bool {

	if p.CoachID != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field15DeepEqual(src int64) bool {

	if p.MemberID != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field16DeepEqual(src int64) bool {

	if p.MemberProductID != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field17DeepEqual(src int64) bool {

	if p.MemberProductPropertyID != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field18DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field19DeepEqual(src string) bool {

	if strings.Compare(p.PropertyName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field20DeepEqual(src string) bool {

	if strings.Compare(p.VenueName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field21DeepEqual(src string) bool {

	if strings.Compare(p.PlaceName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field22DeepEqual(src string) bool {

	if strings.Compare(p.CoachName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field23DeepEqual(src string) bool {

	if strings.Compare(p.MemberName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field24DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field25DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductPropertyName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field26DeepEqual(src []*ScheduleMemberInfo) bool {

	if len(p.ScheduleMember) != len(src) {
		return false
	}
	for i, v := range p.ScheduleMember {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ScheduleInfo) Field27DeepEqual(src []*ScheduleCoachInfo) bool {

	if len(p.ScheduleCoach) != len(src) {
		return false
	}
	for i, v := range p.ScheduleCoach {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ScheduleInfo) Field28DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleInfo) Field29DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}

type ScheduleMemberInfo struct {
	Id                        int64  `thrift:"Id,1" frugal:"1,default,i64" json:"Id"`
	MemberId                  int64  `thrift:"MemberId,2" frugal:"2,default,i64" json:"MemberId"`
	VenueId                   int64  `thrift:"VenueId,3" frugal:"3,default,i64" json:"VenueId"`
	PlaceID                   int64  `thrift:"PlaceID,4" frugal:"4,default,i64" json:"PlaceID"`
	PropertyId                int64  `thrift:"PropertyId,5" frugal:"5,default,i64" json:"PropertyId"`
	ScheduleId                int64  `thrift:"ScheduleId,6" frugal:"6,default,i64" json:"ScheduleId"`
	ScheduleName              string `thrift:"ScheduleName,7" frugal:"7,default,string" json:"ScheduleName"`
	Type                      string `thrift:"Type,8" frugal:"8,default,string" json:"Type"`
	CreatedAt                 string `thrift:"CreatedAt,9" frugal:"9,default,string" json:"CreatedAt"`
	UpdatedAt                 string `thrift:"UpdatedAt,10" frugal:"10,default,string" json:"UpdatedAt"`
	StartTime                 string `thrift:"StartTime,11" frugal:"11,default,string" json:"StartTime"`
	EndTime                   string `thrift:"EndTime,12" frugal:"12,default,string" json:"EndTime"`
	SignStartTime             string `thrift:"SignStartTime,13" frugal:"13,default,string" json:"SignStartTime"`
	SignEndTime               string `thrift:"SignEndTime,14" frugal:"14,default,string" json:"SignEndTime"`
	Status                    int64  `thrift:"Status,15" frugal:"15,default,i64" json:"Status"`
	MemberProductId           int64  `thrift:"MemberProductId,16" frugal:"16,default,i64" json:"MemberProductId"`
	MemberProductItemId       int64  `thrift:"MemberProductItemId,17" frugal:"17,default,i64" json:"MemberProductItemId"`
	VenueName                 string `thrift:"VenueName,18" frugal:"18,default,string" json:"VenueName"`
	MemberName                string `thrift:"MemberName,19" frugal:"19,default,string" json:"MemberName"`
	MemberProductName         string `thrift:"MemberProductName,20" frugal:"20,default,string" json:"MemberProductName"`
	MemberProductPropertyName string `thrift:"MemberProductPropertyName,21" frugal:"21,default,string" json:"MemberProductPropertyName"`
	Gender                    string `thrift:"Gender,22" frugal:"22,default,string" json:"Gender"`
	Birthday                  int64  `thrift:"Birthday,23" frugal:"23,default,i64" json:"Birthday"`
	Mobile                    string `thrift:"Mobile,24" frugal:"24,default,string" json:"Mobile"`
}

func NewScheduleMemberInfo() *ScheduleMemberInfo {
	return &ScheduleMemberInfo{}
}

func (p *ScheduleMemberInfo) InitDefault() {
}

func (p *ScheduleMemberInfo) GetId() (v int64) {
	return p.Id
}

func (p *ScheduleMemberInfo) GetMemberId() (v int64) {
	return p.MemberId
}

func (p *ScheduleMemberInfo) GetVenueId() (v int64) {
	return p.VenueId
}

func (p *ScheduleMemberInfo) GetPlaceID() (v int64) {
	return p.PlaceID
}

func (p *ScheduleMemberInfo) GetPropertyId() (v int64) {
	return p.PropertyId
}

func (p *ScheduleMemberInfo) GetScheduleId() (v int64) {
	return p.ScheduleId
}

func (p *ScheduleMemberInfo) GetScheduleName() (v string) {
	return p.ScheduleName
}

func (p *ScheduleMemberInfo) GetType() (v string) {
	return p.Type
}

func (p *ScheduleMemberInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ScheduleMemberInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *ScheduleMemberInfo) GetStartTime() (v string) {
	return p.StartTime
}

func (p *ScheduleMemberInfo) GetEndTime() (v string) {
	return p.EndTime
}

func (p *ScheduleMemberInfo) GetSignStartTime() (v string) {
	return p.SignStartTime
}

func (p *ScheduleMemberInfo) GetSignEndTime() (v string) {
	return p.SignEndTime
}

func (p *ScheduleMemberInfo) GetStatus() (v int64) {
	return p.Status
}

func (p *ScheduleMemberInfo) GetMemberProductId() (v int64) {
	return p.MemberProductId
}

func (p *ScheduleMemberInfo) GetMemberProductItemId() (v int64) {
	return p.MemberProductItemId
}

func (p *ScheduleMemberInfo) GetVenueName() (v string) {
	return p.VenueName
}

func (p *ScheduleMemberInfo) GetMemberName() (v string) {
	return p.MemberName
}

func (p *ScheduleMemberInfo) GetMemberProductName() (v string) {
	return p.MemberProductName
}

func (p *ScheduleMemberInfo) GetMemberProductPropertyName() (v string) {
	return p.MemberProductPropertyName
}

func (p *ScheduleMemberInfo) GetGender() (v string) {
	return p.Gender
}

func (p *ScheduleMemberInfo) GetBirthday() (v int64) {
	return p.Birthday
}

func (p *ScheduleMemberInfo) GetMobile() (v string) {
	return p.Mobile
}
func (p *ScheduleMemberInfo) SetId(val int64) {
	p.Id = val
}
func (p *ScheduleMemberInfo) SetMemberId(val int64) {
	p.MemberId = val
}
func (p *ScheduleMemberInfo) SetVenueId(val int64) {
	p.VenueId = val
}
func (p *ScheduleMemberInfo) SetPlaceID(val int64) {
	p.PlaceID = val
}
func (p *ScheduleMemberInfo) SetPropertyId(val int64) {
	p.PropertyId = val
}
func (p *ScheduleMemberInfo) SetScheduleId(val int64) {
	p.ScheduleId = val
}
func (p *ScheduleMemberInfo) SetScheduleName(val string) {
	p.ScheduleName = val
}
func (p *ScheduleMemberInfo) SetType(val string) {
	p.Type = val
}
func (p *ScheduleMemberInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ScheduleMemberInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *ScheduleMemberInfo) SetStartTime(val string) {
	p.StartTime = val
}
func (p *ScheduleMemberInfo) SetEndTime(val string) {
	p.EndTime = val
}
func (p *ScheduleMemberInfo) SetSignStartTime(val string) {
	p.SignStartTime = val
}
func (p *ScheduleMemberInfo) SetSignEndTime(val string) {
	p.SignEndTime = val
}
func (p *ScheduleMemberInfo) SetStatus(val int64) {
	p.Status = val
}
func (p *ScheduleMemberInfo) SetMemberProductId(val int64) {
	p.MemberProductId = val
}
func (p *ScheduleMemberInfo) SetMemberProductItemId(val int64) {
	p.MemberProductItemId = val
}
func (p *ScheduleMemberInfo) SetVenueName(val string) {
	p.VenueName = val
}
func (p *ScheduleMemberInfo) SetMemberName(val string) {
	p.MemberName = val
}
func (p *ScheduleMemberInfo) SetMemberProductName(val string) {
	p.MemberProductName = val
}
func (p *ScheduleMemberInfo) SetMemberProductPropertyName(val string) {
	p.MemberProductPropertyName = val
}
func (p *ScheduleMemberInfo) SetGender(val string) {
	p.Gender = val
}
func (p *ScheduleMemberInfo) SetBirthday(val int64) {
	p.Birthday = val
}
func (p *ScheduleMemberInfo) SetMobile(val string) {
	p.Mobile = val
}

var fieldIDToName_ScheduleMemberInfo = map[int16]string{
	1:  "Id",
	2:  "MemberId",
	3:  "VenueId",
	4:  "PlaceID",
	5:  "PropertyId",
	6:  "ScheduleId",
	7:  "ScheduleName",
	8:  "Type",
	9:  "CreatedAt",
	10: "UpdatedAt",
	11: "StartTime",
	12: "EndTime",
	13: "SignStartTime",
	14: "SignEndTime",
	15: "Status",
	16: "MemberProductId",
	17: "MemberProductItemId",
	18: "VenueName",
	19: "MemberName",
	20: "MemberProductName",
	21: "MemberProductPropertyName",
	22: "Gender",
	23: "Birthday",
	24: "Mobile",
}

func (p *ScheduleMemberInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleMemberInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleMemberInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceID = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartTime = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndTime = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductItemId = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField23(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *ScheduleMemberInfo) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}

func (p *ScheduleMemberInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleMemberInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VenueId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PlaceID", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PlaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PropertyId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ScheduleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SignStartTime", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SignStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SignEndTime", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SignEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductId", thrift.I64, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductItemId", thrift.I64, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductItemId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueName", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VenueName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberName", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductName", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyName", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Gender", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Gender); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Birthday", thrift.I64, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Birthday); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ScheduleMemberInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ScheduleMemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleMemberInfo(%+v)", *p)

}

func (p *ScheduleMemberInfo) DeepEqual(ano *ScheduleMemberInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.MemberId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PlaceID) {
		return false
	}
	if !p.Field5DeepEqual(ano.PropertyId) {
		return false
	}
	if !p.Field6DeepEqual(ano.ScheduleId) {
		return false
	}
	if !p.Field7DeepEqual(ano.ScheduleName) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field13DeepEqual(ano.SignStartTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.SignEndTime) {
		return false
	}
	if !p.Field15DeepEqual(ano.Status) {
		return false
	}
	if !p.Field16DeepEqual(ano.MemberProductId) {
		return false
	}
	if !p.Field17DeepEqual(ano.MemberProductItemId) {
		return false
	}
	if !p.Field18DeepEqual(ano.VenueName) {
		return false
	}
	if !p.Field19DeepEqual(ano.MemberName) {
		return false
	}
	if !p.Field20DeepEqual(ano.MemberProductName) {
		return false
	}
	if !p.Field21DeepEqual(ano.MemberProductPropertyName) {
		return false
	}
	if !p.Field22DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field23DeepEqual(ano.Birthday) {
		return false
	}
	if !p.Field24DeepEqual(ano.Mobile) {
		return false
	}
	return true
}

func (p *ScheduleMemberInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field2DeepEqual(src int64) bool {

	if p.MemberId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field3DeepEqual(src int64) bool {

	if p.VenueId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field4DeepEqual(src int64) bool {

	if p.PlaceID != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field5DeepEqual(src int64) bool {

	if p.PropertyId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field6DeepEqual(src int64) bool {

	if p.ScheduleId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.SignStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field14DeepEqual(src string) bool {

	if strings.Compare(p.SignEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field15DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field16DeepEqual(src int64) bool {

	if p.MemberProductId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field17DeepEqual(src int64) bool {

	if p.MemberProductItemId != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field18DeepEqual(src string) bool {

	if strings.Compare(p.VenueName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field19DeepEqual(src string) bool {

	if strings.Compare(p.MemberName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field20DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field21DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductPropertyName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field22DeepEqual(src string) bool {

	if strings.Compare(p.Gender, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field23DeepEqual(src int64) bool {

	if p.Birthday != src {
		return false
	}
	return true
}
func (p *ScheduleMemberInfo) Field24DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}

type ScheduleCoachInfo struct {
	ID                        int64  `thrift:"ID,1" frugal:"1,default,i64" json:"ID"`
	CoachId                   int64  `thrift:"CoachId,2" frugal:"2,default,i64" json:"CoachId"`
	VenueId                   int64  `thrift:"VenueId,3" frugal:"3,default,i64" json:"VenueId"`
	PlaceID                   int64  `thrift:"PlaceID,4" frugal:"4,default,i64" json:"PlaceID"`
	PropertyId                int64  `thrift:"PropertyId,5" frugal:"5,default,i64" json:"PropertyId"`
	ScheduleId                int64  `thrift:"ScheduleId,6" frugal:"6,default,i64" json:"ScheduleId"`
	Type                      string `thrift:"Type,7" frugal:"7,default,string" json:"Type"`
	CreatedAt                 string `thrift:"CreatedAt,8" frugal:"8,default,string" json:"CreatedAt"`
	UpdatedAt                 string `thrift:"UpdatedAt,9" frugal:"9,default,string" json:"UpdatedAt"`
	Date                      string `thrift:"Date,10" frugal:"10,default,string" json:"Date"`
	StartTime                 string `thrift:"StartTime,11" frugal:"11,default,string" json:"StartTime"`
	EndTime                   string `thrift:"EndTime,12" frugal:"12,default,string" json:"EndTime"`
	SignStartTime             string `thrift:"SignStartTime,13" frugal:"13,default,string" json:"SignStartTime"`
	SignEndTime               string `thrift:"SignEndTime,14" frugal:"14,default,string" json:"SignEndTime"`
	Status                    int64  `thrift:"Status,15" frugal:"15,default,i64" json:"Status"`
	ScheduleName              string `thrift:"ScheduleName,16" frugal:"16,default,string" json:"ScheduleName"`
	PropertyName              string `thrift:"PropertyName,17" frugal:"17,default,string" json:"PropertyName"`
	VenueName                 string `thrift:"VenueName,18" frugal:"18,default,string" json:"VenueName"`
	PlaceName                 string `thrift:"PlaceName,19" frugal:"19,default,string" json:"PlaceName"`
	CoachName                 string `thrift:"CoachName,20" frugal:"20,default,string" json:"CoachName"`
	CoachAvatar               string `thrift:"CoachAvatar,21" frugal:"21,default,string" json:"CoachAvatar"`
	Mobile                    string `thrift:"Mobile,22" frugal:"22,default,string" json:"Mobile"`
	MemberName                string `thrift:"MemberName,23" frugal:"23,default,string" json:"MemberName"`
	MemberAvatar              string `thrift:"MemberAvatar,24" frugal:"24,default,string" json:"MemberAvatar"`
	MemberProductName         string `thrift:"MemberProductName,25" frugal:"25,default,string" json:"MemberProductName"`
	MemberProductPropertyName string `thrift:"MemberProductPropertyName,26" frugal:"26,default,string" json:"MemberProductPropertyName"`
	Remark                    string `thrift:"Remark,27" frugal:"27,default,string" json:"Remark"`
	MRemark                   string `thrift:"MRemark,28" frugal:"28,default,string" json:"MRemark"`
}

func NewScheduleCoachInfo() *ScheduleCoachInfo {
	return &ScheduleCoachInfo{}
}

func (p *ScheduleCoachInfo) InitDefault() {
}

func (p *ScheduleCoachInfo) GetID() (v int64) {
	return p.ID
}

func (p *ScheduleCoachInfo) GetCoachId() (v int64) {
	return p.CoachId
}

func (p *ScheduleCoachInfo) GetVenueId() (v int64) {
	return p.VenueId
}

func (p *ScheduleCoachInfo) GetPlaceID() (v int64) {
	return p.PlaceID
}

func (p *ScheduleCoachInfo) GetPropertyId() (v int64) {
	return p.PropertyId
}

func (p *ScheduleCoachInfo) GetScheduleId() (v int64) {
	return p.ScheduleId
}

func (p *ScheduleCoachInfo) GetType() (v string) {
	return p.Type
}

func (p *ScheduleCoachInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *ScheduleCoachInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *ScheduleCoachInfo) GetDate() (v string) {
	return p.Date
}

func (p *ScheduleCoachInfo) GetStartTime() (v string) {
	return p.StartTime
}

func (p *ScheduleCoachInfo) GetEndTime() (v string) {
	return p.EndTime
}

func (p *ScheduleCoachInfo) GetSignStartTime() (v string) {
	return p.SignStartTime
}

func (p *ScheduleCoachInfo) GetSignEndTime() (v string) {
	return p.SignEndTime
}

func (p *ScheduleCoachInfo) GetStatus() (v int64) {
	return p.Status
}

func (p *ScheduleCoachInfo) GetScheduleName() (v string) {
	return p.ScheduleName
}

func (p *ScheduleCoachInfo) GetPropertyName() (v string) {
	return p.PropertyName
}

func (p *ScheduleCoachInfo) GetVenueName() (v string) {
	return p.VenueName
}

func (p *ScheduleCoachInfo) GetPlaceName() (v string) {
	return p.PlaceName
}

func (p *ScheduleCoachInfo) GetCoachName() (v string) {
	return p.CoachName
}

func (p *ScheduleCoachInfo) GetCoachAvatar() (v string) {
	return p.CoachAvatar
}

func (p *ScheduleCoachInfo) GetMobile() (v string) {
	return p.Mobile
}

func (p *ScheduleCoachInfo) GetMemberName() (v string) {
	return p.MemberName
}

func (p *ScheduleCoachInfo) GetMemberAvatar() (v string) {
	return p.MemberAvatar
}

func (p *ScheduleCoachInfo) GetMemberProductName() (v string) {
	return p.MemberProductName
}

func (p *ScheduleCoachInfo) GetMemberProductPropertyName() (v string) {
	return p.MemberProductPropertyName
}

func (p *ScheduleCoachInfo) GetRemark() (v string) {
	return p.Remark
}

func (p *ScheduleCoachInfo) GetMRemark() (v string) {
	return p.MRemark
}
func (p *ScheduleCoachInfo) SetID(val int64) {
	p.ID = val
}
func (p *ScheduleCoachInfo) SetCoachId(val int64) {
	p.CoachId = val
}
func (p *ScheduleCoachInfo) SetVenueId(val int64) {
	p.VenueId = val
}
func (p *ScheduleCoachInfo) SetPlaceID(val int64) {
	p.PlaceID = val
}
func (p *ScheduleCoachInfo) SetPropertyId(val int64) {
	p.PropertyId = val
}
func (p *ScheduleCoachInfo) SetScheduleId(val int64) {
	p.ScheduleId = val
}
func (p *ScheduleCoachInfo) SetType(val string) {
	p.Type = val
}
func (p *ScheduleCoachInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *ScheduleCoachInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *ScheduleCoachInfo) SetDate(val string) {
	p.Date = val
}
func (p *ScheduleCoachInfo) SetStartTime(val string) {
	p.StartTime = val
}
func (p *ScheduleCoachInfo) SetEndTime(val string) {
	p.EndTime = val
}
func (p *ScheduleCoachInfo) SetSignStartTime(val string) {
	p.SignStartTime = val
}
func (p *ScheduleCoachInfo) SetSignEndTime(val string) {
	p.SignEndTime = val
}
func (p *ScheduleCoachInfo) SetStatus(val int64) {
	p.Status = val
}
func (p *ScheduleCoachInfo) SetScheduleName(val string) {
	p.ScheduleName = val
}
func (p *ScheduleCoachInfo) SetPropertyName(val string) {
	p.PropertyName = val
}
func (p *ScheduleCoachInfo) SetVenueName(val string) {
	p.VenueName = val
}
func (p *ScheduleCoachInfo) SetPlaceName(val string) {
	p.PlaceName = val
}
func (p *ScheduleCoachInfo) SetCoachName(val string) {
	p.CoachName = val
}
func (p *ScheduleCoachInfo) SetCoachAvatar(val string) {
	p.CoachAvatar = val
}
func (p *ScheduleCoachInfo) SetMobile(val string) {
	p.Mobile = val
}
func (p *ScheduleCoachInfo) SetMemberName(val string) {
	p.MemberName = val
}
func (p *ScheduleCoachInfo) SetMemberAvatar(val string) {
	p.MemberAvatar = val
}
func (p *ScheduleCoachInfo) SetMemberProductName(val string) {
	p.MemberProductName = val
}
func (p *ScheduleCoachInfo) SetMemberProductPropertyName(val string) {
	p.MemberProductPropertyName = val
}
func (p *ScheduleCoachInfo) SetRemark(val string) {
	p.Remark = val
}
func (p *ScheduleCoachInfo) SetMRemark(val string) {
	p.MRemark = val
}

var fieldIDToName_ScheduleCoachInfo = map[int16]string{
	1:  "ID",
	2:  "CoachId",
	3:  "VenueId",
	4:  "PlaceID",
	5:  "PropertyId",
	6:  "ScheduleId",
	7:  "Type",
	8:  "CreatedAt",
	9:  "UpdatedAt",
	10: "Date",
	11: "StartTime",
	12: "EndTime",
	13: "SignStartTime",
	14: "SignEndTime",
	15: "Status",
	16: "ScheduleName",
	17: "PropertyName",
	18: "VenueName",
	19: "PlaceName",
	20: "CoachName",
	21: "CoachAvatar",
	22: "Mobile",
	23: "MemberName",
	24: "MemberAvatar",
	25: "MemberProductName",
	26: "MemberProductPropertyName",
	27: "Remark",
	28: "MRemark",
}

func (p *ScheduleCoachInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleCoachInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleCoachInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceID = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleId = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Date = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartTime = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndTime = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScheduleName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PropertyName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlaceName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoachAvatar = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField24(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberAvatar = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField25(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField26(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField27(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Remark = _field
	return nil
}
func (p *ScheduleCoachInfo) ReadField28(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MRemark = _field
	return nil
}

func (p *ScheduleCoachInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleCoachInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CoachId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CoachId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VenueId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PlaceID", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PlaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PropertyId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ScheduleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Date", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Date); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SignStartTime", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SignStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SignEndTime", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SignEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScheduleName", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ScheduleName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PropertyName", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VenueName", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VenueName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PlaceName", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlaceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CoachName", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CoachName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CoachAvatar", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CoachAvatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberName", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberAvatar", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberAvatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductName", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyName", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Remark", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *ScheduleCoachInfo) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MRemark", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MRemark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *ScheduleCoachInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleCoachInfo(%+v)", *p)

}

func (p *ScheduleCoachInfo) DeepEqual(ano *ScheduleCoachInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CoachId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VenueId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PlaceID) {
		return false
	}
	if !p.Field5DeepEqual(ano.PropertyId) {
		return false
	}
	if !p.Field6DeepEqual(ano.ScheduleId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Type) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field9DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.Date) {
		return false
	}
	if !p.Field11DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field13DeepEqual(ano.SignStartTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.SignEndTime) {
		return false
	}
	if !p.Field15DeepEqual(ano.Status) {
		return false
	}
	if !p.Field16DeepEqual(ano.ScheduleName) {
		return false
	}
	if !p.Field17DeepEqual(ano.PropertyName) {
		return false
	}
	if !p.Field18DeepEqual(ano.VenueName) {
		return false
	}
	if !p.Field19DeepEqual(ano.PlaceName) {
		return false
	}
	if !p.Field20DeepEqual(ano.CoachName) {
		return false
	}
	if !p.Field21DeepEqual(ano.CoachAvatar) {
		return false
	}
	if !p.Field22DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field23DeepEqual(ano.MemberName) {
		return false
	}
	if !p.Field24DeepEqual(ano.MemberAvatar) {
		return false
	}
	if !p.Field25DeepEqual(ano.MemberProductName) {
		return false
	}
	if !p.Field26DeepEqual(ano.MemberProductPropertyName) {
		return false
	}
	if !p.Field27DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field28DeepEqual(ano.MRemark) {
		return false
	}
	return true
}

func (p *ScheduleCoachInfo) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field2DeepEqual(src int64) bool {

	if p.CoachId != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field3DeepEqual(src int64) bool {

	if p.VenueId != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field4DeepEqual(src int64) bool {

	if p.PlaceID != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field5DeepEqual(src int64) bool {

	if p.PropertyId != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field6DeepEqual(src int64) bool {

	if p.ScheduleId != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Date, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.SignStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field14DeepEqual(src string) bool {

	if strings.Compare(p.SignEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field15DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ScheduleName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field17DeepEqual(src string) bool {

	if strings.Compare(p.PropertyName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field18DeepEqual(src string) bool {

	if strings.Compare(p.VenueName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field19DeepEqual(src string) bool {

	if strings.Compare(p.PlaceName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field20DeepEqual(src string) bool {

	if strings.Compare(p.CoachName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field21DeepEqual(src string) bool {

	if strings.Compare(p.CoachAvatar, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field22DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field23DeepEqual(src string) bool {

	if strings.Compare(p.MemberName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field24DeepEqual(src string) bool {

	if strings.Compare(p.MemberAvatar, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field25DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field26DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductPropertyName, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field27DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *ScheduleCoachInfo) Field28DeepEqual(src string) bool {

	if strings.Compare(p.MRemark, src) != 0 {
		return false
	}
	return true
}

type SubscribeByMember struct {
	Avatar                    string `thrift:"Avatar,1" frugal:"1,default,string" json:"Avatar"`
	Mobile                    string `thrift:"Mobile,2" frugal:"2,default,string" json:"Mobile"`
	MemberID                  int64  `thrift:"MemberID,3" frugal:"3,default,i64" json:"MemberID"`
	MemberProductID           int64  `thrift:"MemberProductID,4" frugal:"4,default,i64" json:"MemberProductID"`
	MemberProductPropertyId   int64  `thrift:"MemberProductPropertyId,5" frugal:"5,default,i64" json:"MemberProductPropertyId"`
	MemberName                string `thrift:"MemberName,6" frugal:"6,default,string" json:"MemberName"`
	MemberProductName         string `thrift:"MemberProductName,7" frugal:"7,default,string" json:"MemberProductName"`
	MemberProductPropertyName string `thrift:"MemberProductPropertyName,8" frugal:"8,default,string" json:"MemberProductPropertyName"`
}

func NewSubscribeByMember() *SubscribeByMember {
	return &SubscribeByMember{}
}

func (p *SubscribeByMember) InitDefault() {
}

func (p *SubscribeByMember) GetAvatar() (v string) {
	return p.Avatar
}

func (p *SubscribeByMember) GetMobile() (v string) {
	return p.Mobile
}

func (p *SubscribeByMember) GetMemberID() (v int64) {
	return p.MemberID
}

func (p *SubscribeByMember) GetMemberProductID() (v int64) {
	return p.MemberProductID
}

func (p *SubscribeByMember) GetMemberProductPropertyId() (v int64) {
	return p.MemberProductPropertyId
}

func (p *SubscribeByMember) GetMemberName() (v string) {
	return p.MemberName
}

func (p *SubscribeByMember) GetMemberProductName() (v string) {
	return p.MemberProductName
}

func (p *SubscribeByMember) GetMemberProductPropertyName() (v string) {
	return p.MemberProductPropertyName
}
func (p *SubscribeByMember) SetAvatar(val string) {
	p.Avatar = val
}
func (p *SubscribeByMember) SetMobile(val string) {
	p.Mobile = val
}
func (p *SubscribeByMember) SetMemberID(val int64) {
	p.MemberID = val
}
func (p *SubscribeByMember) SetMemberProductID(val int64) {
	p.MemberProductID = val
}
func (p *SubscribeByMember) SetMemberProductPropertyId(val int64) {
	p.MemberProductPropertyId = val
}
func (p *SubscribeByMember) SetMemberName(val string) {
	p.MemberName = val
}
func (p *SubscribeByMember) SetMemberProductName(val string) {
	p.MemberProductName = val
}
func (p *SubscribeByMember) SetMemberProductPropertyName(val string) {
	p.MemberProductPropertyName = val
}

var fieldIDToName_SubscribeByMember = map[int16]string{
	1: "Avatar",
	2: "Mobile",
	3: "MemberID",
	4: "MemberProductID",
	5: "MemberProductPropertyId",
	6: "MemberName",
	7: "MemberProductName",
	8: "MemberProductPropertyName",
}

func (p *SubscribeByMember) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubscribeByMember[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubscribeByMember) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *SubscribeByMember) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *SubscribeByMember) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberID = _field
	return nil
}
func (p *SubscribeByMember) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductID = _field
	return nil
}
func (p *SubscribeByMember) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyId = _field
	return nil
}
func (p *SubscribeByMember) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberName = _field
	return nil
}
func (p *SubscribeByMember) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductName = _field
	return nil
}
func (p *SubscribeByMember) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductPropertyName = _field
	return nil
}

func (p *SubscribeByMember) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubscribeByMember"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubscribeByMember) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Avatar", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubscribeByMember) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mobile", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubscribeByMember) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberID", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubscribeByMember) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductID", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubscribeByMember) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MemberProductPropertyId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubscribeByMember) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubscribeByMember) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SubscribeByMember) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemberProductPropertyName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemberProductPropertyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SubscribeByMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubscribeByMember(%+v)", *p)

}

func (p *SubscribeByMember) DeepEqual(ano *SubscribeByMember) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemberID) {
		return false
	}
	if !p.Field4DeepEqual(ano.MemberProductID) {
		return false
	}
	if !p.Field5DeepEqual(ano.MemberProductPropertyId) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemberName) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemberProductName) {
		return false
	}
	if !p.Field8DeepEqual(ano.MemberProductPropertyName) {
		return false
	}
	return true
}

func (p *SubscribeByMember) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field3DeepEqual(src int64) bool {

	if p.MemberID != src {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field4DeepEqual(src int64) bool {

	if p.MemberProductID != src {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field5DeepEqual(src int64) bool {

	if p.MemberProductPropertyId != src {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field6DeepEqual(src string) bool {

	if strings.Compare(p.MemberName, src) != 0 {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field7DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductName, src) != 0 {
		return false
	}
	return true
}
func (p *SubscribeByMember) Field8DeepEqual(src string) bool {

	if strings.Compare(p.MemberProductPropertyName, src) != 0 {
		return false
	}
	return true
}

type ScheduleListResp struct {
	Resp  *base.BaseResp  `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*ScheduleInfo `thrift:"extra,2,optional" frugal:"2,optional,list<ScheduleInfo>" json:"extra,omitempty"`
}

func NewScheduleListResp() *ScheduleListResp {
	return &ScheduleListResp{}
}

func (p *ScheduleListResp) InitDefault() {
}

var ScheduleListResp_Resp_DEFAULT *base.BaseResp

func (p *ScheduleListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return ScheduleListResp_Resp_DEFAULT
	}
	return p.Resp
}

var ScheduleListResp_Extra_DEFAULT []*ScheduleInfo

func (p *ScheduleListResp) GetExtra() (v []*ScheduleInfo) {
	if !p.IsSetExtra() {
		return ScheduleListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *ScheduleListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *ScheduleListResp) SetExtra(val []*ScheduleInfo) {
	p.Extra = val
}

var fieldIDToName_ScheduleListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *ScheduleListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ScheduleListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ScheduleListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *ScheduleListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleInfo, 0, size)
	values := make([]ScheduleInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *ScheduleListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleListResp(%+v)", *p)

}

func (p *ScheduleListResp) DeepEqual(ano *ScheduleListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *ScheduleListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScheduleListResp) Field2DeepEqual(src []*ScheduleInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ScheduleMemberListResp struct {
	Resp  *base.BaseResp        `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*ScheduleMemberInfo `thrift:"extra,2,optional" frugal:"2,optional,list<ScheduleMemberInfo>" json:"extra,omitempty"`
}

func NewScheduleMemberListResp() *ScheduleMemberListResp {
	return &ScheduleMemberListResp{}
}

func (p *ScheduleMemberListResp) InitDefault() {
}

var ScheduleMemberListResp_Resp_DEFAULT *base.BaseResp

func (p *ScheduleMemberListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return ScheduleMemberListResp_Resp_DEFAULT
	}
	return p.Resp
}

var ScheduleMemberListResp_Extra_DEFAULT []*ScheduleMemberInfo

func (p *ScheduleMemberListResp) GetExtra() (v []*ScheduleMemberInfo) {
	if !p.IsSetExtra() {
		return ScheduleMemberListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *ScheduleMemberListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *ScheduleMemberListResp) SetExtra(val []*ScheduleMemberInfo) {
	p.Extra = val
}

var fieldIDToName_ScheduleMemberListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *ScheduleMemberListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ScheduleMemberListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ScheduleMemberListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleMemberListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleMemberListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *ScheduleMemberListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleMemberInfo, 0, size)
	values := make([]ScheduleMemberInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *ScheduleMemberListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleMemberListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleMemberListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleMemberListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleMemberListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleMemberListResp(%+v)", *p)

}

func (p *ScheduleMemberListResp) DeepEqual(ano *ScheduleMemberListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *ScheduleMemberListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScheduleMemberListResp) Field2DeepEqual(src []*ScheduleMemberInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ScheduleCoachListResp struct {
	Resp  *base.BaseResp       `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*ScheduleCoachInfo `thrift:"extra,2,optional" frugal:"2,optional,list<ScheduleCoachInfo>" json:"extra,omitempty"`
}

func NewScheduleCoachListResp() *ScheduleCoachListResp {
	return &ScheduleCoachListResp{}
}

func (p *ScheduleCoachListResp) InitDefault() {
}

var ScheduleCoachListResp_Resp_DEFAULT *base.BaseResp

func (p *ScheduleCoachListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return ScheduleCoachListResp_Resp_DEFAULT
	}
	return p.Resp
}

var ScheduleCoachListResp_Extra_DEFAULT []*ScheduleCoachInfo

func (p *ScheduleCoachListResp) GetExtra() (v []*ScheduleCoachInfo) {
	if !p.IsSetExtra() {
		return ScheduleCoachListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *ScheduleCoachListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *ScheduleCoachListResp) SetExtra(val []*ScheduleCoachInfo) {
	p.Extra = val
}

var fieldIDToName_ScheduleCoachListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *ScheduleCoachListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ScheduleCoachListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ScheduleCoachListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleCoachListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleCoachListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *ScheduleCoachListResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScheduleCoachInfo, 0, size)
	values := make([]ScheduleCoachInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *ScheduleCoachListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleCoachListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleCoachListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleCoachListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleCoachListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleCoachListResp(%+v)", *p)

}

func (p *ScheduleCoachListResp) DeepEqual(ano *ScheduleCoachListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *ScheduleCoachListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScheduleCoachListResp) Field2DeepEqual(src []*ScheduleCoachInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ScheduleDateListResp struct {
	Resp  *base.BaseResp             `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra map[string][]*ScheduleInfo `thrift:"extra,2,optional" frugal:"2,optional,map<string:list<ScheduleInfo>>" json:"extra,omitempty"`
}

func NewScheduleDateListResp() *ScheduleDateListResp {
	return &ScheduleDateListResp{}
}

func (p *ScheduleDateListResp) InitDefault() {
}

var ScheduleDateListResp_Resp_DEFAULT *base.BaseResp

func (p *ScheduleDateListResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return ScheduleDateListResp_Resp_DEFAULT
	}
	return p.Resp
}

var ScheduleDateListResp_Extra_DEFAULT map[string][]*ScheduleInfo

func (p *ScheduleDateListResp) GetExtra() (v map[string][]*ScheduleInfo) {
	if !p.IsSetExtra() {
		return ScheduleDateListResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *ScheduleDateListResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *ScheduleDateListResp) SetExtra(val map[string][]*ScheduleInfo) {
	p.Extra = val
}

var fieldIDToName_ScheduleDateListResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *ScheduleDateListResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ScheduleDateListResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ScheduleDateListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleDateListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleDateListResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *ScheduleDateListResp) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string][]*ScheduleInfo, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*ScheduleInfo, 0, size)
		values := make([]ScheduleInfo, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *ScheduleDateListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleDateListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleDateListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleDateListResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScheduleDateListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleDateListResp(%+v)", *p)

}

func (p *ScheduleDateListResp) DeepEqual(ano *ScheduleDateListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *ScheduleDateListResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScheduleDateListResp) Field2DeepEqual(src map[string][]*ScheduleInfo) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for k, v := range p.Extra {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type SearchSubscribeByMemberResp struct {
	Resp  *base.BaseResp       `thrift:"resp,1" frugal:"1,default,base.BaseResp" json:"resp"`
	Extra []*SubscribeByMember `thrift:"extra,2,optional" frugal:"2,optional,list<SubscribeByMember>" json:"extra,omitempty"`
}

func NewSearchSubscribeByMemberResp() *SearchSubscribeByMemberResp {
	return &SearchSubscribeByMemberResp{}
}

func (p *SearchSubscribeByMemberResp) InitDefault() {
}

var SearchSubscribeByMemberResp_Resp_DEFAULT *base.BaseResp

func (p *SearchSubscribeByMemberResp) GetResp() (v *base.BaseResp) {
	if !p.IsSetResp() {
		return SearchSubscribeByMemberResp_Resp_DEFAULT
	}
	return p.Resp
}

var SearchSubscribeByMemberResp_Extra_DEFAULT []*SubscribeByMember

func (p *SearchSubscribeByMemberResp) GetExtra() (v []*SubscribeByMember) {
	if !p.IsSetExtra() {
		return SearchSubscribeByMemberResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *SearchSubscribeByMemberResp) SetResp(val *base.BaseResp) {
	p.Resp = val
}
func (p *SearchSubscribeByMemberResp) SetExtra(val []*SubscribeByMember) {
	p.Extra = val
}

var fieldIDToName_SearchSubscribeByMemberResp = map[int16]string{
	1: "resp",
	2: "extra",
}

func (p *SearchSubscribeByMemberResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *SearchSubscribeByMemberResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *SearchSubscribeByMemberResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchSubscribeByMemberResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resp = _field
	return nil
}
func (p *SearchSubscribeByMemberResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SubscribeByMember, 0, size)
	values := make([]SubscribeByMember, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Extra = _field
	return nil
}

func (p *SearchSubscribeByMemberResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMemberResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchSubscribeByMemberResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchSubscribeByMemberResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
			return err
		}
		for _, v := range p.Extra {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchSubscribeByMemberResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchSubscribeByMemberResp(%+v)", *p)

}

func (p *SearchSubscribeByMemberResp) DeepEqual(ano *SearchSubscribeByMemberResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *SearchSubscribeByMemberResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SearchSubscribeByMemberResp) Field2DeepEqual(src []*SubscribeByMember) bool {

	if len(p.Extra) != len(src) {
		return false
	}
	for i, v := range p.Extra {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ScheduleService interface {
	CreateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error)

	UpdateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error)

	UpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	ScheduleList(ctx context.Context, req *ScheduleListReq) (r *ScheduleListResp, err error)

	ScheduleDateList(ctx context.Context, req *ScheduleListReq) (r *ScheduleDateListResp, err error)

	ScheduleInfo(ctx context.Context, req *base.IDReq) (r *ScheduleInfo, err error)

	MemberList(ctx context.Context, req *ScheduleMemberListReq) (r *ScheduleMemberListResp, err error)

	CreateMember(ctx context.Context, req *CreateMemberReq) (r *ScheduleMemberListResp, err error)

	UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	SearchSubscribeByMember(ctx context.Context, req *SearchSubscribeByMemberReq) (r *SearchSubscribeByMemberResp, err error)

	CoachList(ctx context.Context, req *ScheduleCoachListReq) (r *ScheduleCoachListResp, err error)

	UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)
}

type ScheduleServiceClient struct {
	c thrift.TClient
}

func NewScheduleServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewScheduleServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewScheduleServiceClient(c thrift.TClient) *ScheduleServiceClient {
	return &ScheduleServiceClient{
		c: c,
	}
}

func (p *ScheduleServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ScheduleServiceClient) CreateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceCreateScheduleArgs
	_args.Req = req
	var _result ScheduleServiceCreateScheduleResult
	if err = p.Client_().Call(ctx, "CreateSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateSchedule(ctx context.Context, req *CreateOrUpdateScheduleReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateScheduleArgs
	_args.Req = req
	var _result ScheduleServiceUpdateScheduleResult
	if err = p.Client_().Call(ctx, "UpdateSchedule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateStatusResult
	if err = p.Client_().Call(ctx, "UpdateStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) ScheduleList(ctx context.Context, req *ScheduleListReq) (r *ScheduleListResp, err error) {
	var _args ScheduleServiceScheduleListArgs
	_args.Req = req
	var _result ScheduleServiceScheduleListResult
	if err = p.Client_().Call(ctx, "ScheduleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) ScheduleDateList(ctx context.Context, req *ScheduleListReq) (r *ScheduleDateListResp, err error) {
	var _args ScheduleServiceScheduleDateListArgs
	_args.Req = req
	var _result ScheduleServiceScheduleDateListResult
	if err = p.Client_().Call(ctx, "ScheduleDateList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) ScheduleInfo(ctx context.Context, req *base.IDReq) (r *ScheduleInfo, err error) {
	var _args ScheduleServiceScheduleInfoArgs
	_args.Req = req
	var _result ScheduleServiceScheduleInfoResult
	if err = p.Client_().Call(ctx, "ScheduleInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) MemberList(ctx context.Context, req *ScheduleMemberListReq) (r *ScheduleMemberListResp, err error) {
	var _args ScheduleServiceMemberListArgs
	_args.Req = req
	var _result ScheduleServiceMemberListResult
	if err = p.Client_().Call(ctx, "MemberList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) CreateMember(ctx context.Context, req *CreateMemberReq) (r *ScheduleMemberListResp, err error) {
	var _args ScheduleServiceCreateMemberArgs
	_args.Req = req
	var _result ScheduleServiceCreateMemberResult
	if err = p.Client_().Call(ctx, "CreateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateMemberStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateMemberStatusResult
	if err = p.Client_().Call(ctx, "UpdateMemberStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) SearchSubscribeByMember(ctx context.Context, req *SearchSubscribeByMemberReq) (r *SearchSubscribeByMemberResp, err error) {
	var _args ScheduleServiceSearchSubscribeByMemberArgs
	_args.Req = req
	var _result ScheduleServiceSearchSubscribeByMemberResult
	if err = p.Client_().Call(ctx, "SearchSubscribeByMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) CoachList(ctx context.Context, req *ScheduleCoachListReq) (r *ScheduleCoachListResp, err error) {
	var _args ScheduleServiceCoachListArgs
	_args.Req = req
	var _result ScheduleServiceCoachListResult
	if err = p.Client_().Call(ctx, "CoachList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ScheduleServiceClient) UpdateCoachStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ScheduleServiceUpdateCoachStatusArgs
	_args.Req = req
	var _result ScheduleServiceUpdateCoachStatusResult
	if err = p.Client_().Call(ctx, "UpdateCoachStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ScheduleServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ScheduleService
}

func (p *ScheduleServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ScheduleServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ScheduleServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewScheduleServiceProcessor(handler ScheduleService) *ScheduleServiceProcessor {
	self := &ScheduleServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateSchedule", &scheduleServiceProcessorCreateSchedule{handler: handler})
	self.AddToProcessorMap("UpdateSchedule", &scheduleServiceProcessorUpdateSchedule{handler: handler})
	self.AddToProcessorMap("UpdateStatus", &scheduleServiceProcessorUpdateStatus{handler: handler})
	self.AddToProcessorMap("ScheduleList", &scheduleServiceProcessorScheduleList{handler: handler})
	self.AddToProcessorMap("ScheduleDateList", &scheduleServiceProcessorScheduleDateList{handler: handler})
	self.AddToProcessorMap("ScheduleInfo", &scheduleServiceProcessorScheduleInfo{handler: handler})
	self.AddToProcessorMap("MemberList", &scheduleServiceProcessorMemberList{handler: handler})
	self.AddToProcessorMap("CreateMember", &scheduleServiceProcessorCreateMember{handler: handler})
	self.AddToProcessorMap("UpdateMemberStatus", &scheduleServiceProcessorUpdateMemberStatus{handler: handler})
	self.AddToProcessorMap("SearchSubscribeByMember", &scheduleServiceProcessorSearchSubscribeByMember{handler: handler})
	self.AddToProcessorMap("CoachList", &scheduleServiceProcessorCoachList{handler: handler})
	self.AddToProcessorMap("UpdateCoachStatus", &scheduleServiceProcessorUpdateCoachStatus{handler: handler})
	return self
}
func (p *ScheduleServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type scheduleServiceProcessorCreateSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorCreateSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceCreateScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceCreateScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSchedule: "+err2.Error())
		oprot.WriteMessageBegin("CreateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateSchedule struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateScheduleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateScheduleResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateSchedule(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSchedule: "+err2.Error())
		oprot.WriteMessageBegin("UpdateSchedule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSchedule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorScheduleList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorScheduleList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceScheduleListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ScheduleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceScheduleListResult{}
	var retval *ScheduleListResp
	if retval, err2 = p.handler.ScheduleList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ScheduleList: "+err2.Error())
		oprot.WriteMessageBegin("ScheduleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ScheduleList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorScheduleDateList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorScheduleDateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceScheduleDateListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ScheduleDateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceScheduleDateListResult{}
	var retval *ScheduleDateListResp
	if retval, err2 = p.handler.ScheduleDateList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ScheduleDateList: "+err2.Error())
		oprot.WriteMessageBegin("ScheduleDateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ScheduleDateList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorScheduleInfo struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorScheduleInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceScheduleInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ScheduleInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceScheduleInfoResult{}
	var retval *ScheduleInfo
	if retval, err2 = p.handler.ScheduleInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ScheduleInfo: "+err2.Error())
		oprot.WriteMessageBegin("ScheduleInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ScheduleInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorMemberList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorMemberList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceMemberListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceMemberListResult{}
	var retval *ScheduleMemberListResp
	if retval, err2 = p.handler.MemberList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberList: "+err2.Error())
		oprot.WriteMessageBegin("MemberList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorCreateMember struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorCreateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceCreateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceCreateMemberResult{}
	var retval *ScheduleMemberListResp
	if retval, err2 = p.handler.CreateMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMember: "+err2.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateMemberStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateMemberStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateMemberStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateMemberStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorSearchSubscribeByMember struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorSearchSubscribeByMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceSearchSubscribeByMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceSearchSubscribeByMemberResult{}
	var retval *SearchSubscribeByMemberResp
	if retval, err2 = p.handler.SearchSubscribeByMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchSubscribeByMember: "+err2.Error())
		oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchSubscribeByMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorCoachList struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorCoachList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceCoachListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CoachList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceCoachListResult{}
	var retval *ScheduleCoachListResp
	if retval, err2 = p.handler.CoachList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CoachList: "+err2.Error())
		oprot.WriteMessageBegin("CoachList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CoachList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type scheduleServiceProcessorUpdateCoachStatus struct {
	handler ScheduleService
}

func (p *scheduleServiceProcessorUpdateCoachStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScheduleServiceUpdateCoachStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCoachStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ScheduleServiceUpdateCoachStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateCoachStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCoachStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCoachStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCoachStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ScheduleServiceCreateScheduleArgs struct {
	Req *CreateOrUpdateScheduleReq `thrift:"req,1" frugal:"1,default,CreateOrUpdateScheduleReq" json:"req"`
}

func NewScheduleServiceCreateScheduleArgs() *ScheduleServiceCreateScheduleArgs {
	return &ScheduleServiceCreateScheduleArgs{}
}

func (p *ScheduleServiceCreateScheduleArgs) InitDefault() {
}

var ScheduleServiceCreateScheduleArgs_Req_DEFAULT *CreateOrUpdateScheduleReq

func (p *ScheduleServiceCreateScheduleArgs) GetReq() (v *CreateOrUpdateScheduleReq) {
	if !p.IsSetReq() {
		return ScheduleServiceCreateScheduleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceCreateScheduleArgs) SetReq(val *CreateOrUpdateScheduleReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceCreateScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceCreateScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceCreateScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateScheduleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceCreateScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateScheduleArgs(%+v)", *p)

}

func (p *ScheduleServiceCreateScheduleArgs) DeepEqual(ano *ScheduleServiceCreateScheduleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceCreateScheduleArgs) Field1DeepEqual(src *CreateOrUpdateScheduleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceCreateScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewScheduleServiceCreateScheduleResult() *ScheduleServiceCreateScheduleResult {
	return &ScheduleServiceCreateScheduleResult{}
}

func (p *ScheduleServiceCreateScheduleResult) InitDefault() {
}

var ScheduleServiceCreateScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceCreateScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceCreateScheduleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceCreateScheduleResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_ScheduleServiceCreateScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceCreateScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceCreateScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceCreateScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceCreateScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateScheduleResult(%+v)", *p)

}

func (p *ScheduleServiceCreateScheduleResult) DeepEqual(ano *ScheduleServiceCreateScheduleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceCreateScheduleResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateScheduleArgs struct {
	Req *CreateOrUpdateScheduleReq `thrift:"req,1" frugal:"1,default,CreateOrUpdateScheduleReq" json:"req"`
}

func NewScheduleServiceUpdateScheduleArgs() *ScheduleServiceUpdateScheduleArgs {
	return &ScheduleServiceUpdateScheduleArgs{}
}

func (p *ScheduleServiceUpdateScheduleArgs) InitDefault() {
}

var ScheduleServiceUpdateScheduleArgs_Req_DEFAULT *CreateOrUpdateScheduleReq

func (p *ScheduleServiceUpdateScheduleArgs) GetReq() (v *CreateOrUpdateScheduleReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateScheduleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceUpdateScheduleArgs) SetReq(val *CreateOrUpdateScheduleReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceUpdateScheduleArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateScheduleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateScheduleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateScheduleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateScheduleReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateScheduleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSchedule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateScheduleArgs(%+v)", *p)

}

func (p *ScheduleServiceUpdateScheduleArgs) DeepEqual(ano *ScheduleServiceUpdateScheduleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateScheduleArgs) Field1DeepEqual(src *CreateOrUpdateScheduleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateScheduleResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewScheduleServiceUpdateScheduleResult() *ScheduleServiceUpdateScheduleResult {
	return &ScheduleServiceUpdateScheduleResult{}
}

func (p *ScheduleServiceUpdateScheduleResult) InitDefault() {
}

var ScheduleServiceUpdateScheduleResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateScheduleResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateScheduleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceUpdateScheduleResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_ScheduleServiceUpdateScheduleResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateScheduleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateScheduleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateScheduleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateScheduleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSchedule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateScheduleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateScheduleResult(%+v)", *p)

}

func (p *ScheduleServiceUpdateScheduleResult) DeepEqual(ano *ScheduleServiceUpdateScheduleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateScheduleResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewScheduleServiceUpdateStatusArgs() *ScheduleServiceUpdateStatusArgs {
	return &ScheduleServiceUpdateStatusArgs{}
}

func (p *ScheduleServiceUpdateStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceUpdateStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceUpdateStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateStatusArgs(%+v)", *p)

}

func (p *ScheduleServiceUpdateStatusArgs) DeepEqual(ano *ScheduleServiceUpdateStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewScheduleServiceUpdateStatusResult() *ScheduleServiceUpdateStatusResult {
	return &ScheduleServiceUpdateStatusResult{}
}

func (p *ScheduleServiceUpdateStatusResult) InitDefault() {
}

var ScheduleServiceUpdateStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceUpdateStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_ScheduleServiceUpdateStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateStatusResult(%+v)", *p)

}

func (p *ScheduleServiceUpdateStatusResult) DeepEqual(ano *ScheduleServiceUpdateStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleListArgs struct {
	Req *ScheduleListReq `thrift:"req,1" frugal:"1,default,ScheduleListReq" json:"req"`
}

func NewScheduleServiceScheduleListArgs() *ScheduleServiceScheduleListArgs {
	return &ScheduleServiceScheduleListArgs{}
}

func (p *ScheduleServiceScheduleListArgs) InitDefault() {
}

var ScheduleServiceScheduleListArgs_Req_DEFAULT *ScheduleListReq

func (p *ScheduleServiceScheduleListArgs) GetReq() (v *ScheduleListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceScheduleListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceScheduleListArgs) SetReq(val *ScheduleListReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceScheduleListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceScheduleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceScheduleListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceScheduleListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceScheduleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleListArgs(%+v)", *p)

}

func (p *ScheduleServiceScheduleListArgs) DeepEqual(ano *ScheduleServiceScheduleListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleListArgs) Field1DeepEqual(src *ScheduleListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleListResult struct {
	Success *ScheduleListResp `thrift:"success,0,optional" frugal:"0,optional,ScheduleListResp" json:"success,omitempty"`
}

func NewScheduleServiceScheduleListResult() *ScheduleServiceScheduleListResult {
	return &ScheduleServiceScheduleListResult{}
}

func (p *ScheduleServiceScheduleListResult) InitDefault() {
}

var ScheduleServiceScheduleListResult_Success_DEFAULT *ScheduleListResp

func (p *ScheduleServiceScheduleListResult) GetSuccess() (v *ScheduleListResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceScheduleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceScheduleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleListResp)
}

var fieldIDToName_ScheduleServiceScheduleListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceScheduleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceScheduleListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceScheduleListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceScheduleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleListResult(%+v)", *p)

}

func (p *ScheduleServiceScheduleListResult) DeepEqual(ano *ScheduleServiceScheduleListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleListResult) Field0DeepEqual(src *ScheduleListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleDateListArgs struct {
	Req *ScheduleListReq `thrift:"req,1" frugal:"1,default,ScheduleListReq" json:"req"`
}

func NewScheduleServiceScheduleDateListArgs() *ScheduleServiceScheduleDateListArgs {
	return &ScheduleServiceScheduleDateListArgs{}
}

func (p *ScheduleServiceScheduleDateListArgs) InitDefault() {
}

var ScheduleServiceScheduleDateListArgs_Req_DEFAULT *ScheduleListReq

func (p *ScheduleServiceScheduleDateListArgs) GetReq() (v *ScheduleListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceScheduleDateListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceScheduleDateListArgs) SetReq(val *ScheduleListReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceScheduleDateListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceScheduleDateListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceScheduleDateListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleDateListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceScheduleDateListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleDateList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleDateListArgs(%+v)", *p)

}

func (p *ScheduleServiceScheduleDateListArgs) DeepEqual(ano *ScheduleServiceScheduleDateListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleDateListArgs) Field1DeepEqual(src *ScheduleListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleDateListResult struct {
	Success *ScheduleDateListResp `thrift:"success,0,optional" frugal:"0,optional,ScheduleDateListResp" json:"success,omitempty"`
}

func NewScheduleServiceScheduleDateListResult() *ScheduleServiceScheduleDateListResult {
	return &ScheduleServiceScheduleDateListResult{}
}

func (p *ScheduleServiceScheduleDateListResult) InitDefault() {
}

var ScheduleServiceScheduleDateListResult_Success_DEFAULT *ScheduleDateListResp

func (p *ScheduleServiceScheduleDateListResult) GetSuccess() (v *ScheduleDateListResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceScheduleDateListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceScheduleDateListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleDateListResp)
}

var fieldIDToName_ScheduleServiceScheduleDateListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceScheduleDateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceScheduleDateListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleDateListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleDateListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceScheduleDateListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleDateList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceScheduleDateListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleDateListResult(%+v)", *p)

}

func (p *ScheduleServiceScheduleDateListResult) DeepEqual(ano *ScheduleServiceScheduleDateListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleDateListResult) Field0DeepEqual(src *ScheduleDateListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleInfoArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewScheduleServiceScheduleInfoArgs() *ScheduleServiceScheduleInfoArgs {
	return &ScheduleServiceScheduleInfoArgs{}
}

func (p *ScheduleServiceScheduleInfoArgs) InitDefault() {
}

var ScheduleServiceScheduleInfoArgs_Req_DEFAULT *base.IDReq

func (p *ScheduleServiceScheduleInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ScheduleServiceScheduleInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceScheduleInfoArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceScheduleInfoArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceScheduleInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceScheduleInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceScheduleInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleInfoArgs(%+v)", *p)

}

func (p *ScheduleServiceScheduleInfoArgs) DeepEqual(ano *ScheduleServiceScheduleInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleInfoArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceScheduleInfoResult struct {
	Success *ScheduleInfo `thrift:"success,0,optional" frugal:"0,optional,ScheduleInfo" json:"success,omitempty"`
}

func NewScheduleServiceScheduleInfoResult() *ScheduleServiceScheduleInfoResult {
	return &ScheduleServiceScheduleInfoResult{}
}

func (p *ScheduleServiceScheduleInfoResult) InitDefault() {
}

var ScheduleServiceScheduleInfoResult_Success_DEFAULT *ScheduleInfo

func (p *ScheduleServiceScheduleInfoResult) GetSuccess() (v *ScheduleInfo) {
	if !p.IsSetSuccess() {
		return ScheduleServiceScheduleInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceScheduleInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleInfo)
}

var fieldIDToName_ScheduleServiceScheduleInfoResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceScheduleInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceScheduleInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceScheduleInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceScheduleInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScheduleInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceScheduleInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceScheduleInfoResult(%+v)", *p)

}

func (p *ScheduleServiceScheduleInfoResult) DeepEqual(ano *ScheduleServiceScheduleInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceScheduleInfoResult) Field0DeepEqual(src *ScheduleInfo) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceMemberListArgs struct {
	Req *ScheduleMemberListReq `thrift:"req,1" frugal:"1,default,ScheduleMemberListReq" json:"req"`
}

func NewScheduleServiceMemberListArgs() *ScheduleServiceMemberListArgs {
	return &ScheduleServiceMemberListArgs{}
}

func (p *ScheduleServiceMemberListArgs) InitDefault() {
}

var ScheduleServiceMemberListArgs_Req_DEFAULT *ScheduleMemberListReq

func (p *ScheduleServiceMemberListArgs) GetReq() (v *ScheduleMemberListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceMemberListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceMemberListArgs) SetReq(val *ScheduleMemberListReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceMemberListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceMemberListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceMemberListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceMemberListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceMemberListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceMemberListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceMemberListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceMemberListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceMemberListArgs(%+v)", *p)

}

func (p *ScheduleServiceMemberListArgs) DeepEqual(ano *ScheduleServiceMemberListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceMemberListArgs) Field1DeepEqual(src *ScheduleMemberListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceMemberListResult struct {
	Success *ScheduleMemberListResp `thrift:"success,0,optional" frugal:"0,optional,ScheduleMemberListResp" json:"success,omitempty"`
}

func NewScheduleServiceMemberListResult() *ScheduleServiceMemberListResult {
	return &ScheduleServiceMemberListResult{}
}

func (p *ScheduleServiceMemberListResult) InitDefault() {
}

var ScheduleServiceMemberListResult_Success_DEFAULT *ScheduleMemberListResp

func (p *ScheduleServiceMemberListResult) GetSuccess() (v *ScheduleMemberListResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceMemberListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceMemberListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleMemberListResp)
}

var fieldIDToName_ScheduleServiceMemberListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceMemberListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceMemberListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceMemberListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceMemberListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleMemberListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceMemberListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MemberList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceMemberListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceMemberListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceMemberListResult(%+v)", *p)

}

func (p *ScheduleServiceMemberListResult) DeepEqual(ano *ScheduleServiceMemberListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceMemberListResult) Field0DeepEqual(src *ScheduleMemberListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceCreateMemberArgs struct {
	Req *CreateMemberReq `thrift:"req,1" frugal:"1,default,CreateMemberReq" json:"req"`
}

func NewScheduleServiceCreateMemberArgs() *ScheduleServiceCreateMemberArgs {
	return &ScheduleServiceCreateMemberArgs{}
}

func (p *ScheduleServiceCreateMemberArgs) InitDefault() {
}

var ScheduleServiceCreateMemberArgs_Req_DEFAULT *CreateMemberReq

func (p *ScheduleServiceCreateMemberArgs) GetReq() (v *CreateMemberReq) {
	if !p.IsSetReq() {
		return ScheduleServiceCreateMemberArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceCreateMemberArgs) SetReq(val *CreateMemberReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceCreateMemberArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceCreateMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceCreateMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceCreateMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateMemberArgs(%+v)", *p)

}

func (p *ScheduleServiceCreateMemberArgs) DeepEqual(ano *ScheduleServiceCreateMemberArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceCreateMemberArgs) Field1DeepEqual(src *CreateMemberReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceCreateMemberResult struct {
	Success *ScheduleMemberListResp `thrift:"success,0,optional" frugal:"0,optional,ScheduleMemberListResp" json:"success,omitempty"`
}

func NewScheduleServiceCreateMemberResult() *ScheduleServiceCreateMemberResult {
	return &ScheduleServiceCreateMemberResult{}
}

func (p *ScheduleServiceCreateMemberResult) InitDefault() {
}

var ScheduleServiceCreateMemberResult_Success_DEFAULT *ScheduleMemberListResp

func (p *ScheduleServiceCreateMemberResult) GetSuccess() (v *ScheduleMemberListResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceCreateMemberResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceCreateMemberResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleMemberListResp)
}

var fieldIDToName_ScheduleServiceCreateMemberResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceCreateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceCreateMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCreateMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleMemberListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceCreateMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceCreateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCreateMemberResult(%+v)", *p)

}

func (p *ScheduleServiceCreateMemberResult) DeepEqual(ano *ScheduleServiceCreateMemberResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceCreateMemberResult) Field0DeepEqual(src *ScheduleMemberListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateMemberStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewScheduleServiceUpdateMemberStatusArgs() *ScheduleServiceUpdateMemberStatusArgs {
	return &ScheduleServiceUpdateMemberStatusArgs{}
}

func (p *ScheduleServiceUpdateMemberStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateMemberStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateMemberStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateMemberStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceUpdateMemberStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceUpdateMemberStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateMemberStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateMemberStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateMemberStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateMemberStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateMemberStatusArgs(%+v)", *p)

}

func (p *ScheduleServiceUpdateMemberStatusArgs) DeepEqual(ano *ScheduleServiceUpdateMemberStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateMemberStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateMemberStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewScheduleServiceUpdateMemberStatusResult() *ScheduleServiceUpdateMemberStatusResult {
	return &ScheduleServiceUpdateMemberStatusResult{}
}

func (p *ScheduleServiceUpdateMemberStatusResult) InitDefault() {
}

var ScheduleServiceUpdateMemberStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateMemberStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateMemberStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceUpdateMemberStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_ScheduleServiceUpdateMemberStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateMemberStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateMemberStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateMemberStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateMemberStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateMemberStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateMemberStatusResult(%+v)", *p)

}

func (p *ScheduleServiceUpdateMemberStatusResult) DeepEqual(ano *ScheduleServiceUpdateMemberStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateMemberStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceSearchSubscribeByMemberArgs struct {
	Req *SearchSubscribeByMemberReq `thrift:"req,1" frugal:"1,default,SearchSubscribeByMemberReq" json:"req"`
}

func NewScheduleServiceSearchSubscribeByMemberArgs() *ScheduleServiceSearchSubscribeByMemberArgs {
	return &ScheduleServiceSearchSubscribeByMemberArgs{}
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) InitDefault() {
}

var ScheduleServiceSearchSubscribeByMemberArgs_Req_DEFAULT *SearchSubscribeByMemberReq

func (p *ScheduleServiceSearchSubscribeByMemberArgs) GetReq() (v *SearchSubscribeByMemberReq) {
	if !p.IsSetReq() {
		return ScheduleServiceSearchSubscribeByMemberArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceSearchSubscribeByMemberArgs) SetReq(val *SearchSubscribeByMemberReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceSearchSubscribeByMemberArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceSearchSubscribeByMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSearchSubscribeByMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceSearchSubscribeByMemberArgs(%+v)", *p)

}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) DeepEqual(ano *ScheduleServiceSearchSubscribeByMemberArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceSearchSubscribeByMemberArgs) Field1DeepEqual(src *SearchSubscribeByMemberReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceSearchSubscribeByMemberResult struct {
	Success *SearchSubscribeByMemberResp `thrift:"success,0,optional" frugal:"0,optional,SearchSubscribeByMemberResp" json:"success,omitempty"`
}

func NewScheduleServiceSearchSubscribeByMemberResult() *ScheduleServiceSearchSubscribeByMemberResult {
	return &ScheduleServiceSearchSubscribeByMemberResult{}
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) InitDefault() {
}

var ScheduleServiceSearchSubscribeByMemberResult_Success_DEFAULT *SearchSubscribeByMemberResp

func (p *ScheduleServiceSearchSubscribeByMemberResult) GetSuccess() (v *SearchSubscribeByMemberResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceSearchSubscribeByMemberResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceSearchSubscribeByMemberResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchSubscribeByMemberResp)
}

var fieldIDToName_ScheduleServiceSearchSubscribeByMemberResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceSearchSubscribeByMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSearchSubscribeByMemberResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchSubscribeByMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceSearchSubscribeByMemberResult(%+v)", *p)

}

func (p *ScheduleServiceSearchSubscribeByMemberResult) DeepEqual(ano *ScheduleServiceSearchSubscribeByMemberResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceSearchSubscribeByMemberResult) Field0DeepEqual(src *SearchSubscribeByMemberResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceCoachListArgs struct {
	Req *ScheduleCoachListReq `thrift:"req,1" frugal:"1,default,ScheduleCoachListReq" json:"req"`
}

func NewScheduleServiceCoachListArgs() *ScheduleServiceCoachListArgs {
	return &ScheduleServiceCoachListArgs{}
}

func (p *ScheduleServiceCoachListArgs) InitDefault() {
}

var ScheduleServiceCoachListArgs_Req_DEFAULT *ScheduleCoachListReq

func (p *ScheduleServiceCoachListArgs) GetReq() (v *ScheduleCoachListReq) {
	if !p.IsSetReq() {
		return ScheduleServiceCoachListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceCoachListArgs) SetReq(val *ScheduleCoachListReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceCoachListArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceCoachListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceCoachListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCoachListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCoachListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewScheduleCoachListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceCoachListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CoachList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCoachListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceCoachListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCoachListArgs(%+v)", *p)

}

func (p *ScheduleServiceCoachListArgs) DeepEqual(ano *ScheduleServiceCoachListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceCoachListArgs) Field1DeepEqual(src *ScheduleCoachListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceCoachListResult struct {
	Success *ScheduleCoachListResp `thrift:"success,0,optional" frugal:"0,optional,ScheduleCoachListResp" json:"success,omitempty"`
}

func NewScheduleServiceCoachListResult() *ScheduleServiceCoachListResult {
	return &ScheduleServiceCoachListResult{}
}

func (p *ScheduleServiceCoachListResult) InitDefault() {
}

var ScheduleServiceCoachListResult_Success_DEFAULT *ScheduleCoachListResp

func (p *ScheduleServiceCoachListResult) GetSuccess() (v *ScheduleCoachListResp) {
	if !p.IsSetSuccess() {
		return ScheduleServiceCoachListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceCoachListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ScheduleCoachListResp)
}

var fieldIDToName_ScheduleServiceCoachListResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceCoachListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceCoachListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceCoachListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceCoachListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewScheduleCoachListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceCoachListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CoachList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceCoachListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceCoachListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceCoachListResult(%+v)", *p)

}

func (p *ScheduleServiceCoachListResult) DeepEqual(ano *ScheduleServiceCoachListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceCoachListResult) Field0DeepEqual(src *ScheduleCoachListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateCoachStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1" frugal:"1,default,base.StatusCodeReq" json:"req"`
}

func NewScheduleServiceUpdateCoachStatusArgs() *ScheduleServiceUpdateCoachStatusArgs {
	return &ScheduleServiceUpdateCoachStatusArgs{}
}

func (p *ScheduleServiceUpdateCoachStatusArgs) InitDefault() {
}

var ScheduleServiceUpdateCoachStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ScheduleServiceUpdateCoachStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ScheduleServiceUpdateCoachStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ScheduleServiceUpdateCoachStatusArgs) SetReq(val *base.StatusCodeReq) {
	p.Req = val
}

var fieldIDToName_ScheduleServiceUpdateCoachStatusArgs = map[int16]string{
	1: "req",
}

func (p *ScheduleServiceUpdateCoachStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ScheduleServiceUpdateCoachStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateCoachStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ScheduleServiceUpdateCoachStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCoachStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateCoachStatusArgs(%+v)", *p)

}

func (p *ScheduleServiceUpdateCoachStatusArgs) DeepEqual(ano *ScheduleServiceUpdateCoachStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateCoachStatusArgs) Field1DeepEqual(src *base.StatusCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ScheduleServiceUpdateCoachStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional" frugal:"0,optional,base.NilResponse" json:"success,omitempty"`
}

func NewScheduleServiceUpdateCoachStatusResult() *ScheduleServiceUpdateCoachStatusResult {
	return &ScheduleServiceUpdateCoachStatusResult{}
}

func (p *ScheduleServiceUpdateCoachStatusResult) InitDefault() {
}

var ScheduleServiceUpdateCoachStatusResult_Success_DEFAULT *base.NilResponse

func (p *ScheduleServiceUpdateCoachStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ScheduleServiceUpdateCoachStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ScheduleServiceUpdateCoachStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.NilResponse)
}

var fieldIDToName_ScheduleServiceUpdateCoachStatusResult = map[int16]string{
	0: "success",
}

func (p *ScheduleServiceUpdateCoachStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ScheduleServiceUpdateCoachStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScheduleServiceUpdateCoachStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ScheduleServiceUpdateCoachStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCoachStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ScheduleServiceUpdateCoachStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScheduleServiceUpdateCoachStatusResult(%+v)", *p)

}

func (p *ScheduleServiceUpdateCoachStatusResult) DeepEqual(ano *ScheduleServiceUpdateCoachStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ScheduleServiceUpdateCoachStatusResult) Field0DeepEqual(src *base.NilResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "rpc_gen/kitex_gen/base"
	order "rpc_gen/kitex_gen/orders/order"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newOrderServiceCreateOrderArgs,
		newOrderServiceCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateOrder": kitex.NewMethodInfo(
		updateOrderHandler,
		newOrderServiceUpdateOrderArgs,
		newOrderServiceUpdateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateStatus": kitex.NewMethodInfo(
		updateStatusHandler,
		newOrderServiceUpdateStatusArgs,
		newOrderServiceUpdateStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListOrder": kitex.NewMethodInfo(
		listOrderHandler,
		newOrderServiceListOrderArgs,
		newOrderServiceListOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOrderById": kitex.NewMethodInfo(
		getOrderByIdHandler,
		newOrderServiceGetOrderByIdArgs,
		newOrderServiceGetOrderByIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UnifyPay": kitex.NewMethodInfo(
		unifyPayHandler,
		newOrderServiceUnifyPayArgs,
		newOrderServiceUnifyPayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QRPay": kitex.NewMethodInfo(
		qRPayHandler,
		newOrderServiceQRPayArgs,
		newOrderServiceQRPayResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateOrderArgs)
	realResult := result.(*order.OrderServiceCreateOrderResult)
	success, err := handler.(order.OrderService).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateOrderArgs() interface{} {
	return order.NewOrderServiceCreateOrderArgs()
}

func newOrderServiceCreateOrderResult() interface{} {
	return order.NewOrderServiceCreateOrderResult()
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateOrderArgs)
	realResult := result.(*order.OrderServiceUpdateOrderResult)
	success, err := handler.(order.OrderService).UpdateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateOrderArgs() interface{} {
	return order.NewOrderServiceUpdateOrderArgs()
}

func newOrderServiceUpdateOrderResult() interface{} {
	return order.NewOrderServiceUpdateOrderResult()
}

func updateStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateStatusArgs)
	realResult := result.(*order.OrderServiceUpdateStatusResult)
	success, err := handler.(order.OrderService).UpdateStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateStatusArgs() interface{} {
	return order.NewOrderServiceUpdateStatusArgs()
}

func newOrderServiceUpdateStatusResult() interface{} {
	return order.NewOrderServiceUpdateStatusResult()
}

func listOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceListOrderArgs)
	realResult := result.(*order.OrderServiceListOrderResult)
	success, err := handler.(order.OrderService).ListOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceListOrderArgs() interface{} {
	return order.NewOrderServiceListOrderArgs()
}

func newOrderServiceListOrderResult() interface{} {
	return order.NewOrderServiceListOrderResult()
}

func getOrderByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderByIdArgs)
	realResult := result.(*order.OrderServiceGetOrderByIdResult)
	success, err := handler.(order.OrderService).GetOrderById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetOrderByIdArgs() interface{} {
	return order.NewOrderServiceGetOrderByIdArgs()
}

func newOrderServiceGetOrderByIdResult() interface{} {
	return order.NewOrderServiceGetOrderByIdResult()
}

func unifyPayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUnifyPayArgs)
	realResult := result.(*order.OrderServiceUnifyPayResult)
	success, err := handler.(order.OrderService).UnifyPay(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUnifyPayArgs() interface{} {
	return order.NewOrderServiceUnifyPayArgs()
}

func newOrderServiceUnifyPayResult() interface{} {
	return order.NewOrderServiceUnifyPayResult()
}

func qRPayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceQRPayArgs)
	realResult := result.(*order.OrderServiceQRPayResult)
	success, err := handler.(order.OrderService).QRPay(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceQRPayArgs() interface{} {
	return order.NewOrderServiceQRPayArgs()
}

func newOrderServiceQRPayResult() interface{} {
	return order.NewOrderServiceQRPayResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.CreateOrderReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceCreateOrderArgs
	_args.Req = req
	var _result order.OrderServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, req *order.UpdateOrderReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceUpdateOrderArgs
	_args.Req = req
	var _result order.OrderServiceUpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceUpdateStatusArgs
	_args.Req = req
	var _result order.OrderServiceUpdateStatusResult
	if err = p.c.Call(ctx, "UpdateStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListOrder(ctx context.Context, req *order.ListOrderReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceListOrderArgs
	_args.Req = req
	var _result order.OrderServiceListOrderResult
	if err = p.c.Call(ctx, "ListOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderById(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceGetOrderByIdArgs
	_args.Req = req
	var _result order.OrderServiceGetOrderByIdResult
	if err = p.c.Call(ctx, "GetOrderById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnifyPay(ctx context.Context, req *order.UnifyPayReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceUnifyPayArgs
	_args.Req = req
	var _result order.OrderServiceUnifyPayResult
	if err = p.c.Call(ctx, "UnifyPay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QRPay(ctx context.Context, req *order.QRPayReq) (r *base.NilResponse, err error) {
	var _args order.OrderServiceQRPayArgs
	_args.Req = req
	var _result order.OrderServiceQRPayResult
	if err = p.c.Call(ctx, "QRPay", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

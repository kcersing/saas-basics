// Code generated by hertz generator.

package order

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	order "saas/idl_gen/model/order"
)

// Update .
//
//	@Summary		更新订单信息 Summary
//	@Description	更新订单信息 Description
//	@Param			request	body		order.UpdateOrderReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/order/update [POST]
func Update(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UpdateOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateStatus .
//
//	@Summary		更新订单状态 Summary
//	@Description	更新订单状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/order/status [POST]
func UpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListOrder .
//
//	@Summary		获取订单列表 Summary
//	@Description	获取订单列表 Description
//	@Param			request	body		order.ListOrderReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/order/list [POST]
func ListOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ListOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewOrder(ctx, c).List(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// GetOrderById .
//
//	@Summary		获取订单详情 Summary
//	@Description	获取订单详情 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/order/info [GET]
func GetOrderById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewOrder(ctx, c).Info(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 1, "")
	return
}

// OrderListExport .
//
//	@Summary		导出订单列表 Summary
//	@Description	导出订单列表 Description
//	@Param			request	body		order.ListOrderReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@Param			request	body		base.IDReq	true	"query params"
//
// @router /service/order/list/export [POST]
func OrderListExport(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ListOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	export, err := service.NewOrder(ctx, c).OrderListExport(&req)
	if err != nil {
		utils.SendResponse(c, errno.DirtyData, nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, map[string]string{
		"url": export,
	}, 0, "")
}

// Buy .
// @router /service/order/buy [POST]
func Buy(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.BuyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Code generated by hertz generator.

package wx

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	member "saas/idl_gen/model/member"
	memberProduct "saas/idl_gen/model/member/memberProduct"
	order "saas/idl_gen/model/order"
	schedule "saas/idl_gen/model/schedule"
	wx "saas/idl_gen/model/wx"
)

// MemberLogout .
// @router /service/wx/member/logout [POST]
func MemberLogout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberInfo .
// @router /service/wx/member/info [POST]
func MemberInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberProductInfo .
// @router /service/wx/member/product-info [POST]
func MemberProductInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberProductList .
// @router /service/wx/member/product-list [POST]
func MemberProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req memberProduct.MemberProductListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberContestList .
// @router /service/wx/member/contest-list [POST]
func MemberContestList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberContestListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberBootcampList .
// @router /service/wx/member/bootcamp-list [POST]
func MemberBootcampList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberBootcampListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberCommunityList .
// @router /service/wx/member/community-list [POST]
func MemberCommunityList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberCommunityListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberOrderList .
// @router /service/wx/member/order-list [POST]
func MemberOrderList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberCommunityListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberContractList .
// @router /service/wx/member/contract-list [POST]
func MemberContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberContractListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ScheduleMemberList .
// @router /service/wx/member/schedule-member-list [POST]
func ScheduleMemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleMemberListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ContestList .
// @router /service/wx/member/contest-list [POST]
func ContestList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.ContestListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ContestInfo .
// @router /service/wx/member/contest-info [POST]
func ContestInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// JoinContest .
// @router /service/wx/member/join-contest [POST]
func JoinContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.JoinContestReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// BootcampList .
// @router /service/wx/member/bootcamp-list [POST]
func BootcampList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.BootcampListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// BootcampInfo .
// @router /service/wx/member/bootcamp-info [POST]
func BootcampInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// JoinBootcamp .
// @router /service/wx/member/join-bootcamp [POST]
func JoinBootcamp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.JoinBootcampReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommunityList .
// @router /service/wx/member/community-list [POST]
func CommunityList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.CommunityListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommunityInfo .
// @router /service/wx/member/community-info [POST]
func CommunityInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// JoinCommunity .
// @router /service/wx/member/join-community [POST]
func JoinCommunity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.JoinCommunityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// VenueList .
// @router /service/wx/member/venue-list [POST]
func VenueList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.VenueListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// VenueInfo .
// @router /service/wx/member/venue-info [POST]
func VenueInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ScanQR .
// @router /service/wx/member/scan-QR [POST]
func ScanQR(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.ScanQRReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Activation .
// @router /service/wx/member/activation [POST]
func Activation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateMemberScheduleCourse .
// @router /service/wx/member/create-member-schedule-course [POST]
func CreateMemberScheduleCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.CreateOrUpdateScheduleCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateMemberScheduleCourseLessons .
// @router /service/wx/member/create-member-schedule-lessons [POST]
func CreateMemberScheduleCourseLessons(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.CreateMemberScheduleLessonsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ProductInfo .
// @router /service/wx/member/product-info [POST]
func ProductInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ProductList .
// @router /service/wx/member/product-list [POST]
func ProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.ProductListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// Buy .
// @router /service/wx/member/buy [POST]
func Buy(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.BuyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CoachList .
// @router /service/wx/member/coach-list [POST]
func CoachList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.CoachListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CoachInfo .
// @router /service/wx/member/coach-info [POST]
func CoachInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// PlaceList .
// @router /service/wx/member/place-list [POST]
func PlaceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.PlaceListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// PlaceInfo .
// @router /service/wx/member/place-info [POST]
func PlaceInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreatePlaceSchedule .
// @router /service/wx/member/create-place-schedule [POST]
func CreatePlaceSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.CreatePlaceScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MyMember .
// @router /service/wx/staff/my-member [POST]
func MyMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.MyMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CoachScheduleList .
// @router /service/wx/staff/schedule-member-list [POST]
func CoachScheduleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleCoachListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// SignMemberSchedule .
// @router /service/wx/staff/sign-member-schedule [POST]
func SignMemberSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.SignMemberScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// SignStaffSchedule .
// @router /service/wx/staff/sign-staff-schedule [POST]
func SignStaffSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.SignStaffScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberRegister .
// @router /service/wx/member/register [POST]
func MemberRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.MemberRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberCaptcha .
// @router /service/wx/member/captcha [POST]
func MemberCaptcha(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.MemberCaptchaReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberLogin .
// @router /service/wx/member/login [POST]
func MemberLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.MemberLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// StaffCaptcha .
// @router /service/wx/staff/captcha [POST]
func StaffCaptcha(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.StaffCaptchaReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// StaffLogin .
// @router /service/wx/staff/login [POST]
func StaffLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req wx.StaffLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// StaffLogout .
// @router /service/wx/staff/logout [POST]
func StaffLogout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

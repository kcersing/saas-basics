// Code generated by hertz generator.

package token

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	token "saas/idl_gen/model/token"
)

// UpdateToken .
//
//	@Summary		更新token Summary
//	@Description	更新token Description
//	@Param			request	body		token.TokenInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/token/update [POST]
func UpdateToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req token.TokenInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewToken(ctx, c).Update(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteToken .
//
//	@Summary		删除token Summary
//	@Description	删除token Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/token [POST]
func DeleteToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = service.NewToken(ctx, c).Delete(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// TokenList .
//
//	@Summary		token列表 Summary
//	@Description	token列表 Description
//	@Param			request	body		token.TokenListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/token/list [POST]
func TokenList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req token.TokenListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewToken(ctx, c).List(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

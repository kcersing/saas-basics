// Code generated by hertz generator.

package sms

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	sms "saas/idl_gen/model/sms"
)

// SmsInfo .
//
//	@Summary		场馆短信详情 Summary
//	@Description	场馆短信详情 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sms/info [POST]
func SmsInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewAliyunSms(ctx, c).Info(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// SmsSendList .
//
//	@Summary		场馆短信发送记录 Summary
//	@Description	场馆短信发送记录 Description
//	@Param			request	body		sms.SmsSendListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sms/send-list [POST]
func SmsSendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sms.SmsSendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewAliyunSms(ctx, c).SendList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// SmsBuy .
//
//	@Summary		购买短信 Summary
//	@Description	购买短信 Description
//	@Param			request	body		sms.SmsBuyReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sms/buy [POST]
func SmsBuy(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sms.SmsBuyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := service.NewAliyunSms(ctx, c).Buy(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, resp, 0, "")
	return
}

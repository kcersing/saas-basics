// Code generated by hertz generator.

package bootcamp

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	bootcamp "saas/idl_gen/model/bootcamp"
)

// CreateBootcamp .
//
//	@Summary		创建训练营 Summary
//	@Description	创建训练营 Description
//	@Param			request	body		bootcamp.BootcampInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/create [POST]
func CreateBootcamp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.BootcampInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBootcamp .
//
//	@Summary		更新训练营 Summary
//	@Description	更新训练营 Description
//	@Param			request	body		bootcamp.BootcampInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/update [POST]
func UpdateBootcamp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.BootcampInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// BootcampInfo .
// @Summary		训练营信息 Summary
//
//	@Description	训练营信息 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/info [POST]
func BootcampInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// BootcampList .
//
// @Summary		训练营列表 Summary
//
//	@Description	训练营列表 Description
//	@Param			request	body		bootcamp.BootcampListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/list [POST]
func BootcampList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.BootcampListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBootcampStatus .
//
// @Summary		更新训练营状态 Summary
//
//	@Description	更新训练营状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/status [POST]
func UpdateBootcampStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBootcampShow .
//
// @Summary		更新训练营展示状态 Summary
//
//	@Description	更新训练营展示状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/show [POST]
func UpdateBootcampShow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateParticipant .
//
//	@Summary		创建训练营报名 Summary
//
//	@Description	创建训练营报名 Description
//	@Param			request	body		bootcamp.ParticipantInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/create [POST]
func CreateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateParticipant .
//
//	@Summary		更新训练营报名 Summary
//
//	@Description	更新训练营报名 Description
//	@Param			request	body		bootcamp.ParticipantInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/update [POST]
func UpdateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// BootcampParticipantInfo .
//
//	@Summary		训练营报名信息 Summary
//
//	@Description	训练营报名信息 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/info [POST]
func BootcampParticipantInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ParticipantListList .
//
//	@Summary		训练营报名列表 Summary
//
//	@Description	训练营报名列表 Description
//	@Param			request	body		bootcamp.ParticipantListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/list [POST]
func ParticipantListList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ParticipantListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateParticipantStatus .
// @router /service/bootcamp/participant/status [POST]
func UpdateParticipantStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ParticipantListListExport .
//
//	@Summary		训练营报名列表导出 Summary
//
//	@Description	训练营报名列表导出 Description
//	@Param			request	body		bootcamp.ParticipantListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/export [POST]
func ParticipantListListExport(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ParticipantListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ResultsUpload .
//
//	@Summary		训练营报名结果上传 Summary
//
//	@Description	训练营报名结果上传 Description
//	@Param			request	body		bootcamp.ResultsUploadReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/results-upload [POST]
func ResultsUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ResultsUploadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// PromotionalLinks .
//
//	@Summary		训练营推广链接 Summary
//
//	@Description	训练营推广链接 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/promotional-links [POST]
func PromotionalLinks(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// DelBootcamp .
//
//	@Summary		删除训练营 Summary
//
//	@Description	删除训练营 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/del [POST]
func DelBootcamp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ParticipantFinish .
//
//	@Summary		训练营报名完成 Summary
//
//	@Description	训练营报名完成 Description
//	@Param			request	body		bootcamp.ParticipantFinishReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/bootcamp/participant/finish [POST]
func ParticipantFinish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req bootcamp.ParticipantFinishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

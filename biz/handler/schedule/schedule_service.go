// Code generated by hertz generator.

package schedule

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	schedule "saas/idl_gen/model/schedule"
)

// CreateScheduleUserTimePeriod .
//
// @Summary 添加教练值班时间段
// @Description 添加教练值班时间段
//
//	@Param			request	body		schedule.UserTimePeriodReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/create-user-time-period [POST]
func CreateScheduleUserTimePeriod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.UserTimePeriodReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).CreateScheduleUserTimePeriod(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateScheduleUserTimePeriod .
//
// @Summary 更新教练值班时间段
// @Description 更新教练值班时间段
//
//	@Param			request	body		schedule.UpdateUserTimePeriodReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/update-user-time-period [POST]
func UpdateScheduleUserTimePeriod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.UpdateUserTimePeriodReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).UpdateScheduleUserTimePeriod(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// CreateScheduleCourse .
//
// @Summary 会员约课-私教课
// @Description 会员约课-私教课
//
//	@Param			request	body		schedule.CreateOrUpdateScheduleCourseReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/create-cours [POST]
func CreateScheduleCourse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.CreateOrUpdateScheduleCourseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).CreateScheduleCourse(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// CreateScheduleLessons .
//
// @Summary 添加课程-团课
// @Description 添加课程-团课
//
//	@Param			request	body		schedule.CreateOrUpdateScheduleLessonsReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/create-lessons [POST]
func CreateScheduleLessons(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.CreateOrUpdateScheduleLessonsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = service.NewSchedule(ctx, c).CreateScheduleLessons(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateScheduleStatus .
//
// @Summary 更新课程状态
// @Description 更新课程状态
//
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/status [POST]
func UpdateScheduleStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = service.NewSchedule(ctx, c).UpdateScheduleStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ScheduleList .
//
// @Summary 课程列表
// @Description 课程列表
//
//	@Param			request	body		schedule.ScheduleListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/list [POST]
func ScheduleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSchedule(ctx, c).ScheduleList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// ScheduleDateList .
//
// @Summary 课程日期列表
// @Description 课程日期列表
//
//	@Param			request	body		schedule.ScheduleListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/date-list [POST]
func ScheduleDateList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSchedule(ctx, c).ScheduleDateList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// ScheduleInfo .
//
// @Summary 课程详情
// @Description 课程详情
//
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/info [POST]
func ScheduleInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewSchedule(ctx, c).ScheduleInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// CreateMemberSubscribeLessons .
//
// @Summary 会员约课-团课
// @Description 会员约课-团课
//
//	@Param			request	body		schedule.MemberSubscribeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/create-member-subscribe-lessons [POST]
func CreateMemberSubscribeLessons(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.MemberSubscribeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).CreateMemberSubscribeLessons(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ScheduleMemberList .
//
// @Summary 会员约课列表
// @Description 会员约课列表
//
//	@Param			request	body		schedule.ScheduleMemberListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-member-list [POST]
func ScheduleMemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleMemberListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSchedule(ctx, c).ScheduleMemberList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// UpdateMemberStatus .
//
// @Summary 更新会员约课上课状态
// @Description 更新会员约课上课状态
//
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-member-status [POST]
func UpdateMemberStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).UpdateScheduleMemberStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ScheduleMemberInfo .
//
// @Summary 会员约课上课详情
// @Description 会员约课上课详情
//
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-member-info [POST]
func ScheduleMemberInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewSchedule(ctx, c).ScheduleMemberInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ScheduleCoachList .
//
// @Summary 教练约课上课列表
// @Description 教练约课上课列表
//
//	@Param			request	body		schedule.ScheduleCoachListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-coach-list [POST]
func ScheduleCoachList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleCoachListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSchedule(ctx, c).ScheduleCoachList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// UpdateScheduleCoachStatus .
//
// @Summary 更新教练约课上课状态
// @Description 更新教练约课上课状态
//
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-coach-status [POST]
func UpdateScheduleCoachStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).UpdateScheduleCoachStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ScheduleCoachInfo .
//
// @Summary 教练约课上课详情
// @Description 教练约课上课详情
//
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/schedule-coach-info [POST]
func ScheduleCoachInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	info, err := service.NewSchedule(ctx, c).ScheduleCoachInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ScheduleLessonsPublish .
//
// @Summary 发布课程
// @Description 发布课程
//
//	@Param			request	body		base.Ids	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/lessons-publish [POST]
func ScheduleLessonsPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.Ids
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewSchedule(ctx, c).ScheduleLessonsPublish(req.Ids)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UserTimePeriod .
//
// @Summary 员工时间周期
// @Description 员工时间周期
//
//	@Param			request	body		schedule.UserPeriodReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/user-time-period [POST]
func UserTimePeriod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.UserPeriodReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewSchedule(ctx, c).UserTimePeriod(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ScheduleCoachPeriodList .
//
// @Summary 教练时间-课程周期列表
// @Description 教练-课程时间周期列表
//
//	@Param			request	body		schedule.UserPeriodReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/schedule/coach-period-list [POST]
func ScheduleCoachPeriodList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.UserPeriodReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSchedule(ctx, c).ScheduleCoachPeriodList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

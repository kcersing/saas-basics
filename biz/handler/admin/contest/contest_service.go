// Code generated by hertz generator.

package contest

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	base "saas/idl_gen/model/base"
)

// CreateContest .
// @router /api/idl/contest/create [POST]
func CreateContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateContest .
// @router /api/idl/contest/update [POST]
func UpdateContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ContestInfo .
// @router /api/idl/contest/info [POST]
func ContestInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ContestList .
// @router /api/idl/contest/list [POST]
func ContestList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMemberStatus .
// @router /api/idl/contest/status [POST]
func UpdateMemberStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateParticipant .
// @router /api/idl/contest/create [POST]
func CreateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateParticipant .
// @router /api/idl/contest/update [POST]
func UpdateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ContestParticipantInfo .
// @router /api/idl/contest/info [POST]
func ContestParticipantInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// ParticipantListList .
// @router /api/idl/contest/list [POST]
func ParticipantListList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateParticipantStatus .
// @router /api/idl/contest/status [POST]
func UpdateParticipantStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

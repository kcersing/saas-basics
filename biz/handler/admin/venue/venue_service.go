// Code generated by hertz generator.

package venue

import (
	"context"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/app/idl/idl_gen/model/base"
	venue "saas/app/idl/idl_gen/model/idl/venue"
)

// CreatePlace .
// @router /api/idl/place/create [POST]
func CreatePlace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.CreateOrUpdateVenuePlaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var placeInfo do.VenuePlaceInfo
	err = copier.Copy(&placeInfo, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).CreatePlace(&placeInfo)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdatePlace .
// @router /api/idl/place/update [POST]
func UpdatePlace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.CreateOrUpdateVenuePlaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var placeInfo do.VenuePlaceInfo
	err = copier.Copy(&placeInfo, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).UpdatePlace(&placeInfo)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// PlaceUpdateStatus .
// @router /api/idl/place/status [POST]
func PlaceUpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).UpdatePlaceStatus(int64(req.ID), req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// PlaceList .
// @router /api/idl/place/list [POST]
func PlaceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var venuePlaceListReq do.VenuePlaceListReq
	err = copier.Copy(&venuePlaceListReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := admin.NewVenue(ctx, c).PlaceList(&venuePlaceListReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// Create .
// @router /api/idl/venue/create [POST]
func Create(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.CreateOrUpdateVenueReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var venueInfo do.VenueInfo
	err = copier.Copy(&venueInfo, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).Create(&venueInfo)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// Update .
// @router /api/idl/venue/update [POST]
func Update(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.CreateOrUpdateVenueReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var venueReq do.VenueInfo
	err = copier.Copy(&venueReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).Update(&venueReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateStatus .
// @router /api/idl/venue/status [POST]
func UpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewVenue(ctx, c).UpdateVenueStatus(int64(req.ID), req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// List .
// @router /api/idl/venue/list [POST]
func List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.ListReq
	err = c.BindAndValidate(&req)

	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var venueListReq do.VenueListReq
	err = copier.Copy(&venueListReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	userList, total, err := admin.NewVenue(ctx, c).List(&venueListReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, userList, int64(total), "")
	return
}

// Code generated by hertz generator.

package role

import (
	"context"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"saas/app/admin/idl_gen/model/admin/role"
	"saas/app/admin/idl_gen/model/base"
	"saas/app/pkg/service/admin"
)

// CreateAuthority .
// @router /api/idl/authority/api/create [POST]
func CreateAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CreateOrUpdateApiAuthorityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	//var apiInfos []*do.ApiAuthInfo
	//err = copier.Copy(&apiInfos, &req.Data)
	//if err != nil {
	//	utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
	//	return
	//}

	err = admin.NewAuth(ctx, c).UpdateApiAuth(strconv.FormatInt(req.RoleID, 10), req.Apis)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateApiAuthority .
// @router /api/idl/authority/api/update [POST]
func UpdateApiAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.CreateOrUpdateApiAuthorityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	//var apiInfos []*do.ApiAuthInfo
	//err = copier.Copy(&apiInfos, &req)
	//if err != nil {
	//	utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
	//	return
	//}

	err = admin.NewAuth(ctx, c).UpdateApiAuth(strconv.FormatInt(req.RoleID, 10), req.Apis)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ApiAuthority .
// @router /api/idl/authority/api/role [POST]
func ApiAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	roleId := strconv.FormatInt(req.ID, 10)
	if roleId == "0" {
		c.String(consts.StatusBadRequest, "roleId 不应为0")
		return
	}
	policies, err := admin.NewAuth(ctx, c).ApiAuth(roleId)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	total := uint64(len(policies))
	utils.SendResponse(c, errno.Success, policies, int64(total), "")
	return
}

// CreateMenuAuthority .
// @router /api/idl/authority/menu/create [POST]
func CreateMenuAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.MenuAuthorityInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewAuth(ctx, c).UpdateMenuAuth(req.RoleID, req.MenuIds)
	if err != nil {

	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateMenuAuthority .
// @router /api/idl/authority/menu/update [POST]
func UpdateMenuAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.MenuAuthorityInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewAuth(ctx, c).UpdateMenuAuth(req.RoleID, req.MenuIds)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// MenuAuthority .
// @router /api/idl/authority/menu/role [POST]
func MenuAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	menuIDs, err := admin.NewAuth(ctx, c).MenuAuth(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	m := map[string]interface{}{
		"roleID":  req.ID,
		"menuIDs": menuIDs,
	}
	utils.SendResponse(c, errno.Success, m, 0, "")
	return
}

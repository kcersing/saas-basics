// Code generated by hertz generator.

package member

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	member "saas/idl_gen/model/member"
)

// CreateMember .
// @Summary  创建会员 Summary
// @Description 创建会员 Description
// @Param request body member.CreateOrUpdateMemberReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/create [POST]
func CreateMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.CreateOrUpdateMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMember .
// @Summary  更新会员 Summary
// @Description 更新会员 Description
// @Param request body member.CreateOrUpdateMemberReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/update [POST]
func UpdateMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.CreateOrUpdateMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberInfo .
// @Summary  会员详情 Summary
// @Description 会员详情 Description
// @Param request body base.IDReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/info [POST]
func MemberInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberPrivacy .
// @Summary  会员隐私 Summary
// @Description 会员隐私 Description
// @Param request body base.IDReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/privacy [POST]
func MemberPrivacy(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberList .
// @Summary  会员列表 Summary
// @Description 会员列表 Description
// @Param request body member.MemberListReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/list [POST]
func MemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMemberStatus .
// @Summary  更新会员状态 Summary
// @Description 更新会员状态 Description
// @Param request body base.StatusCodeReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/status [POST]
func UpdateMemberStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberSearch .
// @Summary  会员搜索 Summary
// @Description 会员搜索 Description
// @Param request body member.MemberSearchReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/search [POST]
func MemberSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberSearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberNode .
// @Summary  会员节点 Summary
// @Description 会员节点 Description
// @Param request body base.IDReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/node [POST]
func MemberNode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberContractList .
// @Summary  会员合同列表 Summary
// @Description 会员合同列表 Description
// @Param request body member.MemberContractListReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/contract-list [POST]
func MemberContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberContractListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberProductList .
// @Summary  会员产品列表 Summary
// @Description 会员产品列表 Description
// @Param request body member.MemberProductListReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/product-list [POST]
func MemberProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberProductListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberPropertyList .
// @Summary  会员产品属性列表 Summary
// @Description 会员产品属性列表 Description
// @Param request body member.MemberPropertyListReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/property-list [POST]
func MemberPropertyList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberPropertyListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberProductDetail .
// @Summary  会员产品详情 Summary
// @Description 会员产品详情 Description
// @Param request body base.IDReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/product-detail [POST]
func MemberProductDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberPropertyDetail .
// @Summary  会员产品属性详情 Summary
// @Description 会员产品属性详情 Description
// @Param request body base.IDReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/property-detail [POST]
func MemberPropertyDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberPropertyUpdate .
// @Summary  会员产品属性更新 Summary
// @Description 会员产品属性更新 Description
// @Param request body member.MemberPropertyListReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/property-update [POST]
func MemberPropertyUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberPropertyListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberProductSearch .
// @Summary  会员产品搜索 Summary
// @Description 会员产品搜索 Description
// @Param request body member.MemberProductSearchReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/search-product [POST]
func MemberProductSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberProductSearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// MemberPropertySearch .
// @Summary  会员产品属性搜索 Summary
// @Description 会员产品属性搜索 Description
// @Param request body member.MemberPropertySearchReq true "query params"
// @Success      200  {object}  utils.Response
// @router /service/member/search-property [POST]
func MemberPropertySearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req member.MemberPropertySearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

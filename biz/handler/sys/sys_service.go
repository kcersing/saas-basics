// Code generated by hertz generator.

package sys

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	sys "saas/idl_gen/model/sys"
)

// VenueList .
// @Summary 场馆列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/venue/list [POST]
func VenueList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).VenueList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// MemberList .
// @Summary 会员列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/member/list [POST]
func MemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).MemberList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// ContractList .
// @Summary 合同列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/contract/list [POST]
func ContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).ContractList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// StaffList .
// @Summary 员工列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/staff/list [POST]
func StaffList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).StaffList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// PlaceList .
// @Summary 场地列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/place/list [POST]
func PlaceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).PlaceList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// RoleList .
// @Summary 角色列表
//
//	@Param			request	body		base.ListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/sys/role/list [POST]
func RoleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).RoleList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

// ProductList .
// @router /service/sys/product/list [POST]
func ProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.SysProductListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewSys(ctx, c).ProductList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, total, "")
	return
}

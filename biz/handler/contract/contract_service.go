// Code generated by hertz generator.

package contract

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	contract "saas/idl_gen/model/contract"
)

// ContractList .
//
//	@Summary		合同列表 Summary
//	@Description	合同列表 Description
//	@Param			request	body		contract.ContractListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contract/list [POST]
func ContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.ContractListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewContract(ctx, c).List(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// ContractCreate .
//
//	@Summary		创建合同 Summary
//	@Description	创建合同 Description
//	@Param			request	body		contract.CreateOrUpdateContractReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contract/create [POST]
func ContractCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.CreateOrUpdateContractReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContract(ctx, c).Create(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractUpdate .
//
//	@Summary		更新合同 Summary
//	@Description	更新合同 Description
//	@Param			request	body		contract.CreateOrUpdateContractReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contract/update [POST]
func ContractUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.CreateOrUpdateContractReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContract(ctx, c).Update(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractUpdateStatus .
//
//	@Summary		更新合同状态 Summary
//	@Description	更新合同状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contract/status [POST]
func ContractUpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContract(ctx, c).UpdateStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractByID .
//
//	@Summary		获取合同信息 Summary
//	@Description	获取合同信息 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contract [POST]
func ContractByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewContract(ctx, c).Info(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

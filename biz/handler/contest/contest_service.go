// Code generated by hertz generator.

package contest

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	qrcode "github.com/skip2/go-qrcode"
	"saas/biz/infras/service"
	base "saas/idl_gen/model/base"
	contest "saas/idl_gen/model/contest"
	"saas/pkg/errno"
	"saas/pkg/utils"
	"strconv"
)

// CreateContest .
//
//	@Summary		创建比赛 Summary
//	@Description	创建比赛 Description
//	@Param			request	body		contest.ContestInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/create [POST]
func CreateContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).CreateContest(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateContest .
//
//	@Summary		更新比赛 Summary
//	@Description	更新比赛 Description
//	@Param			request	body		contest.ContestInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/update [POST]
func UpdateContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).UpdateContest(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContestInfo .
//
//	@Summary		比赛信息 Summary
//	@Description	比赛信息 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/info [POST]
func ContestInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewContest(ctx, c).ContestInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ContestList .
//
//	@Summary		比赛列表 Summary
//	@Description	比赛列表 Description
//	@Param			request	body		contest.ContestListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/list [POST]
func ContestList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ContestListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewContest(ctx, c).ContestList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// CreateParticipant .
//
//	@Summary		添加参赛人 Summary
//	@Description	添加参赛人 Description
//	@Param			request	body		contest.ParticipantInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/participant/create [POST]
func CreateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).CreateParticipant(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateParticipant .
//
//	@Summary		更新参赛人 Summary
//	@Description	更新参赛人 Description
//	@Param			request	body		contest.ParticipantInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/participant/update [POST]
func UpdateParticipant(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).UpdateParticipant(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContestParticipantInfo .
//
//	@Summary		参赛人信息 Summary
//	@Description	参赛人信息 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/participant/info [POST]
func ContestParticipantInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	info, err := service.NewContest(ctx, c).ParticipantInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// ParticipantListList .
//
//	@Summary		参赛人列表 Summary
//	@Description	参赛人列表 Description
//	@Param			request	body		contest.ParticipantListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/participant/list [POST]
func ParticipantListList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewContest(ctx, c).ParticipantList(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// UpdateParticipantStatus .
//
//	@Summary		更新参赛人状态 Summary
//	@Description	更新参赛人状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/participant/status [POST]
func UpdateParticipantStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = service.NewContest(ctx, c).UpdateParticipantStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ResultsUpload .
// @Summary		上传比赛成绩 Summary
// @Description	上传比赛成绩 Description
// @Param			request	body		contest.ResultsUploadReq	true	"query params"
// @Success		200		{object}	utils.Response
// @router /service/contest/results-upload [POST]
func ResultsUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ResultsUploadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// PromotionalLinks .
// @Summary		获取推广链接 Summary
// @Description	获取推广链接 Description
// @Param			request	body		base.IDReq	true	"query params"
// @Success		200		{object}	utils.Response
// @router /service/contest/promotional-links [POST]
func PromotionalLinks(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	qrCode, err := qrcode.Encode("weixin://dl/business/?t= *TICKET*&Contest_id="+strconv.FormatInt(req.ID, 10), qrcode.Medium, 256)
	if err != nil {
		utils.SendResponse(c, errno.ServiceErr, nil, 0, "")
	}
	type img struct {
		Bs64 []byte `json:"bs64"`
	}
	utils.SendResponse(c, errno.Success, img{Bs64: qrCode}, 0, "")
}

// UpdateContestStatus .
//
//	@Summary		更新比赛状态 Summary
//	@Description	更新比赛状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/status [POST]
//
// @router /service/contest/status [POST]
func UpdateContestStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).UpdateContestStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateContestShow .
//
//	@Summary		更新比赛显示状态 Summary
//	@Description	更新比赛显示状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/contest/status [POST]
//
// @router /service/contest/show [POST]
func UpdateContestShow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).UpdateContestShow(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DelContest .
//
//	@Summary		删除比赛 Summary
//	@Description	删除比赛 Description
//	@Param			request	body		base.IDReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/contest/del [POST]
func DelContest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewContest(ctx, c).DelContest(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ParticipantListListExport .
//
//	@Summary		导出比赛信息 Summary
//	@Description	导出比赛信息 Description
//	@Param			request	body		contest.ParticipantListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//
// @router /service/participant/export [POST]
func ParticipantListListExport(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contest.ParticipantListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	service.NewContest(ctx, c).ParticipantListListExport(req)

}

// Code generated by hertz generator.

package schedule

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"

	"github.com/cloudwego/hertz/pkg/app"
	base "saas/app/idl/idl_gen/model/base"
	schedule "saas/app/idl/idl_gen/model/idl/schedule"
)

// CreateSchedule .
// @router /api/idl/schedule/create [POST]
func CreateSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.CreateOrUpdateScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var createOrUpdateScheduleReq do.CreateOrUpdateScheduleReq
	err = copier.Copy(&createOrUpdateScheduleReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewSchedule(ctx, c).ScheduleCreate(createOrUpdateScheduleReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateSchedule .
// @router /api/idl/schedule/update [POST]
func UpdateSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.CreateOrUpdateScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var createOrUpdateScheduleReq do.CreateOrUpdateScheduleReq
	err = copier.Copy(&createOrUpdateScheduleReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewSchedule(ctx, c).ScheduleUpdate(createOrUpdateScheduleReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateStatus .
// @router /api/idl/schedule/status [POST]
func UpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewSchedule(ctx, c).ScheduleUpdateStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ListSchedule .
// @router /api/idl/schedule/list [POST]
func ListSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ListScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.ScheduleListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := admin.NewSchedule(ctx, c).ScheduleList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// DateListSchedule .
// @router /api/idl/schedule/date-list [POST]
func DateListSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ListScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.ScheduleListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, total, err := admin.NewSchedule(ctx, c).ScheduleDateList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// GetScheduleById .
// @router /api/idl/schedule/info [GET]
func GetScheduleById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	info, err := admin.NewSchedule(ctx, c).ScheduleInfo(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// GetScheduleMemberList .
// @router /api/idl/schedule/schedule-member-list [POST]
func GetScheduleMemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.ScheduleMemberListReq
	err = copier.Copy(&listReq, &req)

	hlog.Info(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := admin.NewSchedule(ctx, c).MemberList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// SearchSubscribeByMember .
// @router /api/idl/schedule/search-subscribe-by-member [POST]
func SearchSubscribeByMember(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.SearchSubscribeByMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.SearchSubscribeByMemberReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := admin.NewSchedule(ctx, c).SearchSubscribeByMember(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// MemberSubscribe .
// @router /api/idl/schedule/member-subscribe [POST]
func MemberSubscribe(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.MemberSubscribeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var create do.ScheduleMemberCreate
	err = copier.Copy(&create, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewSchedule(ctx, c).MemberCreate(create)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateMemberStatus .
// @router /api/idl/schedule/schedule-member-status [POST]
func UpdateMemberStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewSchedule(ctx, c).UpdateMemberStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// GetScheduleCoachList .
// @router /api/idl/schedule/schedule-coach-list [POST]
func GetScheduleCoachList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req schedule.ScheduleMemberReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.ScheduleCoachListReq
	err = copier.Copy(&listReq, &req)

	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	list, total, err := admin.NewSchedule(ctx, c).CoachList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// UpdateCoachStatus .
// @router /api/idl/schedule/schedule-coach-status [POST]
func UpdateCoachStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewSchedule(ctx, c).CoachUpdateStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

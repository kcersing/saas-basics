// Code generated by hertz generator.

package contract

import (
	"context"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"

	"github.com/cloudwego/hertz/pkg/app"
	base "saas/app/idl/idl_gen/model/base"
	contract "saas/app/idl/idl_gen/model/idl/contract"
)

// ContractList .
// @router /api/idl/contract/list [POST]
func ContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.ContractListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.ContractListReq
	list, total, err := admin.NewContract(ctx, c).List(&listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// ContractCreate .
// @router /api/idl/contract/create [POST]
func ContractCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.CreateOrUpdateContractReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var contractReq do.ContractInfo
	err = copier.Copy(&contractReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewContract(ctx, c).Create(&contractReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractUpdate .
// @router /api/idl/contract/update [POST]
func ContractUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req contract.CreateOrUpdateContractReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var contractReq do.ContractInfo
	err = copier.Copy(&contractReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewContract(ctx, c).Update(&contractReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractUpdateStatus .
// @router /api/idl/contract/status [POST]
func ContractUpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewContract(ctx, c).UpdateStatus(int64(req.ID), req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// ContractByID .
// @router /api/idl/contract [POST]
func ContractByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	one, err := admin.NewContract(ctx, c).Info(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, one, 1, "")
	return
}

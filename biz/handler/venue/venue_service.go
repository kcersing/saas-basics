// Code generated by hertz generator.

package venue

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "saas/idl_gen/model/base"
	venue "saas/idl_gen/model/venue"
)

// CreateVenuePlace .
//
//	@Summary		创建场地 Summary
//	@Description	创建场地 Description
//	@Param			request	body		venue.VenuePlaceInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/place/create [POST]
func CreateVenuePlace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenuePlaceInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).CreatePlace(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateVenuePlace .
//
//	@Summary		更新场地 Summary
//	@Description	更新场地 Description
//	@Param			request	body		venue.VenuePlaceInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/place/update [POST]
func UpdateVenuePlace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenuePlaceInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).UpdatePlace(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateVenuePlaceStatus .
//
//	@Summary		更新场地状态 Summary
//	@Description	更新场地状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/place/status [POST]
func UpdateVenuePlaceStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).UpdatePlaceStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// VenuePlaceList .
//
//	@Summary		场地列表 Summary
//	@Description	场地列表 Description
//	@Param			request	body		venue.VenuePlaceListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/place/list [POST]
func VenuePlaceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenuePlaceListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewVenue(ctx, c).PlaceList(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// CreateVenue .
//
//	@Summary		创建场馆 Summary
//	@Description	创建场馆 Description
//	@Param			request	body		venue.VenueInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/venue/create [POST]
func CreateVenue(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenueInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).Create(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateVenue .
//
//	@Summary		更新场馆 Summary
//	@Description	更新场馆 Description
//	@Param			request	body		venue.VenueInfo	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/venue/update [POST]
func UpdateVenue(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenueInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).Update(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateVenueStatus .
//
//	@Summary		更新场馆状态 Summary
//	@Description	更新场馆状态 Description
//	@Param			request	body		base.StatusCodeReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/venue/status [POST]
func UpdateVenueStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVenue(ctx, c).UpdateVenueStatus(req.ID, req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// VenueList .
//
//	@Summary		场馆列表 Summary
//	@Description	场馆列表 Description
//	@Param			request	body		venue.VenueListReq	true	"query params"
//	@Success		200		{object}	utils.Response
//	@router			/service/venue/list [POST]
func VenueList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req venue.VenueListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	list, total, err := service.NewVenue(ctx, c).List(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

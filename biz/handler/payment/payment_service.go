// Code generated by hertz generator.

package payment

import (
	"context"
	"saas/biz/infras/service"
	"saas/pkg/errno"
	"saas/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	payment "saas/idl_gen/model/payment"
)

// WXPay .
// @router /service/payment/WXPay [POST]
func WXPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment.PayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	o, err := service.NewWXPayment(ctx, c).UnifyPay(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, o, 0, "")
	return
}

// WXQRPay .
// @router /service/payment/WXQRPay [POST]
func WXQRPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment.PayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	o, err := service.NewWXPayment(ctx, c).QRPay(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, o, 0, "")
	return
}

// WXNotify .
// @router /service/payment/WXNotify [POST]
func WXNotify(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment.NotifyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	service.NewWXPayment(ctx, c).Notify(req)

	return
}

// WXRefundOrder .
// @router /service/payment/WXRefundOrder [POST]
func WXRefundOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment.RefundOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	o, err := service.NewWXPayment(ctx, c).RefundOrder(req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, o, 0, "")
	return
}

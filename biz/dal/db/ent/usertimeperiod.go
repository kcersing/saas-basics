// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/usertimeperiod"
	"saas/idl_gen/model/base"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserTimePeriod is the model entity for the UserTimePeriod schema.
type UserTimePeriod struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 日期
	Date time.Time `json:"date,omitempty"`
	// 时间段
	Period base.Period `json:"period,omitempty"`
	// 員工id
	UserID int64 `json:"user_id,omitempty"`
	// id
	VenueID int64 `json:"venue_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTimePeriodQuery when eager-loading is set.
	Edges        UserTimePeriodEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserTimePeriodEdges holds the relations/edges for other nodes in the graph.
type UserTimePeriodEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTimePeriodEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Users == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTimePeriod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertimeperiod.FieldPeriod:
			values[i] = new([]byte)
		case usertimeperiod.FieldID, usertimeperiod.FieldDelete, usertimeperiod.FieldCreatedID, usertimeperiod.FieldStatus, usertimeperiod.FieldUserID, usertimeperiod.FieldVenueID:
			values[i] = new(sql.NullInt64)
		case usertimeperiod.FieldCreatedAt, usertimeperiod.FieldUpdatedAt, usertimeperiod.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTimePeriod fields.
func (utp *UserTimePeriod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertimeperiod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			utp.ID = int64(value.Int64)
		case usertimeperiod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				utp.CreatedAt = value.Time
			}
		case usertimeperiod.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				utp.UpdatedAt = value.Time
			}
		case usertimeperiod.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				utp.Delete = value.Int64
			}
		case usertimeperiod.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				utp.CreatedID = value.Int64
			}
		case usertimeperiod.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				utp.Status = value.Int64
			}
		case usertimeperiod.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				utp.Date = value.Time
			}
		case usertimeperiod.FieldPeriod:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &utp.Period); err != nil {
					return fmt.Errorf("unmarshal field period: %w", err)
				}
			}
		case usertimeperiod.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				utp.UserID = value.Int64
			}
		case usertimeperiod.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				utp.VenueID = value.Int64
			}
		default:
			utp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserTimePeriod.
// This includes values selected through modifiers, order, etc.
func (utp *UserTimePeriod) Value(name string) (ent.Value, error) {
	return utp.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the UserTimePeriod entity.
func (utp *UserTimePeriod) QueryUsers() *UserQuery {
	return NewUserTimePeriodClient(utp.config).QueryUsers(utp)
}

// Update returns a builder for updating this UserTimePeriod.
// Note that you need to call UserTimePeriod.Unwrap() before calling this method if this UserTimePeriod
// was returned from a transaction, and the transaction was committed or rolled back.
func (utp *UserTimePeriod) Update() *UserTimePeriodUpdateOne {
	return NewUserTimePeriodClient(utp.config).UpdateOne(utp)
}

// Unwrap unwraps the UserTimePeriod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utp *UserTimePeriod) Unwrap() *UserTimePeriod {
	_tx, ok := utp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTimePeriod is not a transactional entity")
	}
	utp.config.driver = _tx.drv
	return utp
}

// String implements the fmt.Stringer.
func (utp *UserTimePeriod) String() string {
	var builder strings.Builder
	builder.WriteString("UserTimePeriod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(utp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(utp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", utp.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", utp.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", utp.Status))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(utp.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", utp.Period))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", utp.UserID))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", utp.VenueID))
	builder.WriteByte(')')
	return builder.String()
}

// UserTimePeriods is a parsable slice of UserTimePeriod.
type UserTimePeriods []*UserTimePeriod

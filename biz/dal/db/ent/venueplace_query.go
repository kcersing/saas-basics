// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/product"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venueplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenuePlaceQuery is the builder for querying VenuePlace entities.
type VenuePlaceQuery struct {
	config
	ctx          *QueryContext
	order        []venueplace.OrderOption
	inters       []Interceptor
	predicates   []predicate.VenuePlace
	withVenue    *VenueQuery
	withProducts *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VenuePlaceQuery builder.
func (vpq *VenuePlaceQuery) Where(ps ...predicate.VenuePlace) *VenuePlaceQuery {
	vpq.predicates = append(vpq.predicates, ps...)
	return vpq
}

// Limit the number of records to be returned by this query.
func (vpq *VenuePlaceQuery) Limit(limit int) *VenuePlaceQuery {
	vpq.ctx.Limit = &limit
	return vpq
}

// Offset to start from.
func (vpq *VenuePlaceQuery) Offset(offset int) *VenuePlaceQuery {
	vpq.ctx.Offset = &offset
	return vpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vpq *VenuePlaceQuery) Unique(unique bool) *VenuePlaceQuery {
	vpq.ctx.Unique = &unique
	return vpq
}

// Order specifies how the records should be ordered.
func (vpq *VenuePlaceQuery) Order(o ...venueplace.OrderOption) *VenuePlaceQuery {
	vpq.order = append(vpq.order, o...)
	return vpq
}

// QueryVenue chains the current query on the "venue" edge.
func (vpq *VenuePlaceQuery) QueryVenue() *VenueQuery {
	query := (&VenueClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueplace.Table, venueplace.FieldID, selector),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueplace.VenueTable, venueplace.VenueColumn),
		)
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (vpq *VenuePlaceQuery) QueryProducts() *ProductQuery {
	query := (&ProductClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venueplace.Table, venueplace.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, venueplace.ProductsTable, venueplace.ProductsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VenuePlace entity from the query.
// Returns a *NotFoundError when no VenuePlace was found.
func (vpq *VenuePlaceQuery) First(ctx context.Context) (*VenuePlace, error) {
	nodes, err := vpq.Limit(1).All(setContextOp(ctx, vpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{venueplace.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vpq *VenuePlaceQuery) FirstX(ctx context.Context) *VenuePlace {
	node, err := vpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VenuePlace ID from the query.
// Returns a *NotFoundError when no VenuePlace ID was found.
func (vpq *VenuePlaceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = vpq.Limit(1).IDs(setContextOp(ctx, vpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{venueplace.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vpq *VenuePlaceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := vpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VenuePlace entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VenuePlace entity is found.
// Returns a *NotFoundError when no VenuePlace entities are found.
func (vpq *VenuePlaceQuery) Only(ctx context.Context) (*VenuePlace, error) {
	nodes, err := vpq.Limit(2).All(setContextOp(ctx, vpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{venueplace.Label}
	default:
		return nil, &NotSingularError{venueplace.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vpq *VenuePlaceQuery) OnlyX(ctx context.Context) *VenuePlace {
	node, err := vpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VenuePlace ID in the query.
// Returns a *NotSingularError when more than one VenuePlace ID is found.
// Returns a *NotFoundError when no entities are found.
func (vpq *VenuePlaceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = vpq.Limit(2).IDs(setContextOp(ctx, vpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{venueplace.Label}
	default:
		err = &NotSingularError{venueplace.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vpq *VenuePlaceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := vpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VenuePlaces.
func (vpq *VenuePlaceQuery) All(ctx context.Context) ([]*VenuePlace, error) {
	ctx = setContextOp(ctx, vpq.ctx, "All")
	if err := vpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VenuePlace, *VenuePlaceQuery]()
	return withInterceptors[[]*VenuePlace](ctx, vpq, qr, vpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vpq *VenuePlaceQuery) AllX(ctx context.Context) []*VenuePlace {
	nodes, err := vpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VenuePlace IDs.
func (vpq *VenuePlaceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if vpq.ctx.Unique == nil && vpq.path != nil {
		vpq.Unique(true)
	}
	ctx = setContextOp(ctx, vpq.ctx, "IDs")
	if err = vpq.Select(venueplace.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vpq *VenuePlaceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := vpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vpq *VenuePlaceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vpq.ctx, "Count")
	if err := vpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vpq, querierCount[*VenuePlaceQuery](), vpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vpq *VenuePlaceQuery) CountX(ctx context.Context) int {
	count, err := vpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vpq *VenuePlaceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vpq.ctx, "Exist")
	switch _, err := vpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vpq *VenuePlaceQuery) ExistX(ctx context.Context) bool {
	exist, err := vpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VenuePlaceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vpq *VenuePlaceQuery) Clone() *VenuePlaceQuery {
	if vpq == nil {
		return nil
	}
	return &VenuePlaceQuery{
		config:       vpq.config,
		ctx:          vpq.ctx.Clone(),
		order:        append([]venueplace.OrderOption{}, vpq.order...),
		inters:       append([]Interceptor{}, vpq.inters...),
		predicates:   append([]predicate.VenuePlace{}, vpq.predicates...),
		withVenue:    vpq.withVenue.Clone(),
		withProducts: vpq.withProducts.Clone(),
		// clone intermediate query.
		sql:  vpq.sql.Clone(),
		path: vpq.path,
	}
}

// WithVenue tells the query-builder to eager-load the nodes that are connected to
// the "venue" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VenuePlaceQuery) WithVenue(opts ...func(*VenueQuery)) *VenuePlaceQuery {
	query := (&VenueClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withVenue = query
	return vpq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VenuePlaceQuery) WithProducts(opts ...func(*ProductQuery)) *VenuePlaceQuery {
	query := (&ProductClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withProducts = query
	return vpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VenuePlace.Query().
//		GroupBy(venueplace.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vpq *VenuePlaceQuery) GroupBy(field string, fields ...string) *VenuePlaceGroupBy {
	vpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VenuePlaceGroupBy{build: vpq}
	grbuild.flds = &vpq.ctx.Fields
	grbuild.label = venueplace.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VenuePlace.Query().
//		Select(venueplace.FieldCreatedAt).
//		Scan(ctx, &v)
func (vpq *VenuePlaceQuery) Select(fields ...string) *VenuePlaceSelect {
	vpq.ctx.Fields = append(vpq.ctx.Fields, fields...)
	sbuild := &VenuePlaceSelect{VenuePlaceQuery: vpq}
	sbuild.label = venueplace.Label
	sbuild.flds, sbuild.scan = &vpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VenuePlaceSelect configured with the given aggregations.
func (vpq *VenuePlaceQuery) Aggregate(fns ...AggregateFunc) *VenuePlaceSelect {
	return vpq.Select().Aggregate(fns...)
}

func (vpq *VenuePlaceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vpq); err != nil {
				return err
			}
		}
	}
	for _, f := range vpq.ctx.Fields {
		if !venueplace.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vpq.path != nil {
		prev, err := vpq.path(ctx)
		if err != nil {
			return err
		}
		vpq.sql = prev
	}
	return nil
}

func (vpq *VenuePlaceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VenuePlace, error) {
	var (
		nodes       = []*VenuePlace{}
		_spec       = vpq.querySpec()
		loadedTypes = [2]bool{
			vpq.withVenue != nil,
			vpq.withProducts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VenuePlace).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VenuePlace{config: vpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vpq.withVenue; query != nil {
		if err := vpq.loadVenue(ctx, query, nodes, nil,
			func(n *VenuePlace, e *Venue) { n.Edges.Venue = e }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withProducts; query != nil {
		if err := vpq.loadProducts(ctx, query, nodes,
			func(n *VenuePlace) { n.Edges.Products = []*Product{} },
			func(n *VenuePlace, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vpq *VenuePlaceQuery) loadVenue(ctx context.Context, query *VenueQuery, nodes []*VenuePlace, init func(*VenuePlace), assign func(*VenuePlace, *Venue)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenuePlace)
	for i := range nodes {
		fk := nodes[i].VenueID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(venue.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vpq *VenuePlaceQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*VenuePlace, init func(*VenuePlace), assign func(*VenuePlace, *Product)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*VenuePlace)
	nids := make(map[int64]map[*VenuePlace]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(venueplace.ProductsTable)
		s.Join(joinT).On(s.C(product.FieldID), joinT.C(venueplace.ProductsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(venueplace.ProductsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(venueplace.ProductsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*VenuePlace]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Product](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "products" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (vpq *VenuePlaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vpq.querySpec()
	_spec.Node.Columns = vpq.ctx.Fields
	if len(vpq.ctx.Fields) > 0 {
		_spec.Unique = vpq.ctx.Unique != nil && *vpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vpq.driver, _spec)
}

func (vpq *VenuePlaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(venueplace.Table, venueplace.Columns, sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64))
	_spec.From = vpq.sql
	if unique := vpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vpq.path != nil {
		_spec.Unique = true
	}
	if fields := vpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venueplace.FieldID)
		for i := range fields {
			if fields[i] != venueplace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vpq.withVenue != nil {
			_spec.Node.AddColumnOnce(venueplace.FieldVenueID)
		}
	}
	if ps := vpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vpq *VenuePlaceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vpq.driver.Dialect())
	t1 := builder.Table(venueplace.Table)
	columns := vpq.ctx.Fields
	if len(columns) == 0 {
		columns = venueplace.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vpq.sql != nil {
		selector = vpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vpq.ctx.Unique != nil && *vpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vpq.predicates {
		p(selector)
	}
	for _, p := range vpq.order {
		p(selector)
	}
	if offset := vpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VenuePlaceGroupBy is the group-by builder for VenuePlace entities.
type VenuePlaceGroupBy struct {
	selector
	build *VenuePlaceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vpgb *VenuePlaceGroupBy) Aggregate(fns ...AggregateFunc) *VenuePlaceGroupBy {
	vpgb.fns = append(vpgb.fns, fns...)
	return vpgb
}

// Scan applies the selector query and scans the result into the given value.
func (vpgb *VenuePlaceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vpgb.build.ctx, "GroupBy")
	if err := vpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenuePlaceQuery, *VenuePlaceGroupBy](ctx, vpgb.build, vpgb, vpgb.build.inters, v)
}

func (vpgb *VenuePlaceGroupBy) sqlScan(ctx context.Context, root *VenuePlaceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vpgb.fns))
	for _, fn := range vpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vpgb.flds)+len(vpgb.fns))
		for _, f := range *vpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VenuePlaceSelect is the builder for selecting fields of VenuePlace entities.
type VenuePlaceSelect struct {
	*VenuePlaceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vps *VenuePlaceSelect) Aggregate(fns ...AggregateFunc) *VenuePlaceSelect {
	vps.fns = append(vps.fns, fns...)
	return vps
}

// Scan applies the selector query and scans the result into the given value.
func (vps *VenuePlaceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vps.ctx, "Select")
	if err := vps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenuePlaceQuery, *VenuePlaceSelect](ctx, vps.VenuePlaceQuery, vps, vps.inters, v)
}

func (vps *VenuePlaceSelect) sqlScan(ctx context.Context, root *VenuePlaceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vps.fns))
	for _, fn := range vps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

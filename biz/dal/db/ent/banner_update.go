// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/banner"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerUpdate is the builder for updating Banner entities.
type BannerUpdate struct {
	config
	hooks     []Hook
	mutation  *BannerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BannerUpdate builder.
func (bu *BannerUpdate) Where(ps ...predicate.Banner) *BannerUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BannerUpdate) SetUpdatedAt(t time.Time) *BannerUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BannerUpdate) ClearUpdatedAt() *BannerUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// SetDelete sets the "delete" field.
func (bu *BannerUpdate) SetDelete(i int64) *BannerUpdate {
	bu.mutation.ResetDelete()
	bu.mutation.SetDelete(i)
	return bu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableDelete(i *int64) *BannerUpdate {
	if i != nil {
		bu.SetDelete(*i)
	}
	return bu
}

// AddDelete adds i to the "delete" field.
func (bu *BannerUpdate) AddDelete(i int64) *BannerUpdate {
	bu.mutation.AddDelete(i)
	return bu
}

// ClearDelete clears the value of the "delete" field.
func (bu *BannerUpdate) ClearDelete() *BannerUpdate {
	bu.mutation.ClearDelete()
	return bu
}

// SetCreatedID sets the "created_id" field.
func (bu *BannerUpdate) SetCreatedID(i int64) *BannerUpdate {
	bu.mutation.ResetCreatedID()
	bu.mutation.SetCreatedID(i)
	return bu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableCreatedID(i *int64) *BannerUpdate {
	if i != nil {
		bu.SetCreatedID(*i)
	}
	return bu
}

// AddCreatedID adds i to the "created_id" field.
func (bu *BannerUpdate) AddCreatedID(i int64) *BannerUpdate {
	bu.mutation.AddCreatedID(i)
	return bu
}

// ClearCreatedID clears the value of the "created_id" field.
func (bu *BannerUpdate) ClearCreatedID() *BannerUpdate {
	bu.mutation.ClearCreatedID()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BannerUpdate) SetStatus(i int64) *BannerUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableStatus(i *int64) *BannerUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BannerUpdate) AddStatus(i int64) *BannerUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BannerUpdate) ClearStatus() *BannerUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetName sets the "name" field.
func (bu *BannerUpdate) SetName(s string) *BannerUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableName(s *string) *BannerUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetPic sets the "pic" field.
func (bu *BannerUpdate) SetPic(s string) *BannerUpdate {
	bu.mutation.SetPic(s)
	return bu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (bu *BannerUpdate) SetNillablePic(s *string) *BannerUpdate {
	if s != nil {
		bu.SetPic(*s)
	}
	return bu
}

// SetLink sets the "link" field.
func (bu *BannerUpdate) SetLink(s string) *BannerUpdate {
	bu.mutation.SetLink(s)
	return bu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableLink(s *string) *BannerUpdate {
	if s != nil {
		bu.SetLink(*s)
	}
	return bu
}

// SetIsShow sets the "is_show" field.
func (bu *BannerUpdate) SetIsShow(i int64) *BannerUpdate {
	bu.mutation.ResetIsShow()
	bu.mutation.SetIsShow(i)
	return bu
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableIsShow(i *int64) *BannerUpdate {
	if i != nil {
		bu.SetIsShow(*i)
	}
	return bu
}

// AddIsShow adds i to the "is_show" field.
func (bu *BannerUpdate) AddIsShow(i int64) *BannerUpdate {
	bu.mutation.AddIsShow(i)
	return bu
}

// ClearIsShow clears the value of the "is_show" field.
func (bu *BannerUpdate) ClearIsShow() *BannerUpdate {
	bu.mutation.ClearIsShow()
	return bu
}

// Mutation returns the BannerMutation object of the builder.
func (bu *BannerUpdate) Mutation() *BannerMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BannerUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BannerUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BannerUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BannerUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BannerUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok && !bu.mutation.UpdatedAtCleared() {
		v := banner.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BannerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BannerUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bu.mutation.CreatedAtCleared() {
		_spec.ClearField(banner.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(banner.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Delete(); ok {
		_spec.SetField(banner.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedDelete(); ok {
		_spec.AddField(banner.FieldDelete, field.TypeInt64, value)
	}
	if bu.mutation.DeleteCleared() {
		_spec.ClearField(banner.FieldDelete, field.TypeInt64)
	}
	if value, ok := bu.mutation.CreatedID(); ok {
		_spec.SetField(banner.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCreatedID(); ok {
		_spec.AddField(banner.FieldCreatedID, field.TypeInt64, value)
	}
	if bu.mutation.CreatedIDCleared() {
		_spec.ClearField(banner.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeInt64, value)
	}
	if bu.mutation.StatusCleared() {
		_spec.ClearField(banner.FieldStatus, field.TypeInt64)
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(banner.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Pic(); ok {
		_spec.SetField(banner.FieldPic, field.TypeString, value)
	}
	if value, ok := bu.mutation.Link(); ok {
		_spec.SetField(banner.FieldLink, field.TypeString, value)
	}
	if value, ok := bu.mutation.IsShow(); ok {
		_spec.SetField(banner.FieldIsShow, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedIsShow(); ok {
		_spec.AddField(banner.FieldIsShow, field.TypeInt64, value)
	}
	if bu.mutation.IsShowCleared() {
		_spec.ClearField(banner.FieldIsShow, field.TypeInt64)
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BannerUpdateOne is the builder for updating a single Banner entity.
type BannerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BannerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BannerUpdateOne) SetUpdatedAt(t time.Time) *BannerUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BannerUpdateOne) ClearUpdatedAt() *BannerUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// SetDelete sets the "delete" field.
func (buo *BannerUpdateOne) SetDelete(i int64) *BannerUpdateOne {
	buo.mutation.ResetDelete()
	buo.mutation.SetDelete(i)
	return buo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableDelete(i *int64) *BannerUpdateOne {
	if i != nil {
		buo.SetDelete(*i)
	}
	return buo
}

// AddDelete adds i to the "delete" field.
func (buo *BannerUpdateOne) AddDelete(i int64) *BannerUpdateOne {
	buo.mutation.AddDelete(i)
	return buo
}

// ClearDelete clears the value of the "delete" field.
func (buo *BannerUpdateOne) ClearDelete() *BannerUpdateOne {
	buo.mutation.ClearDelete()
	return buo
}

// SetCreatedID sets the "created_id" field.
func (buo *BannerUpdateOne) SetCreatedID(i int64) *BannerUpdateOne {
	buo.mutation.ResetCreatedID()
	buo.mutation.SetCreatedID(i)
	return buo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableCreatedID(i *int64) *BannerUpdateOne {
	if i != nil {
		buo.SetCreatedID(*i)
	}
	return buo
}

// AddCreatedID adds i to the "created_id" field.
func (buo *BannerUpdateOne) AddCreatedID(i int64) *BannerUpdateOne {
	buo.mutation.AddCreatedID(i)
	return buo
}

// ClearCreatedID clears the value of the "created_id" field.
func (buo *BannerUpdateOne) ClearCreatedID() *BannerUpdateOne {
	buo.mutation.ClearCreatedID()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BannerUpdateOne) SetStatus(i int64) *BannerUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableStatus(i *int64) *BannerUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BannerUpdateOne) AddStatus(i int64) *BannerUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BannerUpdateOne) ClearStatus() *BannerUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetName sets the "name" field.
func (buo *BannerUpdateOne) SetName(s string) *BannerUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableName(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetPic sets the "pic" field.
func (buo *BannerUpdateOne) SetPic(s string) *BannerUpdateOne {
	buo.mutation.SetPic(s)
	return buo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillablePic(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetPic(*s)
	}
	return buo
}

// SetLink sets the "link" field.
func (buo *BannerUpdateOne) SetLink(s string) *BannerUpdateOne {
	buo.mutation.SetLink(s)
	return buo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableLink(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetLink(*s)
	}
	return buo
}

// SetIsShow sets the "is_show" field.
func (buo *BannerUpdateOne) SetIsShow(i int64) *BannerUpdateOne {
	buo.mutation.ResetIsShow()
	buo.mutation.SetIsShow(i)
	return buo
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableIsShow(i *int64) *BannerUpdateOne {
	if i != nil {
		buo.SetIsShow(*i)
	}
	return buo
}

// AddIsShow adds i to the "is_show" field.
func (buo *BannerUpdateOne) AddIsShow(i int64) *BannerUpdateOne {
	buo.mutation.AddIsShow(i)
	return buo
}

// ClearIsShow clears the value of the "is_show" field.
func (buo *BannerUpdateOne) ClearIsShow() *BannerUpdateOne {
	buo.mutation.ClearIsShow()
	return buo
}

// Mutation returns the BannerMutation object of the builder.
func (buo *BannerUpdateOne) Mutation() *BannerMutation {
	return buo.mutation
}

// Where appends a list predicates to the BannerUpdate builder.
func (buo *BannerUpdateOne) Where(ps ...predicate.Banner) *BannerUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BannerUpdateOne) Select(field string, fields ...string) *BannerUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Banner entity.
func (buo *BannerUpdateOne) Save(ctx context.Context) (*Banner, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BannerUpdateOne) SaveX(ctx context.Context) *Banner {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BannerUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BannerUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BannerUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok && !buo.mutation.UpdatedAtCleared() {
		v := banner.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BannerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BannerUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BannerUpdateOne) sqlSave(ctx context.Context) (_node *Banner, err error) {
	_spec := sqlgraph.NewUpdateSpec(banner.Table, banner.Columns, sqlgraph.NewFieldSpec(banner.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Banner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banner.FieldID)
		for _, f := range fields {
			if !banner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if buo.mutation.CreatedAtCleared() {
		_spec.ClearField(banner.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(banner.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(banner.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Delete(); ok {
		_spec.SetField(banner.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedDelete(); ok {
		_spec.AddField(banner.FieldDelete, field.TypeInt64, value)
	}
	if buo.mutation.DeleteCleared() {
		_spec.ClearField(banner.FieldDelete, field.TypeInt64)
	}
	if value, ok := buo.mutation.CreatedID(); ok {
		_spec.SetField(banner.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCreatedID(); ok {
		_spec.AddField(banner.FieldCreatedID, field.TypeInt64, value)
	}
	if buo.mutation.CreatedIDCleared() {
		_spec.ClearField(banner.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeInt64, value)
	}
	if buo.mutation.StatusCleared() {
		_spec.ClearField(banner.FieldStatus, field.TypeInt64)
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(banner.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Pic(); ok {
		_spec.SetField(banner.FieldPic, field.TypeString, value)
	}
	if value, ok := buo.mutation.Link(); ok {
		_spec.SetField(banner.FieldLink, field.TypeString, value)
	}
	if value, ok := buo.mutation.IsShow(); ok {
		_spec.SetField(banner.FieldIsShow, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedIsShow(); ok {
		_spec.AddField(banner.FieldIsShow, field.TypeInt64, value)
	}
	if buo.mutation.IsShowCleared() {
		_spec.ClearField(banner.FieldIsShow, field.TypeInt64)
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Banner{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/usertimeperiod"
	"saas/idl_gen/model/base"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTimePeriodCreate is the builder for creating a UserTimePeriod entity.
type UserTimePeriodCreate struct {
	config
	mutation *UserTimePeriodMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (utpc *UserTimePeriodCreate) SetCreatedAt(t time.Time) *UserTimePeriodCreate {
	utpc.mutation.SetCreatedAt(t)
	return utpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableCreatedAt(t *time.Time) *UserTimePeriodCreate {
	if t != nil {
		utpc.SetCreatedAt(*t)
	}
	return utpc
}

// SetUpdatedAt sets the "updated_at" field.
func (utpc *UserTimePeriodCreate) SetUpdatedAt(t time.Time) *UserTimePeriodCreate {
	utpc.mutation.SetUpdatedAt(t)
	return utpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableUpdatedAt(t *time.Time) *UserTimePeriodCreate {
	if t != nil {
		utpc.SetUpdatedAt(*t)
	}
	return utpc
}

// SetDelete sets the "delete" field.
func (utpc *UserTimePeriodCreate) SetDelete(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetDelete(i)
	return utpc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableDelete(i *int64) *UserTimePeriodCreate {
	if i != nil {
		utpc.SetDelete(*i)
	}
	return utpc
}

// SetCreatedID sets the "created_id" field.
func (utpc *UserTimePeriodCreate) SetCreatedID(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetCreatedID(i)
	return utpc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableCreatedID(i *int64) *UserTimePeriodCreate {
	if i != nil {
		utpc.SetCreatedID(*i)
	}
	return utpc
}

// SetStatus sets the "status" field.
func (utpc *UserTimePeriodCreate) SetStatus(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetStatus(i)
	return utpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableStatus(i *int64) *UserTimePeriodCreate {
	if i != nil {
		utpc.SetStatus(*i)
	}
	return utpc
}

// SetDate sets the "date" field.
func (utpc *UserTimePeriodCreate) SetDate(t time.Time) *UserTimePeriodCreate {
	utpc.mutation.SetDate(t)
	return utpc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableDate(t *time.Time) *UserTimePeriodCreate {
	if t != nil {
		utpc.SetDate(*t)
	}
	return utpc
}

// SetPeriod sets the "period" field.
func (utpc *UserTimePeriodCreate) SetPeriod(b base.Period) *UserTimePeriodCreate {
	utpc.mutation.SetPeriod(b)
	return utpc
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillablePeriod(b *base.Period) *UserTimePeriodCreate {
	if b != nil {
		utpc.SetPeriod(*b)
	}
	return utpc
}

// SetUserID sets the "user_id" field.
func (utpc *UserTimePeriodCreate) SetUserID(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetUserID(i)
	return utpc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableUserID(i *int64) *UserTimePeriodCreate {
	if i != nil {
		utpc.SetUserID(*i)
	}
	return utpc
}

// SetVenueID sets the "venue_id" field.
func (utpc *UserTimePeriodCreate) SetVenueID(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetVenueID(i)
	return utpc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableVenueID(i *int64) *UserTimePeriodCreate {
	if i != nil {
		utpc.SetVenueID(*i)
	}
	return utpc
}

// SetID sets the "id" field.
func (utpc *UserTimePeriodCreate) SetID(i int64) *UserTimePeriodCreate {
	utpc.mutation.SetID(i)
	return utpc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (utpc *UserTimePeriodCreate) SetUsersID(id int64) *UserTimePeriodCreate {
	utpc.mutation.SetUsersID(id)
	return utpc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (utpc *UserTimePeriodCreate) SetNillableUsersID(id *int64) *UserTimePeriodCreate {
	if id != nil {
		utpc = utpc.SetUsersID(*id)
	}
	return utpc
}

// SetUsers sets the "users" edge to the User entity.
func (utpc *UserTimePeriodCreate) SetUsers(u *User) *UserTimePeriodCreate {
	return utpc.SetUsersID(u.ID)
}

// Mutation returns the UserTimePeriodMutation object of the builder.
func (utpc *UserTimePeriodCreate) Mutation() *UserTimePeriodMutation {
	return utpc.mutation
}

// Save creates the UserTimePeriod in the database.
func (utpc *UserTimePeriodCreate) Save(ctx context.Context) (*UserTimePeriod, error) {
	utpc.defaults()
	return withHooks(ctx, utpc.sqlSave, utpc.mutation, utpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utpc *UserTimePeriodCreate) SaveX(ctx context.Context) *UserTimePeriod {
	v, err := utpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utpc *UserTimePeriodCreate) Exec(ctx context.Context) error {
	_, err := utpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpc *UserTimePeriodCreate) ExecX(ctx context.Context) {
	if err := utpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utpc *UserTimePeriodCreate) defaults() {
	if _, ok := utpc.mutation.CreatedAt(); !ok {
		v := usertimeperiod.DefaultCreatedAt()
		utpc.mutation.SetCreatedAt(v)
	}
	if _, ok := utpc.mutation.UpdatedAt(); !ok {
		v := usertimeperiod.DefaultUpdatedAt()
		utpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := utpc.mutation.Delete(); !ok {
		v := usertimeperiod.DefaultDelete
		utpc.mutation.SetDelete(v)
	}
	if _, ok := utpc.mutation.CreatedID(); !ok {
		v := usertimeperiod.DefaultCreatedID
		utpc.mutation.SetCreatedID(v)
	}
	if _, ok := utpc.mutation.Status(); !ok {
		v := usertimeperiod.DefaultStatus
		utpc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utpc *UserTimePeriodCreate) check() error {
	return nil
}

func (utpc *UserTimePeriodCreate) sqlSave(ctx context.Context) (*UserTimePeriod, error) {
	if err := utpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	utpc.mutation.id = &_node.ID
	utpc.mutation.done = true
	return _node, nil
}

func (utpc *UserTimePeriodCreate) createSpec() (*UserTimePeriod, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTimePeriod{config: utpc.config}
		_spec = sqlgraph.NewCreateSpec(usertimeperiod.Table, sqlgraph.NewFieldSpec(usertimeperiod.FieldID, field.TypeInt64))
	)
	if id, ok := utpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utpc.mutation.CreatedAt(); ok {
		_spec.SetField(usertimeperiod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := utpc.mutation.UpdatedAt(); ok {
		_spec.SetField(usertimeperiod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := utpc.mutation.Delete(); ok {
		_spec.SetField(usertimeperiod.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := utpc.mutation.CreatedID(); ok {
		_spec.SetField(usertimeperiod.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := utpc.mutation.Status(); ok {
		_spec.SetField(usertimeperiod.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := utpc.mutation.Date(); ok {
		_spec.SetField(usertimeperiod.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := utpc.mutation.Period(); ok {
		_spec.SetField(usertimeperiod.FieldPeriod, field.TypeJSON, value)
		_node.Period = value
	}
	if value, ok := utpc.mutation.VenueID(); ok {
		_spec.SetField(usertimeperiod.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if nodes := utpc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertimeperiod.UsersTable,
			Columns: []string{usertimeperiod.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserTimePeriodCreateBulk is the builder for creating many UserTimePeriod entities in bulk.
type UserTimePeriodCreateBulk struct {
	config
	err      error
	builders []*UserTimePeriodCreate
}

// Save creates the UserTimePeriod entities in the database.
func (utpcb *UserTimePeriodCreateBulk) Save(ctx context.Context) ([]*UserTimePeriod, error) {
	if utpcb.err != nil {
		return nil, utpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utpcb.builders))
	nodes := make([]*UserTimePeriod, len(utpcb.builders))
	mutators := make([]Mutator, len(utpcb.builders))
	for i := range utpcb.builders {
		func(i int, root context.Context) {
			builder := utpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTimePeriodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utpcb *UserTimePeriodCreateBulk) SaveX(ctx context.Context) []*UserTimePeriod {
	v, err := utpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utpcb *UserTimePeriodCreateBulk) Exec(ctx context.Context) error {
	_, err := utpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpcb *UserTimePeriodCreateBulk) ExecX(ctx context.Context) {
	if err := utpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

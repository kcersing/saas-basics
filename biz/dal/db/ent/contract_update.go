// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/contract"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContractUpdate) SetUpdatedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *ContractUpdate) ClearUpdatedAt() *ContractUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDelete sets the "delete" field.
func (cu *ContractUpdate) SetDelete(i int64) *ContractUpdate {
	cu.mutation.ResetDelete()
	cu.mutation.SetDelete(i)
	return cu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDelete(i *int64) *ContractUpdate {
	if i != nil {
		cu.SetDelete(*i)
	}
	return cu
}

// AddDelete adds i to the "delete" field.
func (cu *ContractUpdate) AddDelete(i int64) *ContractUpdate {
	cu.mutation.AddDelete(i)
	return cu
}

// ClearDelete clears the value of the "delete" field.
func (cu *ContractUpdate) ClearDelete() *ContractUpdate {
	cu.mutation.ClearDelete()
	return cu
}

// SetCreatedID sets the "created_id" field.
func (cu *ContractUpdate) SetCreatedID(i int64) *ContractUpdate {
	cu.mutation.ResetCreatedID()
	cu.mutation.SetCreatedID(i)
	return cu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableCreatedID(i *int64) *ContractUpdate {
	if i != nil {
		cu.SetCreatedID(*i)
	}
	return cu
}

// AddCreatedID adds i to the "created_id" field.
func (cu *ContractUpdate) AddCreatedID(i int64) *ContractUpdate {
	cu.mutation.AddCreatedID(i)
	return cu
}

// ClearCreatedID clears the value of the "created_id" field.
func (cu *ContractUpdate) ClearCreatedID() *ContractUpdate {
	cu.mutation.ClearCreatedID()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContractUpdate) SetStatus(i int64) *ContractUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableStatus(i *int64) *ContractUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *ContractUpdate) AddStatus(i int64) *ContractUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *ContractUpdate) ClearStatus() *ContractUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetName sets the "name" field.
func (cu *ContractUpdate) SetName(s string) *ContractUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableName(s *string) *ContractUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *ContractUpdate) ClearName() *ContractUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetContent sets the "content" field.
func (cu *ContractUpdate) SetContent(s string) *ContractUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableContent(s *string) *ContractUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *ContractUpdate) ClearContent() *ContractUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetVenueID sets the "venue_id" field.
func (cu *ContractUpdate) SetVenueID(i int64) *ContractUpdate {
	cu.mutation.ResetVenueID()
	cu.mutation.SetVenueID(i)
	return cu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableVenueID(i *int64) *ContractUpdate {
	if i != nil {
		cu.SetVenueID(*i)
	}
	return cu
}

// AddVenueID adds i to the "venue_id" field.
func (cu *ContractUpdate) AddVenueID(i int64) *ContractUpdate {
	cu.mutation.AddVenueID(i)
	return cu
}

// ClearVenueID clears the value of the "venue_id" field.
func (cu *ContractUpdate) ClearVenueID() *ContractUpdate {
	cu.mutation.ClearVenueID()
	return cu
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cu *ContractUpdate) AddProductIDs(ids ...int64) *ContractUpdate {
	cu.mutation.AddProductIDs(ids...)
	return cu
}

// AddProducts adds the "products" edges to the Product entity.
func (cu *ContractUpdate) AddProducts(p ...*Product) *ContractUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProductIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (cu *ContractUpdate) ClearProducts() *ContractUpdate {
	cu.mutation.ClearProducts()
	return cu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cu *ContractUpdate) RemoveProductIDs(ids ...int64) *ContractUpdate {
	cu.mutation.RemoveProductIDs(ids...)
	return cu
}

// RemoveProducts removes "products" edges to Product entities.
func (cu *ContractUpdate) RemoveProducts(p ...*Product) *ContractUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := contract.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(contract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Delete(); ok {
		_spec.SetField(contract.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedDelete(); ok {
		_spec.AddField(contract.FieldDelete, field.TypeInt64, value)
	}
	if cu.mutation.DeleteCleared() {
		_spec.ClearField(contract.FieldDelete, field.TypeInt64)
	}
	if value, ok := cu.mutation.CreatedID(); ok {
		_spec.SetField(contract.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedID(); ok {
		_spec.AddField(contract.FieldCreatedID, field.TypeInt64, value)
	}
	if cu.mutation.CreatedIDCleared() {
		_spec.ClearField(contract.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(contract.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(contract.FieldStatus, field.TypeInt64, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(contract.FieldStatus, field.TypeInt64)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(contract.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(contract.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(contract.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(contract.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.VenueID(); ok {
		_spec.SetField(contract.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedVenueID(); ok {
		_spec.AddField(contract.FieldVenueID, field.TypeInt64, value)
	}
	if cu.mutation.VenueIDCleared() {
		_spec.ClearField(contract.FieldVenueID, field.TypeInt64)
	}
	if cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContractMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContractUpdateOne) SetUpdatedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *ContractUpdateOne) ClearUpdatedAt() *ContractUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDelete sets the "delete" field.
func (cuo *ContractUpdateOne) SetDelete(i int64) *ContractUpdateOne {
	cuo.mutation.ResetDelete()
	cuo.mutation.SetDelete(i)
	return cuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDelete(i *int64) *ContractUpdateOne {
	if i != nil {
		cuo.SetDelete(*i)
	}
	return cuo
}

// AddDelete adds i to the "delete" field.
func (cuo *ContractUpdateOne) AddDelete(i int64) *ContractUpdateOne {
	cuo.mutation.AddDelete(i)
	return cuo
}

// ClearDelete clears the value of the "delete" field.
func (cuo *ContractUpdateOne) ClearDelete() *ContractUpdateOne {
	cuo.mutation.ClearDelete()
	return cuo
}

// SetCreatedID sets the "created_id" field.
func (cuo *ContractUpdateOne) SetCreatedID(i int64) *ContractUpdateOne {
	cuo.mutation.ResetCreatedID()
	cuo.mutation.SetCreatedID(i)
	return cuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableCreatedID(i *int64) *ContractUpdateOne {
	if i != nil {
		cuo.SetCreatedID(*i)
	}
	return cuo
}

// AddCreatedID adds i to the "created_id" field.
func (cuo *ContractUpdateOne) AddCreatedID(i int64) *ContractUpdateOne {
	cuo.mutation.AddCreatedID(i)
	return cuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (cuo *ContractUpdateOne) ClearCreatedID() *ContractUpdateOne {
	cuo.mutation.ClearCreatedID()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContractUpdateOne) SetStatus(i int64) *ContractUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableStatus(i *int64) *ContractUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *ContractUpdateOne) AddStatus(i int64) *ContractUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *ContractUpdateOne) ClearStatus() *ContractUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContractUpdateOne) SetName(s string) *ContractUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableName(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *ContractUpdateOne) ClearName() *ContractUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *ContractUpdateOne) SetContent(s string) *ContractUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableContent(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *ContractUpdateOne) ClearContent() *ContractUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetVenueID sets the "venue_id" field.
func (cuo *ContractUpdateOne) SetVenueID(i int64) *ContractUpdateOne {
	cuo.mutation.ResetVenueID()
	cuo.mutation.SetVenueID(i)
	return cuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableVenueID(i *int64) *ContractUpdateOne {
	if i != nil {
		cuo.SetVenueID(*i)
	}
	return cuo
}

// AddVenueID adds i to the "venue_id" field.
func (cuo *ContractUpdateOne) AddVenueID(i int64) *ContractUpdateOne {
	cuo.mutation.AddVenueID(i)
	return cuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (cuo *ContractUpdateOne) ClearVenueID() *ContractUpdateOne {
	cuo.mutation.ClearVenueID()
	return cuo
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (cuo *ContractUpdateOne) AddProductIDs(ids ...int64) *ContractUpdateOne {
	cuo.mutation.AddProductIDs(ids...)
	return cuo
}

// AddProducts adds the "products" edges to the Product entity.
func (cuo *ContractUpdateOne) AddProducts(p ...*Product) *ContractUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProductIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (cuo *ContractUpdateOne) ClearProducts() *ContractUpdateOne {
	cuo.mutation.ClearProducts()
	return cuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (cuo *ContractUpdateOne) RemoveProductIDs(ids ...int64) *ContractUpdateOne {
	cuo.mutation.RemoveProductIDs(ids...)
	return cuo
}

// RemoveProducts removes "products" edges to Product entities.
func (cuo *ContractUpdateOne) RemoveProducts(p ...*Product) *ContractUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ContractUpdate builder.
func (cuo *ContractUpdateOne) Where(ps ...predicate.Contract) *ContractUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := contract.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Delete(); ok {
		_spec.SetField(contract.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedDelete(); ok {
		_spec.AddField(contract.FieldDelete, field.TypeInt64, value)
	}
	if cuo.mutation.DeleteCleared() {
		_spec.ClearField(contract.FieldDelete, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CreatedID(); ok {
		_spec.SetField(contract.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(contract.FieldCreatedID, field.TypeInt64, value)
	}
	if cuo.mutation.CreatedIDCleared() {
		_spec.ClearField(contract.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(contract.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(contract.FieldStatus, field.TypeInt64, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(contract.FieldStatus, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(contract.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(contract.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(contract.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(contract.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.VenueID(); ok {
		_spec.SetField(contract.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedVenueID(); ok {
		_spec.AddField(contract.FieldVenueID, field.TypeInt64, value)
	}
	if cuo.mutation.VenueIDCleared() {
		_spec.ClearField(contract.FieldVenueID, field.TypeInt64)
	}
	if cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !cuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.ProductsTable,
			Columns: contract.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

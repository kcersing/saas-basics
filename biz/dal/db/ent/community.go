// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/community"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Community is the model entity for the Community schema.
type Community struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 社群名称
	Name string `json:"name,omitempty"`
	// 报名人数
	SignNumber int64 `json:"sign_number,omitempty"`
	// 报名开始时间
	SignStartAt time.Time `json:"sign_start_at,omitempty"`
	// 报名结束时间
	SignEndAt time.Time `json:"sign_end_at,omitempty"`
	// 社群人数
	Number int64 `json:"number,omitempty"`
	// 社群开始时间
	StartAt time.Time `json:"start_at,omitempty"`
	// 社群结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// 社群图片
	Pic string `json:"pic,omitempty"`
	// 主办方
	Sponsor string `json:"sponsor,omitempty"`
	// 费用
	Fee float64 `json:"fee,omitempty"`
	// 是否有费用 1 无 2 有
	IsFee int64 `json:"is_fee,omitempty"`
	// 是否展示 1 展示 2 不展示
	IsShow int64 `json:"is_show,omitempty"`
	// 是否支持取消报名 0支持 1不支持
	IsCancel int64 `json:"is_cancel,omitempty"`
	// 取消时间
	CancelTime int64 `json:"cancel_time,omitempty"`
	// 详情
	Detail string `json:"detail,omitempty"`
	// 报名信息
	SignFields string `json:"sign_fields,omitempty"`
	// 状态[1:未报名;2:报名中;3:活动未开始;4:活动中;5:已结束]
	Condition int64 `json:"condition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommunityQuery when eager-loading is set.
	Edges        CommunityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommunityEdges holds the relations/edges for other nodes in the graph.
type CommunityEdges struct {
	// CommunityParticipants holds the value of the community_participants edge.
	CommunityParticipants []*CommunityParticipant `json:"community_participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommunityParticipantsOrErr returns the CommunityParticipants value or an error if the edge
// was not loaded in eager-loading.
func (e CommunityEdges) CommunityParticipantsOrErr() ([]*CommunityParticipant, error) {
	if e.loadedTypes[0] {
		return e.CommunityParticipants, nil
	}
	return nil, &NotLoadedError{edge: "community_participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Community) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case community.FieldFee:
			values[i] = new(sql.NullFloat64)
		case community.FieldID, community.FieldDelete, community.FieldCreatedID, community.FieldStatus, community.FieldSignNumber, community.FieldNumber, community.FieldIsFee, community.FieldIsShow, community.FieldIsCancel, community.FieldCancelTime, community.FieldCondition:
			values[i] = new(sql.NullInt64)
		case community.FieldName, community.FieldPic, community.FieldSponsor, community.FieldDetail, community.FieldSignFields:
			values[i] = new(sql.NullString)
		case community.FieldCreatedAt, community.FieldUpdatedAt, community.FieldSignStartAt, community.FieldSignEndAt, community.FieldStartAt, community.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Community fields.
func (c *Community) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case community.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case community.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case community.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case community.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				c.Delete = value.Int64
			}
		case community.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				c.CreatedID = value.Int64
			}
		case community.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.Int64
			}
		case community.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case community.FieldSignNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sign_number", values[i])
			} else if value.Valid {
				c.SignNumber = value.Int64
			}
		case community.FieldSignStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sign_start_at", values[i])
			} else if value.Valid {
				c.SignStartAt = value.Time
			}
		case community.FieldSignEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sign_end_at", values[i])
			} else if value.Valid {
				c.SignEndAt = value.Time
			}
		case community.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				c.Number = value.Int64
			}
		case community.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				c.StartAt = value.Time
			}
		case community.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				c.EndAt = value.Time
			}
		case community.FieldPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic", values[i])
			} else if value.Valid {
				c.Pic = value.String
			}
		case community.FieldSponsor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sponsor", values[i])
			} else if value.Valid {
				c.Sponsor = value.String
			}
		case community.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				c.Fee = value.Float64
			}
		case community.FieldIsFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_fee", values[i])
			} else if value.Valid {
				c.IsFee = value.Int64
			}
		case community.FieldIsShow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_show", values[i])
			} else if value.Valid {
				c.IsShow = value.Int64
			}
		case community.FieldIsCancel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_cancel", values[i])
			} else if value.Valid {
				c.IsCancel = value.Int64
			}
		case community.FieldCancelTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_time", values[i])
			} else if value.Valid {
				c.CancelTime = value.Int64
			}
		case community.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				c.Detail = value.String
			}
		case community.FieldSignFields:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sign_fields", values[i])
			} else if value.Valid {
				c.SignFields = value.String
			}
		case community.FieldCondition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				c.Condition = value.Int64
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Community.
// This includes values selected through modifiers, order, etc.
func (c *Community) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCommunityParticipants queries the "community_participants" edge of the Community entity.
func (c *Community) QueryCommunityParticipants() *CommunityParticipantQuery {
	return NewCommunityClient(c.config).QueryCommunityParticipants(c)
}

// Update returns a builder for updating this Community.
// Note that you need to call Community.Unwrap() before calling this method if this Community
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Community) Update() *CommunityUpdateOne {
	return NewCommunityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Community entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Community) Unwrap() *Community {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Community is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Community) String() string {
	var builder strings.Builder
	builder.WriteString("Community(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", c.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("sign_number=")
	builder.WriteString(fmt.Sprintf("%v", c.SignNumber))
	builder.WriteString(", ")
	builder.WriteString("sign_start_at=")
	builder.WriteString(c.SignStartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sign_end_at=")
	builder.WriteString(c.SignEndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", c.Number))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(c.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(c.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pic=")
	builder.WriteString(c.Pic)
	builder.WriteString(", ")
	builder.WriteString("sponsor=")
	builder.WriteString(c.Sponsor)
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", c.Fee))
	builder.WriteString(", ")
	builder.WriteString("is_fee=")
	builder.WriteString(fmt.Sprintf("%v", c.IsFee))
	builder.WriteString(", ")
	builder.WriteString("is_show=")
	builder.WriteString(fmt.Sprintf("%v", c.IsShow))
	builder.WriteString(", ")
	builder.WriteString("is_cancel=")
	builder.WriteString(fmt.Sprintf("%v", c.IsCancel))
	builder.WriteString(", ")
	builder.WriteString("cancel_time=")
	builder.WriteString(fmt.Sprintf("%v", c.CancelTime))
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(c.Detail)
	builder.WriteString(", ")
	builder.WriteString("sign_fields=")
	builder.WriteString(c.SignFields)
	builder.WriteString(", ")
	builder.WriteString("condition=")
	builder.WriteString(fmt.Sprintf("%v", c.Condition))
	builder.WriteByte(')')
	return builder.String()
}

// Communities is a parsable slice of Community.
type Communities []*Community

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/usertimeperiod"
	"saas/idl_gen/model/base"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTimePeriodUpdate is the builder for updating UserTimePeriod entities.
type UserTimePeriodUpdate struct {
	config
	hooks    []Hook
	mutation *UserTimePeriodMutation
}

// Where appends a list predicates to the UserTimePeriodUpdate builder.
func (utpu *UserTimePeriodUpdate) Where(ps ...predicate.UserTimePeriod) *UserTimePeriodUpdate {
	utpu.mutation.Where(ps...)
	return utpu
}

// SetUpdatedAt sets the "updated_at" field.
func (utpu *UserTimePeriodUpdate) SetUpdatedAt(t time.Time) *UserTimePeriodUpdate {
	utpu.mutation.SetUpdatedAt(t)
	return utpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (utpu *UserTimePeriodUpdate) ClearUpdatedAt() *UserTimePeriodUpdate {
	utpu.mutation.ClearUpdatedAt()
	return utpu
}

// SetDelete sets the "delete" field.
func (utpu *UserTimePeriodUpdate) SetDelete(i int64) *UserTimePeriodUpdate {
	utpu.mutation.ResetDelete()
	utpu.mutation.SetDelete(i)
	return utpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableDelete(i *int64) *UserTimePeriodUpdate {
	if i != nil {
		utpu.SetDelete(*i)
	}
	return utpu
}

// AddDelete adds i to the "delete" field.
func (utpu *UserTimePeriodUpdate) AddDelete(i int64) *UserTimePeriodUpdate {
	utpu.mutation.AddDelete(i)
	return utpu
}

// ClearDelete clears the value of the "delete" field.
func (utpu *UserTimePeriodUpdate) ClearDelete() *UserTimePeriodUpdate {
	utpu.mutation.ClearDelete()
	return utpu
}

// SetCreatedID sets the "created_id" field.
func (utpu *UserTimePeriodUpdate) SetCreatedID(i int64) *UserTimePeriodUpdate {
	utpu.mutation.ResetCreatedID()
	utpu.mutation.SetCreatedID(i)
	return utpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableCreatedID(i *int64) *UserTimePeriodUpdate {
	if i != nil {
		utpu.SetCreatedID(*i)
	}
	return utpu
}

// AddCreatedID adds i to the "created_id" field.
func (utpu *UserTimePeriodUpdate) AddCreatedID(i int64) *UserTimePeriodUpdate {
	utpu.mutation.AddCreatedID(i)
	return utpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (utpu *UserTimePeriodUpdate) ClearCreatedID() *UserTimePeriodUpdate {
	utpu.mutation.ClearCreatedID()
	return utpu
}

// SetStatus sets the "status" field.
func (utpu *UserTimePeriodUpdate) SetStatus(i int64) *UserTimePeriodUpdate {
	utpu.mutation.ResetStatus()
	utpu.mutation.SetStatus(i)
	return utpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableStatus(i *int64) *UserTimePeriodUpdate {
	if i != nil {
		utpu.SetStatus(*i)
	}
	return utpu
}

// AddStatus adds i to the "status" field.
func (utpu *UserTimePeriodUpdate) AddStatus(i int64) *UserTimePeriodUpdate {
	utpu.mutation.AddStatus(i)
	return utpu
}

// ClearStatus clears the value of the "status" field.
func (utpu *UserTimePeriodUpdate) ClearStatus() *UserTimePeriodUpdate {
	utpu.mutation.ClearStatus()
	return utpu
}

// SetDate sets the "date" field.
func (utpu *UserTimePeriodUpdate) SetDate(t time.Time) *UserTimePeriodUpdate {
	utpu.mutation.SetDate(t)
	return utpu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableDate(t *time.Time) *UserTimePeriodUpdate {
	if t != nil {
		utpu.SetDate(*t)
	}
	return utpu
}

// ClearDate clears the value of the "date" field.
func (utpu *UserTimePeriodUpdate) ClearDate() *UserTimePeriodUpdate {
	utpu.mutation.ClearDate()
	return utpu
}

// SetPeriod sets the "period" field.
func (utpu *UserTimePeriodUpdate) SetPeriod(b base.Period) *UserTimePeriodUpdate {
	utpu.mutation.SetPeriod(b)
	return utpu
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillablePeriod(b *base.Period) *UserTimePeriodUpdate {
	if b != nil {
		utpu.SetPeriod(*b)
	}
	return utpu
}

// ClearPeriod clears the value of the "period" field.
func (utpu *UserTimePeriodUpdate) ClearPeriod() *UserTimePeriodUpdate {
	utpu.mutation.ClearPeriod()
	return utpu
}

// SetUserID sets the "user_id" field.
func (utpu *UserTimePeriodUpdate) SetUserID(i int64) *UserTimePeriodUpdate {
	utpu.mutation.SetUserID(i)
	return utpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableUserID(i *int64) *UserTimePeriodUpdate {
	if i != nil {
		utpu.SetUserID(*i)
	}
	return utpu
}

// ClearUserID clears the value of the "user_id" field.
func (utpu *UserTimePeriodUpdate) ClearUserID() *UserTimePeriodUpdate {
	utpu.mutation.ClearUserID()
	return utpu
}

// SetVenueID sets the "venue_id" field.
func (utpu *UserTimePeriodUpdate) SetVenueID(i int64) *UserTimePeriodUpdate {
	utpu.mutation.ResetVenueID()
	utpu.mutation.SetVenueID(i)
	return utpu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableVenueID(i *int64) *UserTimePeriodUpdate {
	if i != nil {
		utpu.SetVenueID(*i)
	}
	return utpu
}

// AddVenueID adds i to the "venue_id" field.
func (utpu *UserTimePeriodUpdate) AddVenueID(i int64) *UserTimePeriodUpdate {
	utpu.mutation.AddVenueID(i)
	return utpu
}

// ClearVenueID clears the value of the "venue_id" field.
func (utpu *UserTimePeriodUpdate) ClearVenueID() *UserTimePeriodUpdate {
	utpu.mutation.ClearVenueID()
	return utpu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (utpu *UserTimePeriodUpdate) SetUsersID(id int64) *UserTimePeriodUpdate {
	utpu.mutation.SetUsersID(id)
	return utpu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (utpu *UserTimePeriodUpdate) SetNillableUsersID(id *int64) *UserTimePeriodUpdate {
	if id != nil {
		utpu = utpu.SetUsersID(*id)
	}
	return utpu
}

// SetUsers sets the "users" edge to the User entity.
func (utpu *UserTimePeriodUpdate) SetUsers(u *User) *UserTimePeriodUpdate {
	return utpu.SetUsersID(u.ID)
}

// Mutation returns the UserTimePeriodMutation object of the builder.
func (utpu *UserTimePeriodUpdate) Mutation() *UserTimePeriodMutation {
	return utpu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (utpu *UserTimePeriodUpdate) ClearUsers() *UserTimePeriodUpdate {
	utpu.mutation.ClearUsers()
	return utpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utpu *UserTimePeriodUpdate) Save(ctx context.Context) (int, error) {
	utpu.defaults()
	return withHooks(ctx, utpu.sqlSave, utpu.mutation, utpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utpu *UserTimePeriodUpdate) SaveX(ctx context.Context) int {
	affected, err := utpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utpu *UserTimePeriodUpdate) Exec(ctx context.Context) error {
	_, err := utpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpu *UserTimePeriodUpdate) ExecX(ctx context.Context) {
	if err := utpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utpu *UserTimePeriodUpdate) defaults() {
	if _, ok := utpu.mutation.UpdatedAt(); !ok && !utpu.mutation.UpdatedAtCleared() {
		v := usertimeperiod.UpdateDefaultUpdatedAt()
		utpu.mutation.SetUpdatedAt(v)
	}
}

func (utpu *UserTimePeriodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertimeperiod.Table, usertimeperiod.Columns, sqlgraph.NewFieldSpec(usertimeperiod.FieldID, field.TypeInt64))
	if ps := utpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if utpu.mutation.CreatedAtCleared() {
		_spec.ClearField(usertimeperiod.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := utpu.mutation.UpdatedAt(); ok {
		_spec.SetField(usertimeperiod.FieldUpdatedAt, field.TypeTime, value)
	}
	if utpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(usertimeperiod.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := utpu.mutation.Delete(); ok {
		_spec.SetField(usertimeperiod.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := utpu.mutation.AddedDelete(); ok {
		_spec.AddField(usertimeperiod.FieldDelete, field.TypeInt64, value)
	}
	if utpu.mutation.DeleteCleared() {
		_spec.ClearField(usertimeperiod.FieldDelete, field.TypeInt64)
	}
	if value, ok := utpu.mutation.CreatedID(); ok {
		_spec.SetField(usertimeperiod.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := utpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(usertimeperiod.FieldCreatedID, field.TypeInt64, value)
	}
	if utpu.mutation.CreatedIDCleared() {
		_spec.ClearField(usertimeperiod.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := utpu.mutation.Status(); ok {
		_spec.SetField(usertimeperiod.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := utpu.mutation.AddedStatus(); ok {
		_spec.AddField(usertimeperiod.FieldStatus, field.TypeInt64, value)
	}
	if utpu.mutation.StatusCleared() {
		_spec.ClearField(usertimeperiod.FieldStatus, field.TypeInt64)
	}
	if value, ok := utpu.mutation.Date(); ok {
		_spec.SetField(usertimeperiod.FieldDate, field.TypeTime, value)
	}
	if utpu.mutation.DateCleared() {
		_spec.ClearField(usertimeperiod.FieldDate, field.TypeTime)
	}
	if value, ok := utpu.mutation.Period(); ok {
		_spec.SetField(usertimeperiod.FieldPeriod, field.TypeJSON, value)
	}
	if utpu.mutation.PeriodCleared() {
		_spec.ClearField(usertimeperiod.FieldPeriod, field.TypeJSON)
	}
	if value, ok := utpu.mutation.VenueID(); ok {
		_spec.SetField(usertimeperiod.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := utpu.mutation.AddedVenueID(); ok {
		_spec.AddField(usertimeperiod.FieldVenueID, field.TypeInt64, value)
	}
	if utpu.mutation.VenueIDCleared() {
		_spec.ClearField(usertimeperiod.FieldVenueID, field.TypeInt64)
	}
	if utpu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertimeperiod.UsersTable,
			Columns: []string{usertimeperiod.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = utpu.schemaConfig.UserTimePeriod
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utpu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertimeperiod.UsersTable,
			Columns: []string{usertimeperiod.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = utpu.schemaConfig.UserTimePeriod
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = utpu.schemaConfig.UserTimePeriod
	ctx = internal.NewSchemaConfigContext(ctx, utpu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, utpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertimeperiod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utpu.mutation.done = true
	return n, nil
}

// UserTimePeriodUpdateOne is the builder for updating a single UserTimePeriod entity.
type UserTimePeriodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTimePeriodMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (utpuo *UserTimePeriodUpdateOne) SetUpdatedAt(t time.Time) *UserTimePeriodUpdateOne {
	utpuo.mutation.SetUpdatedAt(t)
	return utpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (utpuo *UserTimePeriodUpdateOne) ClearUpdatedAt() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearUpdatedAt()
	return utpuo
}

// SetDelete sets the "delete" field.
func (utpuo *UserTimePeriodUpdateOne) SetDelete(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.ResetDelete()
	utpuo.mutation.SetDelete(i)
	return utpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableDelete(i *int64) *UserTimePeriodUpdateOne {
	if i != nil {
		utpuo.SetDelete(*i)
	}
	return utpuo
}

// AddDelete adds i to the "delete" field.
func (utpuo *UserTimePeriodUpdateOne) AddDelete(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.AddDelete(i)
	return utpuo
}

// ClearDelete clears the value of the "delete" field.
func (utpuo *UserTimePeriodUpdateOne) ClearDelete() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearDelete()
	return utpuo
}

// SetCreatedID sets the "created_id" field.
func (utpuo *UserTimePeriodUpdateOne) SetCreatedID(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.ResetCreatedID()
	utpuo.mutation.SetCreatedID(i)
	return utpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableCreatedID(i *int64) *UserTimePeriodUpdateOne {
	if i != nil {
		utpuo.SetCreatedID(*i)
	}
	return utpuo
}

// AddCreatedID adds i to the "created_id" field.
func (utpuo *UserTimePeriodUpdateOne) AddCreatedID(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.AddCreatedID(i)
	return utpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (utpuo *UserTimePeriodUpdateOne) ClearCreatedID() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearCreatedID()
	return utpuo
}

// SetStatus sets the "status" field.
func (utpuo *UserTimePeriodUpdateOne) SetStatus(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.ResetStatus()
	utpuo.mutation.SetStatus(i)
	return utpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableStatus(i *int64) *UserTimePeriodUpdateOne {
	if i != nil {
		utpuo.SetStatus(*i)
	}
	return utpuo
}

// AddStatus adds i to the "status" field.
func (utpuo *UserTimePeriodUpdateOne) AddStatus(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.AddStatus(i)
	return utpuo
}

// ClearStatus clears the value of the "status" field.
func (utpuo *UserTimePeriodUpdateOne) ClearStatus() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearStatus()
	return utpuo
}

// SetDate sets the "date" field.
func (utpuo *UserTimePeriodUpdateOne) SetDate(t time.Time) *UserTimePeriodUpdateOne {
	utpuo.mutation.SetDate(t)
	return utpuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableDate(t *time.Time) *UserTimePeriodUpdateOne {
	if t != nil {
		utpuo.SetDate(*t)
	}
	return utpuo
}

// ClearDate clears the value of the "date" field.
func (utpuo *UserTimePeriodUpdateOne) ClearDate() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearDate()
	return utpuo
}

// SetPeriod sets the "period" field.
func (utpuo *UserTimePeriodUpdateOne) SetPeriod(b base.Period) *UserTimePeriodUpdateOne {
	utpuo.mutation.SetPeriod(b)
	return utpuo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillablePeriod(b *base.Period) *UserTimePeriodUpdateOne {
	if b != nil {
		utpuo.SetPeriod(*b)
	}
	return utpuo
}

// ClearPeriod clears the value of the "period" field.
func (utpuo *UserTimePeriodUpdateOne) ClearPeriod() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearPeriod()
	return utpuo
}

// SetUserID sets the "user_id" field.
func (utpuo *UserTimePeriodUpdateOne) SetUserID(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.SetUserID(i)
	return utpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableUserID(i *int64) *UserTimePeriodUpdateOne {
	if i != nil {
		utpuo.SetUserID(*i)
	}
	return utpuo
}

// ClearUserID clears the value of the "user_id" field.
func (utpuo *UserTimePeriodUpdateOne) ClearUserID() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearUserID()
	return utpuo
}

// SetVenueID sets the "venue_id" field.
func (utpuo *UserTimePeriodUpdateOne) SetVenueID(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.ResetVenueID()
	utpuo.mutation.SetVenueID(i)
	return utpuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableVenueID(i *int64) *UserTimePeriodUpdateOne {
	if i != nil {
		utpuo.SetVenueID(*i)
	}
	return utpuo
}

// AddVenueID adds i to the "venue_id" field.
func (utpuo *UserTimePeriodUpdateOne) AddVenueID(i int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.AddVenueID(i)
	return utpuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (utpuo *UserTimePeriodUpdateOne) ClearVenueID() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearVenueID()
	return utpuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (utpuo *UserTimePeriodUpdateOne) SetUsersID(id int64) *UserTimePeriodUpdateOne {
	utpuo.mutation.SetUsersID(id)
	return utpuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (utpuo *UserTimePeriodUpdateOne) SetNillableUsersID(id *int64) *UserTimePeriodUpdateOne {
	if id != nil {
		utpuo = utpuo.SetUsersID(*id)
	}
	return utpuo
}

// SetUsers sets the "users" edge to the User entity.
func (utpuo *UserTimePeriodUpdateOne) SetUsers(u *User) *UserTimePeriodUpdateOne {
	return utpuo.SetUsersID(u.ID)
}

// Mutation returns the UserTimePeriodMutation object of the builder.
func (utpuo *UserTimePeriodUpdateOne) Mutation() *UserTimePeriodMutation {
	return utpuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (utpuo *UserTimePeriodUpdateOne) ClearUsers() *UserTimePeriodUpdateOne {
	utpuo.mutation.ClearUsers()
	return utpuo
}

// Where appends a list predicates to the UserTimePeriodUpdate builder.
func (utpuo *UserTimePeriodUpdateOne) Where(ps ...predicate.UserTimePeriod) *UserTimePeriodUpdateOne {
	utpuo.mutation.Where(ps...)
	return utpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utpuo *UserTimePeriodUpdateOne) Select(field string, fields ...string) *UserTimePeriodUpdateOne {
	utpuo.fields = append([]string{field}, fields...)
	return utpuo
}

// Save executes the query and returns the updated UserTimePeriod entity.
func (utpuo *UserTimePeriodUpdateOne) Save(ctx context.Context) (*UserTimePeriod, error) {
	utpuo.defaults()
	return withHooks(ctx, utpuo.sqlSave, utpuo.mutation, utpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utpuo *UserTimePeriodUpdateOne) SaveX(ctx context.Context) *UserTimePeriod {
	node, err := utpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utpuo *UserTimePeriodUpdateOne) Exec(ctx context.Context) error {
	_, err := utpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpuo *UserTimePeriodUpdateOne) ExecX(ctx context.Context) {
	if err := utpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utpuo *UserTimePeriodUpdateOne) defaults() {
	if _, ok := utpuo.mutation.UpdatedAt(); !ok && !utpuo.mutation.UpdatedAtCleared() {
		v := usertimeperiod.UpdateDefaultUpdatedAt()
		utpuo.mutation.SetUpdatedAt(v)
	}
}

func (utpuo *UserTimePeriodUpdateOne) sqlSave(ctx context.Context) (_node *UserTimePeriod, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertimeperiod.Table, usertimeperiod.Columns, sqlgraph.NewFieldSpec(usertimeperiod.FieldID, field.TypeInt64))
	id, ok := utpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTimePeriod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertimeperiod.FieldID)
		for _, f := range fields {
			if !usertimeperiod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertimeperiod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if utpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usertimeperiod.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := utpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usertimeperiod.FieldUpdatedAt, field.TypeTime, value)
	}
	if utpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(usertimeperiod.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := utpuo.mutation.Delete(); ok {
		_spec.SetField(usertimeperiod.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := utpuo.mutation.AddedDelete(); ok {
		_spec.AddField(usertimeperiod.FieldDelete, field.TypeInt64, value)
	}
	if utpuo.mutation.DeleteCleared() {
		_spec.ClearField(usertimeperiod.FieldDelete, field.TypeInt64)
	}
	if value, ok := utpuo.mutation.CreatedID(); ok {
		_spec.SetField(usertimeperiod.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := utpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(usertimeperiod.FieldCreatedID, field.TypeInt64, value)
	}
	if utpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(usertimeperiod.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := utpuo.mutation.Status(); ok {
		_spec.SetField(usertimeperiod.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := utpuo.mutation.AddedStatus(); ok {
		_spec.AddField(usertimeperiod.FieldStatus, field.TypeInt64, value)
	}
	if utpuo.mutation.StatusCleared() {
		_spec.ClearField(usertimeperiod.FieldStatus, field.TypeInt64)
	}
	if value, ok := utpuo.mutation.Date(); ok {
		_spec.SetField(usertimeperiod.FieldDate, field.TypeTime, value)
	}
	if utpuo.mutation.DateCleared() {
		_spec.ClearField(usertimeperiod.FieldDate, field.TypeTime)
	}
	if value, ok := utpuo.mutation.Period(); ok {
		_spec.SetField(usertimeperiod.FieldPeriod, field.TypeJSON, value)
	}
	if utpuo.mutation.PeriodCleared() {
		_spec.ClearField(usertimeperiod.FieldPeriod, field.TypeJSON)
	}
	if value, ok := utpuo.mutation.VenueID(); ok {
		_spec.SetField(usertimeperiod.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := utpuo.mutation.AddedVenueID(); ok {
		_spec.AddField(usertimeperiod.FieldVenueID, field.TypeInt64, value)
	}
	if utpuo.mutation.VenueIDCleared() {
		_spec.ClearField(usertimeperiod.FieldVenueID, field.TypeInt64)
	}
	if utpuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertimeperiod.UsersTable,
			Columns: []string{usertimeperiod.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = utpuo.schemaConfig.UserTimePeriod
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utpuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertimeperiod.UsersTable,
			Columns: []string{usertimeperiod.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = utpuo.schemaConfig.UserTimePeriod
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = utpuo.schemaConfig.UserTimePeriod
	ctx = internal.NewSchemaConfigContext(ctx, utpuo.schemaConfig)
	_node = &UserTimePeriod{config: utpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertimeperiod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utpuo.mutation.done = true
	return _node, nil
}

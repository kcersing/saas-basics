// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/memberproductcourses"
	"saas/biz/dal/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductCoursesDelete is the builder for deleting a MemberProductCourses entity.
type MemberProductCoursesDelete struct {
	config
	hooks    []Hook
	mutation *MemberProductCoursesMutation
}

// Where appends a list predicates to the MemberProductCoursesDelete builder.
func (mpcd *MemberProductCoursesDelete) Where(ps ...predicate.MemberProductCourses) *MemberProductCoursesDelete {
	mpcd.mutation.Where(ps...)
	return mpcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpcd *MemberProductCoursesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpcd.sqlExec, mpcd.mutation, mpcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcd *MemberProductCoursesDelete) ExecX(ctx context.Context) int {
	n, err := mpcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpcd *MemberProductCoursesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberproductcourses.Table, sqlgraph.NewFieldSpec(memberproductcourses.FieldID, field.TypeInt64))
	_spec.Node.Schema = mpcd.schemaConfig.MemberProductCourses
	ctx = internal.NewSchemaConfigContext(ctx, mpcd.schemaConfig)
	if ps := mpcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpcd.mutation.done = true
	return affected, err
}

// MemberProductCoursesDeleteOne is the builder for deleting a single MemberProductCourses entity.
type MemberProductCoursesDeleteOne struct {
	mpcd *MemberProductCoursesDelete
}

// Where appends a list predicates to the MemberProductCoursesDelete builder.
func (mpcdo *MemberProductCoursesDeleteOne) Where(ps ...predicate.MemberProductCourses) *MemberProductCoursesDeleteOne {
	mpcdo.mpcd.mutation.Where(ps...)
	return mpcdo
}

// Exec executes the deletion query.
func (mpcdo *MemberProductCoursesDeleteOne) Exec(ctx context.Context) error {
	n, err := mpcdo.mpcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberproductcourses.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcdo *MemberProductCoursesDeleteOne) ExecX(ctx context.Context) {
	if err := mpcdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesms"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueSmsCreate is the builder for creating a VenueSms entity.
type VenueSmsCreate struct {
	config
	mutation *VenueSmsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VenueSmsCreate) SetCreatedAt(t time.Time) *VenueSmsCreate {
	vsc.mutation.SetCreatedAt(t)
	return vsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableCreatedAt(t *time.Time) *VenueSmsCreate {
	if t != nil {
		vsc.SetCreatedAt(*t)
	}
	return vsc
}

// SetUpdatedAt sets the "updated_at" field.
func (vsc *VenueSmsCreate) SetUpdatedAt(t time.Time) *VenueSmsCreate {
	vsc.mutation.SetUpdatedAt(t)
	return vsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableUpdatedAt(t *time.Time) *VenueSmsCreate {
	if t != nil {
		vsc.SetUpdatedAt(*t)
	}
	return vsc
}

// SetDelete sets the "delete" field.
func (vsc *VenueSmsCreate) SetDelete(i int64) *VenueSmsCreate {
	vsc.mutation.SetDelete(i)
	return vsc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableDelete(i *int64) *VenueSmsCreate {
	if i != nil {
		vsc.SetDelete(*i)
	}
	return vsc
}

// SetCreatedID sets the "created_id" field.
func (vsc *VenueSmsCreate) SetCreatedID(i int64) *VenueSmsCreate {
	vsc.mutation.SetCreatedID(i)
	return vsc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableCreatedID(i *int64) *VenueSmsCreate {
	if i != nil {
		vsc.SetCreatedID(*i)
	}
	return vsc
}

// SetVenueID sets the "venue_id" field.
func (vsc *VenueSmsCreate) SetVenueID(i int64) *VenueSmsCreate {
	vsc.mutation.SetVenueID(i)
	return vsc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableVenueID(i *int64) *VenueSmsCreate {
	if i != nil {
		vsc.SetVenueID(*i)
	}
	return vsc
}

// SetNoticeCount sets the "notice_count" field.
func (vsc *VenueSmsCreate) SetNoticeCount(i int64) *VenueSmsCreate {
	vsc.mutation.SetNoticeCount(i)
	return vsc
}

// SetNillableNoticeCount sets the "notice_count" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableNoticeCount(i *int64) *VenueSmsCreate {
	if i != nil {
		vsc.SetNoticeCount(*i)
	}
	return vsc
}

// SetUsedNotice sets the "used_notice" field.
func (vsc *VenueSmsCreate) SetUsedNotice(i int64) *VenueSmsCreate {
	vsc.mutation.SetUsedNotice(i)
	return vsc
}

// SetNillableUsedNotice sets the "used_notice" field if the given value is not nil.
func (vsc *VenueSmsCreate) SetNillableUsedNotice(i *int64) *VenueSmsCreate {
	if i != nil {
		vsc.SetUsedNotice(*i)
	}
	return vsc
}

// SetID sets the "id" field.
func (vsc *VenueSmsCreate) SetID(i int64) *VenueSmsCreate {
	vsc.mutation.SetID(i)
	return vsc
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vsc *VenueSmsCreate) SetVenue(v *Venue) *VenueSmsCreate {
	return vsc.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsMutation object of the builder.
func (vsc *VenueSmsCreate) Mutation() *VenueSmsMutation {
	return vsc.mutation
}

// Save creates the VenueSms in the database.
func (vsc *VenueSmsCreate) Save(ctx context.Context) (*VenueSms, error) {
	vsc.defaults()
	return withHooks(ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VenueSmsCreate) SaveX(ctx context.Context) *VenueSms {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VenueSmsCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VenueSmsCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsc *VenueSmsCreate) defaults() {
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		v := venuesms.DefaultCreatedAt()
		vsc.mutation.SetCreatedAt(v)
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		v := venuesms.DefaultUpdatedAt()
		vsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vsc.mutation.Delete(); !ok {
		v := venuesms.DefaultDelete
		vsc.mutation.SetDelete(v)
	}
	if _, ok := vsc.mutation.CreatedID(); !ok {
		v := venuesms.DefaultCreatedID
		vsc.mutation.SetCreatedID(v)
	}
	if _, ok := vsc.mutation.VenueID(); !ok {
		v := venuesms.DefaultVenueID
		vsc.mutation.SetVenueID(v)
	}
	if _, ok := vsc.mutation.NoticeCount(); !ok {
		v := venuesms.DefaultNoticeCount
		vsc.mutation.SetNoticeCount(v)
	}
	if _, ok := vsc.mutation.UsedNotice(); !ok {
		v := venuesms.DefaultUsedNotice
		vsc.mutation.SetUsedNotice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VenueSmsCreate) check() error {
	if _, ok := vsc.mutation.NoticeCount(); !ok {
		return &ValidationError{Name: "notice_count", err: errors.New(`ent: missing required field "VenueSms.notice_count"`)}
	}
	if _, ok := vsc.mutation.UsedNotice(); !ok {
		return &ValidationError{Name: "used_notice", err: errors.New(`ent: missing required field "VenueSms.used_notice"`)}
	}
	return nil
}

func (vsc *VenueSmsCreate) sqlSave(ctx context.Context) (*VenueSms, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VenueSmsCreate) createSpec() (*VenueSms, *sqlgraph.CreateSpec) {
	var (
		_node = &VenueSms{config: vsc.config}
		_spec = sqlgraph.NewCreateSpec(venuesms.Table, sqlgraph.NewFieldSpec(venuesms.FieldID, field.TypeInt64))
	)
	if id, ok := vsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.SetField(venuesms.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesms.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vsc.mutation.Delete(); ok {
		_spec.SetField(venuesms.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := vsc.mutation.CreatedID(); ok {
		_spec.SetField(venuesms.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := vsc.mutation.NoticeCount(); ok {
		_spec.SetField(venuesms.FieldNoticeCount, field.TypeInt64, value)
		_node.NoticeCount = value
	}
	if value, ok := vsc.mutation.UsedNotice(); ok {
		_spec.SetField(venuesms.FieldUsedNotice, field.TypeInt64, value)
		_node.UsedNotice = value
	}
	if nodes := vsc.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesms.VenueTable,
			Columns: []string{venuesms.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VenueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VenueSmsCreateBulk is the builder for creating many VenueSms entities in bulk.
type VenueSmsCreateBulk struct {
	config
	err      error
	builders []*VenueSmsCreate
}

// Save creates the VenueSms entities in the database.
func (vscb *VenueSmsCreateBulk) Save(ctx context.Context) ([]*VenueSms, error) {
	if vscb.err != nil {
		return nil, vscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VenueSms, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueSmsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VenueSmsCreateBulk) SaveX(ctx context.Context) []*VenueSms {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VenueSmsCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VenueSmsCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductDelete is the builder for deleting a MemberProduct entity.
type MemberProductDelete struct {
	config
	hooks    []Hook
	mutation *MemberProductMutation
}

// Where appends a list predicates to the MemberProductDelete builder.
func (mpd *MemberProductDelete) Where(ps ...predicate.MemberProduct) *MemberProductDelete {
	mpd.mutation.Where(ps...)
	return mpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpd *MemberProductDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpd.sqlExec, mpd.mutation, mpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpd *MemberProductDelete) ExecX(ctx context.Context) int {
	n, err := mpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpd *MemberProductDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberproduct.Table, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	_spec.Node.Schema = mpd.schemaConfig.MemberProduct
	ctx = internal.NewSchemaConfigContext(ctx, mpd.schemaConfig)
	if ps := mpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpd.mutation.done = true
	return affected, err
}

// MemberProductDeleteOne is the builder for deleting a single MemberProduct entity.
type MemberProductDeleteOne struct {
	mpd *MemberProductDelete
}

// Where appends a list predicates to the MemberProductDelete builder.
func (mpdo *MemberProductDeleteOne) Where(ps ...predicate.MemberProduct) *MemberProductDeleteOne {
	mpdo.mpd.mutation.Where(ps...)
	return mpdo
}

// Exec executes the deletion query.
func (mpdo *MemberProductDeleteOne) Exec(ctx context.Context) error {
	n, err := mpdo.mpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberproduct.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdo *MemberProductDeleteOne) ExecX(ctx context.Context) {
	if err := mpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

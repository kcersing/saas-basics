// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/contract"
	"saas/biz/dal/db/ent/dictionarydetail"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/product"
	"saas/biz/dal/db/ent/productcourses"
	"saas/idl_gen/model/base"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProductUpdate) ClearUpdatedAt() *ProductUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetDelete sets the "delete" field.
func (pu *ProductUpdate) SetDelete(i int64) *ProductUpdate {
	pu.mutation.ResetDelete()
	pu.mutation.SetDelete(i)
	return pu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDelete(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDelete(*i)
	}
	return pu
}

// AddDelete adds i to the "delete" field.
func (pu *ProductUpdate) AddDelete(i int64) *ProductUpdate {
	pu.mutation.AddDelete(i)
	return pu
}

// ClearDelete clears the value of the "delete" field.
func (pu *ProductUpdate) ClearDelete() *ProductUpdate {
	pu.mutation.ClearDelete()
	return pu
}

// SetCreatedID sets the "created_id" field.
func (pu *ProductUpdate) SetCreatedID(i int64) *ProductUpdate {
	pu.mutation.ResetCreatedID()
	pu.mutation.SetCreatedID(i)
	return pu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedID(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCreatedID(*i)
	}
	return pu
}

// AddCreatedID adds i to the "created_id" field.
func (pu *ProductUpdate) AddCreatedID(i int64) *ProductUpdate {
	pu.mutation.AddCreatedID(i)
	return pu
}

// ClearCreatedID clears the value of the "created_id" field.
func (pu *ProductUpdate) ClearCreatedID() *ProductUpdate {
	pu.mutation.ClearCreatedID()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(i int64) *ProductUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ProductUpdate) AddStatus(i int64) *ProductUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *ProductUpdate) ClearStatus() *ProductUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetType sets the "type" field.
func (pu *ProductUpdate) SetType(s string) *ProductUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableType(s *string) *ProductUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// ClearType clears the value of the "type" field.
func (pu *ProductUpdate) ClearType() *ProductUpdate {
	pu.mutation.ClearType()
	return pu
}

// SetSubType sets the "sub_type" field.
func (pu *ProductUpdate) SetSubType(s string) *ProductUpdate {
	pu.mutation.SetSubType(s)
	return pu
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSubType(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSubType(*s)
	}
	return pu
}

// ClearSubType clears the value of the "sub_type" field.
func (pu *ProductUpdate) ClearSubType() *ProductUpdate {
	pu.mutation.ClearSubType()
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProductUpdate) ClearName() *ProductUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetStock sets the "stock" field.
func (pu *ProductUpdate) SetStock(i int64) *ProductUpdate {
	pu.mutation.ResetStock()
	pu.mutation.SetStock(i)
	return pu
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStock(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetStock(*i)
	}
	return pu
}

// AddStock adds i to the "stock" field.
func (pu *ProductUpdate) AddStock(i int64) *ProductUpdate {
	pu.mutation.AddStock(i)
	return pu
}

// ClearStock clears the value of the "stock" field.
func (pu *ProductUpdate) ClearStock() *ProductUpdate {
	pu.mutation.ClearStock()
	return pu
}

// SetDeadline sets the "deadline" field.
func (pu *ProductUpdate) SetDeadline(i int64) *ProductUpdate {
	pu.mutation.ResetDeadline()
	pu.mutation.SetDeadline(i)
	return pu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeadline(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDeadline(*i)
	}
	return pu
}

// AddDeadline adds i to the "deadline" field.
func (pu *ProductUpdate) AddDeadline(i int64) *ProductUpdate {
	pu.mutation.AddDeadline(i)
	return pu
}

// ClearDeadline clears the value of the "deadline" field.
func (pu *ProductUpdate) ClearDeadline() *ProductUpdate {
	pu.mutation.ClearDeadline()
	return pu
}

// SetDuration sets the "duration" field.
func (pu *ProductUpdate) SetDuration(i int64) *ProductUpdate {
	pu.mutation.ResetDuration()
	pu.mutation.SetDuration(i)
	return pu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDuration(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDuration(*i)
	}
	return pu
}

// AddDuration adds i to the "duration" field.
func (pu *ProductUpdate) AddDuration(i int64) *ProductUpdate {
	pu.mutation.AddDuration(i)
	return pu
}

// ClearDuration clears the value of the "duration" field.
func (pu *ProductUpdate) ClearDuration() *ProductUpdate {
	pu.mutation.ClearDuration()
	return pu
}

// SetLength sets the "length" field.
func (pu *ProductUpdate) SetLength(i int64) *ProductUpdate {
	pu.mutation.ResetLength()
	pu.mutation.SetLength(i)
	return pu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLength(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetLength(*i)
	}
	return pu
}

// AddLength adds i to the "length" field.
func (pu *ProductUpdate) AddLength(i int64) *ProductUpdate {
	pu.mutation.AddLength(i)
	return pu
}

// ClearLength clears the value of the "length" field.
func (pu *ProductUpdate) ClearLength() *ProductUpdate {
	pu.mutation.ClearLength()
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// ClearPrice clears the value of the "price" field.
func (pu *ProductUpdate) ClearPrice() *ProductUpdate {
	pu.mutation.ClearPrice()
	return pu
}

// SetTimes sets the "times" field.
func (pu *ProductUpdate) SetTimes(i int64) *ProductUpdate {
	pu.mutation.ResetTimes()
	pu.mutation.SetTimes(i)
	return pu
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTimes(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetTimes(*i)
	}
	return pu
}

// AddTimes adds i to the "times" field.
func (pu *ProductUpdate) AddTimes(i int64) *ProductUpdate {
	pu.mutation.AddTimes(i)
	return pu
}

// ClearTimes clears the value of the "times" field.
func (pu *ProductUpdate) ClearTimes() *ProductUpdate {
	pu.mutation.ClearTimes()
	return pu
}

// SetIsLessons sets the "is_lessons" field.
func (pu *ProductUpdate) SetIsLessons(i int64) *ProductUpdate {
	pu.mutation.ResetIsLessons()
	pu.mutation.SetIsLessons(i)
	return pu
}

// SetNillableIsLessons sets the "is_lessons" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsLessons(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetIsLessons(*i)
	}
	return pu
}

// AddIsLessons adds i to the "is_lessons" field.
func (pu *ProductUpdate) AddIsLessons(i int64) *ProductUpdate {
	pu.mutation.AddIsLessons(i)
	return pu
}

// ClearIsLessons clears the value of the "is_lessons" field.
func (pu *ProductUpdate) ClearIsLessons() *ProductUpdate {
	pu.mutation.ClearIsLessons()
	return pu
}

// SetIsCourse sets the "is_course" field.
func (pu *ProductUpdate) SetIsCourse(i int64) *ProductUpdate {
	pu.mutation.ResetIsCourse()
	pu.mutation.SetIsCourse(i)
	return pu
}

// SetNillableIsCourse sets the "is_course" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsCourse(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetIsCourse(*i)
	}
	return pu
}

// AddIsCourse adds i to the "is_course" field.
func (pu *ProductUpdate) AddIsCourse(i int64) *ProductUpdate {
	pu.mutation.AddIsCourse(i)
	return pu
}

// ClearIsCourse clears the value of the "is_course" field.
func (pu *ProductUpdate) ClearIsCourse() *ProductUpdate {
	pu.mutation.ClearIsCourse()
	return pu
}

// SetSales sets the "sales" field.
func (pu *ProductUpdate) SetSales(b []*base.Sales) *ProductUpdate {
	pu.mutation.SetSales(b)
	return pu
}

// AppendSales appends b to the "sales" field.
func (pu *ProductUpdate) AppendSales(b []*base.Sales) *ProductUpdate {
	pu.mutation.AppendSales(b)
	return pu
}

// ClearSales clears the value of the "sales" field.
func (pu *ProductUpdate) ClearSales() *ProductUpdate {
	pu.mutation.ClearSales()
	return pu
}

// SetIsSales sets the "is_sales" field.
func (pu *ProductUpdate) SetIsSales(i int64) *ProductUpdate {
	pu.mutation.ResetIsSales()
	pu.mutation.SetIsSales(i)
	return pu
}

// SetNillableIsSales sets the "is_sales" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsSales(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetIsSales(*i)
	}
	return pu
}

// AddIsSales adds i to the "is_sales" field.
func (pu *ProductUpdate) AddIsSales(i int64) *ProductUpdate {
	pu.mutation.AddIsSales(i)
	return pu
}

// ClearIsSales clears the value of the "is_sales" field.
func (pu *ProductUpdate) ClearIsSales() *ProductUpdate {
	pu.mutation.ClearIsSales()
	return pu
}

// SetSignSalesAt sets the "sign_sales_at" field.
func (pu *ProductUpdate) SetSignSalesAt(t time.Time) *ProductUpdate {
	pu.mutation.SetSignSalesAt(t)
	return pu
}

// SetNillableSignSalesAt sets the "sign_sales_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSignSalesAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetSignSalesAt(*t)
	}
	return pu
}

// ClearSignSalesAt clears the value of the "sign_sales_at" field.
func (pu *ProductUpdate) ClearSignSalesAt() *ProductUpdate {
	pu.mutation.ClearSignSalesAt()
	return pu
}

// SetEndSalesAt sets the "end_sales_at" field.
func (pu *ProductUpdate) SetEndSalesAt(t time.Time) *ProductUpdate {
	pu.mutation.SetEndSalesAt(t)
	return pu
}

// SetNillableEndSalesAt sets the "end_sales_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableEndSalesAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetEndSalesAt(*t)
	}
	return pu
}

// ClearEndSalesAt clears the value of the "end_sales_at" field.
func (pu *ProductUpdate) ClearEndSalesAt() *ProductUpdate {
	pu.mutation.ClearEndSalesAt()
	return pu
}

// SetPic sets the "pic" field.
func (pu *ProductUpdate) SetPic(s string) *ProductUpdate {
	pu.mutation.SetPic(s)
	return pu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePic(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPic(*s)
	}
	return pu
}

// ClearPic clears the value of the "pic" field.
func (pu *ProductUpdate) ClearPic() *ProductUpdate {
	pu.mutation.ClearPic()
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProductUpdate) ClearDescription() *ProductUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// AddTagIDs adds the "tags" edge to the DictionaryDetail entity by IDs.
func (pu *ProductUpdate) AddTagIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddTagIDs(ids...)
	return pu
}

// AddTags adds the "tags" edges to the DictionaryDetail entity.
func (pu *ProductUpdate) AddTags(d ...*DictionaryDetail) *ProductUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddTagIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (pu *ProductUpdate) AddContractIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddContractIDs(ids...)
	return pu
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (pu *ProductUpdate) AddContracts(c ...*Contract) *ProductUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddContractIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the ProductCourses entity by IDs.
func (pu *ProductUpdate) AddCourseIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddCourseIDs(ids...)
	return pu
}

// AddCourses adds the "courses" edges to the ProductCourses entity.
func (pu *ProductUpdate) AddCourses(p ...*ProductCourses) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddCourseIDs(ids...)
}

// AddLessonIDs adds the "lessons" edge to the ProductCourses entity by IDs.
func (pu *ProductUpdate) AddLessonIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddLessonIDs(ids...)
	return pu
}

// AddLessons adds the "lessons" edges to the ProductCourses entity.
func (pu *ProductUpdate) AddLessons(p ...*ProductCourses) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddLessonIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearTags clears all "tags" edges to the DictionaryDetail entity.
func (pu *ProductUpdate) ClearTags() *ProductUpdate {
	pu.mutation.ClearTags()
	return pu
}

// RemoveTagIDs removes the "tags" edge to DictionaryDetail entities by IDs.
func (pu *ProductUpdate) RemoveTagIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveTagIDs(ids...)
	return pu
}

// RemoveTags removes "tags" edges to DictionaryDetail entities.
func (pu *ProductUpdate) RemoveTags(d ...*DictionaryDetail) *ProductUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveTagIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (pu *ProductUpdate) ClearContracts() *ProductUpdate {
	pu.mutation.ClearContracts()
	return pu
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (pu *ProductUpdate) RemoveContractIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveContractIDs(ids...)
	return pu
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (pu *ProductUpdate) RemoveContracts(c ...*Contract) *ProductUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveContractIDs(ids...)
}

// ClearCourses clears all "courses" edges to the ProductCourses entity.
func (pu *ProductUpdate) ClearCourses() *ProductUpdate {
	pu.mutation.ClearCourses()
	return pu
}

// RemoveCourseIDs removes the "courses" edge to ProductCourses entities by IDs.
func (pu *ProductUpdate) RemoveCourseIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveCourseIDs(ids...)
	return pu
}

// RemoveCourses removes "courses" edges to ProductCourses entities.
func (pu *ProductUpdate) RemoveCourses(p ...*ProductCourses) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveCourseIDs(ids...)
}

// ClearLessons clears all "lessons" edges to the ProductCourses entity.
func (pu *ProductUpdate) ClearLessons() *ProductUpdate {
	pu.mutation.ClearLessons()
	return pu
}

// RemoveLessonIDs removes the "lessons" edge to ProductCourses entities by IDs.
func (pu *ProductUpdate) RemoveLessonIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveLessonIDs(ids...)
	return pu
}

// RemoveLessons removes "lessons" edges to ProductCourses entities.
func (pu *ProductUpdate) RemoveLessons(p ...*ProductCourses) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveLessonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Delete(); ok {
		_spec.SetField(product.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDelete(); ok {
		_spec.AddField(product.FieldDelete, field.TypeInt64, value)
	}
	if pu.mutation.DeleteCleared() {
		_spec.ClearField(product.FieldDelete, field.TypeInt64)
	}
	if value, ok := pu.mutation.CreatedID(); ok {
		_spec.SetField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedID(); ok {
		_spec.AddField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if pu.mutation.CreatedIDCleared() {
		_spec.ClearField(product.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt64, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(product.FieldStatus, field.TypeInt64)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(product.FieldType, field.TypeString, value)
	}
	if pu.mutation.TypeCleared() {
		_spec.ClearField(product.FieldType, field.TypeString)
	}
	if value, ok := pu.mutation.SubType(); ok {
		_spec.SetField(product.FieldSubType, field.TypeString, value)
	}
	if pu.mutation.SubTypeCleared() {
		_spec.ClearField(product.FieldSubType, field.TypeString)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt64, value)
	}
	if pu.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt64)
	}
	if value, ok := pu.mutation.Deadline(); ok {
		_spec.SetField(product.FieldDeadline, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeadline(); ok {
		_spec.AddField(product.FieldDeadline, field.TypeInt64, value)
	}
	if pu.mutation.DeadlineCleared() {
		_spec.ClearField(product.FieldDeadline, field.TypeInt64)
	}
	if value, ok := pu.mutation.Duration(); ok {
		_spec.SetField(product.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDuration(); ok {
		_spec.AddField(product.FieldDuration, field.TypeInt64, value)
	}
	if pu.mutation.DurationCleared() {
		_spec.ClearField(product.FieldDuration, field.TypeInt64)
	}
	if value, ok := pu.mutation.Length(); ok {
		_spec.SetField(product.FieldLength, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedLength(); ok {
		_spec.AddField(product.FieldLength, field.TypeInt64, value)
	}
	if pu.mutation.LengthCleared() {
		_spec.ClearField(product.FieldLength, field.TypeInt64)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if pu.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Times(); ok {
		_spec.SetField(product.FieldTimes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedTimes(); ok {
		_spec.AddField(product.FieldTimes, field.TypeInt64, value)
	}
	if pu.mutation.TimesCleared() {
		_spec.ClearField(product.FieldTimes, field.TypeInt64)
	}
	if value, ok := pu.mutation.IsLessons(); ok {
		_spec.SetField(product.FieldIsLessons, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedIsLessons(); ok {
		_spec.AddField(product.FieldIsLessons, field.TypeInt64, value)
	}
	if pu.mutation.IsLessonsCleared() {
		_spec.ClearField(product.FieldIsLessons, field.TypeInt64)
	}
	if value, ok := pu.mutation.IsCourse(); ok {
		_spec.SetField(product.FieldIsCourse, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedIsCourse(); ok {
		_spec.AddField(product.FieldIsCourse, field.TypeInt64, value)
	}
	if pu.mutation.IsCourseCleared() {
		_spec.ClearField(product.FieldIsCourse, field.TypeInt64)
	}
	if value, ok := pu.mutation.Sales(); ok {
		_spec.SetField(product.FieldSales, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedSales(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldSales, value)
		})
	}
	if pu.mutation.SalesCleared() {
		_spec.ClearField(product.FieldSales, field.TypeJSON)
	}
	if value, ok := pu.mutation.IsSales(); ok {
		_spec.SetField(product.FieldIsSales, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedIsSales(); ok {
		_spec.AddField(product.FieldIsSales, field.TypeInt64, value)
	}
	if pu.mutation.IsSalesCleared() {
		_spec.ClearField(product.FieldIsSales, field.TypeInt64)
	}
	if value, ok := pu.mutation.SignSalesAt(); ok {
		_spec.SetField(product.FieldSignSalesAt, field.TypeTime, value)
	}
	if pu.mutation.SignSalesAtCleared() {
		_spec.ClearField(product.FieldSignSalesAt, field.TypeTime)
	}
	if value, ok := pu.mutation.EndSalesAt(); ok {
		_spec.SetField(product.FieldEndSalesAt, field.TypeTime, value)
	}
	if pu.mutation.EndSalesAtCleared() {
		_spec.ClearField(product.FieldEndSalesAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Pic(); ok {
		_spec.SetField(product.FieldPic, field.TypeString, value)
	}
	if pu.mutation.PicCleared() {
		_spec.ClearField(product.FieldPic, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedContractsIDs(); len(nodes) > 0 && !pu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !pu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !pu.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProductUpdateOne) ClearUpdatedAt() *ProductUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetDelete sets the "delete" field.
func (puo *ProductUpdateOne) SetDelete(i int64) *ProductUpdateOne {
	puo.mutation.ResetDelete()
	puo.mutation.SetDelete(i)
	return puo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDelete(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDelete(*i)
	}
	return puo
}

// AddDelete adds i to the "delete" field.
func (puo *ProductUpdateOne) AddDelete(i int64) *ProductUpdateOne {
	puo.mutation.AddDelete(i)
	return puo
}

// ClearDelete clears the value of the "delete" field.
func (puo *ProductUpdateOne) ClearDelete() *ProductUpdateOne {
	puo.mutation.ClearDelete()
	return puo
}

// SetCreatedID sets the "created_id" field.
func (puo *ProductUpdateOne) SetCreatedID(i int64) *ProductUpdateOne {
	puo.mutation.ResetCreatedID()
	puo.mutation.SetCreatedID(i)
	return puo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedID(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCreatedID(*i)
	}
	return puo
}

// AddCreatedID adds i to the "created_id" field.
func (puo *ProductUpdateOne) AddCreatedID(i int64) *ProductUpdateOne {
	puo.mutation.AddCreatedID(i)
	return puo
}

// ClearCreatedID clears the value of the "created_id" field.
func (puo *ProductUpdateOne) ClearCreatedID() *ProductUpdateOne {
	puo.mutation.ClearCreatedID()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(i int64) *ProductUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ProductUpdateOne) AddStatus(i int64) *ProductUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *ProductUpdateOne) ClearStatus() *ProductUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetType sets the "type" field.
func (puo *ProductUpdateOne) SetType(s string) *ProductUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableType(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// ClearType clears the value of the "type" field.
func (puo *ProductUpdateOne) ClearType() *ProductUpdateOne {
	puo.mutation.ClearType()
	return puo
}

// SetSubType sets the "sub_type" field.
func (puo *ProductUpdateOne) SetSubType(s string) *ProductUpdateOne {
	puo.mutation.SetSubType(s)
	return puo
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSubType(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSubType(*s)
	}
	return puo
}

// ClearSubType clears the value of the "sub_type" field.
func (puo *ProductUpdateOne) ClearSubType() *ProductUpdateOne {
	puo.mutation.ClearSubType()
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProductUpdateOne) ClearName() *ProductUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetStock sets the "stock" field.
func (puo *ProductUpdateOne) SetStock(i int64) *ProductUpdateOne {
	puo.mutation.ResetStock()
	puo.mutation.SetStock(i)
	return puo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStock(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetStock(*i)
	}
	return puo
}

// AddStock adds i to the "stock" field.
func (puo *ProductUpdateOne) AddStock(i int64) *ProductUpdateOne {
	puo.mutation.AddStock(i)
	return puo
}

// ClearStock clears the value of the "stock" field.
func (puo *ProductUpdateOne) ClearStock() *ProductUpdateOne {
	puo.mutation.ClearStock()
	return puo
}

// SetDeadline sets the "deadline" field.
func (puo *ProductUpdateOne) SetDeadline(i int64) *ProductUpdateOne {
	puo.mutation.ResetDeadline()
	puo.mutation.SetDeadline(i)
	return puo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeadline(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDeadline(*i)
	}
	return puo
}

// AddDeadline adds i to the "deadline" field.
func (puo *ProductUpdateOne) AddDeadline(i int64) *ProductUpdateOne {
	puo.mutation.AddDeadline(i)
	return puo
}

// ClearDeadline clears the value of the "deadline" field.
func (puo *ProductUpdateOne) ClearDeadline() *ProductUpdateOne {
	puo.mutation.ClearDeadline()
	return puo
}

// SetDuration sets the "duration" field.
func (puo *ProductUpdateOne) SetDuration(i int64) *ProductUpdateOne {
	puo.mutation.ResetDuration()
	puo.mutation.SetDuration(i)
	return puo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDuration(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDuration(*i)
	}
	return puo
}

// AddDuration adds i to the "duration" field.
func (puo *ProductUpdateOne) AddDuration(i int64) *ProductUpdateOne {
	puo.mutation.AddDuration(i)
	return puo
}

// ClearDuration clears the value of the "duration" field.
func (puo *ProductUpdateOne) ClearDuration() *ProductUpdateOne {
	puo.mutation.ClearDuration()
	return puo
}

// SetLength sets the "length" field.
func (puo *ProductUpdateOne) SetLength(i int64) *ProductUpdateOne {
	puo.mutation.ResetLength()
	puo.mutation.SetLength(i)
	return puo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLength(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetLength(*i)
	}
	return puo
}

// AddLength adds i to the "length" field.
func (puo *ProductUpdateOne) AddLength(i int64) *ProductUpdateOne {
	puo.mutation.AddLength(i)
	return puo
}

// ClearLength clears the value of the "length" field.
func (puo *ProductUpdateOne) ClearLength() *ProductUpdateOne {
	puo.mutation.ClearLength()
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// ClearPrice clears the value of the "price" field.
func (puo *ProductUpdateOne) ClearPrice() *ProductUpdateOne {
	puo.mutation.ClearPrice()
	return puo
}

// SetTimes sets the "times" field.
func (puo *ProductUpdateOne) SetTimes(i int64) *ProductUpdateOne {
	puo.mutation.ResetTimes()
	puo.mutation.SetTimes(i)
	return puo
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTimes(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetTimes(*i)
	}
	return puo
}

// AddTimes adds i to the "times" field.
func (puo *ProductUpdateOne) AddTimes(i int64) *ProductUpdateOne {
	puo.mutation.AddTimes(i)
	return puo
}

// ClearTimes clears the value of the "times" field.
func (puo *ProductUpdateOne) ClearTimes() *ProductUpdateOne {
	puo.mutation.ClearTimes()
	return puo
}

// SetIsLessons sets the "is_lessons" field.
func (puo *ProductUpdateOne) SetIsLessons(i int64) *ProductUpdateOne {
	puo.mutation.ResetIsLessons()
	puo.mutation.SetIsLessons(i)
	return puo
}

// SetNillableIsLessons sets the "is_lessons" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsLessons(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetIsLessons(*i)
	}
	return puo
}

// AddIsLessons adds i to the "is_lessons" field.
func (puo *ProductUpdateOne) AddIsLessons(i int64) *ProductUpdateOne {
	puo.mutation.AddIsLessons(i)
	return puo
}

// ClearIsLessons clears the value of the "is_lessons" field.
func (puo *ProductUpdateOne) ClearIsLessons() *ProductUpdateOne {
	puo.mutation.ClearIsLessons()
	return puo
}

// SetIsCourse sets the "is_course" field.
func (puo *ProductUpdateOne) SetIsCourse(i int64) *ProductUpdateOne {
	puo.mutation.ResetIsCourse()
	puo.mutation.SetIsCourse(i)
	return puo
}

// SetNillableIsCourse sets the "is_course" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsCourse(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetIsCourse(*i)
	}
	return puo
}

// AddIsCourse adds i to the "is_course" field.
func (puo *ProductUpdateOne) AddIsCourse(i int64) *ProductUpdateOne {
	puo.mutation.AddIsCourse(i)
	return puo
}

// ClearIsCourse clears the value of the "is_course" field.
func (puo *ProductUpdateOne) ClearIsCourse() *ProductUpdateOne {
	puo.mutation.ClearIsCourse()
	return puo
}

// SetSales sets the "sales" field.
func (puo *ProductUpdateOne) SetSales(b []*base.Sales) *ProductUpdateOne {
	puo.mutation.SetSales(b)
	return puo
}

// AppendSales appends b to the "sales" field.
func (puo *ProductUpdateOne) AppendSales(b []*base.Sales) *ProductUpdateOne {
	puo.mutation.AppendSales(b)
	return puo
}

// ClearSales clears the value of the "sales" field.
func (puo *ProductUpdateOne) ClearSales() *ProductUpdateOne {
	puo.mutation.ClearSales()
	return puo
}

// SetIsSales sets the "is_sales" field.
func (puo *ProductUpdateOne) SetIsSales(i int64) *ProductUpdateOne {
	puo.mutation.ResetIsSales()
	puo.mutation.SetIsSales(i)
	return puo
}

// SetNillableIsSales sets the "is_sales" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsSales(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetIsSales(*i)
	}
	return puo
}

// AddIsSales adds i to the "is_sales" field.
func (puo *ProductUpdateOne) AddIsSales(i int64) *ProductUpdateOne {
	puo.mutation.AddIsSales(i)
	return puo
}

// ClearIsSales clears the value of the "is_sales" field.
func (puo *ProductUpdateOne) ClearIsSales() *ProductUpdateOne {
	puo.mutation.ClearIsSales()
	return puo
}

// SetSignSalesAt sets the "sign_sales_at" field.
func (puo *ProductUpdateOne) SetSignSalesAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetSignSalesAt(t)
	return puo
}

// SetNillableSignSalesAt sets the "sign_sales_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSignSalesAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetSignSalesAt(*t)
	}
	return puo
}

// ClearSignSalesAt clears the value of the "sign_sales_at" field.
func (puo *ProductUpdateOne) ClearSignSalesAt() *ProductUpdateOne {
	puo.mutation.ClearSignSalesAt()
	return puo
}

// SetEndSalesAt sets the "end_sales_at" field.
func (puo *ProductUpdateOne) SetEndSalesAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetEndSalesAt(t)
	return puo
}

// SetNillableEndSalesAt sets the "end_sales_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableEndSalesAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetEndSalesAt(*t)
	}
	return puo
}

// ClearEndSalesAt clears the value of the "end_sales_at" field.
func (puo *ProductUpdateOne) ClearEndSalesAt() *ProductUpdateOne {
	puo.mutation.ClearEndSalesAt()
	return puo
}

// SetPic sets the "pic" field.
func (puo *ProductUpdateOne) SetPic(s string) *ProductUpdateOne {
	puo.mutation.SetPic(s)
	return puo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePic(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPic(*s)
	}
	return puo
}

// ClearPic clears the value of the "pic" field.
func (puo *ProductUpdateOne) ClearPic() *ProductUpdateOne {
	puo.mutation.ClearPic()
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProductUpdateOne) ClearDescription() *ProductUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// AddTagIDs adds the "tags" edge to the DictionaryDetail entity by IDs.
func (puo *ProductUpdateOne) AddTagIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddTagIDs(ids...)
	return puo
}

// AddTags adds the "tags" edges to the DictionaryDetail entity.
func (puo *ProductUpdateOne) AddTags(d ...*DictionaryDetail) *ProductUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddTagIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (puo *ProductUpdateOne) AddContractIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddContractIDs(ids...)
	return puo
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (puo *ProductUpdateOne) AddContracts(c ...*Contract) *ProductUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddContractIDs(ids...)
}

// AddCourseIDs adds the "courses" edge to the ProductCourses entity by IDs.
func (puo *ProductUpdateOne) AddCourseIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddCourseIDs(ids...)
	return puo
}

// AddCourses adds the "courses" edges to the ProductCourses entity.
func (puo *ProductUpdateOne) AddCourses(p ...*ProductCourses) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddCourseIDs(ids...)
}

// AddLessonIDs adds the "lessons" edge to the ProductCourses entity by IDs.
func (puo *ProductUpdateOne) AddLessonIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddLessonIDs(ids...)
	return puo
}

// AddLessons adds the "lessons" edges to the ProductCourses entity.
func (puo *ProductUpdateOne) AddLessons(p ...*ProductCourses) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddLessonIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearTags clears all "tags" edges to the DictionaryDetail entity.
func (puo *ProductUpdateOne) ClearTags() *ProductUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// RemoveTagIDs removes the "tags" edge to DictionaryDetail entities by IDs.
func (puo *ProductUpdateOne) RemoveTagIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveTagIDs(ids...)
	return puo
}

// RemoveTags removes "tags" edges to DictionaryDetail entities.
func (puo *ProductUpdateOne) RemoveTags(d ...*DictionaryDetail) *ProductUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveTagIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (puo *ProductUpdateOne) ClearContracts() *ProductUpdateOne {
	puo.mutation.ClearContracts()
	return puo
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (puo *ProductUpdateOne) RemoveContractIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveContractIDs(ids...)
	return puo
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (puo *ProductUpdateOne) RemoveContracts(c ...*Contract) *ProductUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveContractIDs(ids...)
}

// ClearCourses clears all "courses" edges to the ProductCourses entity.
func (puo *ProductUpdateOne) ClearCourses() *ProductUpdateOne {
	puo.mutation.ClearCourses()
	return puo
}

// RemoveCourseIDs removes the "courses" edge to ProductCourses entities by IDs.
func (puo *ProductUpdateOne) RemoveCourseIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveCourseIDs(ids...)
	return puo
}

// RemoveCourses removes "courses" edges to ProductCourses entities.
func (puo *ProductUpdateOne) RemoveCourses(p ...*ProductCourses) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveCourseIDs(ids...)
}

// ClearLessons clears all "lessons" edges to the ProductCourses entity.
func (puo *ProductUpdateOne) ClearLessons() *ProductUpdateOne {
	puo.mutation.ClearLessons()
	return puo
}

// RemoveLessonIDs removes the "lessons" edge to ProductCourses entities by IDs.
func (puo *ProductUpdateOne) RemoveLessonIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveLessonIDs(ids...)
	return puo
}

// RemoveLessons removes "lessons" edges to ProductCourses entities.
func (puo *ProductUpdateOne) RemoveLessons(p ...*ProductCourses) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveLessonIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Delete(); ok {
		_spec.SetField(product.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDelete(); ok {
		_spec.AddField(product.FieldDelete, field.TypeInt64, value)
	}
	if puo.mutation.DeleteCleared() {
		_spec.ClearField(product.FieldDelete, field.TypeInt64)
	}
	if value, ok := puo.mutation.CreatedID(); ok {
		_spec.SetField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedID(); ok {
		_spec.AddField(product.FieldCreatedID, field.TypeInt64, value)
	}
	if puo.mutation.CreatedIDCleared() {
		_spec.ClearField(product.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt64, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(product.FieldStatus, field.TypeInt64)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(product.FieldType, field.TypeString, value)
	}
	if puo.mutation.TypeCleared() {
		_spec.ClearField(product.FieldType, field.TypeString)
	}
	if value, ok := puo.mutation.SubType(); ok {
		_spec.SetField(product.FieldSubType, field.TypeString, value)
	}
	if puo.mutation.SubTypeCleared() {
		_spec.ClearField(product.FieldSubType, field.TypeString)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt64, value)
	}
	if puo.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt64)
	}
	if value, ok := puo.mutation.Deadline(); ok {
		_spec.SetField(product.FieldDeadline, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeadline(); ok {
		_spec.AddField(product.FieldDeadline, field.TypeInt64, value)
	}
	if puo.mutation.DeadlineCleared() {
		_spec.ClearField(product.FieldDeadline, field.TypeInt64)
	}
	if value, ok := puo.mutation.Duration(); ok {
		_spec.SetField(product.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDuration(); ok {
		_spec.AddField(product.FieldDuration, field.TypeInt64, value)
	}
	if puo.mutation.DurationCleared() {
		_spec.ClearField(product.FieldDuration, field.TypeInt64)
	}
	if value, ok := puo.mutation.Length(); ok {
		_spec.SetField(product.FieldLength, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedLength(); ok {
		_spec.AddField(product.FieldLength, field.TypeInt64, value)
	}
	if puo.mutation.LengthCleared() {
		_spec.ClearField(product.FieldLength, field.TypeInt64)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if puo.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Times(); ok {
		_spec.SetField(product.FieldTimes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedTimes(); ok {
		_spec.AddField(product.FieldTimes, field.TypeInt64, value)
	}
	if puo.mutation.TimesCleared() {
		_spec.ClearField(product.FieldTimes, field.TypeInt64)
	}
	if value, ok := puo.mutation.IsLessons(); ok {
		_spec.SetField(product.FieldIsLessons, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedIsLessons(); ok {
		_spec.AddField(product.FieldIsLessons, field.TypeInt64, value)
	}
	if puo.mutation.IsLessonsCleared() {
		_spec.ClearField(product.FieldIsLessons, field.TypeInt64)
	}
	if value, ok := puo.mutation.IsCourse(); ok {
		_spec.SetField(product.FieldIsCourse, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedIsCourse(); ok {
		_spec.AddField(product.FieldIsCourse, field.TypeInt64, value)
	}
	if puo.mutation.IsCourseCleared() {
		_spec.ClearField(product.FieldIsCourse, field.TypeInt64)
	}
	if value, ok := puo.mutation.Sales(); ok {
		_spec.SetField(product.FieldSales, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedSales(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldSales, value)
		})
	}
	if puo.mutation.SalesCleared() {
		_spec.ClearField(product.FieldSales, field.TypeJSON)
	}
	if value, ok := puo.mutation.IsSales(); ok {
		_spec.SetField(product.FieldIsSales, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedIsSales(); ok {
		_spec.AddField(product.FieldIsSales, field.TypeInt64, value)
	}
	if puo.mutation.IsSalesCleared() {
		_spec.ClearField(product.FieldIsSales, field.TypeInt64)
	}
	if value, ok := puo.mutation.SignSalesAt(); ok {
		_spec.SetField(product.FieldSignSalesAt, field.TypeTime, value)
	}
	if puo.mutation.SignSalesAtCleared() {
		_spec.ClearField(product.FieldSignSalesAt, field.TypeTime)
	}
	if value, ok := puo.mutation.EndSalesAt(); ok {
		_spec.SetField(product.FieldEndSalesAt, field.TypeTime, value)
	}
	if puo.mutation.EndSalesAtCleared() {
		_spec.ClearField(product.FieldEndSalesAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Pic(); ok {
		_spec.SetField(product.FieldPic, field.TypeString, value)
	}
	if puo.mutation.PicCleared() {
		_spec.ClearField(product.FieldPic, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.TagsTable,
			Columns: product.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !puo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.ContractsTable,
			Columns: product.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !puo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CoursesTable,
			Columns: []string{product.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLessonsIDs(); len(nodes) > 0 && !puo.mutation.LessonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LessonsTable,
			Columns: []string{product.LessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcourses.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

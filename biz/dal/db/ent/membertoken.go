// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membertoken"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MemberToken is the model entity for the MemberToken schema.
type MemberToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	//  User's ID | 用户的ID
	MemberID int64 `json:"member_id,omitempty"`
	// Token string | Token 字符串
	Token string `json:"token,omitempty"`
	// Log in source such as GitHub | Token 来源 （本地为core, 第三方如github等）
	Source string `json:"source,omitempty"`
	//  Expire time | 过期时间
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberTokenQuery when eager-loading is set.
	Edges        MemberTokenEdges `json:"edges"`
	member_token *int64
	selectValues sql.SelectValues
}

// MemberTokenEdges holds the relations/edges for other nodes in the graph.
type MemberTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Member `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberTokenEdges) OwnerOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case membertoken.FieldID, membertoken.FieldDelete, membertoken.FieldCreatedID, membertoken.FieldMemberID:
			values[i] = new(sql.NullInt64)
		case membertoken.FieldToken, membertoken.FieldSource:
			values[i] = new(sql.NullString)
		case membertoken.FieldCreatedAt, membertoken.FieldUpdatedAt, membertoken.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		case membertoken.ForeignKeys[0]: // member_token
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberToken fields.
func (mt *MemberToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case membertoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = int64(value.Int64)
		case membertoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case membertoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		case membertoken.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				mt.Delete = value.Int64
			}
		case membertoken.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				mt.CreatedID = value.Int64
			}
		case membertoken.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				mt.MemberID = value.Int64
			}
		case membertoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				mt.Token = value.String
			}
		case membertoken.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				mt.Source = value.String
			}
		case membertoken.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				mt.ExpiredAt = value.Time
			}
		case membertoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field member_token", value)
			} else if value.Valid {
				mt.member_token = new(int64)
				*mt.member_token = int64(value.Int64)
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberToken.
// This includes values selected through modifiers, order, etc.
func (mt *MemberToken) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the MemberToken entity.
func (mt *MemberToken) QueryOwner() *MemberQuery {
	return NewMemberTokenClient(mt.config).QueryOwner(mt)
}

// Update returns a builder for updating this MemberToken.
// Note that you need to call MemberToken.Unwrap() before calling this method if this MemberToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MemberToken) Update() *MemberTokenUpdateOne {
	return NewMemberTokenClient(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the MemberToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MemberToken) Unwrap() *MemberToken {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberToken is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MemberToken) String() string {
	var builder strings.Builder
	builder.WriteString("MemberToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", mt.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.MemberID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(mt.Token)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(mt.Source)
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(mt.ExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MemberTokens is a parsable slice of MemberToken.
type MemberTokens []*MemberToken

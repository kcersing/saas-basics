// Code generated by ent, DO NOT EDIT.

package sms

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCreatedID, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldMobile, v))
}

// BizID applies equality check predicate on the "biz_id" field. It's identical to BizIDEQ.
func BizID(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldBizID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCode, v))
}

// Template applies equality check predicate on the "template" field. It's identical to TemplateEQ.
func Template(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldTemplate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Sms {
	return predicate.Sms(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Sms {
	return predicate.Sms(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Sms {
	return predicate.Sms(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Sms {
	return predicate.Sms(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.Sms {
	return predicate.Sms(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.Sms {
	return predicate.Sms(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.Sms {
	return predicate.Sms(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.Sms {
	return predicate.Sms(sql.FieldNotNull(FieldCreatedID))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldMobile, v))
}

// BizIDEQ applies the EQ predicate on the "biz_id" field.
func BizIDEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldBizID, v))
}

// BizIDNEQ applies the NEQ predicate on the "biz_id" field.
func BizIDNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldBizID, v))
}

// BizIDIn applies the In predicate on the "biz_id" field.
func BizIDIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldBizID, vs...))
}

// BizIDNotIn applies the NotIn predicate on the "biz_id" field.
func BizIDNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldBizID, vs...))
}

// BizIDGT applies the GT predicate on the "biz_id" field.
func BizIDGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldBizID, v))
}

// BizIDGTE applies the GTE predicate on the "biz_id" field.
func BizIDGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldBizID, v))
}

// BizIDLT applies the LT predicate on the "biz_id" field.
func BizIDLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldBizID, v))
}

// BizIDLTE applies the LTE predicate on the "biz_id" field.
func BizIDLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldBizID, v))
}

// BizIDContains applies the Contains predicate on the "biz_id" field.
func BizIDContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldBizID, v))
}

// BizIDHasPrefix applies the HasPrefix predicate on the "biz_id" field.
func BizIDHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldBizID, v))
}

// BizIDHasSuffix applies the HasSuffix predicate on the "biz_id" field.
func BizIDHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldBizID, v))
}

// BizIDEqualFold applies the EqualFold predicate on the "biz_id" field.
func BizIDEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldBizID, v))
}

// BizIDContainsFold applies the ContainsFold predicate on the "biz_id" field.
func BizIDContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldBizID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldCode, v))
}

// TemplateEQ applies the EQ predicate on the "template" field.
func TemplateEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldTemplate, v))
}

// TemplateNEQ applies the NEQ predicate on the "template" field.
func TemplateNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldTemplate, v))
}

// TemplateIn applies the In predicate on the "template" field.
func TemplateIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldTemplate, vs...))
}

// TemplateNotIn applies the NotIn predicate on the "template" field.
func TemplateNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldTemplate, vs...))
}

// TemplateGT applies the GT predicate on the "template" field.
func TemplateGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldTemplate, v))
}

// TemplateGTE applies the GTE predicate on the "template" field.
func TemplateGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldTemplate, v))
}

// TemplateLT applies the LT predicate on the "template" field.
func TemplateLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldTemplate, v))
}

// TemplateLTE applies the LTE predicate on the "template" field.
func TemplateLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldTemplate, v))
}

// TemplateContains applies the Contains predicate on the "template" field.
func TemplateContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldTemplate, v))
}

// TemplateHasPrefix applies the HasPrefix predicate on the "template" field.
func TemplateHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldTemplate, v))
}

// TemplateHasSuffix applies the HasSuffix predicate on the "template" field.
func TemplateHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldTemplate, v))
}

// TemplateEqualFold applies the EqualFold predicate on the "template" field.
func TemplateEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldTemplate, v))
}

// TemplateContainsFold applies the ContainsFold predicate on the "template" field.
func TemplateContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldTemplate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sms) predicate.Sms {
	return predicate.Sms(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sms) predicate.Sms {
	return predicate.Sms(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sms) predicate.Sms {
	return predicate.Sms(sql.NotPredicates(p))
}

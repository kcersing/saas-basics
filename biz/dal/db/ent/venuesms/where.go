// Code generated by ent, DO NOT EDIT.

package venuesms

import (
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldCreatedID, v))
}

// VenueID applies equality check predicate on the "venue_id" field. It's identical to VenueIDEQ.
func VenueID(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldVenueID, v))
}

// NoticeCount applies equality check predicate on the "notice_count" field. It's identical to NoticeCountEQ.
func NoticeCount(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldNoticeCount, v))
}

// UsedNotice applies equality check predicate on the "used_notice" field. It's identical to UsedNoticeEQ.
func UsedNotice(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldUsedNotice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotNull(FieldCreatedID))
}

// VenueIDEQ applies the EQ predicate on the "venue_id" field.
func VenueIDEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldVenueID, v))
}

// VenueIDNEQ applies the NEQ predicate on the "venue_id" field.
func VenueIDNEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldVenueID, v))
}

// VenueIDIn applies the In predicate on the "venue_id" field.
func VenueIDIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldVenueID, vs...))
}

// VenueIDNotIn applies the NotIn predicate on the "venue_id" field.
func VenueIDNotIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldVenueID, vs...))
}

// VenueIDIsNil applies the IsNil predicate on the "venue_id" field.
func VenueIDIsNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIsNull(FieldVenueID))
}

// VenueIDNotNil applies the NotNil predicate on the "venue_id" field.
func VenueIDNotNil() predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotNull(FieldVenueID))
}

// NoticeCountEQ applies the EQ predicate on the "notice_count" field.
func NoticeCountEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldNoticeCount, v))
}

// NoticeCountNEQ applies the NEQ predicate on the "notice_count" field.
func NoticeCountNEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldNoticeCount, v))
}

// NoticeCountIn applies the In predicate on the "notice_count" field.
func NoticeCountIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldNoticeCount, vs...))
}

// NoticeCountNotIn applies the NotIn predicate on the "notice_count" field.
func NoticeCountNotIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldNoticeCount, vs...))
}

// NoticeCountGT applies the GT predicate on the "notice_count" field.
func NoticeCountGT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldNoticeCount, v))
}

// NoticeCountGTE applies the GTE predicate on the "notice_count" field.
func NoticeCountGTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldNoticeCount, v))
}

// NoticeCountLT applies the LT predicate on the "notice_count" field.
func NoticeCountLT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldNoticeCount, v))
}

// NoticeCountLTE applies the LTE predicate on the "notice_count" field.
func NoticeCountLTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldNoticeCount, v))
}

// UsedNoticeEQ applies the EQ predicate on the "used_notice" field.
func UsedNoticeEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldEQ(FieldUsedNotice, v))
}

// UsedNoticeNEQ applies the NEQ predicate on the "used_notice" field.
func UsedNoticeNEQ(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNEQ(FieldUsedNotice, v))
}

// UsedNoticeIn applies the In predicate on the "used_notice" field.
func UsedNoticeIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldIn(FieldUsedNotice, vs...))
}

// UsedNoticeNotIn applies the NotIn predicate on the "used_notice" field.
func UsedNoticeNotIn(vs ...int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldNotIn(FieldUsedNotice, vs...))
}

// UsedNoticeGT applies the GT predicate on the "used_notice" field.
func UsedNoticeGT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGT(FieldUsedNotice, v))
}

// UsedNoticeGTE applies the GTE predicate on the "used_notice" field.
func UsedNoticeGTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldGTE(FieldUsedNotice, v))
}

// UsedNoticeLT applies the LT predicate on the "used_notice" field.
func UsedNoticeLT(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLT(FieldUsedNotice, v))
}

// UsedNoticeLTE applies the LTE predicate on the "used_notice" field.
func UsedNoticeLTE(v int64) predicate.VenueSms {
	return predicate.VenueSms(sql.FieldLTE(FieldUsedNotice, v))
}

// HasVenue applies the HasEdge predicate on the "venue" edge.
func HasVenue() predicate.VenueSms {
	return predicate.VenueSms(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VenueTable, VenueColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Venue
		step.Edge.Schema = schemaConfig.VenueSms
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVenueWith applies the HasEdge predicate on the "venue" edge with a given conditions (other predicates).
func HasVenueWith(preds ...predicate.Venue) predicate.VenueSms {
	return predicate.VenueSms(func(s *sql.Selector) {
		step := newVenueStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Venue
		step.Edge.Schema = schemaConfig.VenueSms
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VenueSms) predicate.VenueSms {
	return predicate.VenueSms(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VenueSms) predicate.VenueSms {
	return predicate.VenueSms(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VenueSms) predicate.VenueSms {
	return predicate.VenueSms(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/entrylogs"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membercontract"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductUpdate is the builder for updating MemberProduct entities.
type MemberProductUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProductMutation
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (mpu *MemberProductUpdate) Where(ps ...predicate.MemberProduct) *MemberProductUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MemberProductUpdate) SetUpdatedAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpu *MemberProductUpdate) ClearUpdatedAt() *MemberProductUpdate {
	mpu.mutation.ClearUpdatedAt()
	return mpu
}

// SetDelete sets the "delete" field.
func (mpu *MemberProductUpdate) SetDelete(i int64) *MemberProductUpdate {
	mpu.mutation.ResetDelete()
	mpu.mutation.SetDelete(i)
	return mpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableDelete(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetDelete(*i)
	}
	return mpu
}

// AddDelete adds i to the "delete" field.
func (mpu *MemberProductUpdate) AddDelete(i int64) *MemberProductUpdate {
	mpu.mutation.AddDelete(i)
	return mpu
}

// ClearDelete clears the value of the "delete" field.
func (mpu *MemberProductUpdate) ClearDelete() *MemberProductUpdate {
	mpu.mutation.ClearDelete()
	return mpu
}

// SetCreatedID sets the "created_id" field.
func (mpu *MemberProductUpdate) SetCreatedID(i int64) *MemberProductUpdate {
	mpu.mutation.ResetCreatedID()
	mpu.mutation.SetCreatedID(i)
	return mpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableCreatedID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetCreatedID(*i)
	}
	return mpu
}

// AddCreatedID adds i to the "created_id" field.
func (mpu *MemberProductUpdate) AddCreatedID(i int64) *MemberProductUpdate {
	mpu.mutation.AddCreatedID(i)
	return mpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpu *MemberProductUpdate) ClearCreatedID() *MemberProductUpdate {
	mpu.mutation.ClearCreatedID()
	return mpu
}

// SetStatus sets the "status" field.
func (mpu *MemberProductUpdate) SetStatus(i int64) *MemberProductUpdate {
	mpu.mutation.ResetStatus()
	mpu.mutation.SetStatus(i)
	return mpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableStatus(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetStatus(*i)
	}
	return mpu
}

// AddStatus adds i to the "status" field.
func (mpu *MemberProductUpdate) AddStatus(i int64) *MemberProductUpdate {
	mpu.mutation.AddStatus(i)
	return mpu
}

// ClearStatus clears the value of the "status" field.
func (mpu *MemberProductUpdate) ClearStatus() *MemberProductUpdate {
	mpu.mutation.ClearStatus()
	return mpu
}

// SetSn sets the "sn" field.
func (mpu *MemberProductUpdate) SetSn(s string) *MemberProductUpdate {
	mpu.mutation.SetSn(s)
	return mpu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableSn(s *string) *MemberProductUpdate {
	if s != nil {
		mpu.SetSn(*s)
	}
	return mpu
}

// ClearSn clears the value of the "sn" field.
func (mpu *MemberProductUpdate) ClearSn() *MemberProductUpdate {
	mpu.mutation.ClearSn()
	return mpu
}

// SetType sets the "type" field.
func (mpu *MemberProductUpdate) SetType(s string) *MemberProductUpdate {
	mpu.mutation.SetType(s)
	return mpu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableType(s *string) *MemberProductUpdate {
	if s != nil {
		mpu.SetType(*s)
	}
	return mpu
}

// ClearType clears the value of the "type" field.
func (mpu *MemberProductUpdate) ClearType() *MemberProductUpdate {
	mpu.mutation.ClearType()
	return mpu
}

// SetMemberID sets the "member_id" field.
func (mpu *MemberProductUpdate) SetMemberID(i int64) *MemberProductUpdate {
	mpu.mutation.SetMemberID(i)
	return mpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableMemberID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetMemberID(*i)
	}
	return mpu
}

// ClearMemberID clears the value of the "member_id" field.
func (mpu *MemberProductUpdate) ClearMemberID() *MemberProductUpdate {
	mpu.mutation.ClearMemberID()
	return mpu
}

// SetProductID sets the "product_id" field.
func (mpu *MemberProductUpdate) SetProductID(i int64) *MemberProductUpdate {
	mpu.mutation.ResetProductID()
	mpu.mutation.SetProductID(i)
	return mpu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableProductID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetProductID(*i)
	}
	return mpu
}

// AddProductID adds i to the "product_id" field.
func (mpu *MemberProductUpdate) AddProductID(i int64) *MemberProductUpdate {
	mpu.mutation.AddProductID(i)
	return mpu
}

// ClearProductID clears the value of the "product_id" field.
func (mpu *MemberProductUpdate) ClearProductID() *MemberProductUpdate {
	mpu.mutation.ClearProductID()
	return mpu
}

// SetVenueID sets the "venue_id" field.
func (mpu *MemberProductUpdate) SetVenueID(i int64) *MemberProductUpdate {
	mpu.mutation.ResetVenueID()
	mpu.mutation.SetVenueID(i)
	return mpu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableVenueID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetVenueID(*i)
	}
	return mpu
}

// AddVenueID adds i to the "venue_id" field.
func (mpu *MemberProductUpdate) AddVenueID(i int64) *MemberProductUpdate {
	mpu.mutation.AddVenueID(i)
	return mpu
}

// ClearVenueID clears the value of the "venue_id" field.
func (mpu *MemberProductUpdate) ClearVenueID() *MemberProductUpdate {
	mpu.mutation.ClearVenueID()
	return mpu
}

// SetOrderID sets the "order_id" field.
func (mpu *MemberProductUpdate) SetOrderID(i int64) *MemberProductUpdate {
	mpu.mutation.ResetOrderID()
	mpu.mutation.SetOrderID(i)
	return mpu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableOrderID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetOrderID(*i)
	}
	return mpu
}

// AddOrderID adds i to the "order_id" field.
func (mpu *MemberProductUpdate) AddOrderID(i int64) *MemberProductUpdate {
	mpu.mutation.AddOrderID(i)
	return mpu
}

// ClearOrderID clears the value of the "order_id" field.
func (mpu *MemberProductUpdate) ClearOrderID() *MemberProductUpdate {
	mpu.mutation.ClearOrderID()
	return mpu
}

// SetName sets the "name" field.
func (mpu *MemberProductUpdate) SetName(s string) *MemberProductUpdate {
	mpu.mutation.SetName(s)
	return mpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableName(s *string) *MemberProductUpdate {
	if s != nil {
		mpu.SetName(*s)
	}
	return mpu
}

// ClearName clears the value of the "name" field.
func (mpu *MemberProductUpdate) ClearName() *MemberProductUpdate {
	mpu.mutation.ClearName()
	return mpu
}

// SetPrice sets the "price" field.
func (mpu *MemberProductUpdate) SetPrice(f float64) *MemberProductUpdate {
	mpu.mutation.ResetPrice()
	mpu.mutation.SetPrice(f)
	return mpu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillablePrice(f *float64) *MemberProductUpdate {
	if f != nil {
		mpu.SetPrice(*f)
	}
	return mpu
}

// AddPrice adds f to the "price" field.
func (mpu *MemberProductUpdate) AddPrice(f float64) *MemberProductUpdate {
	mpu.mutation.AddPrice(f)
	return mpu
}

// ClearPrice clears the value of the "price" field.
func (mpu *MemberProductUpdate) ClearPrice() *MemberProductUpdate {
	mpu.mutation.ClearPrice()
	return mpu
}

// SetFee sets the "fee" field.
func (mpu *MemberProductUpdate) SetFee(f float64) *MemberProductUpdate {
	mpu.mutation.ResetFee()
	mpu.mutation.SetFee(f)
	return mpu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableFee(f *float64) *MemberProductUpdate {
	if f != nil {
		mpu.SetFee(*f)
	}
	return mpu
}

// AddFee adds f to the "fee" field.
func (mpu *MemberProductUpdate) AddFee(f float64) *MemberProductUpdate {
	mpu.mutation.AddFee(f)
	return mpu
}

// ClearFee clears the value of the "fee" field.
func (mpu *MemberProductUpdate) ClearFee() *MemberProductUpdate {
	mpu.mutation.ClearFee()
	return mpu
}

// SetDuration sets the "duration" field.
func (mpu *MemberProductUpdate) SetDuration(i int64) *MemberProductUpdate {
	mpu.mutation.ResetDuration()
	mpu.mutation.SetDuration(i)
	return mpu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableDuration(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetDuration(*i)
	}
	return mpu
}

// AddDuration adds i to the "duration" field.
func (mpu *MemberProductUpdate) AddDuration(i int64) *MemberProductUpdate {
	mpu.mutation.AddDuration(i)
	return mpu
}

// ClearDuration clears the value of the "duration" field.
func (mpu *MemberProductUpdate) ClearDuration() *MemberProductUpdate {
	mpu.mutation.ClearDuration()
	return mpu
}

// SetLength sets the "length" field.
func (mpu *MemberProductUpdate) SetLength(i int64) *MemberProductUpdate {
	mpu.mutation.ResetLength()
	mpu.mutation.SetLength(i)
	return mpu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableLength(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetLength(*i)
	}
	return mpu
}

// AddLength adds i to the "length" field.
func (mpu *MemberProductUpdate) AddLength(i int64) *MemberProductUpdate {
	mpu.mutation.AddLength(i)
	return mpu
}

// ClearLength clears the value of the "length" field.
func (mpu *MemberProductUpdate) ClearLength() *MemberProductUpdate {
	mpu.mutation.ClearLength()
	return mpu
}

// SetCount sets the "count" field.
func (mpu *MemberProductUpdate) SetCount(i int64) *MemberProductUpdate {
	mpu.mutation.ResetCount()
	mpu.mutation.SetCount(i)
	return mpu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableCount(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetCount(*i)
	}
	return mpu
}

// AddCount adds i to the "count" field.
func (mpu *MemberProductUpdate) AddCount(i int64) *MemberProductUpdate {
	mpu.mutation.AddCount(i)
	return mpu
}

// ClearCount clears the value of the "count" field.
func (mpu *MemberProductUpdate) ClearCount() *MemberProductUpdate {
	mpu.mutation.ClearCount()
	return mpu
}

// SetCountSurplus sets the "count_surplus" field.
func (mpu *MemberProductUpdate) SetCountSurplus(i int64) *MemberProductUpdate {
	mpu.mutation.ResetCountSurplus()
	mpu.mutation.SetCountSurplus(i)
	return mpu
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableCountSurplus(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetCountSurplus(*i)
	}
	return mpu
}

// AddCountSurplus adds i to the "count_surplus" field.
func (mpu *MemberProductUpdate) AddCountSurplus(i int64) *MemberProductUpdate {
	mpu.mutation.AddCountSurplus(i)
	return mpu
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (mpu *MemberProductUpdate) ClearCountSurplus() *MemberProductUpdate {
	mpu.mutation.ClearCountSurplus()
	return mpu
}

// SetDeadline sets the "deadline" field.
func (mpu *MemberProductUpdate) SetDeadline(i int64) *MemberProductUpdate {
	mpu.mutation.ResetDeadline()
	mpu.mutation.SetDeadline(i)
	return mpu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableDeadline(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetDeadline(*i)
	}
	return mpu
}

// AddDeadline adds i to the "deadline" field.
func (mpu *MemberProductUpdate) AddDeadline(i int64) *MemberProductUpdate {
	mpu.mutation.AddDeadline(i)
	return mpu
}

// ClearDeadline clears the value of the "deadline" field.
func (mpu *MemberProductUpdate) ClearDeadline() *MemberProductUpdate {
	mpu.mutation.ClearDeadline()
	return mpu
}

// SetValidityAt sets the "validity_at" field.
func (mpu *MemberProductUpdate) SetValidityAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetValidityAt(t)
	return mpu
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableValidityAt(t *time.Time) *MemberProductUpdate {
	if t != nil {
		mpu.SetValidityAt(*t)
	}
	return mpu
}

// ClearValidityAt clears the value of the "validity_at" field.
func (mpu *MemberProductUpdate) ClearValidityAt() *MemberProductUpdate {
	mpu.mutation.ClearValidityAt()
	return mpu
}

// SetCancelAt sets the "cancel_at" field.
func (mpu *MemberProductUpdate) SetCancelAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetCancelAt(t)
	return mpu
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableCancelAt(t *time.Time) *MemberProductUpdate {
	if t != nil {
		mpu.SetCancelAt(*t)
	}
	return mpu
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (mpu *MemberProductUpdate) ClearCancelAt() *MemberProductUpdate {
	mpu.mutation.ClearCancelAt()
	return mpu
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (mpu *MemberProductUpdate) SetMembersID(id int64) *MemberProductUpdate {
	mpu.mutation.SetMembersID(id)
	return mpu
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableMembersID(id *int64) *MemberProductUpdate {
	if id != nil {
		mpu = mpu.SetMembersID(*id)
	}
	return mpu
}

// SetMembers sets the "members" edge to the Member entity.
func (mpu *MemberProductUpdate) SetMembers(m *Member) *MemberProductUpdate {
	return mpu.SetMembersID(m.ID)
}

// AddMemberProductEntryIDs adds the "member_product_entry" edge to the EntryLogs entity by IDs.
func (mpu *MemberProductUpdate) AddMemberProductEntryIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.AddMemberProductEntryIDs(ids...)
	return mpu
}

// AddMemberProductEntry adds the "member_product_entry" edges to the EntryLogs entity.
func (mpu *MemberProductUpdate) AddMemberProductEntry(e ...*EntryLogs) *MemberProductUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mpu.AddMemberProductEntryIDs(ids...)
}

// AddMemberProductContentIDs adds the "member_product_contents" edge to the MemberContract entity by IDs.
func (mpu *MemberProductUpdate) AddMemberProductContentIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.AddMemberProductContentIDs(ids...)
	return mpu
}

// AddMemberProductContents adds the "member_product_contents" edges to the MemberContract entity.
func (mpu *MemberProductUpdate) AddMemberProductContents(m ...*MemberContract) *MemberProductUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpu.AddMemberProductContentIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (mpu *MemberProductUpdate) Mutation() *MemberProductMutation {
	return mpu.mutation
}

// ClearMembers clears the "members" edge to the Member entity.
func (mpu *MemberProductUpdate) ClearMembers() *MemberProductUpdate {
	mpu.mutation.ClearMembers()
	return mpu
}

// ClearMemberProductEntry clears all "member_product_entry" edges to the EntryLogs entity.
func (mpu *MemberProductUpdate) ClearMemberProductEntry() *MemberProductUpdate {
	mpu.mutation.ClearMemberProductEntry()
	return mpu
}

// RemoveMemberProductEntryIDs removes the "member_product_entry" edge to EntryLogs entities by IDs.
func (mpu *MemberProductUpdate) RemoveMemberProductEntryIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.RemoveMemberProductEntryIDs(ids...)
	return mpu
}

// RemoveMemberProductEntry removes "member_product_entry" edges to EntryLogs entities.
func (mpu *MemberProductUpdate) RemoveMemberProductEntry(e ...*EntryLogs) *MemberProductUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mpu.RemoveMemberProductEntryIDs(ids...)
}

// ClearMemberProductContents clears all "member_product_contents" edges to the MemberContract entity.
func (mpu *MemberProductUpdate) ClearMemberProductContents() *MemberProductUpdate {
	mpu.mutation.ClearMemberProductContents()
	return mpu
}

// RemoveMemberProductContentIDs removes the "member_product_contents" edge to MemberContract entities by IDs.
func (mpu *MemberProductUpdate) RemoveMemberProductContentIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.RemoveMemberProductContentIDs(ids...)
	return mpu
}

// RemoveMemberProductContents removes "member_product_contents" edges to MemberContract entities.
func (mpu *MemberProductUpdate) RemoveMemberProductContents(m ...*MemberContract) *MemberProductUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpu.RemoveMemberProductContentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MemberProductUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MemberProductUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MemberProductUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MemberProductUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MemberProductUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok && !mpu.mutation.UpdatedAtCleared() {
		v := memberproduct.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

func (mpu *MemberProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpu.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproduct.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.Delete(); ok {
		_spec.SetField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDelete(); ok {
		_spec.AddField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if mpu.mutation.DeleteCleared() {
		_spec.ClearField(memberproduct.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpu.mutation.CreatedID(); ok {
		_spec.SetField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if mpu.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproduct.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if mpu.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if mpu.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := mpu.mutation.GetType(); ok {
		_spec.SetField(memberproduct.FieldType, field.TypeString, value)
	}
	if mpu.mutation.TypeCleared() {
		_spec.ClearField(memberproduct.FieldType, field.TypeString)
	}
	if value, ok := mpu.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if mpu.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.VenueID(); ok {
		_spec.SetField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedVenueID(); ok {
		_spec.AddField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if mpu.mutation.VenueIDCleared() {
		_spec.ClearField(memberproduct.FieldVenueID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.OrderID(); ok {
		_spec.SetField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedOrderID(); ok {
		_spec.AddField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if mpu.mutation.OrderIDCleared() {
		_spec.ClearField(memberproduct.FieldOrderID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeString, value)
	}
	if mpu.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeString)
	}
	if value, ok := mpu.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if mpu.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if value, ok := mpu.mutation.Fee(); ok {
		_spec.SetField(memberproduct.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedFee(); ok {
		_spec.AddField(memberproduct.FieldFee, field.TypeFloat64, value)
	}
	if mpu.mutation.FeeCleared() {
		_spec.ClearField(memberproduct.FieldFee, field.TypeFloat64)
	}
	if value, ok := mpu.mutation.Duration(); ok {
		_spec.SetField(memberproduct.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDuration(); ok {
		_spec.AddField(memberproduct.FieldDuration, field.TypeInt64, value)
	}
	if mpu.mutation.DurationCleared() {
		_spec.ClearField(memberproduct.FieldDuration, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Length(); ok {
		_spec.SetField(memberproduct.FieldLength, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedLength(); ok {
		_spec.AddField(memberproduct.FieldLength, field.TypeInt64, value)
	}
	if mpu.mutation.LengthCleared() {
		_spec.ClearField(memberproduct.FieldLength, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Count(); ok {
		_spec.SetField(memberproduct.FieldCount, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCount(); ok {
		_spec.AddField(memberproduct.FieldCount, field.TypeInt64, value)
	}
	if mpu.mutation.CountCleared() {
		_spec.ClearField(memberproduct.FieldCount, field.TypeInt64)
	}
	if value, ok := mpu.mutation.CountSurplus(); ok {
		_spec.SetField(memberproduct.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproduct.FieldCountSurplus, field.TypeInt64, value)
	}
	if mpu.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproduct.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Deadline(); ok {
		_spec.SetField(memberproduct.FieldDeadline, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDeadline(); ok {
		_spec.AddField(memberproduct.FieldDeadline, field.TypeInt64, value)
	}
	if mpu.mutation.DeadlineCleared() {
		_spec.ClearField(memberproduct.FieldDeadline, field.TypeInt64)
	}
	if value, ok := mpu.mutation.ValidityAt(); ok {
		_spec.SetField(memberproduct.FieldValidityAt, field.TypeTime, value)
	}
	if mpu.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproduct.FieldValidityAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.CancelAt(); ok {
		_spec.SetField(memberproduct.FieldCancelAt, field.TypeTime, value)
	}
	if mpu.mutation.CancelAtCleared() {
		_spec.ClearField(memberproduct.FieldCancelAt, field.TypeTime)
	}
	if mpu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.MemberProductEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.RemovedMemberProductEntryIDs(); len(nodes) > 0 && !mpu.mutation.MemberProductEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MemberProductEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.RemovedMemberProductContentsIDs(); len(nodes) > 0 && !mpu.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MemberProductContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MemberProductUpdateOne is the builder for updating a single MemberProduct entity.
type MemberProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MemberProductUpdateOne) SetUpdatedAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpuo *MemberProductUpdateOne) ClearUpdatedAt() *MemberProductUpdateOne {
	mpuo.mutation.ClearUpdatedAt()
	return mpuo
}

// SetDelete sets the "delete" field.
func (mpuo *MemberProductUpdateOne) SetDelete(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetDelete()
	mpuo.mutation.SetDelete(i)
	return mpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableDelete(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetDelete(*i)
	}
	return mpuo
}

// AddDelete adds i to the "delete" field.
func (mpuo *MemberProductUpdateOne) AddDelete(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddDelete(i)
	return mpuo
}

// ClearDelete clears the value of the "delete" field.
func (mpuo *MemberProductUpdateOne) ClearDelete() *MemberProductUpdateOne {
	mpuo.mutation.ClearDelete()
	return mpuo
}

// SetCreatedID sets the "created_id" field.
func (mpuo *MemberProductUpdateOne) SetCreatedID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetCreatedID()
	mpuo.mutation.SetCreatedID(i)
	return mpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableCreatedID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetCreatedID(*i)
	}
	return mpuo
}

// AddCreatedID adds i to the "created_id" field.
func (mpuo *MemberProductUpdateOne) AddCreatedID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddCreatedID(i)
	return mpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpuo *MemberProductUpdateOne) ClearCreatedID() *MemberProductUpdateOne {
	mpuo.mutation.ClearCreatedID()
	return mpuo
}

// SetStatus sets the "status" field.
func (mpuo *MemberProductUpdateOne) SetStatus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetStatus()
	mpuo.mutation.SetStatus(i)
	return mpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableStatus(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetStatus(*i)
	}
	return mpuo
}

// AddStatus adds i to the "status" field.
func (mpuo *MemberProductUpdateOne) AddStatus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddStatus(i)
	return mpuo
}

// ClearStatus clears the value of the "status" field.
func (mpuo *MemberProductUpdateOne) ClearStatus() *MemberProductUpdateOne {
	mpuo.mutation.ClearStatus()
	return mpuo
}

// SetSn sets the "sn" field.
func (mpuo *MemberProductUpdateOne) SetSn(s string) *MemberProductUpdateOne {
	mpuo.mutation.SetSn(s)
	return mpuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableSn(s *string) *MemberProductUpdateOne {
	if s != nil {
		mpuo.SetSn(*s)
	}
	return mpuo
}

// ClearSn clears the value of the "sn" field.
func (mpuo *MemberProductUpdateOne) ClearSn() *MemberProductUpdateOne {
	mpuo.mutation.ClearSn()
	return mpuo
}

// SetType sets the "type" field.
func (mpuo *MemberProductUpdateOne) SetType(s string) *MemberProductUpdateOne {
	mpuo.mutation.SetType(s)
	return mpuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableType(s *string) *MemberProductUpdateOne {
	if s != nil {
		mpuo.SetType(*s)
	}
	return mpuo
}

// ClearType clears the value of the "type" field.
func (mpuo *MemberProductUpdateOne) ClearType() *MemberProductUpdateOne {
	mpuo.mutation.ClearType()
	return mpuo
}

// SetMemberID sets the "member_id" field.
func (mpuo *MemberProductUpdateOne) SetMemberID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.SetMemberID(i)
	return mpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableMemberID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetMemberID(*i)
	}
	return mpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mpuo *MemberProductUpdateOne) ClearMemberID() *MemberProductUpdateOne {
	mpuo.mutation.ClearMemberID()
	return mpuo
}

// SetProductID sets the "product_id" field.
func (mpuo *MemberProductUpdateOne) SetProductID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetProductID()
	mpuo.mutation.SetProductID(i)
	return mpuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableProductID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetProductID(*i)
	}
	return mpuo
}

// AddProductID adds i to the "product_id" field.
func (mpuo *MemberProductUpdateOne) AddProductID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddProductID(i)
	return mpuo
}

// ClearProductID clears the value of the "product_id" field.
func (mpuo *MemberProductUpdateOne) ClearProductID() *MemberProductUpdateOne {
	mpuo.mutation.ClearProductID()
	return mpuo
}

// SetVenueID sets the "venue_id" field.
func (mpuo *MemberProductUpdateOne) SetVenueID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetVenueID()
	mpuo.mutation.SetVenueID(i)
	return mpuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableVenueID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetVenueID(*i)
	}
	return mpuo
}

// AddVenueID adds i to the "venue_id" field.
func (mpuo *MemberProductUpdateOne) AddVenueID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddVenueID(i)
	return mpuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (mpuo *MemberProductUpdateOne) ClearVenueID() *MemberProductUpdateOne {
	mpuo.mutation.ClearVenueID()
	return mpuo
}

// SetOrderID sets the "order_id" field.
func (mpuo *MemberProductUpdateOne) SetOrderID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetOrderID()
	mpuo.mutation.SetOrderID(i)
	return mpuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableOrderID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetOrderID(*i)
	}
	return mpuo
}

// AddOrderID adds i to the "order_id" field.
func (mpuo *MemberProductUpdateOne) AddOrderID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddOrderID(i)
	return mpuo
}

// ClearOrderID clears the value of the "order_id" field.
func (mpuo *MemberProductUpdateOne) ClearOrderID() *MemberProductUpdateOne {
	mpuo.mutation.ClearOrderID()
	return mpuo
}

// SetName sets the "name" field.
func (mpuo *MemberProductUpdateOne) SetName(s string) *MemberProductUpdateOne {
	mpuo.mutation.SetName(s)
	return mpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableName(s *string) *MemberProductUpdateOne {
	if s != nil {
		mpuo.SetName(*s)
	}
	return mpuo
}

// ClearName clears the value of the "name" field.
func (mpuo *MemberProductUpdateOne) ClearName() *MemberProductUpdateOne {
	mpuo.mutation.ClearName()
	return mpuo
}

// SetPrice sets the "price" field.
func (mpuo *MemberProductUpdateOne) SetPrice(f float64) *MemberProductUpdateOne {
	mpuo.mutation.ResetPrice()
	mpuo.mutation.SetPrice(f)
	return mpuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillablePrice(f *float64) *MemberProductUpdateOne {
	if f != nil {
		mpuo.SetPrice(*f)
	}
	return mpuo
}

// AddPrice adds f to the "price" field.
func (mpuo *MemberProductUpdateOne) AddPrice(f float64) *MemberProductUpdateOne {
	mpuo.mutation.AddPrice(f)
	return mpuo
}

// ClearPrice clears the value of the "price" field.
func (mpuo *MemberProductUpdateOne) ClearPrice() *MemberProductUpdateOne {
	mpuo.mutation.ClearPrice()
	return mpuo
}

// SetFee sets the "fee" field.
func (mpuo *MemberProductUpdateOne) SetFee(f float64) *MemberProductUpdateOne {
	mpuo.mutation.ResetFee()
	mpuo.mutation.SetFee(f)
	return mpuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableFee(f *float64) *MemberProductUpdateOne {
	if f != nil {
		mpuo.SetFee(*f)
	}
	return mpuo
}

// AddFee adds f to the "fee" field.
func (mpuo *MemberProductUpdateOne) AddFee(f float64) *MemberProductUpdateOne {
	mpuo.mutation.AddFee(f)
	return mpuo
}

// ClearFee clears the value of the "fee" field.
func (mpuo *MemberProductUpdateOne) ClearFee() *MemberProductUpdateOne {
	mpuo.mutation.ClearFee()
	return mpuo
}

// SetDuration sets the "duration" field.
func (mpuo *MemberProductUpdateOne) SetDuration(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetDuration()
	mpuo.mutation.SetDuration(i)
	return mpuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableDuration(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetDuration(*i)
	}
	return mpuo
}

// AddDuration adds i to the "duration" field.
func (mpuo *MemberProductUpdateOne) AddDuration(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddDuration(i)
	return mpuo
}

// ClearDuration clears the value of the "duration" field.
func (mpuo *MemberProductUpdateOne) ClearDuration() *MemberProductUpdateOne {
	mpuo.mutation.ClearDuration()
	return mpuo
}

// SetLength sets the "length" field.
func (mpuo *MemberProductUpdateOne) SetLength(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetLength()
	mpuo.mutation.SetLength(i)
	return mpuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableLength(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetLength(*i)
	}
	return mpuo
}

// AddLength adds i to the "length" field.
func (mpuo *MemberProductUpdateOne) AddLength(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddLength(i)
	return mpuo
}

// ClearLength clears the value of the "length" field.
func (mpuo *MemberProductUpdateOne) ClearLength() *MemberProductUpdateOne {
	mpuo.mutation.ClearLength()
	return mpuo
}

// SetCount sets the "count" field.
func (mpuo *MemberProductUpdateOne) SetCount(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetCount()
	mpuo.mutation.SetCount(i)
	return mpuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableCount(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetCount(*i)
	}
	return mpuo
}

// AddCount adds i to the "count" field.
func (mpuo *MemberProductUpdateOne) AddCount(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddCount(i)
	return mpuo
}

// ClearCount clears the value of the "count" field.
func (mpuo *MemberProductUpdateOne) ClearCount() *MemberProductUpdateOne {
	mpuo.mutation.ClearCount()
	return mpuo
}

// SetCountSurplus sets the "count_surplus" field.
func (mpuo *MemberProductUpdateOne) SetCountSurplus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetCountSurplus()
	mpuo.mutation.SetCountSurplus(i)
	return mpuo
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableCountSurplus(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetCountSurplus(*i)
	}
	return mpuo
}

// AddCountSurplus adds i to the "count_surplus" field.
func (mpuo *MemberProductUpdateOne) AddCountSurplus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddCountSurplus(i)
	return mpuo
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (mpuo *MemberProductUpdateOne) ClearCountSurplus() *MemberProductUpdateOne {
	mpuo.mutation.ClearCountSurplus()
	return mpuo
}

// SetDeadline sets the "deadline" field.
func (mpuo *MemberProductUpdateOne) SetDeadline(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetDeadline()
	mpuo.mutation.SetDeadline(i)
	return mpuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableDeadline(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetDeadline(*i)
	}
	return mpuo
}

// AddDeadline adds i to the "deadline" field.
func (mpuo *MemberProductUpdateOne) AddDeadline(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddDeadline(i)
	return mpuo
}

// ClearDeadline clears the value of the "deadline" field.
func (mpuo *MemberProductUpdateOne) ClearDeadline() *MemberProductUpdateOne {
	mpuo.mutation.ClearDeadline()
	return mpuo
}

// SetValidityAt sets the "validity_at" field.
func (mpuo *MemberProductUpdateOne) SetValidityAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetValidityAt(t)
	return mpuo
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableValidityAt(t *time.Time) *MemberProductUpdateOne {
	if t != nil {
		mpuo.SetValidityAt(*t)
	}
	return mpuo
}

// ClearValidityAt clears the value of the "validity_at" field.
func (mpuo *MemberProductUpdateOne) ClearValidityAt() *MemberProductUpdateOne {
	mpuo.mutation.ClearValidityAt()
	return mpuo
}

// SetCancelAt sets the "cancel_at" field.
func (mpuo *MemberProductUpdateOne) SetCancelAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetCancelAt(t)
	return mpuo
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableCancelAt(t *time.Time) *MemberProductUpdateOne {
	if t != nil {
		mpuo.SetCancelAt(*t)
	}
	return mpuo
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (mpuo *MemberProductUpdateOne) ClearCancelAt() *MemberProductUpdateOne {
	mpuo.mutation.ClearCancelAt()
	return mpuo
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (mpuo *MemberProductUpdateOne) SetMembersID(id int64) *MemberProductUpdateOne {
	mpuo.mutation.SetMembersID(id)
	return mpuo
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableMembersID(id *int64) *MemberProductUpdateOne {
	if id != nil {
		mpuo = mpuo.SetMembersID(*id)
	}
	return mpuo
}

// SetMembers sets the "members" edge to the Member entity.
func (mpuo *MemberProductUpdateOne) SetMembers(m *Member) *MemberProductUpdateOne {
	return mpuo.SetMembersID(m.ID)
}

// AddMemberProductEntryIDs adds the "member_product_entry" edge to the EntryLogs entity by IDs.
func (mpuo *MemberProductUpdateOne) AddMemberProductEntryIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.AddMemberProductEntryIDs(ids...)
	return mpuo
}

// AddMemberProductEntry adds the "member_product_entry" edges to the EntryLogs entity.
func (mpuo *MemberProductUpdateOne) AddMemberProductEntry(e ...*EntryLogs) *MemberProductUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mpuo.AddMemberProductEntryIDs(ids...)
}

// AddMemberProductContentIDs adds the "member_product_contents" edge to the MemberContract entity by IDs.
func (mpuo *MemberProductUpdateOne) AddMemberProductContentIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.AddMemberProductContentIDs(ids...)
	return mpuo
}

// AddMemberProductContents adds the "member_product_contents" edges to the MemberContract entity.
func (mpuo *MemberProductUpdateOne) AddMemberProductContents(m ...*MemberContract) *MemberProductUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpuo.AddMemberProductContentIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (mpuo *MemberProductUpdateOne) Mutation() *MemberProductMutation {
	return mpuo.mutation
}

// ClearMembers clears the "members" edge to the Member entity.
func (mpuo *MemberProductUpdateOne) ClearMembers() *MemberProductUpdateOne {
	mpuo.mutation.ClearMembers()
	return mpuo
}

// ClearMemberProductEntry clears all "member_product_entry" edges to the EntryLogs entity.
func (mpuo *MemberProductUpdateOne) ClearMemberProductEntry() *MemberProductUpdateOne {
	mpuo.mutation.ClearMemberProductEntry()
	return mpuo
}

// RemoveMemberProductEntryIDs removes the "member_product_entry" edge to EntryLogs entities by IDs.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductEntryIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.RemoveMemberProductEntryIDs(ids...)
	return mpuo
}

// RemoveMemberProductEntry removes "member_product_entry" edges to EntryLogs entities.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductEntry(e ...*EntryLogs) *MemberProductUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mpuo.RemoveMemberProductEntryIDs(ids...)
}

// ClearMemberProductContents clears all "member_product_contents" edges to the MemberContract entity.
func (mpuo *MemberProductUpdateOne) ClearMemberProductContents() *MemberProductUpdateOne {
	mpuo.mutation.ClearMemberProductContents()
	return mpuo
}

// RemoveMemberProductContentIDs removes the "member_product_contents" edge to MemberContract entities by IDs.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductContentIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.RemoveMemberProductContentIDs(ids...)
	return mpuo
}

// RemoveMemberProductContents removes "member_product_contents" edges to MemberContract entities.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductContents(m ...*MemberContract) *MemberProductUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpuo.RemoveMemberProductContentIDs(ids...)
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (mpuo *MemberProductUpdateOne) Where(ps ...predicate.MemberProduct) *MemberProductUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MemberProductUpdateOne) Select(field string, fields ...string) *MemberProductUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MemberProduct entity.
func (mpuo *MemberProductUpdateOne) Save(ctx context.Context) (*MemberProduct, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MemberProductUpdateOne) SaveX(ctx context.Context) *MemberProduct {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MemberProductUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MemberProductUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MemberProductUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok && !mpuo.mutation.UpdatedAtCleared() {
		v := memberproduct.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

func (mpuo *MemberProductUpdateOne) sqlSave(ctx context.Context) (_node *MemberProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproduct.FieldID)
		for _, f := range fields {
			if !memberproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(memberproduct.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberproduct.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.Delete(); ok {
		_spec.SetField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDelete(); ok {
		_spec.AddField(memberproduct.FieldDelete, field.TypeInt64, value)
	}
	if mpuo.mutation.DeleteCleared() {
		_spec.ClearField(memberproduct.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.CreatedID(); ok {
		_spec.SetField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberproduct.FieldCreatedID, field.TypeInt64, value)
	}
	if mpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(memberproduct.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if mpuo.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if mpuo.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := mpuo.mutation.GetType(); ok {
		_spec.SetField(memberproduct.FieldType, field.TypeString, value)
	}
	if mpuo.mutation.TypeCleared() {
		_spec.ClearField(memberproduct.FieldType, field.TypeString)
	}
	if value, ok := mpuo.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if mpuo.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.VenueID(); ok {
		_spec.SetField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedVenueID(); ok {
		_spec.AddField(memberproduct.FieldVenueID, field.TypeInt64, value)
	}
	if mpuo.mutation.VenueIDCleared() {
		_spec.ClearField(memberproduct.FieldVenueID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.OrderID(); ok {
		_spec.SetField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedOrderID(); ok {
		_spec.AddField(memberproduct.FieldOrderID, field.TypeInt64, value)
	}
	if mpuo.mutation.OrderIDCleared() {
		_spec.ClearField(memberproduct.FieldOrderID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeString, value)
	}
	if mpuo.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeString)
	}
	if value, ok := mpuo.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if mpuo.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if value, ok := mpuo.mutation.Fee(); ok {
		_spec.SetField(memberproduct.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedFee(); ok {
		_spec.AddField(memberproduct.FieldFee, field.TypeFloat64, value)
	}
	if mpuo.mutation.FeeCleared() {
		_spec.ClearField(memberproduct.FieldFee, field.TypeFloat64)
	}
	if value, ok := mpuo.mutation.Duration(); ok {
		_spec.SetField(memberproduct.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDuration(); ok {
		_spec.AddField(memberproduct.FieldDuration, field.TypeInt64, value)
	}
	if mpuo.mutation.DurationCleared() {
		_spec.ClearField(memberproduct.FieldDuration, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Length(); ok {
		_spec.SetField(memberproduct.FieldLength, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedLength(); ok {
		_spec.AddField(memberproduct.FieldLength, field.TypeInt64, value)
	}
	if mpuo.mutation.LengthCleared() {
		_spec.ClearField(memberproduct.FieldLength, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Count(); ok {
		_spec.SetField(memberproduct.FieldCount, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCount(); ok {
		_spec.AddField(memberproduct.FieldCount, field.TypeInt64, value)
	}
	if mpuo.mutation.CountCleared() {
		_spec.ClearField(memberproduct.FieldCount, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.CountSurplus(); ok {
		_spec.SetField(memberproduct.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproduct.FieldCountSurplus, field.TypeInt64, value)
	}
	if mpuo.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproduct.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Deadline(); ok {
		_spec.SetField(memberproduct.FieldDeadline, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDeadline(); ok {
		_spec.AddField(memberproduct.FieldDeadline, field.TypeInt64, value)
	}
	if mpuo.mutation.DeadlineCleared() {
		_spec.ClearField(memberproduct.FieldDeadline, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.ValidityAt(); ok {
		_spec.SetField(memberproduct.FieldValidityAt, field.TypeTime, value)
	}
	if mpuo.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproduct.FieldValidityAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.CancelAt(); ok {
		_spec.SetField(memberproduct.FieldCancelAt, field.TypeTime, value)
	}
	if mpuo.mutation.CancelAtCleared() {
		_spec.ClearField(memberproduct.FieldCancelAt, field.TypeTime)
	}
	if mpuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.MembersTable,
			Columns: []string{memberproduct.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.MemberProductEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.RemovedMemberProductEntryIDs(); len(nodes) > 0 && !mpuo.mutation.MemberProductEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MemberProductEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductEntryTable,
			Columns: []string{memberproduct.MemberProductEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.RemovedMemberProductContentsIDs(); len(nodes) > 0 && !mpuo.mutation.MemberProductContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MemberProductContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductContentsTable,
			Columns: []string{memberproduct.MemberProductContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProduct{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}

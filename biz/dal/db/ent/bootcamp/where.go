// Code generated by ent, DO NOT EDIT.

package bootcamp

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldName, v))
}

// SignNumber applies equality check predicate on the "sign_number" field. It's identical to SignNumberEQ.
func SignNumber(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignNumber, v))
}

// SignStartAt applies equality check predicate on the "sign_start_at" field. It's identical to SignStartAtEQ.
func SignStartAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignStartAt, v))
}

// SignEndAt applies equality check predicate on the "sign_end_at" field. It's identical to SignEndAtEQ.
func SignEndAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignEndAt, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldEndAt, v))
}

// Pic applies equality check predicate on the "pic" field. It's identical to PicEQ.
func Pic(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldPic, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldFee, v))
}

// IsFee applies equality check predicate on the "is_fee" field. It's identical to IsFeeEQ.
func IsFee(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsFee, v))
}

// IsShow applies equality check predicate on the "is_show" field. It's identical to IsShowEQ.
func IsShow(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsShow, v))
}

// IsCancel applies equality check predicate on the "is_cancel" field. It's identical to IsCancelEQ.
func IsCancel(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsCancel, v))
}

// CancelTime applies equality check predicate on the "cancel_time" field. It's identical to CancelTimeEQ.
func CancelTime(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCancelTime, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldDetail, v))
}

// SignFields applies equality check predicate on the "sign_fields" field. It's identical to SignFieldsEQ.
func SignFields(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignFields, v))
}

// Condition applies equality check predicate on the "condition" field. It's identical to ConditionEQ.
func Condition(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCondition, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContainsFold(FieldName, v))
}

// SignNumberEQ applies the EQ predicate on the "sign_number" field.
func SignNumberEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignNumber, v))
}

// SignNumberNEQ applies the NEQ predicate on the "sign_number" field.
func SignNumberNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldSignNumber, v))
}

// SignNumberIn applies the In predicate on the "sign_number" field.
func SignNumberIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldSignNumber, vs...))
}

// SignNumberNotIn applies the NotIn predicate on the "sign_number" field.
func SignNumberNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldSignNumber, vs...))
}

// SignNumberGT applies the GT predicate on the "sign_number" field.
func SignNumberGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldSignNumber, v))
}

// SignNumberGTE applies the GTE predicate on the "sign_number" field.
func SignNumberGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldSignNumber, v))
}

// SignNumberLT applies the LT predicate on the "sign_number" field.
func SignNumberLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldSignNumber, v))
}

// SignNumberLTE applies the LTE predicate on the "sign_number" field.
func SignNumberLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldSignNumber, v))
}

// SignNumberIsNil applies the IsNil predicate on the "sign_number" field.
func SignNumberIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldSignNumber))
}

// SignNumberNotNil applies the NotNil predicate on the "sign_number" field.
func SignNumberNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldSignNumber))
}

// SignStartAtEQ applies the EQ predicate on the "sign_start_at" field.
func SignStartAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignStartAt, v))
}

// SignStartAtNEQ applies the NEQ predicate on the "sign_start_at" field.
func SignStartAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldSignStartAt, v))
}

// SignStartAtIn applies the In predicate on the "sign_start_at" field.
func SignStartAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldSignStartAt, vs...))
}

// SignStartAtNotIn applies the NotIn predicate on the "sign_start_at" field.
func SignStartAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldSignStartAt, vs...))
}

// SignStartAtGT applies the GT predicate on the "sign_start_at" field.
func SignStartAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldSignStartAt, v))
}

// SignStartAtGTE applies the GTE predicate on the "sign_start_at" field.
func SignStartAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldSignStartAt, v))
}

// SignStartAtLT applies the LT predicate on the "sign_start_at" field.
func SignStartAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldSignStartAt, v))
}

// SignStartAtLTE applies the LTE predicate on the "sign_start_at" field.
func SignStartAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldSignStartAt, v))
}

// SignStartAtIsNil applies the IsNil predicate on the "sign_start_at" field.
func SignStartAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldSignStartAt))
}

// SignStartAtNotNil applies the NotNil predicate on the "sign_start_at" field.
func SignStartAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldSignStartAt))
}

// SignEndAtEQ applies the EQ predicate on the "sign_end_at" field.
func SignEndAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignEndAt, v))
}

// SignEndAtNEQ applies the NEQ predicate on the "sign_end_at" field.
func SignEndAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldSignEndAt, v))
}

// SignEndAtIn applies the In predicate on the "sign_end_at" field.
func SignEndAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldSignEndAt, vs...))
}

// SignEndAtNotIn applies the NotIn predicate on the "sign_end_at" field.
func SignEndAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldSignEndAt, vs...))
}

// SignEndAtGT applies the GT predicate on the "sign_end_at" field.
func SignEndAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldSignEndAt, v))
}

// SignEndAtGTE applies the GTE predicate on the "sign_end_at" field.
func SignEndAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldSignEndAt, v))
}

// SignEndAtLT applies the LT predicate on the "sign_end_at" field.
func SignEndAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldSignEndAt, v))
}

// SignEndAtLTE applies the LTE predicate on the "sign_end_at" field.
func SignEndAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldSignEndAt, v))
}

// SignEndAtIsNil applies the IsNil predicate on the "sign_end_at" field.
func SignEndAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldSignEndAt))
}

// SignEndAtNotNil applies the NotNil predicate on the "sign_end_at" field.
func SignEndAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldSignEndAt))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldEndAt))
}

// PicEQ applies the EQ predicate on the "pic" field.
func PicEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldPic, v))
}

// PicNEQ applies the NEQ predicate on the "pic" field.
func PicNEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldPic, v))
}

// PicIn applies the In predicate on the "pic" field.
func PicIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldPic, vs...))
}

// PicNotIn applies the NotIn predicate on the "pic" field.
func PicNotIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldPic, vs...))
}

// PicGT applies the GT predicate on the "pic" field.
func PicGT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldPic, v))
}

// PicGTE applies the GTE predicate on the "pic" field.
func PicGTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldPic, v))
}

// PicLT applies the LT predicate on the "pic" field.
func PicLT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldPic, v))
}

// PicLTE applies the LTE predicate on the "pic" field.
func PicLTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldPic, v))
}

// PicContains applies the Contains predicate on the "pic" field.
func PicContains(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContains(FieldPic, v))
}

// PicHasPrefix applies the HasPrefix predicate on the "pic" field.
func PicHasPrefix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasPrefix(FieldPic, v))
}

// PicHasSuffix applies the HasSuffix predicate on the "pic" field.
func PicHasSuffix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasSuffix(FieldPic, v))
}

// PicIsNil applies the IsNil predicate on the "pic" field.
func PicIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldPic))
}

// PicNotNil applies the NotNil predicate on the "pic" field.
func PicNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldPic))
}

// PicEqualFold applies the EqualFold predicate on the "pic" field.
func PicEqualFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEqualFold(FieldPic, v))
}

// PicContainsFold applies the ContainsFold predicate on the "pic" field.
func PicContainsFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContainsFold(FieldPic, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldFee, v))
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldFee))
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldFee))
}

// IsFeeEQ applies the EQ predicate on the "is_fee" field.
func IsFeeEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsFee, v))
}

// IsFeeNEQ applies the NEQ predicate on the "is_fee" field.
func IsFeeNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldIsFee, v))
}

// IsFeeIn applies the In predicate on the "is_fee" field.
func IsFeeIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldIsFee, vs...))
}

// IsFeeNotIn applies the NotIn predicate on the "is_fee" field.
func IsFeeNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldIsFee, vs...))
}

// IsFeeGT applies the GT predicate on the "is_fee" field.
func IsFeeGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldIsFee, v))
}

// IsFeeGTE applies the GTE predicate on the "is_fee" field.
func IsFeeGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldIsFee, v))
}

// IsFeeLT applies the LT predicate on the "is_fee" field.
func IsFeeLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldIsFee, v))
}

// IsFeeLTE applies the LTE predicate on the "is_fee" field.
func IsFeeLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldIsFee, v))
}

// IsFeeIsNil applies the IsNil predicate on the "is_fee" field.
func IsFeeIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldIsFee))
}

// IsFeeNotNil applies the NotNil predicate on the "is_fee" field.
func IsFeeNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldIsFee))
}

// IsShowEQ applies the EQ predicate on the "is_show" field.
func IsShowEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsShow, v))
}

// IsShowNEQ applies the NEQ predicate on the "is_show" field.
func IsShowNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldIsShow, v))
}

// IsShowIn applies the In predicate on the "is_show" field.
func IsShowIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldIsShow, vs...))
}

// IsShowNotIn applies the NotIn predicate on the "is_show" field.
func IsShowNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldIsShow, vs...))
}

// IsShowGT applies the GT predicate on the "is_show" field.
func IsShowGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldIsShow, v))
}

// IsShowGTE applies the GTE predicate on the "is_show" field.
func IsShowGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldIsShow, v))
}

// IsShowLT applies the LT predicate on the "is_show" field.
func IsShowLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldIsShow, v))
}

// IsShowLTE applies the LTE predicate on the "is_show" field.
func IsShowLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldIsShow, v))
}

// IsShowIsNil applies the IsNil predicate on the "is_show" field.
func IsShowIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldIsShow))
}

// IsShowNotNil applies the NotNil predicate on the "is_show" field.
func IsShowNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldIsShow))
}

// IsCancelEQ applies the EQ predicate on the "is_cancel" field.
func IsCancelEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldIsCancel, v))
}

// IsCancelNEQ applies the NEQ predicate on the "is_cancel" field.
func IsCancelNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldIsCancel, v))
}

// IsCancelIn applies the In predicate on the "is_cancel" field.
func IsCancelIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldIsCancel, vs...))
}

// IsCancelNotIn applies the NotIn predicate on the "is_cancel" field.
func IsCancelNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldIsCancel, vs...))
}

// IsCancelGT applies the GT predicate on the "is_cancel" field.
func IsCancelGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldIsCancel, v))
}

// IsCancelGTE applies the GTE predicate on the "is_cancel" field.
func IsCancelGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldIsCancel, v))
}

// IsCancelLT applies the LT predicate on the "is_cancel" field.
func IsCancelLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldIsCancel, v))
}

// IsCancelLTE applies the LTE predicate on the "is_cancel" field.
func IsCancelLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldIsCancel, v))
}

// IsCancelIsNil applies the IsNil predicate on the "is_cancel" field.
func IsCancelIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldIsCancel))
}

// IsCancelNotNil applies the NotNil predicate on the "is_cancel" field.
func IsCancelNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldIsCancel))
}

// CancelTimeEQ applies the EQ predicate on the "cancel_time" field.
func CancelTimeEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCancelTime, v))
}

// CancelTimeNEQ applies the NEQ predicate on the "cancel_time" field.
func CancelTimeNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldCancelTime, v))
}

// CancelTimeIn applies the In predicate on the "cancel_time" field.
func CancelTimeIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldCancelTime, vs...))
}

// CancelTimeNotIn applies the NotIn predicate on the "cancel_time" field.
func CancelTimeNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldCancelTime, vs...))
}

// CancelTimeGT applies the GT predicate on the "cancel_time" field.
func CancelTimeGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldCancelTime, v))
}

// CancelTimeGTE applies the GTE predicate on the "cancel_time" field.
func CancelTimeGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldCancelTime, v))
}

// CancelTimeLT applies the LT predicate on the "cancel_time" field.
func CancelTimeLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldCancelTime, v))
}

// CancelTimeLTE applies the LTE predicate on the "cancel_time" field.
func CancelTimeLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldCancelTime, v))
}

// CancelTimeIsNil applies the IsNil predicate on the "cancel_time" field.
func CancelTimeIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldCancelTime))
}

// CancelTimeNotNil applies the NotNil predicate on the "cancel_time" field.
func CancelTimeNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldCancelTime))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldDetail))
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldDetail))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContainsFold(FieldDetail, v))
}

// SignFieldsEQ applies the EQ predicate on the "sign_fields" field.
func SignFieldsEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldSignFields, v))
}

// SignFieldsNEQ applies the NEQ predicate on the "sign_fields" field.
func SignFieldsNEQ(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldSignFields, v))
}

// SignFieldsIn applies the In predicate on the "sign_fields" field.
func SignFieldsIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldSignFields, vs...))
}

// SignFieldsNotIn applies the NotIn predicate on the "sign_fields" field.
func SignFieldsNotIn(vs ...string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldSignFields, vs...))
}

// SignFieldsGT applies the GT predicate on the "sign_fields" field.
func SignFieldsGT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldSignFields, v))
}

// SignFieldsGTE applies the GTE predicate on the "sign_fields" field.
func SignFieldsGTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldSignFields, v))
}

// SignFieldsLT applies the LT predicate on the "sign_fields" field.
func SignFieldsLT(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldSignFields, v))
}

// SignFieldsLTE applies the LTE predicate on the "sign_fields" field.
func SignFieldsLTE(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldSignFields, v))
}

// SignFieldsContains applies the Contains predicate on the "sign_fields" field.
func SignFieldsContains(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContains(FieldSignFields, v))
}

// SignFieldsHasPrefix applies the HasPrefix predicate on the "sign_fields" field.
func SignFieldsHasPrefix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasPrefix(FieldSignFields, v))
}

// SignFieldsHasSuffix applies the HasSuffix predicate on the "sign_fields" field.
func SignFieldsHasSuffix(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldHasSuffix(FieldSignFields, v))
}

// SignFieldsIsNil applies the IsNil predicate on the "sign_fields" field.
func SignFieldsIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldSignFields))
}

// SignFieldsNotNil applies the NotNil predicate on the "sign_fields" field.
func SignFieldsNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldSignFields))
}

// SignFieldsEqualFold applies the EqualFold predicate on the "sign_fields" field.
func SignFieldsEqualFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEqualFold(FieldSignFields, v))
}

// SignFieldsContainsFold applies the ContainsFold predicate on the "sign_fields" field.
func SignFieldsContainsFold(v string) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldContainsFold(FieldSignFields, v))
}

// ConditionEQ applies the EQ predicate on the "condition" field.
func ConditionEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldEQ(FieldCondition, v))
}

// ConditionNEQ applies the NEQ predicate on the "condition" field.
func ConditionNEQ(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNEQ(FieldCondition, v))
}

// ConditionIn applies the In predicate on the "condition" field.
func ConditionIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIn(FieldCondition, vs...))
}

// ConditionNotIn applies the NotIn predicate on the "condition" field.
func ConditionNotIn(vs ...int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotIn(FieldCondition, vs...))
}

// ConditionGT applies the GT predicate on the "condition" field.
func ConditionGT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGT(FieldCondition, v))
}

// ConditionGTE applies the GTE predicate on the "condition" field.
func ConditionGTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldGTE(FieldCondition, v))
}

// ConditionLT applies the LT predicate on the "condition" field.
func ConditionLT(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLT(FieldCondition, v))
}

// ConditionLTE applies the LTE predicate on the "condition" field.
func ConditionLTE(v int64) predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldLTE(FieldCondition, v))
}

// ConditionIsNil applies the IsNil predicate on the "condition" field.
func ConditionIsNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldIsNull(FieldCondition))
}

// ConditionNotNil applies the NotNil predicate on the "condition" field.
func ConditionNotNil() predicate.Bootcamp {
	return predicate.Bootcamp(sql.FieldNotNull(FieldCondition))
}

// HasBootcampParticipants applies the HasEdge predicate on the "bootcamp_participants" edge.
func HasBootcampParticipants() predicate.Bootcamp {
	return predicate.Bootcamp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BootcampParticipantsTable, BootcampParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBootcampParticipantsWith applies the HasEdge predicate on the "bootcamp_participants" edge with a given conditions (other predicates).
func HasBootcampParticipantsWith(preds ...predicate.BootcampParticipant) predicate.Bootcamp {
	return predicate.Bootcamp(func(s *sql.Selector) {
		step := newBootcampParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bootcamp) predicate.Bootcamp {
	return predicate.Bootcamp(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bootcamp) predicate.Bootcamp {
	return predicate.Bootcamp(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bootcamp) predicate.Bootcamp {
	return predicate.Bootcamp(sql.NotPredicates(p))
}

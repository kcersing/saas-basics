// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membertoken"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberTokenUpdate is the builder for updating MemberToken entities.
type MemberTokenUpdate struct {
	config
	hooks    []Hook
	mutation *MemberTokenMutation
}

// Where appends a list predicates to the MemberTokenUpdate builder.
func (mtu *MemberTokenUpdate) Where(ps ...predicate.MemberToken) *MemberTokenUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MemberTokenUpdate) SetUpdatedAt(t time.Time) *MemberTokenUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtu *MemberTokenUpdate) ClearUpdatedAt() *MemberTokenUpdate {
	mtu.mutation.ClearUpdatedAt()
	return mtu
}

// SetDelete sets the "delete" field.
func (mtu *MemberTokenUpdate) SetDelete(i int64) *MemberTokenUpdate {
	mtu.mutation.ResetDelete()
	mtu.mutation.SetDelete(i)
	return mtu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableDelete(i *int64) *MemberTokenUpdate {
	if i != nil {
		mtu.SetDelete(*i)
	}
	return mtu
}

// AddDelete adds i to the "delete" field.
func (mtu *MemberTokenUpdate) AddDelete(i int64) *MemberTokenUpdate {
	mtu.mutation.AddDelete(i)
	return mtu
}

// ClearDelete clears the value of the "delete" field.
func (mtu *MemberTokenUpdate) ClearDelete() *MemberTokenUpdate {
	mtu.mutation.ClearDelete()
	return mtu
}

// SetCreatedID sets the "created_id" field.
func (mtu *MemberTokenUpdate) SetCreatedID(i int64) *MemberTokenUpdate {
	mtu.mutation.ResetCreatedID()
	mtu.mutation.SetCreatedID(i)
	return mtu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableCreatedID(i *int64) *MemberTokenUpdate {
	if i != nil {
		mtu.SetCreatedID(*i)
	}
	return mtu
}

// AddCreatedID adds i to the "created_id" field.
func (mtu *MemberTokenUpdate) AddCreatedID(i int64) *MemberTokenUpdate {
	mtu.mutation.AddCreatedID(i)
	return mtu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mtu *MemberTokenUpdate) ClearCreatedID() *MemberTokenUpdate {
	mtu.mutation.ClearCreatedID()
	return mtu
}

// SetMemberID sets the "member_id" field.
func (mtu *MemberTokenUpdate) SetMemberID(i int64) *MemberTokenUpdate {
	mtu.mutation.ResetMemberID()
	mtu.mutation.SetMemberID(i)
	return mtu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableMemberID(i *int64) *MemberTokenUpdate {
	if i != nil {
		mtu.SetMemberID(*i)
	}
	return mtu
}

// AddMemberID adds i to the "member_id" field.
func (mtu *MemberTokenUpdate) AddMemberID(i int64) *MemberTokenUpdate {
	mtu.mutation.AddMemberID(i)
	return mtu
}

// SetToken sets the "token" field.
func (mtu *MemberTokenUpdate) SetToken(s string) *MemberTokenUpdate {
	mtu.mutation.SetToken(s)
	return mtu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableToken(s *string) *MemberTokenUpdate {
	if s != nil {
		mtu.SetToken(*s)
	}
	return mtu
}

// SetSource sets the "source" field.
func (mtu *MemberTokenUpdate) SetSource(s string) *MemberTokenUpdate {
	mtu.mutation.SetSource(s)
	return mtu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableSource(s *string) *MemberTokenUpdate {
	if s != nil {
		mtu.SetSource(*s)
	}
	return mtu
}

// SetExpiredAt sets the "expired_at" field.
func (mtu *MemberTokenUpdate) SetExpiredAt(t time.Time) *MemberTokenUpdate {
	mtu.mutation.SetExpiredAt(t)
	return mtu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableExpiredAt(t *time.Time) *MemberTokenUpdate {
	if t != nil {
		mtu.SetExpiredAt(*t)
	}
	return mtu
}

// SetOwnerID sets the "owner" edge to the Member entity by ID.
func (mtu *MemberTokenUpdate) SetOwnerID(id int64) *MemberTokenUpdate {
	mtu.mutation.SetOwnerID(id)
	return mtu
}

// SetNillableOwnerID sets the "owner" edge to the Member entity by ID if the given value is not nil.
func (mtu *MemberTokenUpdate) SetNillableOwnerID(id *int64) *MemberTokenUpdate {
	if id != nil {
		mtu = mtu.SetOwnerID(*id)
	}
	return mtu
}

// SetOwner sets the "owner" edge to the Member entity.
func (mtu *MemberTokenUpdate) SetOwner(m *Member) *MemberTokenUpdate {
	return mtu.SetOwnerID(m.ID)
}

// Mutation returns the MemberTokenMutation object of the builder.
func (mtu *MemberTokenUpdate) Mutation() *MemberTokenMutation {
	return mtu.mutation
}

// ClearOwner clears the "owner" edge to the Member entity.
func (mtu *MemberTokenUpdate) ClearOwner() *MemberTokenUpdate {
	mtu.mutation.ClearOwner()
	return mtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MemberTokenUpdate) Save(ctx context.Context) (int, error) {
	mtu.defaults()
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MemberTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MemberTokenUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MemberTokenUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MemberTokenUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok && !mtu.mutation.UpdatedAtCleared() {
		v := membertoken.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
}

func (mtu *MemberTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(membertoken.Table, membertoken.Columns, sqlgraph.NewFieldSpec(membertoken.FieldID, field.TypeInt64))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mtu.mutation.CreatedAtCleared() {
		_spec.ClearField(membertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.SetField(membertoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(membertoken.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtu.mutation.Delete(); ok {
		_spec.SetField(membertoken.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedDelete(); ok {
		_spec.AddField(membertoken.FieldDelete, field.TypeInt64, value)
	}
	if mtu.mutation.DeleteCleared() {
		_spec.ClearField(membertoken.FieldDelete, field.TypeInt64)
	}
	if value, ok := mtu.mutation.CreatedID(); ok {
		_spec.SetField(membertoken.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedCreatedID(); ok {
		_spec.AddField(membertoken.FieldCreatedID, field.TypeInt64, value)
	}
	if mtu.mutation.CreatedIDCleared() {
		_spec.ClearField(membertoken.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mtu.mutation.MemberID(); ok {
		_spec.SetField(membertoken.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.AddedMemberID(); ok {
		_spec.AddField(membertoken.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mtu.mutation.Token(); ok {
		_spec.SetField(membertoken.FieldToken, field.TypeString, value)
	}
	if value, ok := mtu.mutation.Source(); ok {
		_spec.SetField(membertoken.FieldSource, field.TypeString, value)
	}
	if value, ok := mtu.mutation.ExpiredAt(); ok {
		_spec.SetField(membertoken.FieldExpiredAt, field.TypeTime, value)
	}
	if mtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   membertoken.OwnerTable,
			Columns: []string{membertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = mtu.schemaConfig.MemberToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   membertoken.OwnerTable,
			Columns: []string{membertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = mtu.schemaConfig.MemberToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtu.schemaConfig.MemberToken
	ctx = internal.NewSchemaConfigContext(ctx, mtu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MemberTokenUpdateOne is the builder for updating a single MemberToken entity.
type MemberTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberTokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MemberTokenUpdateOne) SetUpdatedAt(t time.Time) *MemberTokenUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mtuo *MemberTokenUpdateOne) ClearUpdatedAt() *MemberTokenUpdateOne {
	mtuo.mutation.ClearUpdatedAt()
	return mtuo
}

// SetDelete sets the "delete" field.
func (mtuo *MemberTokenUpdateOne) SetDelete(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.ResetDelete()
	mtuo.mutation.SetDelete(i)
	return mtuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableDelete(i *int64) *MemberTokenUpdateOne {
	if i != nil {
		mtuo.SetDelete(*i)
	}
	return mtuo
}

// AddDelete adds i to the "delete" field.
func (mtuo *MemberTokenUpdateOne) AddDelete(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.AddDelete(i)
	return mtuo
}

// ClearDelete clears the value of the "delete" field.
func (mtuo *MemberTokenUpdateOne) ClearDelete() *MemberTokenUpdateOne {
	mtuo.mutation.ClearDelete()
	return mtuo
}

// SetCreatedID sets the "created_id" field.
func (mtuo *MemberTokenUpdateOne) SetCreatedID(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.ResetCreatedID()
	mtuo.mutation.SetCreatedID(i)
	return mtuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableCreatedID(i *int64) *MemberTokenUpdateOne {
	if i != nil {
		mtuo.SetCreatedID(*i)
	}
	return mtuo
}

// AddCreatedID adds i to the "created_id" field.
func (mtuo *MemberTokenUpdateOne) AddCreatedID(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.AddCreatedID(i)
	return mtuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mtuo *MemberTokenUpdateOne) ClearCreatedID() *MemberTokenUpdateOne {
	mtuo.mutation.ClearCreatedID()
	return mtuo
}

// SetMemberID sets the "member_id" field.
func (mtuo *MemberTokenUpdateOne) SetMemberID(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.ResetMemberID()
	mtuo.mutation.SetMemberID(i)
	return mtuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableMemberID(i *int64) *MemberTokenUpdateOne {
	if i != nil {
		mtuo.SetMemberID(*i)
	}
	return mtuo
}

// AddMemberID adds i to the "member_id" field.
func (mtuo *MemberTokenUpdateOne) AddMemberID(i int64) *MemberTokenUpdateOne {
	mtuo.mutation.AddMemberID(i)
	return mtuo
}

// SetToken sets the "token" field.
func (mtuo *MemberTokenUpdateOne) SetToken(s string) *MemberTokenUpdateOne {
	mtuo.mutation.SetToken(s)
	return mtuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableToken(s *string) *MemberTokenUpdateOne {
	if s != nil {
		mtuo.SetToken(*s)
	}
	return mtuo
}

// SetSource sets the "source" field.
func (mtuo *MemberTokenUpdateOne) SetSource(s string) *MemberTokenUpdateOne {
	mtuo.mutation.SetSource(s)
	return mtuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableSource(s *string) *MemberTokenUpdateOne {
	if s != nil {
		mtuo.SetSource(*s)
	}
	return mtuo
}

// SetExpiredAt sets the "expired_at" field.
func (mtuo *MemberTokenUpdateOne) SetExpiredAt(t time.Time) *MemberTokenUpdateOne {
	mtuo.mutation.SetExpiredAt(t)
	return mtuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableExpiredAt(t *time.Time) *MemberTokenUpdateOne {
	if t != nil {
		mtuo.SetExpiredAt(*t)
	}
	return mtuo
}

// SetOwnerID sets the "owner" edge to the Member entity by ID.
func (mtuo *MemberTokenUpdateOne) SetOwnerID(id int64) *MemberTokenUpdateOne {
	mtuo.mutation.SetOwnerID(id)
	return mtuo
}

// SetNillableOwnerID sets the "owner" edge to the Member entity by ID if the given value is not nil.
func (mtuo *MemberTokenUpdateOne) SetNillableOwnerID(id *int64) *MemberTokenUpdateOne {
	if id != nil {
		mtuo = mtuo.SetOwnerID(*id)
	}
	return mtuo
}

// SetOwner sets the "owner" edge to the Member entity.
func (mtuo *MemberTokenUpdateOne) SetOwner(m *Member) *MemberTokenUpdateOne {
	return mtuo.SetOwnerID(m.ID)
}

// Mutation returns the MemberTokenMutation object of the builder.
func (mtuo *MemberTokenUpdateOne) Mutation() *MemberTokenMutation {
	return mtuo.mutation
}

// ClearOwner clears the "owner" edge to the Member entity.
func (mtuo *MemberTokenUpdateOne) ClearOwner() *MemberTokenUpdateOne {
	mtuo.mutation.ClearOwner()
	return mtuo
}

// Where appends a list predicates to the MemberTokenUpdate builder.
func (mtuo *MemberTokenUpdateOne) Where(ps ...predicate.MemberToken) *MemberTokenUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MemberTokenUpdateOne) Select(field string, fields ...string) *MemberTokenUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MemberToken entity.
func (mtuo *MemberTokenUpdateOne) Save(ctx context.Context) (*MemberToken, error) {
	mtuo.defaults()
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MemberTokenUpdateOne) SaveX(ctx context.Context) *MemberToken {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MemberTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MemberTokenUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MemberTokenUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok && !mtuo.mutation.UpdatedAtCleared() {
		v := membertoken.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
}

func (mtuo *MemberTokenUpdateOne) sqlSave(ctx context.Context) (_node *MemberToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(membertoken.Table, membertoken.Columns, sqlgraph.NewFieldSpec(membertoken.FieldID, field.TypeInt64))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membertoken.FieldID)
		for _, f := range fields {
			if !membertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(membertoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(membertoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if mtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(membertoken.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mtuo.mutation.Delete(); ok {
		_spec.SetField(membertoken.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedDelete(); ok {
		_spec.AddField(membertoken.FieldDelete, field.TypeInt64, value)
	}
	if mtuo.mutation.DeleteCleared() {
		_spec.ClearField(membertoken.FieldDelete, field.TypeInt64)
	}
	if value, ok := mtuo.mutation.CreatedID(); ok {
		_spec.SetField(membertoken.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(membertoken.FieldCreatedID, field.TypeInt64, value)
	}
	if mtuo.mutation.CreatedIDCleared() {
		_spec.ClearField(membertoken.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mtuo.mutation.MemberID(); ok {
		_spec.SetField(membertoken.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.AddedMemberID(); ok {
		_spec.AddField(membertoken.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mtuo.mutation.Token(); ok {
		_spec.SetField(membertoken.FieldToken, field.TypeString, value)
	}
	if value, ok := mtuo.mutation.Source(); ok {
		_spec.SetField(membertoken.FieldSource, field.TypeString, value)
	}
	if value, ok := mtuo.mutation.ExpiredAt(); ok {
		_spec.SetField(membertoken.FieldExpiredAt, field.TypeTime, value)
	}
	if mtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   membertoken.OwnerTable,
			Columns: []string{membertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = mtuo.schemaConfig.MemberToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   membertoken.OwnerTable,
			Columns: []string{membertoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = mtuo.schemaConfig.MemberToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mtuo.schemaConfig.MemberToken
	ctx = internal.NewSchemaConfigContext(ctx, mtuo.schemaConfig)
	_node = &MemberToken{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package product

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStatus, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStock, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeadline, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDuration, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLength, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPrice, v))
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTimes, v))
}

// IsLessons applies equality check predicate on the "is_lessons" field. It's identical to IsLessonsEQ.
func IsLessons(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIsLessons, v))
}

// IsSales applies equality check predicate on the "is_sales" field. It's identical to IsSalesEQ.
func IsSales(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIsSales, v))
}

// SignSalesAt applies equality check predicate on the "sign_sales_at" field. It's identical to SignSalesAtEQ.
func SignSalesAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSignSalesAt, v))
}

// EndSalesAt applies equality check predicate on the "end_sales_at" field. It's identical to EndSalesAtEQ.
func EndSalesAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldEndSalesAt, v))
}

// Pic applies equality check predicate on the "pic" field. It's identical to PicEQ.
func Pic(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPic, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldStatus))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldStock, v))
}

// StockIsNil applies the IsNil predicate on the "stock" field.
func StockIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldStock))
}

// StockNotNil applies the NotNil predicate on the "stock" field.
func StockNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldStock))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDeadline))
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDeadline))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDuration))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldLength))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldPrice))
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTimes, v))
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldTimes, v))
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldTimes, vs...))
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldTimes, vs...))
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldTimes, v))
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldTimes, v))
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldTimes, v))
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldTimes, v))
}

// TimesIsNil applies the IsNil predicate on the "times" field.
func TimesIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldTimes))
}

// TimesNotNil applies the NotNil predicate on the "times" field.
func TimesNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldTimes))
}

// IsLessonsEQ applies the EQ predicate on the "is_lessons" field.
func IsLessonsEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIsLessons, v))
}

// IsLessonsNEQ applies the NEQ predicate on the "is_lessons" field.
func IsLessonsNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldIsLessons, v))
}

// IsLessonsIn applies the In predicate on the "is_lessons" field.
func IsLessonsIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldIsLessons, vs...))
}

// IsLessonsNotIn applies the NotIn predicate on the "is_lessons" field.
func IsLessonsNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldIsLessons, vs...))
}

// IsLessonsGT applies the GT predicate on the "is_lessons" field.
func IsLessonsGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldIsLessons, v))
}

// IsLessonsGTE applies the GTE predicate on the "is_lessons" field.
func IsLessonsGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldIsLessons, v))
}

// IsLessonsLT applies the LT predicate on the "is_lessons" field.
func IsLessonsLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldIsLessons, v))
}

// IsLessonsLTE applies the LTE predicate on the "is_lessons" field.
func IsLessonsLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldIsLessons, v))
}

// IsLessonsIsNil applies the IsNil predicate on the "is_lessons" field.
func IsLessonsIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldIsLessons))
}

// IsLessonsNotNil applies the NotNil predicate on the "is_lessons" field.
func IsLessonsNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldIsLessons))
}

// SalesIsNil applies the IsNil predicate on the "sales" field.
func SalesIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldSales))
}

// SalesNotNil applies the NotNil predicate on the "sales" field.
func SalesNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldSales))
}

// IsSalesEQ applies the EQ predicate on the "is_sales" field.
func IsSalesEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIsSales, v))
}

// IsSalesNEQ applies the NEQ predicate on the "is_sales" field.
func IsSalesNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldIsSales, v))
}

// IsSalesIn applies the In predicate on the "is_sales" field.
func IsSalesIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldIsSales, vs...))
}

// IsSalesNotIn applies the NotIn predicate on the "is_sales" field.
func IsSalesNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldIsSales, vs...))
}

// IsSalesGT applies the GT predicate on the "is_sales" field.
func IsSalesGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldIsSales, v))
}

// IsSalesGTE applies the GTE predicate on the "is_sales" field.
func IsSalesGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldIsSales, v))
}

// IsSalesLT applies the LT predicate on the "is_sales" field.
func IsSalesLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldIsSales, v))
}

// IsSalesLTE applies the LTE predicate on the "is_sales" field.
func IsSalesLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldIsSales, v))
}

// IsSalesIsNil applies the IsNil predicate on the "is_sales" field.
func IsSalesIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldIsSales))
}

// IsSalesNotNil applies the NotNil predicate on the "is_sales" field.
func IsSalesNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldIsSales))
}

// SignSalesAtEQ applies the EQ predicate on the "sign_sales_at" field.
func SignSalesAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSignSalesAt, v))
}

// SignSalesAtNEQ applies the NEQ predicate on the "sign_sales_at" field.
func SignSalesAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldSignSalesAt, v))
}

// SignSalesAtIn applies the In predicate on the "sign_sales_at" field.
func SignSalesAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldSignSalesAt, vs...))
}

// SignSalesAtNotIn applies the NotIn predicate on the "sign_sales_at" field.
func SignSalesAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldSignSalesAt, vs...))
}

// SignSalesAtGT applies the GT predicate on the "sign_sales_at" field.
func SignSalesAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldSignSalesAt, v))
}

// SignSalesAtGTE applies the GTE predicate on the "sign_sales_at" field.
func SignSalesAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldSignSalesAt, v))
}

// SignSalesAtLT applies the LT predicate on the "sign_sales_at" field.
func SignSalesAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldSignSalesAt, v))
}

// SignSalesAtLTE applies the LTE predicate on the "sign_sales_at" field.
func SignSalesAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldSignSalesAt, v))
}

// SignSalesAtIsNil applies the IsNil predicate on the "sign_sales_at" field.
func SignSalesAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldSignSalesAt))
}

// SignSalesAtNotNil applies the NotNil predicate on the "sign_sales_at" field.
func SignSalesAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldSignSalesAt))
}

// EndSalesAtEQ applies the EQ predicate on the "end_sales_at" field.
func EndSalesAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldEndSalesAt, v))
}

// EndSalesAtNEQ applies the NEQ predicate on the "end_sales_at" field.
func EndSalesAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldEndSalesAt, v))
}

// EndSalesAtIn applies the In predicate on the "end_sales_at" field.
func EndSalesAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldEndSalesAt, vs...))
}

// EndSalesAtNotIn applies the NotIn predicate on the "end_sales_at" field.
func EndSalesAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldEndSalesAt, vs...))
}

// EndSalesAtGT applies the GT predicate on the "end_sales_at" field.
func EndSalesAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldEndSalesAt, v))
}

// EndSalesAtGTE applies the GTE predicate on the "end_sales_at" field.
func EndSalesAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldEndSalesAt, v))
}

// EndSalesAtLT applies the LT predicate on the "end_sales_at" field.
func EndSalesAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldEndSalesAt, v))
}

// EndSalesAtLTE applies the LTE predicate on the "end_sales_at" field.
func EndSalesAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldEndSalesAt, v))
}

// EndSalesAtIsNil applies the IsNil predicate on the "end_sales_at" field.
func EndSalesAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldEndSalesAt))
}

// EndSalesAtNotNil applies the NotNil predicate on the "end_sales_at" field.
func EndSalesAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldEndSalesAt))
}

// PicEQ applies the EQ predicate on the "pic" field.
func PicEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPic, v))
}

// PicNEQ applies the NEQ predicate on the "pic" field.
func PicNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldPic, v))
}

// PicIn applies the In predicate on the "pic" field.
func PicIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldPic, vs...))
}

// PicNotIn applies the NotIn predicate on the "pic" field.
func PicNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldPic, vs...))
}

// PicGT applies the GT predicate on the "pic" field.
func PicGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldPic, v))
}

// PicGTE applies the GTE predicate on the "pic" field.
func PicGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldPic, v))
}

// PicLT applies the LT predicate on the "pic" field.
func PicLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldPic, v))
}

// PicLTE applies the LTE predicate on the "pic" field.
func PicLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldPic, v))
}

// PicContains applies the Contains predicate on the "pic" field.
func PicContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldPic, v))
}

// PicHasPrefix applies the HasPrefix predicate on the "pic" field.
func PicHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldPic, v))
}

// PicHasSuffix applies the HasSuffix predicate on the "pic" field.
func PicHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldPic, v))
}

// PicIsNil applies the IsNil predicate on the "pic" field.
func PicIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldPic))
}

// PicNotNil applies the NotNil predicate on the "pic" field.
func PicNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldPic))
}

// PicEqualFold applies the EqualFold predicate on the "pic" field.
func PicEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldPic, v))
}

// PicContainsFold applies the ContainsFold predicate on the "pic" field.
func PicContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldPic, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldDescription, v))
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.DictionaryDetail) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContracts applies the HasEdge predicate on the "contracts" edge.
func HasContracts() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ContractsTable, ContractsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractsWith applies the HasEdge predicate on the "contracts" edge with a given conditions (other predicates).
func HasContractsWith(preds ...predicate.Contract) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newContractsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoods applies the HasEdge predicate on the "goods" edge.
func HasGoods() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GoodsTable, GoodsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsWith applies the HasEdge predicate on the "goods" edge with a given conditions (other predicates).
func HasGoodsWith(preds ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newGoodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLessons applies the HasEdge predicate on the "lessons" edge.
func HasLessons() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LessonsTable, LessonsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLessonsWith applies the HasEdge predicate on the "lessons" edge with a given conditions (other predicates).
func HasLessonsWith(preds ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newLessonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(sql.NotPredicates(p))
}

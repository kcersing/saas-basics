// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSubType holds the string denoting the sub_type field in the database.
	FieldSubType = "sub_type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldTimes holds the string denoting the times field in the database.
	FieldTimes = "times"
	// FieldIsLessons holds the string denoting the is_lessons field in the database.
	FieldIsLessons = "is_lessons"
	// FieldIsCourse holds the string denoting the is_course field in the database.
	FieldIsCourse = "is_course"
	// FieldSales holds the string denoting the sales field in the database.
	FieldSales = "sales"
	// FieldIsSales holds the string denoting the is_sales field in the database.
	FieldIsSales = "is_sales"
	// FieldSignSalesAt holds the string denoting the sign_sales_at field in the database.
	FieldSignSalesAt = "sign_sales_at"
	// FieldEndSalesAt holds the string denoting the end_sales_at field in the database.
	FieldEndSalesAt = "end_sales_at"
	// FieldPic holds the string denoting the pic field in the database.
	FieldPic = "pic"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgeCourses holds the string denoting the courses edge name in mutations.
	EdgeCourses = "courses"
	// EdgeLessons holds the string denoting the lessons edge name in mutations.
	EdgeLessons = "lessons"
	// Table holds the table name of the product in the database.
	Table = "product"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "product_tags"
	// TagsInverseTable is the table name for the DictionaryDetail entity.
	// It exists in this package in order to avoid circular dependency with the "dictionarydetail" package.
	TagsInverseTable = "sys_dictionary_details"
	// ContractsTable is the table that holds the contracts relation/edge. The primary key declared below.
	ContractsTable = "product_contracts"
	// ContractsInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractsInverseTable = "contracts"
	// CoursesTable is the table that holds the courses relation/edge.
	CoursesTable = "product_courses"
	// CoursesInverseTable is the table name for the ProductCourses entity.
	// It exists in this package in order to avoid circular dependency with the "productcourses" package.
	CoursesInverseTable = "product_courses"
	// CoursesColumn is the table column denoting the courses relation/edge.
	CoursesColumn = "product_id"
	// LessonsTable is the table that holds the lessons relation/edge.
	LessonsTable = "product_courses"
	// LessonsInverseTable is the table name for the ProductCourses entity.
	// It exists in this package in order to avoid circular dependency with the "productcourses" package.
	LessonsInverseTable = "product_courses"
	// LessonsColumn is the table column denoting the lessons relation/edge.
	LessonsColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldType,
	FieldSubType,
	FieldName,
	FieldStock,
	FieldDeadline,
	FieldDuration,
	FieldLength,
	FieldPrice,
	FieldTimes,
	FieldIsLessons,
	FieldIsCourse,
	FieldSales,
	FieldIsSales,
	FieldSignSalesAt,
	FieldEndSalesAt,
	FieldPic,
	FieldDescription,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"product_id", "dictionary_detail_id"}
	// ContractsPrimaryKey and ContractsColumn2 are the table columns denoting the
	// primary key for the contracts relation (M2M).
	ContractsPrimaryKey = []string{"product_id", "contract_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultSubType holds the default value on creation for the "sub_type" field.
	DefaultSubType string
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultStock holds the default value on creation for the "stock" field.
	DefaultStock int64
	// DefaultDeadline holds the default value on creation for the "deadline" field.
	DefaultDeadline int64
	// DefaultDuration holds the default value on creation for the "duration" field.
	DefaultDuration int64
	// DefaultLength holds the default value on creation for the "length" field.
	DefaultLength int64
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// DefaultTimes holds the default value on creation for the "times" field.
	DefaultTimes int64
	// DefaultIsLessons holds the default value on creation for the "is_lessons" field.
	DefaultIsLessons int64
	// DefaultIsCourse holds the default value on creation for the "is_course" field.
	DefaultIsCourse int64
	// DefaultIsSales holds the default value on creation for the "is_sales" field.
	DefaultIsSales int64
	// DefaultPic holds the default value on creation for the "pic" field.
	DefaultPic string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySubType orders the results by the sub_type field.
func BySubType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByDeadline orders the results by the deadline field.
func ByDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeadline, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByTimes orders the results by the times field.
func ByTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimes, opts...).ToFunc()
}

// ByIsLessons orders the results by the is_lessons field.
func ByIsLessons(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLessons, opts...).ToFunc()
}

// ByIsCourse orders the results by the is_course field.
func ByIsCourse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCourse, opts...).ToFunc()
}

// ByIsSales orders the results by the is_sales field.
func ByIsSales(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSales, opts...).ToFunc()
}

// BySignSalesAt orders the results by the sign_sales_at field.
func BySignSalesAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignSalesAt, opts...).ToFunc()
}

// ByEndSalesAt orders the results by the end_sales_at field.
func ByEndSalesAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndSalesAt, opts...).ToFunc()
}

// ByPic orders the results by the pic field.
func ByPic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPic, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContractsCount orders the results by contracts count.
func ByContractsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContractsStep(), opts...)
	}
}

// ByContracts orders the results by contracts terms.
func ByContracts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoursesCount orders the results by courses count.
func ByCoursesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoursesStep(), opts...)
	}
}

// ByCourses orders the results by courses terms.
func ByCourses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoursesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLessonsCount orders the results by lessons count.
func ByLessonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLessonsStep(), opts...)
	}
}

// ByLessons orders the results by lessons terms.
func ByLessons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLessonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newContractsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ContractsTable, ContractsPrimaryKey...),
	)
}
func newCoursesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoursesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CoursesTable, CoursesColumn),
	)
}
func newLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LessonsTable, LessonsColumn),
	)
}

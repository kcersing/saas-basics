// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/bootcamp"
	"saas/biz/dal/db/ent/bootcampparticipant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BootcampCreate is the builder for creating a Bootcamp entity.
type BootcampCreate struct {
	config
	mutation *BootcampMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BootcampCreate) SetCreatedAt(t time.Time) *BootcampCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableCreatedAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BootcampCreate) SetUpdatedAt(t time.Time) *BootcampCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableUpdatedAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDelete sets the "delete" field.
func (bc *BootcampCreate) SetDelete(i int64) *BootcampCreate {
	bc.mutation.SetDelete(i)
	return bc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableDelete(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetDelete(*i)
	}
	return bc
}

// SetCreatedID sets the "created_id" field.
func (bc *BootcampCreate) SetCreatedID(i int64) *BootcampCreate {
	bc.mutation.SetCreatedID(i)
	return bc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableCreatedID(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetCreatedID(*i)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BootcampCreate) SetStatus(i int64) *BootcampCreate {
	bc.mutation.SetStatus(i)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableStatus(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetStatus(*i)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BootcampCreate) SetName(s string) *BootcampCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableName(s *string) *BootcampCreate {
	if s != nil {
		bc.SetName(*s)
	}
	return bc
}

// SetSignNumber sets the "sign_number" field.
func (bc *BootcampCreate) SetSignNumber(i int64) *BootcampCreate {
	bc.mutation.SetSignNumber(i)
	return bc
}

// SetNillableSignNumber sets the "sign_number" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableSignNumber(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetSignNumber(*i)
	}
	return bc
}

// SetSignStartAt sets the "sign_start_at" field.
func (bc *BootcampCreate) SetSignStartAt(t time.Time) *BootcampCreate {
	bc.mutation.SetSignStartAt(t)
	return bc
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableSignStartAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetSignStartAt(*t)
	}
	return bc
}

// SetSignEndAt sets the "sign_end_at" field.
func (bc *BootcampCreate) SetSignEndAt(t time.Time) *BootcampCreate {
	bc.mutation.SetSignEndAt(t)
	return bc
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableSignEndAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetSignEndAt(*t)
	}
	return bc
}

// SetStartAt sets the "start_at" field.
func (bc *BootcampCreate) SetStartAt(t time.Time) *BootcampCreate {
	bc.mutation.SetStartAt(t)
	return bc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableStartAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetStartAt(*t)
	}
	return bc
}

// SetEndAt sets the "end_at" field.
func (bc *BootcampCreate) SetEndAt(t time.Time) *BootcampCreate {
	bc.mutation.SetEndAt(t)
	return bc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableEndAt(t *time.Time) *BootcampCreate {
	if t != nil {
		bc.SetEndAt(*t)
	}
	return bc
}

// SetPic sets the "pic" field.
func (bc *BootcampCreate) SetPic(s string) *BootcampCreate {
	bc.mutation.SetPic(s)
	return bc
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (bc *BootcampCreate) SetNillablePic(s *string) *BootcampCreate {
	if s != nil {
		bc.SetPic(*s)
	}
	return bc
}

// SetFee sets the "fee" field.
func (bc *BootcampCreate) SetFee(f float64) *BootcampCreate {
	bc.mutation.SetFee(f)
	return bc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableFee(f *float64) *BootcampCreate {
	if f != nil {
		bc.SetFee(*f)
	}
	return bc
}

// SetIsFee sets the "is_fee" field.
func (bc *BootcampCreate) SetIsFee(i int64) *BootcampCreate {
	bc.mutation.SetIsFee(i)
	return bc
}

// SetNillableIsFee sets the "is_fee" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableIsFee(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetIsFee(*i)
	}
	return bc
}

// SetIsShow sets the "is_show" field.
func (bc *BootcampCreate) SetIsShow(i int64) *BootcampCreate {
	bc.mutation.SetIsShow(i)
	return bc
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableIsShow(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetIsShow(*i)
	}
	return bc
}

// SetIsCancel sets the "is_cancel" field.
func (bc *BootcampCreate) SetIsCancel(i int64) *BootcampCreate {
	bc.mutation.SetIsCancel(i)
	return bc
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableIsCancel(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetIsCancel(*i)
	}
	return bc
}

// SetCancelTime sets the "cancel_time" field.
func (bc *BootcampCreate) SetCancelTime(i int64) *BootcampCreate {
	bc.mutation.SetCancelTime(i)
	return bc
}

// SetNillableCancelTime sets the "cancel_time" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableCancelTime(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetCancelTime(*i)
	}
	return bc
}

// SetDetail sets the "detail" field.
func (bc *BootcampCreate) SetDetail(s string) *BootcampCreate {
	bc.mutation.SetDetail(s)
	return bc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableDetail(s *string) *BootcampCreate {
	if s != nil {
		bc.SetDetail(*s)
	}
	return bc
}

// SetSignFields sets the "sign_fields" field.
func (bc *BootcampCreate) SetSignFields(s string) *BootcampCreate {
	bc.mutation.SetSignFields(s)
	return bc
}

// SetNillableSignFields sets the "sign_fields" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableSignFields(s *string) *BootcampCreate {
	if s != nil {
		bc.SetSignFields(*s)
	}
	return bc
}

// SetCondition sets the "condition" field.
func (bc *BootcampCreate) SetCondition(i int64) *BootcampCreate {
	bc.mutation.SetCondition(i)
	return bc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (bc *BootcampCreate) SetNillableCondition(i *int64) *BootcampCreate {
	if i != nil {
		bc.SetCondition(*i)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BootcampCreate) SetID(i int64) *BootcampCreate {
	bc.mutation.SetID(i)
	return bc
}

// AddBootcampParticipantIDs adds the "bootcamp_participants" edge to the BootcampParticipant entity by IDs.
func (bc *BootcampCreate) AddBootcampParticipantIDs(ids ...int64) *BootcampCreate {
	bc.mutation.AddBootcampParticipantIDs(ids...)
	return bc
}

// AddBootcampParticipants adds the "bootcamp_participants" edges to the BootcampParticipant entity.
func (bc *BootcampCreate) AddBootcampParticipants(b ...*BootcampParticipant) *BootcampCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBootcampParticipantIDs(ids...)
}

// Mutation returns the BootcampMutation object of the builder.
func (bc *BootcampCreate) Mutation() *BootcampMutation {
	return bc.mutation
}

// Save creates the Bootcamp in the database.
func (bc *BootcampCreate) Save(ctx context.Context) (*Bootcamp, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BootcampCreate) SaveX(ctx context.Context) *Bootcamp {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BootcampCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BootcampCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BootcampCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bootcamp.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bootcamp.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Delete(); !ok {
		v := bootcamp.DefaultDelete
		bc.mutation.SetDelete(v)
	}
	if _, ok := bc.mutation.CreatedID(); !ok {
		v := bootcamp.DefaultCreatedID
		bc.mutation.SetCreatedID(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := bootcamp.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.IsFee(); !ok {
		v := bootcamp.DefaultIsFee
		bc.mutation.SetIsFee(v)
	}
	if _, ok := bc.mutation.IsShow(); !ok {
		v := bootcamp.DefaultIsShow
		bc.mutation.SetIsShow(v)
	}
	if _, ok := bc.mutation.IsCancel(); !ok {
		v := bootcamp.DefaultIsCancel
		bc.mutation.SetIsCancel(v)
	}
	if _, ok := bc.mutation.CancelTime(); !ok {
		v := bootcamp.DefaultCancelTime
		bc.mutation.SetCancelTime(v)
	}
	if _, ok := bc.mutation.Condition(); !ok {
		v := bootcamp.DefaultCondition
		bc.mutation.SetCondition(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BootcampCreate) check() error {
	return nil
}

func (bc *BootcampCreate) sqlSave(ctx context.Context) (*Bootcamp, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BootcampCreate) createSpec() (*Bootcamp, *sqlgraph.CreateSpec) {
	var (
		_node = &Bootcamp{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bootcamp.Table, sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64))
	)
	_spec.Schema = bc.schemaConfig.Bootcamp
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bootcamp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcamp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Delete(); ok {
		_spec.SetField(bootcamp.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := bc.mutation.CreatedID(); ok {
		_spec.SetField(bootcamp.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bootcamp.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bootcamp.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.SignNumber(); ok {
		_spec.SetField(bootcamp.FieldSignNumber, field.TypeInt64, value)
		_node.SignNumber = value
	}
	if value, ok := bc.mutation.SignStartAt(); ok {
		_spec.SetField(bootcamp.FieldSignStartAt, field.TypeTime, value)
		_node.SignStartAt = value
	}
	if value, ok := bc.mutation.SignEndAt(); ok {
		_spec.SetField(bootcamp.FieldSignEndAt, field.TypeTime, value)
		_node.SignEndAt = value
	}
	if value, ok := bc.mutation.StartAt(); ok {
		_spec.SetField(bootcamp.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := bc.mutation.EndAt(); ok {
		_spec.SetField(bootcamp.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := bc.mutation.Pic(); ok {
		_spec.SetField(bootcamp.FieldPic, field.TypeString, value)
		_node.Pic = value
	}
	if value, ok := bc.mutation.Fee(); ok {
		_spec.SetField(bootcamp.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := bc.mutation.IsFee(); ok {
		_spec.SetField(bootcamp.FieldIsFee, field.TypeInt64, value)
		_node.IsFee = value
	}
	if value, ok := bc.mutation.IsShow(); ok {
		_spec.SetField(bootcamp.FieldIsShow, field.TypeInt64, value)
		_node.IsShow = value
	}
	if value, ok := bc.mutation.IsCancel(); ok {
		_spec.SetField(bootcamp.FieldIsCancel, field.TypeInt64, value)
		_node.IsCancel = value
	}
	if value, ok := bc.mutation.CancelTime(); ok {
		_spec.SetField(bootcamp.FieldCancelTime, field.TypeInt64, value)
		_node.CancelTime = value
	}
	if value, ok := bc.mutation.Detail(); ok {
		_spec.SetField(bootcamp.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := bc.mutation.SignFields(); ok {
		_spec.SetField(bootcamp.FieldSignFields, field.TypeString, value)
		_node.SignFields = value
	}
	if value, ok := bc.mutation.Condition(); ok {
		_spec.SetField(bootcamp.FieldCondition, field.TypeInt64, value)
		_node.Condition = value
	}
	if nodes := bc.mutation.BootcampParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = bc.schemaConfig.BootcampParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BootcampCreateBulk is the builder for creating many Bootcamp entities in bulk.
type BootcampCreateBulk struct {
	config
	err      error
	builders []*BootcampCreate
}

// Save creates the Bootcamp entities in the database.
func (bcb *BootcampCreateBulk) Save(ctx context.Context) ([]*Bootcamp, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bootcamp, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BootcampMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BootcampCreateBulk) SaveX(ctx context.Context) []*Bootcamp {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BootcampCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BootcampCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/userscheduling"
	"saas/idl_gen/model/base"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSchedulingUpdate is the builder for updating UserScheduling entities.
type UserSchedulingUpdate struct {
	config
	hooks    []Hook
	mutation *UserSchedulingMutation
}

// Where appends a list predicates to the UserSchedulingUpdate builder.
func (usu *UserSchedulingUpdate) Where(ps ...predicate.UserScheduling) *UserSchedulingUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserSchedulingUpdate) SetUpdatedAt(t time.Time) *UserSchedulingUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usu *UserSchedulingUpdate) ClearUpdatedAt() *UserSchedulingUpdate {
	usu.mutation.ClearUpdatedAt()
	return usu
}

// SetDelete sets the "delete" field.
func (usu *UserSchedulingUpdate) SetDelete(i int64) *UserSchedulingUpdate {
	usu.mutation.ResetDelete()
	usu.mutation.SetDelete(i)
	return usu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableDelete(i *int64) *UserSchedulingUpdate {
	if i != nil {
		usu.SetDelete(*i)
	}
	return usu
}

// AddDelete adds i to the "delete" field.
func (usu *UserSchedulingUpdate) AddDelete(i int64) *UserSchedulingUpdate {
	usu.mutation.AddDelete(i)
	return usu
}

// ClearDelete clears the value of the "delete" field.
func (usu *UserSchedulingUpdate) ClearDelete() *UserSchedulingUpdate {
	usu.mutation.ClearDelete()
	return usu
}

// SetCreatedID sets the "created_id" field.
func (usu *UserSchedulingUpdate) SetCreatedID(i int64) *UserSchedulingUpdate {
	usu.mutation.ResetCreatedID()
	usu.mutation.SetCreatedID(i)
	return usu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableCreatedID(i *int64) *UserSchedulingUpdate {
	if i != nil {
		usu.SetCreatedID(*i)
	}
	return usu
}

// AddCreatedID adds i to the "created_id" field.
func (usu *UserSchedulingUpdate) AddCreatedID(i int64) *UserSchedulingUpdate {
	usu.mutation.AddCreatedID(i)
	return usu
}

// ClearCreatedID clears the value of the "created_id" field.
func (usu *UserSchedulingUpdate) ClearCreatedID() *UserSchedulingUpdate {
	usu.mutation.ClearCreatedID()
	return usu
}

// SetStatus sets the "status" field.
func (usu *UserSchedulingUpdate) SetStatus(i int64) *UserSchedulingUpdate {
	usu.mutation.ResetStatus()
	usu.mutation.SetStatus(i)
	return usu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableStatus(i *int64) *UserSchedulingUpdate {
	if i != nil {
		usu.SetStatus(*i)
	}
	return usu
}

// AddStatus adds i to the "status" field.
func (usu *UserSchedulingUpdate) AddStatus(i int64) *UserSchedulingUpdate {
	usu.mutation.AddStatus(i)
	return usu
}

// ClearStatus clears the value of the "status" field.
func (usu *UserSchedulingUpdate) ClearStatus() *UserSchedulingUpdate {
	usu.mutation.ClearStatus()
	return usu
}

// SetDate sets the "date" field.
func (usu *UserSchedulingUpdate) SetDate(t time.Time) *UserSchedulingUpdate {
	usu.mutation.SetDate(t)
	return usu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableDate(t *time.Time) *UserSchedulingUpdate {
	if t != nil {
		usu.SetDate(*t)
	}
	return usu
}

// ClearDate clears the value of the "date" field.
func (usu *UserSchedulingUpdate) ClearDate() *UserSchedulingUpdate {
	usu.mutation.ClearDate()
	return usu
}

// SetPeriod sets the "period" field.
func (usu *UserSchedulingUpdate) SetPeriod(bsd base.UserSchedulingDate) *UserSchedulingUpdate {
	usu.mutation.SetPeriod(bsd)
	return usu
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillablePeriod(bsd *base.UserSchedulingDate) *UserSchedulingUpdate {
	if bsd != nil {
		usu.SetPeriod(*bsd)
	}
	return usu
}

// ClearPeriod clears the value of the "period" field.
func (usu *UserSchedulingUpdate) ClearPeriod() *UserSchedulingUpdate {
	usu.mutation.ClearPeriod()
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSchedulingUpdate) SetUserID(i int64) *UserSchedulingUpdate {
	usu.mutation.SetUserID(i)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableUserID(i *int64) *UserSchedulingUpdate {
	if i != nil {
		usu.SetUserID(*i)
	}
	return usu
}

// ClearUserID clears the value of the "user_id" field.
func (usu *UserSchedulingUpdate) ClearUserID() *UserSchedulingUpdate {
	usu.mutation.ClearUserID()
	return usu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (usu *UserSchedulingUpdate) SetUsersID(id int64) *UserSchedulingUpdate {
	usu.mutation.SetUsersID(id)
	return usu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (usu *UserSchedulingUpdate) SetNillableUsersID(id *int64) *UserSchedulingUpdate {
	if id != nil {
		usu = usu.SetUsersID(*id)
	}
	return usu
}

// SetUsers sets the "users" edge to the User entity.
func (usu *UserSchedulingUpdate) SetUsers(u *User) *UserSchedulingUpdate {
	return usu.SetUsersID(u.ID)
}

// Mutation returns the UserSchedulingMutation object of the builder.
func (usu *UserSchedulingUpdate) Mutation() *UserSchedulingMutation {
	return usu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (usu *UserSchedulingUpdate) ClearUsers() *UserSchedulingUpdate {
	usu.mutation.ClearUsers()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSchedulingUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSchedulingUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSchedulingUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSchedulingUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSchedulingUpdate) defaults() {
	if _, ok := usu.mutation.UpdatedAt(); !ok && !usu.mutation.UpdatedAtCleared() {
		v := userscheduling.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
}

func (usu *UserSchedulingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userscheduling.Table, userscheduling.Columns, sqlgraph.NewFieldSpec(userscheduling.FieldID, field.TypeInt64))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if usu.mutation.CreatedAtCleared() {
		_spec.ClearField(userscheduling.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(userscheduling.FieldUpdatedAt, field.TypeTime, value)
	}
	if usu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userscheduling.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := usu.mutation.Delete(); ok {
		_spec.SetField(userscheduling.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedDelete(); ok {
		_spec.AddField(userscheduling.FieldDelete, field.TypeInt64, value)
	}
	if usu.mutation.DeleteCleared() {
		_spec.ClearField(userscheduling.FieldDelete, field.TypeInt64)
	}
	if value, ok := usu.mutation.CreatedID(); ok {
		_spec.SetField(userscheduling.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedCreatedID(); ok {
		_spec.AddField(userscheduling.FieldCreatedID, field.TypeInt64, value)
	}
	if usu.mutation.CreatedIDCleared() {
		_spec.ClearField(userscheduling.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := usu.mutation.Status(); ok {
		_spec.SetField(userscheduling.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedStatus(); ok {
		_spec.AddField(userscheduling.FieldStatus, field.TypeInt64, value)
	}
	if usu.mutation.StatusCleared() {
		_spec.ClearField(userscheduling.FieldStatus, field.TypeInt64)
	}
	if value, ok := usu.mutation.Date(); ok {
		_spec.SetField(userscheduling.FieldDate, field.TypeTime, value)
	}
	if usu.mutation.DateCleared() {
		_spec.ClearField(userscheduling.FieldDate, field.TypeTime)
	}
	if value, ok := usu.mutation.Period(); ok {
		_spec.SetField(userscheduling.FieldPeriod, field.TypeJSON, value)
	}
	if usu.mutation.PeriodCleared() {
		_spec.ClearField(userscheduling.FieldPeriod, field.TypeJSON)
	}
	if usu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userscheduling.UsersTable,
			Columns: []string{userscheduling.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userscheduling.UsersTable,
			Columns: []string{userscheduling.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userscheduling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSchedulingUpdateOne is the builder for updating a single UserScheduling entity.
type UserSchedulingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSchedulingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserSchedulingUpdateOne) SetUpdatedAt(t time.Time) *UserSchedulingUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usuo *UserSchedulingUpdateOne) ClearUpdatedAt() *UserSchedulingUpdateOne {
	usuo.mutation.ClearUpdatedAt()
	return usuo
}

// SetDelete sets the "delete" field.
func (usuo *UserSchedulingUpdateOne) SetDelete(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.ResetDelete()
	usuo.mutation.SetDelete(i)
	return usuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableDelete(i *int64) *UserSchedulingUpdateOne {
	if i != nil {
		usuo.SetDelete(*i)
	}
	return usuo
}

// AddDelete adds i to the "delete" field.
func (usuo *UserSchedulingUpdateOne) AddDelete(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.AddDelete(i)
	return usuo
}

// ClearDelete clears the value of the "delete" field.
func (usuo *UserSchedulingUpdateOne) ClearDelete() *UserSchedulingUpdateOne {
	usuo.mutation.ClearDelete()
	return usuo
}

// SetCreatedID sets the "created_id" field.
func (usuo *UserSchedulingUpdateOne) SetCreatedID(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.ResetCreatedID()
	usuo.mutation.SetCreatedID(i)
	return usuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableCreatedID(i *int64) *UserSchedulingUpdateOne {
	if i != nil {
		usuo.SetCreatedID(*i)
	}
	return usuo
}

// AddCreatedID adds i to the "created_id" field.
func (usuo *UserSchedulingUpdateOne) AddCreatedID(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.AddCreatedID(i)
	return usuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (usuo *UserSchedulingUpdateOne) ClearCreatedID() *UserSchedulingUpdateOne {
	usuo.mutation.ClearCreatedID()
	return usuo
}

// SetStatus sets the "status" field.
func (usuo *UserSchedulingUpdateOne) SetStatus(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.ResetStatus()
	usuo.mutation.SetStatus(i)
	return usuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableStatus(i *int64) *UserSchedulingUpdateOne {
	if i != nil {
		usuo.SetStatus(*i)
	}
	return usuo
}

// AddStatus adds i to the "status" field.
func (usuo *UserSchedulingUpdateOne) AddStatus(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.AddStatus(i)
	return usuo
}

// ClearStatus clears the value of the "status" field.
func (usuo *UserSchedulingUpdateOne) ClearStatus() *UserSchedulingUpdateOne {
	usuo.mutation.ClearStatus()
	return usuo
}

// SetDate sets the "date" field.
func (usuo *UserSchedulingUpdateOne) SetDate(t time.Time) *UserSchedulingUpdateOne {
	usuo.mutation.SetDate(t)
	return usuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableDate(t *time.Time) *UserSchedulingUpdateOne {
	if t != nil {
		usuo.SetDate(*t)
	}
	return usuo
}

// ClearDate clears the value of the "date" field.
func (usuo *UserSchedulingUpdateOne) ClearDate() *UserSchedulingUpdateOne {
	usuo.mutation.ClearDate()
	return usuo
}

// SetPeriod sets the "period" field.
func (usuo *UserSchedulingUpdateOne) SetPeriod(bsd base.UserSchedulingDate) *UserSchedulingUpdateOne {
	usuo.mutation.SetPeriod(bsd)
	return usuo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillablePeriod(bsd *base.UserSchedulingDate) *UserSchedulingUpdateOne {
	if bsd != nil {
		usuo.SetPeriod(*bsd)
	}
	return usuo
}

// ClearPeriod clears the value of the "period" field.
func (usuo *UserSchedulingUpdateOne) ClearPeriod() *UserSchedulingUpdateOne {
	usuo.mutation.ClearPeriod()
	return usuo
}

// SetUserID sets the "user_id" field.
func (usuo *UserSchedulingUpdateOne) SetUserID(i int64) *UserSchedulingUpdateOne {
	usuo.mutation.SetUserID(i)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableUserID(i *int64) *UserSchedulingUpdateOne {
	if i != nil {
		usuo.SetUserID(*i)
	}
	return usuo
}

// ClearUserID clears the value of the "user_id" field.
func (usuo *UserSchedulingUpdateOne) ClearUserID() *UserSchedulingUpdateOne {
	usuo.mutation.ClearUserID()
	return usuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (usuo *UserSchedulingUpdateOne) SetUsersID(id int64) *UserSchedulingUpdateOne {
	usuo.mutation.SetUsersID(id)
	return usuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (usuo *UserSchedulingUpdateOne) SetNillableUsersID(id *int64) *UserSchedulingUpdateOne {
	if id != nil {
		usuo = usuo.SetUsersID(*id)
	}
	return usuo
}

// SetUsers sets the "users" edge to the User entity.
func (usuo *UserSchedulingUpdateOne) SetUsers(u *User) *UserSchedulingUpdateOne {
	return usuo.SetUsersID(u.ID)
}

// Mutation returns the UserSchedulingMutation object of the builder.
func (usuo *UserSchedulingUpdateOne) Mutation() *UserSchedulingMutation {
	return usuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (usuo *UserSchedulingUpdateOne) ClearUsers() *UserSchedulingUpdateOne {
	usuo.mutation.ClearUsers()
	return usuo
}

// Where appends a list predicates to the UserSchedulingUpdate builder.
func (usuo *UserSchedulingUpdateOne) Where(ps ...predicate.UserScheduling) *UserSchedulingUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSchedulingUpdateOne) Select(field string, fields ...string) *UserSchedulingUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserScheduling entity.
func (usuo *UserSchedulingUpdateOne) Save(ctx context.Context) (*UserScheduling, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSchedulingUpdateOne) SaveX(ctx context.Context) *UserScheduling {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSchedulingUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSchedulingUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSchedulingUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdatedAt(); !ok && !usuo.mutation.UpdatedAtCleared() {
		v := userscheduling.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
}

func (usuo *UserSchedulingUpdateOne) sqlSave(ctx context.Context) (_node *UserScheduling, err error) {
	_spec := sqlgraph.NewUpdateSpec(userscheduling.Table, userscheduling.Columns, sqlgraph.NewFieldSpec(userscheduling.FieldID, field.TypeInt64))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserScheduling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userscheduling.FieldID)
		for _, f := range fields {
			if !userscheduling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userscheduling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if usuo.mutation.CreatedAtCleared() {
		_spec.ClearField(userscheduling.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userscheduling.FieldUpdatedAt, field.TypeTime, value)
	}
	if usuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userscheduling.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := usuo.mutation.Delete(); ok {
		_spec.SetField(userscheduling.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedDelete(); ok {
		_spec.AddField(userscheduling.FieldDelete, field.TypeInt64, value)
	}
	if usuo.mutation.DeleteCleared() {
		_spec.ClearField(userscheduling.FieldDelete, field.TypeInt64)
	}
	if value, ok := usuo.mutation.CreatedID(); ok {
		_spec.SetField(userscheduling.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(userscheduling.FieldCreatedID, field.TypeInt64, value)
	}
	if usuo.mutation.CreatedIDCleared() {
		_spec.ClearField(userscheduling.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := usuo.mutation.Status(); ok {
		_spec.SetField(userscheduling.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedStatus(); ok {
		_spec.AddField(userscheduling.FieldStatus, field.TypeInt64, value)
	}
	if usuo.mutation.StatusCleared() {
		_spec.ClearField(userscheduling.FieldStatus, field.TypeInt64)
	}
	if value, ok := usuo.mutation.Date(); ok {
		_spec.SetField(userscheduling.FieldDate, field.TypeTime, value)
	}
	if usuo.mutation.DateCleared() {
		_spec.ClearField(userscheduling.FieldDate, field.TypeTime)
	}
	if value, ok := usuo.mutation.Period(); ok {
		_spec.SetField(userscheduling.FieldPeriod, field.TypeJSON, value)
	}
	if usuo.mutation.PeriodCleared() {
		_spec.ClearField(userscheduling.FieldPeriod, field.TypeJSON)
	}
	if usuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userscheduling.UsersTable,
			Columns: []string{userscheduling.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userscheduling.UsersTable,
			Columns: []string{userscheduling.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserScheduling{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userscheduling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}

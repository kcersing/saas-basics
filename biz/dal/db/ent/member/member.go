// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// EdgeMemberDetails holds the string denoting the member_details edge name in mutations.
	EdgeMemberDetails = "member_details"
	// EdgeMemberNotes holds the string denoting the member_notes edge name in mutations.
	EdgeMemberNotes = "member_notes"
	// EdgeMemberOrders holds the string denoting the member_orders edge name in mutations.
	EdgeMemberOrders = "member_orders"
	// EdgeMemberEntry holds the string denoting the member_entry edge name in mutations.
	EdgeMemberEntry = "member_entry"
	// EdgeMemberContents holds the string denoting the member_contents edge name in mutations.
	EdgeMemberContents = "member_contents"
	// EdgeContestParticipants holds the string denoting the contestparticipants edge name in mutations.
	EdgeContestParticipants = "contestParticipants"
	// EdgeBootcampParticipants holds the string denoting the bootcampparticipants edge name in mutations.
	EdgeBootcampParticipants = "bootcampParticipants"
	// Table holds the table name of the member in the database.
	Table = "member"
	// MemberDetailsTable is the table that holds the member_details relation/edge.
	MemberDetailsTable = "member_details"
	// MemberDetailsInverseTable is the table name for the MemberDetails entity.
	// It exists in this package in order to avoid circular dependency with the "memberdetails" package.
	MemberDetailsInverseTable = "member_details"
	// MemberDetailsColumn is the table column denoting the member_details relation/edge.
	MemberDetailsColumn = "member_id"
	// MemberNotesTable is the table that holds the member_notes relation/edge.
	MemberNotesTable = "member_note"
	// MemberNotesInverseTable is the table name for the MemberNote entity.
	// It exists in this package in order to avoid circular dependency with the "membernote" package.
	MemberNotesInverseTable = "member_note"
	// MemberNotesColumn is the table column denoting the member_notes relation/edge.
	MemberNotesColumn = "member_id"
	// MemberOrdersTable is the table that holds the member_orders relation/edge.
	MemberOrdersTable = "order"
	// MemberOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	MemberOrdersInverseTable = "order"
	// MemberOrdersColumn is the table column denoting the member_orders relation/edge.
	MemberOrdersColumn = "member_id"
	// MemberEntryTable is the table that holds the member_entry relation/edge.
	MemberEntryTable = "entry_logs"
	// MemberEntryInverseTable is the table name for the EntryLogs entity.
	// It exists in this package in order to avoid circular dependency with the "entrylogs" package.
	MemberEntryInverseTable = "entry_logs"
	// MemberEntryColumn is the table column denoting the member_entry relation/edge.
	MemberEntryColumn = "member_id"
	// MemberContentsTable is the table that holds the member_contents relation/edge.
	MemberContentsTable = "member_contract"
	// MemberContentsInverseTable is the table name for the MemberContract entity.
	// It exists in this package in order to avoid circular dependency with the "membercontract" package.
	MemberContentsInverseTable = "member_contract"
	// MemberContentsColumn is the table column denoting the member_contents relation/edge.
	MemberContentsColumn = "member_id"
	// ContestParticipantsTable is the table that holds the contestParticipants relation/edge. The primary key declared below.
	ContestParticipantsTable = "member_contestParticipants"
	// ContestParticipantsInverseTable is the table name for the ContestParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "contestparticipant" package.
	ContestParticipantsInverseTable = "contest_participant"
	// BootcampParticipantsTable is the table that holds the bootcampParticipants relation/edge. The primary key declared below.
	BootcampParticipantsTable = "member_bootcampParticipants"
	// BootcampParticipantsInverseTable is the table name for the BootcampParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "bootcampparticipant" package.
	BootcampParticipantsInverseTable = "bootcamp_participant"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldPassword,
	FieldName,
	FieldNickname,
	FieldMobile,
	FieldAvatar,
	FieldCondition,
}

var (
	// ContestParticipantsPrimaryKey and ContestParticipantsColumn2 are the table columns denoting the
	// primary key for the contestParticipants relation (M2M).
	ContestParticipantsPrimaryKey = []string{"member_id", "contest_participant_id"}
	// BootcampParticipantsPrimaryKey and BootcampParticipantsColumn2 are the table columns denoting the
	// primary key for the bootcampParticipants relation (M2M).
	BootcampParticipantsPrimaryKey = []string{"member_id", "bootcamp_participant_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultCondition holds the default value on creation for the "condition" field.
	DefaultCondition int64
)

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByMemberDetailsCount orders the results by member_details count.
func ByMemberDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberDetailsStep(), opts...)
	}
}

// ByMemberDetails orders the results by member_details terms.
func ByMemberDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberNotesCount orders the results by member_notes count.
func ByMemberNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberNotesStep(), opts...)
	}
}

// ByMemberNotes orders the results by member_notes terms.
func ByMemberNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberOrdersCount orders the results by member_orders count.
func ByMemberOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberOrdersStep(), opts...)
	}
}

// ByMemberOrders orders the results by member_orders terms.
func ByMemberOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberEntryCount orders the results by member_entry count.
func ByMemberEntryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberEntryStep(), opts...)
	}
}

// ByMemberEntry orders the results by member_entry terms.
func ByMemberEntry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberEntryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberContentsCount orders the results by member_contents count.
func ByMemberContentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberContentsStep(), opts...)
	}
}

// ByMemberContents orders the results by member_contents terms.
func ByMemberContents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberContentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContestParticipantsCount orders the results by contestParticipants count.
func ByContestParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContestParticipantsStep(), opts...)
	}
}

// ByContestParticipants orders the results by contestParticipants terms.
func ByContestParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBootcampParticipantsCount orders the results by bootcampParticipants count.
func ByBootcampParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBootcampParticipantsStep(), opts...)
	}
}

// ByBootcampParticipants orders the results by bootcampParticipants terms.
func ByBootcampParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBootcampParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemberDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberDetailsTable, MemberDetailsColumn),
	)
}
func newMemberNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberNotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberNotesTable, MemberNotesColumn),
	)
}
func newMemberOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberOrdersTable, MemberOrdersColumn),
	)
}
func newMemberEntryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberEntryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberEntryTable, MemberEntryColumn),
	)
}
func newMemberContentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberContentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberContentsTable, MemberContentsColumn),
	)
}
func newContestParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ContestParticipantsTable, ContestParticipantsPrimaryKey...),
	)
}
func newBootcampParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BootcampParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BootcampParticipantsTable, BootcampParticipantsPrimaryKey...),
	)
}

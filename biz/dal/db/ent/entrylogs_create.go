// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/entrylogs"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/venue"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntryLogsCreate is the builder for creating a EntryLogs entity.
type EntryLogsCreate struct {
	config
	mutation *EntryLogsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (elc *EntryLogsCreate) SetCreatedAt(t time.Time) *EntryLogsCreate {
	elc.mutation.SetCreatedAt(t)
	return elc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableCreatedAt(t *time.Time) *EntryLogsCreate {
	if t != nil {
		elc.SetCreatedAt(*t)
	}
	return elc
}

// SetUpdatedAt sets the "updated_at" field.
func (elc *EntryLogsCreate) SetUpdatedAt(t time.Time) *EntryLogsCreate {
	elc.mutation.SetUpdatedAt(t)
	return elc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableUpdatedAt(t *time.Time) *EntryLogsCreate {
	if t != nil {
		elc.SetUpdatedAt(*t)
	}
	return elc
}

// SetDelete sets the "delete" field.
func (elc *EntryLogsCreate) SetDelete(i int64) *EntryLogsCreate {
	elc.mutation.SetDelete(i)
	return elc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableDelete(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetDelete(*i)
	}
	return elc
}

// SetCreatedID sets the "created_id" field.
func (elc *EntryLogsCreate) SetCreatedID(i int64) *EntryLogsCreate {
	elc.mutation.SetCreatedID(i)
	return elc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableCreatedID(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetCreatedID(*i)
	}
	return elc
}

// SetMemberID sets the "member_id" field.
func (elc *EntryLogsCreate) SetMemberID(i int64) *EntryLogsCreate {
	elc.mutation.SetMemberID(i)
	return elc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableMemberID(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetMemberID(*i)
	}
	return elc
}

// SetUserID sets the "user_id" field.
func (elc *EntryLogsCreate) SetUserID(i int64) *EntryLogsCreate {
	elc.mutation.SetUserID(i)
	return elc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableUserID(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetUserID(*i)
	}
	return elc
}

// SetVenueID sets the "venue_id" field.
func (elc *EntryLogsCreate) SetVenueID(i int64) *EntryLogsCreate {
	elc.mutation.SetVenueID(i)
	return elc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableVenueID(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetVenueID(*i)
	}
	return elc
}

// SetMemberProductID sets the "member_product_id" field.
func (elc *EntryLogsCreate) SetMemberProductID(i int64) *EntryLogsCreate {
	elc.mutation.SetMemberProductID(i)
	return elc
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableMemberProductID(i *int64) *EntryLogsCreate {
	if i != nil {
		elc.SetMemberProductID(*i)
	}
	return elc
}

// SetEntryTime sets the "entry_time" field.
func (elc *EntryLogsCreate) SetEntryTime(t time.Time) *EntryLogsCreate {
	elc.mutation.SetEntryTime(t)
	return elc
}

// SetNillableEntryTime sets the "entry_time" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableEntryTime(t *time.Time) *EntryLogsCreate {
	if t != nil {
		elc.SetEntryTime(*t)
	}
	return elc
}

// SetLeavingTime sets the "leaving_time" field.
func (elc *EntryLogsCreate) SetLeavingTime(t time.Time) *EntryLogsCreate {
	elc.mutation.SetLeavingTime(t)
	return elc
}

// SetNillableLeavingTime sets the "leaving_time" field if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableLeavingTime(t *time.Time) *EntryLogsCreate {
	if t != nil {
		elc.SetLeavingTime(*t)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *EntryLogsCreate) SetID(i int64) *EntryLogsCreate {
	elc.mutation.SetID(i)
	return elc
}

// SetVenuesID sets the "venues" edge to the Venue entity by ID.
func (elc *EntryLogsCreate) SetVenuesID(id int64) *EntryLogsCreate {
	elc.mutation.SetVenuesID(id)
	return elc
}

// SetNillableVenuesID sets the "venues" edge to the Venue entity by ID if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableVenuesID(id *int64) *EntryLogsCreate {
	if id != nil {
		elc = elc.SetVenuesID(*id)
	}
	return elc
}

// SetVenues sets the "venues" edge to the Venue entity.
func (elc *EntryLogsCreate) SetVenues(v *Venue) *EntryLogsCreate {
	return elc.SetVenuesID(v.ID)
}

// SetMembersID sets the "members" edge to the Member entity by ID.
func (elc *EntryLogsCreate) SetMembersID(id int64) *EntryLogsCreate {
	elc.mutation.SetMembersID(id)
	return elc
}

// SetNillableMembersID sets the "members" edge to the Member entity by ID if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableMembersID(id *int64) *EntryLogsCreate {
	if id != nil {
		elc = elc.SetMembersID(*id)
	}
	return elc
}

// SetMembers sets the "members" edge to the Member entity.
func (elc *EntryLogsCreate) SetMembers(m *Member) *EntryLogsCreate {
	return elc.SetMembersID(m.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (elc *EntryLogsCreate) SetUsersID(id int64) *EntryLogsCreate {
	elc.mutation.SetUsersID(id)
	return elc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableUsersID(id *int64) *EntryLogsCreate {
	if id != nil {
		elc = elc.SetUsersID(*id)
	}
	return elc
}

// SetUsers sets the "users" edge to the User entity.
func (elc *EntryLogsCreate) SetUsers(u *User) *EntryLogsCreate {
	return elc.SetUsersID(u.ID)
}

// SetMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID.
func (elc *EntryLogsCreate) SetMemberProductsID(id int64) *EntryLogsCreate {
	elc.mutation.SetMemberProductsID(id)
	return elc
}

// SetNillableMemberProductsID sets the "member_products" edge to the MemberProduct entity by ID if the given value is not nil.
func (elc *EntryLogsCreate) SetNillableMemberProductsID(id *int64) *EntryLogsCreate {
	if id != nil {
		elc = elc.SetMemberProductsID(*id)
	}
	return elc
}

// SetMemberProducts sets the "member_products" edge to the MemberProduct entity.
func (elc *EntryLogsCreate) SetMemberProducts(m *MemberProduct) *EntryLogsCreate {
	return elc.SetMemberProductsID(m.ID)
}

// Mutation returns the EntryLogsMutation object of the builder.
func (elc *EntryLogsCreate) Mutation() *EntryLogsMutation {
	return elc.mutation
}

// Save creates the EntryLogs in the database.
func (elc *EntryLogsCreate) Save(ctx context.Context) (*EntryLogs, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EntryLogsCreate) SaveX(ctx context.Context) *EntryLogs {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EntryLogsCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EntryLogsCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EntryLogsCreate) defaults() {
	if _, ok := elc.mutation.CreatedAt(); !ok {
		v := entrylogs.DefaultCreatedAt()
		elc.mutation.SetCreatedAt(v)
	}
	if _, ok := elc.mutation.UpdatedAt(); !ok {
		v := entrylogs.DefaultUpdatedAt()
		elc.mutation.SetUpdatedAt(v)
	}
	if _, ok := elc.mutation.Delete(); !ok {
		v := entrylogs.DefaultDelete
		elc.mutation.SetDelete(v)
	}
	if _, ok := elc.mutation.CreatedID(); !ok {
		v := entrylogs.DefaultCreatedID
		elc.mutation.SetCreatedID(v)
	}
	if _, ok := elc.mutation.MemberID(); !ok {
		v := entrylogs.DefaultMemberID
		elc.mutation.SetMemberID(v)
	}
	if _, ok := elc.mutation.UserID(); !ok {
		v := entrylogs.DefaultUserID
		elc.mutation.SetUserID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EntryLogsCreate) check() error {
	return nil
}

func (elc *EntryLogsCreate) sqlSave(ctx context.Context) (*EntryLogs, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EntryLogsCreate) createSpec() (*EntryLogs, *sqlgraph.CreateSpec) {
	var (
		_node = &EntryLogs{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(entrylogs.Table, sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64))
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.CreatedAt(); ok {
		_spec.SetField(entrylogs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := elc.mutation.UpdatedAt(); ok {
		_spec.SetField(entrylogs.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := elc.mutation.Delete(); ok {
		_spec.SetField(entrylogs.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := elc.mutation.CreatedID(); ok {
		_spec.SetField(entrylogs.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := elc.mutation.EntryTime(); ok {
		_spec.SetField(entrylogs.FieldEntryTime, field.TypeTime, value)
		_node.EntryTime = value
	}
	if value, ok := elc.mutation.LeavingTime(); ok {
		_spec.SetField(entrylogs.FieldLeavingTime, field.TypeTime, value)
		_node.LeavingTime = value
	}
	if nodes := elc.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entrylogs.VenuesTable,
			Columns: []string{entrylogs.VenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VenueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entrylogs.MembersTable,
			Columns: []string{entrylogs.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entrylogs.UsersTable,
			Columns: []string{entrylogs.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entrylogs.MemberProductsTable,
			Columns: []string{entrylogs.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntryLogsCreateBulk is the builder for creating many EntryLogs entities in bulk.
type EntryLogsCreateBulk struct {
	config
	err      error
	builders []*EntryLogsCreate
}

// Save creates the EntryLogs entities in the database.
func (elcb *EntryLogsCreateBulk) Save(ctx context.Context) ([]*EntryLogs, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EntryLogs, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntryLogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EntryLogsCreateBulk) SaveX(ctx context.Context) []*EntryLogs {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EntryLogsCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EntryLogsCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/memberprofile"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProfileUpdate is the builder for updating MemberProfile entities.
type MemberProfileUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProfileMutation
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (mpu *MemberProfileUpdate) Where(ps ...predicate.MemberProfile) *MemberProfileUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MemberProfileUpdate) SetUpdatedAt(t time.Time) *MemberProfileUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpu *MemberProfileUpdate) ClearUpdatedAt() *MemberProfileUpdate {
	mpu.mutation.ClearUpdatedAt()
	return mpu
}

// SetDelete sets the "delete" field.
func (mpu *MemberProfileUpdate) SetDelete(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetDelete()
	mpu.mutation.SetDelete(i)
	return mpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableDelete(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetDelete(*i)
	}
	return mpu
}

// AddDelete adds i to the "delete" field.
func (mpu *MemberProfileUpdate) AddDelete(i int64) *MemberProfileUpdate {
	mpu.mutation.AddDelete(i)
	return mpu
}

// ClearDelete clears the value of the "delete" field.
func (mpu *MemberProfileUpdate) ClearDelete() *MemberProfileUpdate {
	mpu.mutation.ClearDelete()
	return mpu
}

// SetCreatedID sets the "created_id" field.
func (mpu *MemberProfileUpdate) SetCreatedID(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetCreatedID()
	mpu.mutation.SetCreatedID(i)
	return mpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableCreatedID(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetCreatedID(*i)
	}
	return mpu
}

// AddCreatedID adds i to the "created_id" field.
func (mpu *MemberProfileUpdate) AddCreatedID(i int64) *MemberProfileUpdate {
	mpu.mutation.AddCreatedID(i)
	return mpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpu *MemberProfileUpdate) ClearCreatedID() *MemberProfileUpdate {
	mpu.mutation.ClearCreatedID()
	return mpu
}

// SetMemberID sets the "member_id" field.
func (mpu *MemberProfileUpdate) SetMemberID(i int64) *MemberProfileUpdate {
	mpu.mutation.SetMemberID(i)
	return mpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableMemberID(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetMemberID(*i)
	}
	return mpu
}

// ClearMemberID clears the value of the "member_id" field.
func (mpu *MemberProfileUpdate) ClearMemberID() *MemberProfileUpdate {
	mpu.mutation.ClearMemberID()
	return mpu
}

// SetMobileAscription sets the "mobile_ascription" field.
func (mpu *MemberProfileUpdate) SetMobileAscription(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetMobileAscription()
	mpu.mutation.SetMobileAscription(i)
	return mpu
}

// SetNillableMobileAscription sets the "mobile_ascription" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableMobileAscription(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetMobileAscription(*i)
	}
	return mpu
}

// AddMobileAscription adds i to the "mobile_ascription" field.
func (mpu *MemberProfileUpdate) AddMobileAscription(i int64) *MemberProfileUpdate {
	mpu.mutation.AddMobileAscription(i)
	return mpu
}

// ClearMobileAscription clears the value of the "mobile_ascription" field.
func (mpu *MemberProfileUpdate) ClearMobileAscription() *MemberProfileUpdate {
	mpu.mutation.ClearMobileAscription()
	return mpu
}

// SetFatherName sets the "father_name" field.
func (mpu *MemberProfileUpdate) SetFatherName(s string) *MemberProfileUpdate {
	mpu.mutation.SetFatherName(s)
	return mpu
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableFatherName(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetFatherName(*s)
	}
	return mpu
}

// ClearFatherName clears the value of the "father_name" field.
func (mpu *MemberProfileUpdate) ClearFatherName() *MemberProfileUpdate {
	mpu.mutation.ClearFatherName()
	return mpu
}

// SetMotherName sets the "mother_name" field.
func (mpu *MemberProfileUpdate) SetMotherName(s string) *MemberProfileUpdate {
	mpu.mutation.SetMotherName(s)
	return mpu
}

// SetNillableMotherName sets the "mother_name" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableMotherName(s *string) *MemberProfileUpdate {
	if s != nil {
		mpu.SetMotherName(*s)
	}
	return mpu
}

// ClearMotherName clears the value of the "mother_name" field.
func (mpu *MemberProfileUpdate) ClearMotherName() *MemberProfileUpdate {
	mpu.mutation.ClearMotherName()
	return mpu
}

// SetGrade sets the "grade" field.
func (mpu *MemberProfileUpdate) SetGrade(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetGrade()
	mpu.mutation.SetGrade(i)
	return mpu
}

// SetNillableGrade sets the "grade" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableGrade(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetGrade(*i)
	}
	return mpu
}

// AddGrade adds i to the "grade" field.
func (mpu *MemberProfileUpdate) AddGrade(i int64) *MemberProfileUpdate {
	mpu.mutation.AddGrade(i)
	return mpu
}

// ClearGrade clears the value of the "grade" field.
func (mpu *MemberProfileUpdate) ClearGrade() *MemberProfileUpdate {
	mpu.mutation.ClearGrade()
	return mpu
}

// SetIntention sets the "intention" field.
func (mpu *MemberProfileUpdate) SetIntention(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetIntention()
	mpu.mutation.SetIntention(i)
	return mpu
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableIntention(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetIntention(*i)
	}
	return mpu
}

// AddIntention adds i to the "intention" field.
func (mpu *MemberProfileUpdate) AddIntention(i int64) *MemberProfileUpdate {
	mpu.mutation.AddIntention(i)
	return mpu
}

// ClearIntention clears the value of the "intention" field.
func (mpu *MemberProfileUpdate) ClearIntention() *MemberProfileUpdate {
	mpu.mutation.ClearIntention()
	return mpu
}

// SetSource sets the "source" field.
func (mpu *MemberProfileUpdate) SetSource(i int64) *MemberProfileUpdate {
	mpu.mutation.ResetSource()
	mpu.mutation.SetSource(i)
	return mpu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableSource(i *int64) *MemberProfileUpdate {
	if i != nil {
		mpu.SetSource(*i)
	}
	return mpu
}

// AddSource adds i to the "source" field.
func (mpu *MemberProfileUpdate) AddSource(i int64) *MemberProfileUpdate {
	mpu.mutation.AddSource(i)
	return mpu
}

// ClearSource clears the value of the "source" field.
func (mpu *MemberProfileUpdate) ClearSource() *MemberProfileUpdate {
	mpu.mutation.ClearSource()
	return mpu
}

// SetProfileID sets the "profile" edge to the Member entity by ID.
func (mpu *MemberProfileUpdate) SetProfileID(id int64) *MemberProfileUpdate {
	mpu.mutation.SetProfileID(id)
	return mpu
}

// SetNillableProfileID sets the "profile" edge to the Member entity by ID if the given value is not nil.
func (mpu *MemberProfileUpdate) SetNillableProfileID(id *int64) *MemberProfileUpdate {
	if id != nil {
		mpu = mpu.SetProfileID(*id)
	}
	return mpu
}

// SetProfile sets the "profile" edge to the Member entity.
func (mpu *MemberProfileUpdate) SetProfile(m *Member) *MemberProfileUpdate {
	return mpu.SetProfileID(m.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (mpu *MemberProfileUpdate) Mutation() *MemberProfileMutation {
	return mpu.mutation
}

// ClearProfile clears the "profile" edge to the Member entity.
func (mpu *MemberProfileUpdate) ClearProfile() *MemberProfileUpdate {
	mpu.mutation.ClearProfile()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MemberProfileUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MemberProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MemberProfileUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MemberProfileUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MemberProfileUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok && !mpu.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

func (mpu *MemberProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpu.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if mpu.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpu.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if mpu.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.MobileAscription(); ok {
		_spec.SetField(memberprofile.FieldMobileAscription, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedMobileAscription(); ok {
		_spec.AddField(memberprofile.FieldMobileAscription, field.TypeInt64, value)
	}
	if mpu.mutation.MobileAscriptionCleared() {
		_spec.ClearField(memberprofile.FieldMobileAscription, field.TypeInt64)
	}
	if value, ok := mpu.mutation.FatherName(); ok {
		_spec.SetField(memberprofile.FieldFatherName, field.TypeString, value)
	}
	if mpu.mutation.FatherNameCleared() {
		_spec.ClearField(memberprofile.FieldFatherName, field.TypeString)
	}
	if value, ok := mpu.mutation.MotherName(); ok {
		_spec.SetField(memberprofile.FieldMotherName, field.TypeString, value)
	}
	if mpu.mutation.MotherNameCleared() {
		_spec.ClearField(memberprofile.FieldMotherName, field.TypeString)
	}
	if value, ok := mpu.mutation.Grade(); ok {
		_spec.SetField(memberprofile.FieldGrade, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedGrade(); ok {
		_spec.AddField(memberprofile.FieldGrade, field.TypeInt64, value)
	}
	if mpu.mutation.GradeCleared() {
		_spec.ClearField(memberprofile.FieldGrade, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if mpu.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if mpu.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if mpu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.ProfileTable,
			Columns: []string{memberprofile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.ProfileTable,
			Columns: []string{memberprofile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MemberProfileUpdateOne is the builder for updating a single MemberProfile entity.
type MemberProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MemberProfileUpdateOne) SetUpdatedAt(t time.Time) *MemberProfileUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpuo *MemberProfileUpdateOne) ClearUpdatedAt() *MemberProfileUpdateOne {
	mpuo.mutation.ClearUpdatedAt()
	return mpuo
}

// SetDelete sets the "delete" field.
func (mpuo *MemberProfileUpdateOne) SetDelete(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetDelete()
	mpuo.mutation.SetDelete(i)
	return mpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableDelete(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetDelete(*i)
	}
	return mpuo
}

// AddDelete adds i to the "delete" field.
func (mpuo *MemberProfileUpdateOne) AddDelete(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddDelete(i)
	return mpuo
}

// ClearDelete clears the value of the "delete" field.
func (mpuo *MemberProfileUpdateOne) ClearDelete() *MemberProfileUpdateOne {
	mpuo.mutation.ClearDelete()
	return mpuo
}

// SetCreatedID sets the "created_id" field.
func (mpuo *MemberProfileUpdateOne) SetCreatedID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetCreatedID()
	mpuo.mutation.SetCreatedID(i)
	return mpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableCreatedID(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetCreatedID(*i)
	}
	return mpuo
}

// AddCreatedID adds i to the "created_id" field.
func (mpuo *MemberProfileUpdateOne) AddCreatedID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddCreatedID(i)
	return mpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mpuo *MemberProfileUpdateOne) ClearCreatedID() *MemberProfileUpdateOne {
	mpuo.mutation.ClearCreatedID()
	return mpuo
}

// SetMemberID sets the "member_id" field.
func (mpuo *MemberProfileUpdateOne) SetMemberID(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.SetMemberID(i)
	return mpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableMemberID(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetMemberID(*i)
	}
	return mpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mpuo *MemberProfileUpdateOne) ClearMemberID() *MemberProfileUpdateOne {
	mpuo.mutation.ClearMemberID()
	return mpuo
}

// SetMobileAscription sets the "mobile_ascription" field.
func (mpuo *MemberProfileUpdateOne) SetMobileAscription(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetMobileAscription()
	mpuo.mutation.SetMobileAscription(i)
	return mpuo
}

// SetNillableMobileAscription sets the "mobile_ascription" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableMobileAscription(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetMobileAscription(*i)
	}
	return mpuo
}

// AddMobileAscription adds i to the "mobile_ascription" field.
func (mpuo *MemberProfileUpdateOne) AddMobileAscription(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddMobileAscription(i)
	return mpuo
}

// ClearMobileAscription clears the value of the "mobile_ascription" field.
func (mpuo *MemberProfileUpdateOne) ClearMobileAscription() *MemberProfileUpdateOne {
	mpuo.mutation.ClearMobileAscription()
	return mpuo
}

// SetFatherName sets the "father_name" field.
func (mpuo *MemberProfileUpdateOne) SetFatherName(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetFatherName(s)
	return mpuo
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableFatherName(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetFatherName(*s)
	}
	return mpuo
}

// ClearFatherName clears the value of the "father_name" field.
func (mpuo *MemberProfileUpdateOne) ClearFatherName() *MemberProfileUpdateOne {
	mpuo.mutation.ClearFatherName()
	return mpuo
}

// SetMotherName sets the "mother_name" field.
func (mpuo *MemberProfileUpdateOne) SetMotherName(s string) *MemberProfileUpdateOne {
	mpuo.mutation.SetMotherName(s)
	return mpuo
}

// SetNillableMotherName sets the "mother_name" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableMotherName(s *string) *MemberProfileUpdateOne {
	if s != nil {
		mpuo.SetMotherName(*s)
	}
	return mpuo
}

// ClearMotherName clears the value of the "mother_name" field.
func (mpuo *MemberProfileUpdateOne) ClearMotherName() *MemberProfileUpdateOne {
	mpuo.mutation.ClearMotherName()
	return mpuo
}

// SetGrade sets the "grade" field.
func (mpuo *MemberProfileUpdateOne) SetGrade(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetGrade()
	mpuo.mutation.SetGrade(i)
	return mpuo
}

// SetNillableGrade sets the "grade" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableGrade(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetGrade(*i)
	}
	return mpuo
}

// AddGrade adds i to the "grade" field.
func (mpuo *MemberProfileUpdateOne) AddGrade(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddGrade(i)
	return mpuo
}

// ClearGrade clears the value of the "grade" field.
func (mpuo *MemberProfileUpdateOne) ClearGrade() *MemberProfileUpdateOne {
	mpuo.mutation.ClearGrade()
	return mpuo
}

// SetIntention sets the "intention" field.
func (mpuo *MemberProfileUpdateOne) SetIntention(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetIntention()
	mpuo.mutation.SetIntention(i)
	return mpuo
}

// SetNillableIntention sets the "intention" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableIntention(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetIntention(*i)
	}
	return mpuo
}

// AddIntention adds i to the "intention" field.
func (mpuo *MemberProfileUpdateOne) AddIntention(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddIntention(i)
	return mpuo
}

// ClearIntention clears the value of the "intention" field.
func (mpuo *MemberProfileUpdateOne) ClearIntention() *MemberProfileUpdateOne {
	mpuo.mutation.ClearIntention()
	return mpuo
}

// SetSource sets the "source" field.
func (mpuo *MemberProfileUpdateOne) SetSource(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.ResetSource()
	mpuo.mutation.SetSource(i)
	return mpuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableSource(i *int64) *MemberProfileUpdateOne {
	if i != nil {
		mpuo.SetSource(*i)
	}
	return mpuo
}

// AddSource adds i to the "source" field.
func (mpuo *MemberProfileUpdateOne) AddSource(i int64) *MemberProfileUpdateOne {
	mpuo.mutation.AddSource(i)
	return mpuo
}

// ClearSource clears the value of the "source" field.
func (mpuo *MemberProfileUpdateOne) ClearSource() *MemberProfileUpdateOne {
	mpuo.mutation.ClearSource()
	return mpuo
}

// SetProfileID sets the "profile" edge to the Member entity by ID.
func (mpuo *MemberProfileUpdateOne) SetProfileID(id int64) *MemberProfileUpdateOne {
	mpuo.mutation.SetProfileID(id)
	return mpuo
}

// SetNillableProfileID sets the "profile" edge to the Member entity by ID if the given value is not nil.
func (mpuo *MemberProfileUpdateOne) SetNillableProfileID(id *int64) *MemberProfileUpdateOne {
	if id != nil {
		mpuo = mpuo.SetProfileID(*id)
	}
	return mpuo
}

// SetProfile sets the "profile" edge to the Member entity.
func (mpuo *MemberProfileUpdateOne) SetProfile(m *Member) *MemberProfileUpdateOne {
	return mpuo.SetProfileID(m.ID)
}

// Mutation returns the MemberProfileMutation object of the builder.
func (mpuo *MemberProfileUpdateOne) Mutation() *MemberProfileMutation {
	return mpuo.mutation
}

// ClearProfile clears the "profile" edge to the Member entity.
func (mpuo *MemberProfileUpdateOne) ClearProfile() *MemberProfileUpdateOne {
	mpuo.mutation.ClearProfile()
	return mpuo
}

// Where appends a list predicates to the MemberProfileUpdate builder.
func (mpuo *MemberProfileUpdateOne) Where(ps ...predicate.MemberProfile) *MemberProfileUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MemberProfileUpdateOne) Select(field string, fields ...string) *MemberProfileUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MemberProfile entity.
func (mpuo *MemberProfileUpdateOne) Save(ctx context.Context) (*MemberProfile, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MemberProfileUpdateOne) SaveX(ctx context.Context) *MemberProfile {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MemberProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MemberProfileUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MemberProfileUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok && !mpuo.mutation.UpdatedAtCleared() {
		v := memberprofile.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

func (mpuo *MemberProfileUpdateOne) sqlSave(ctx context.Context) (_node *MemberProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberprofile.Table, memberprofile.Columns, sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberprofile.FieldID)
		for _, f := range fields {
			if !memberprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(memberprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberprofile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.Delete(); ok {
		_spec.SetField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedDelete(); ok {
		_spec.AddField(memberprofile.FieldDelete, field.TypeInt64, value)
	}
	if mpuo.mutation.DeleteCleared() {
		_spec.ClearField(memberprofile.FieldDelete, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.CreatedID(); ok {
		_spec.SetField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberprofile.FieldCreatedID, field.TypeInt64, value)
	}
	if mpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(memberprofile.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.MobileAscription(); ok {
		_spec.SetField(memberprofile.FieldMobileAscription, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedMobileAscription(); ok {
		_spec.AddField(memberprofile.FieldMobileAscription, field.TypeInt64, value)
	}
	if mpuo.mutation.MobileAscriptionCleared() {
		_spec.ClearField(memberprofile.FieldMobileAscription, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.FatherName(); ok {
		_spec.SetField(memberprofile.FieldFatherName, field.TypeString, value)
	}
	if mpuo.mutation.FatherNameCleared() {
		_spec.ClearField(memberprofile.FieldFatherName, field.TypeString)
	}
	if value, ok := mpuo.mutation.MotherName(); ok {
		_spec.SetField(memberprofile.FieldMotherName, field.TypeString, value)
	}
	if mpuo.mutation.MotherNameCleared() {
		_spec.ClearField(memberprofile.FieldMotherName, field.TypeString)
	}
	if value, ok := mpuo.mutation.Grade(); ok {
		_spec.SetField(memberprofile.FieldGrade, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedGrade(); ok {
		_spec.AddField(memberprofile.FieldGrade, field.TypeInt64, value)
	}
	if mpuo.mutation.GradeCleared() {
		_spec.ClearField(memberprofile.FieldGrade, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Intention(); ok {
		_spec.SetField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedIntention(); ok {
		_spec.AddField(memberprofile.FieldIntention, field.TypeInt64, value)
	}
	if mpuo.mutation.IntentionCleared() {
		_spec.ClearField(memberprofile.FieldIntention, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Source(); ok {
		_spec.SetField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedSource(); ok {
		_spec.AddField(memberprofile.FieldSource, field.TypeInt64, value)
	}
	if mpuo.mutation.SourceCleared() {
		_spec.ClearField(memberprofile.FieldSource, field.TypeInt64)
	}
	if mpuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.ProfileTable,
			Columns: []string{memberprofile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberprofile.ProfileTable,
			Columns: []string{memberprofile.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProfile{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}

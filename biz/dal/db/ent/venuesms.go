// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesms"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VenueSms is the model entity for the VenueSms schema.
type VenueSms struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// 通知短信数量
	NoticeCount int64 `json:"notice_count,omitempty"`
	// 已用通知
	UsedNotice int64 `json:"used_notice,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VenueSmsQuery when eager-loading is set.
	Edges        VenueSmsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VenueSmsEdges holds the relations/edges for other nodes in the graph.
type VenueSmsEdges struct {
	// Venue holds the value of the venue edge.
	Venue *Venue `json:"venue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VenueOrErr returns the Venue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VenueSmsEdges) VenueOrErr() (*Venue, error) {
	if e.Venue != nil {
		return e.Venue, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: venue.Label}
	}
	return nil, &NotLoadedError{edge: "venue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VenueSms) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case venuesms.FieldID, venuesms.FieldDelete, venuesms.FieldCreatedID, venuesms.FieldVenueID, venuesms.FieldNoticeCount, venuesms.FieldUsedNotice:
			values[i] = new(sql.NullInt64)
		case venuesms.FieldCreatedAt, venuesms.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VenueSms fields.
func (vs *VenueSms) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case venuesms.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vs.ID = int64(value.Int64)
		case venuesms.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vs.CreatedAt = value.Time
			}
		case venuesms.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vs.UpdatedAt = value.Time
			}
		case venuesms.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				vs.Delete = value.Int64
			}
		case venuesms.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				vs.CreatedID = value.Int64
			}
		case venuesms.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				vs.VenueID = value.Int64
			}
		case venuesms.FieldNoticeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notice_count", values[i])
			} else if value.Valid {
				vs.NoticeCount = value.Int64
			}
		case venuesms.FieldUsedNotice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used_notice", values[i])
			} else if value.Valid {
				vs.UsedNotice = value.Int64
			}
		default:
			vs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VenueSms.
// This includes values selected through modifiers, order, etc.
func (vs *VenueSms) Value(name string) (ent.Value, error) {
	return vs.selectValues.Get(name)
}

// QueryVenue queries the "venue" edge of the VenueSms entity.
func (vs *VenueSms) QueryVenue() *VenueQuery {
	return NewVenueSmsClient(vs.config).QueryVenue(vs)
}

// Update returns a builder for updating this VenueSms.
// Note that you need to call VenueSms.Unwrap() before calling this method if this VenueSms
// was returned from a transaction, and the transaction was committed or rolled back.
func (vs *VenueSms) Update() *VenueSmsUpdateOne {
	return NewVenueSmsClient(vs.config).UpdateOne(vs)
}

// Unwrap unwraps the VenueSms entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vs *VenueSms) Unwrap() *VenueSms {
	_tx, ok := vs.config.driver.(*txDriver)
	if !ok {
		panic("ent: VenueSms is not a transactional entity")
	}
	vs.config.driver = _tx.drv
	return vs
}

// String implements the fmt.Stringer.
func (vs *VenueSms) String() string {
	var builder strings.Builder
	builder.WriteString("VenueSms(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", vs.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", vs.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", vs.VenueID))
	builder.WriteString(", ")
	builder.WriteString("notice_count=")
	builder.WriteString(fmt.Sprintf("%v", vs.NoticeCount))
	builder.WriteString(", ")
	builder.WriteString("used_notice=")
	builder.WriteString(fmt.Sprintf("%v", vs.UsedNotice))
	builder.WriteByte(')')
	return builder.String()
}

// VenueSmsSlice is a parsable slice of VenueSms.
type VenueSmsSlice []*VenueSms

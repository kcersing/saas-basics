// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/schedule"
	"saas/biz/dal/db/ent/schedulemember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleMemberUpdate is the builder for updating ScheduleMember entities.
type ScheduleMemberUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleMemberMutation
}

// Where appends a list predicates to the ScheduleMemberUpdate builder.
func (smu *ScheduleMemberUpdate) Where(ps ...predicate.ScheduleMember) *ScheduleMemberUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *ScheduleMemberUpdate) SetUpdatedAt(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *ScheduleMemberUpdate) ClearUpdatedAt() *ScheduleMemberUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// SetDelete sets the "delete" field.
func (smu *ScheduleMemberUpdate) SetDelete(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetDelete()
	smu.mutation.SetDelete(i)
	return smu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableDelete(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetDelete(*i)
	}
	return smu
}

// AddDelete adds i to the "delete" field.
func (smu *ScheduleMemberUpdate) AddDelete(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddDelete(i)
	return smu
}

// ClearDelete clears the value of the "delete" field.
func (smu *ScheduleMemberUpdate) ClearDelete() *ScheduleMemberUpdate {
	smu.mutation.ClearDelete()
	return smu
}

// SetCreatedID sets the "created_id" field.
func (smu *ScheduleMemberUpdate) SetCreatedID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetCreatedID()
	smu.mutation.SetCreatedID(i)
	return smu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableCreatedID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetCreatedID(*i)
	}
	return smu
}

// AddCreatedID adds i to the "created_id" field.
func (smu *ScheduleMemberUpdate) AddCreatedID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddCreatedID(i)
	return smu
}

// ClearCreatedID clears the value of the "created_id" field.
func (smu *ScheduleMemberUpdate) ClearCreatedID() *ScheduleMemberUpdate {
	smu.mutation.ClearCreatedID()
	return smu
}

// SetStatus sets the "status" field.
func (smu *ScheduleMemberUpdate) SetStatus(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetStatus()
	smu.mutation.SetStatus(i)
	return smu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableStatus(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetStatus(*i)
	}
	return smu
}

// AddStatus adds i to the "status" field.
func (smu *ScheduleMemberUpdate) AddStatus(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddStatus(i)
	return smu
}

// ClearStatus clears the value of the "status" field.
func (smu *ScheduleMemberUpdate) ClearStatus() *ScheduleMemberUpdate {
	smu.mutation.ClearStatus()
	return smu
}

// SetVenueID sets the "venue_id" field.
func (smu *ScheduleMemberUpdate) SetVenueID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetVenueID()
	smu.mutation.SetVenueID(i)
	return smu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableVenueID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetVenueID(*i)
	}
	return smu
}

// AddVenueID adds i to the "venue_id" field.
func (smu *ScheduleMemberUpdate) AddVenueID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddVenueID(i)
	return smu
}

// ClearVenueID clears the value of the "venue_id" field.
func (smu *ScheduleMemberUpdate) ClearVenueID() *ScheduleMemberUpdate {
	smu.mutation.ClearVenueID()
	return smu
}

// SetScheduleID sets the "schedule_id" field.
func (smu *ScheduleMemberUpdate) SetScheduleID(i int64) *ScheduleMemberUpdate {
	smu.mutation.SetScheduleID(i)
	return smu
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableScheduleID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetScheduleID(*i)
	}
	return smu
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (smu *ScheduleMemberUpdate) ClearScheduleID() *ScheduleMemberUpdate {
	smu.mutation.ClearScheduleID()
	return smu
}

// SetScheduleName sets the "schedule_name" field.
func (smu *ScheduleMemberUpdate) SetScheduleName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetScheduleName(s)
	return smu
}

// SetNillableScheduleName sets the "schedule_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableScheduleName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetScheduleName(*s)
	}
	return smu
}

// ClearScheduleName clears the value of the "schedule_name" field.
func (smu *ScheduleMemberUpdate) ClearScheduleName() *ScheduleMemberUpdate {
	smu.mutation.ClearScheduleName()
	return smu
}

// SetMemberID sets the "member_id" field.
func (smu *ScheduleMemberUpdate) SetMemberID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetMemberID()
	smu.mutation.SetMemberID(i)
	return smu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetMemberID(*i)
	}
	return smu
}

// AddMemberID adds i to the "member_id" field.
func (smu *ScheduleMemberUpdate) AddMemberID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddMemberID(i)
	return smu
}

// ClearMemberID clears the value of the "member_id" field.
func (smu *ScheduleMemberUpdate) ClearMemberID() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberID()
	return smu
}

// SetMemberProductID sets the "member_product_id" field.
func (smu *ScheduleMemberUpdate) SetMemberProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.ResetMemberProductID()
	smu.mutation.SetMemberProductID(i)
	return smu
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductID(i *int64) *ScheduleMemberUpdate {
	if i != nil {
		smu.SetMemberProductID(*i)
	}
	return smu
}

// AddMemberProductID adds i to the "member_product_id" field.
func (smu *ScheduleMemberUpdate) AddMemberProductID(i int64) *ScheduleMemberUpdate {
	smu.mutation.AddMemberProductID(i)
	return smu
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductID() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductID()
	return smu
}

// SetType sets the "type" field.
func (smu *ScheduleMemberUpdate) SetType(s string) *ScheduleMemberUpdate {
	smu.mutation.SetType(s)
	return smu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableType(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetType(*s)
	}
	return smu
}

// ClearType clears the value of the "type" field.
func (smu *ScheduleMemberUpdate) ClearType() *ScheduleMemberUpdate {
	smu.mutation.ClearType()
	return smu
}

// SetStartTime sets the "start_time" field.
func (smu *ScheduleMemberUpdate) SetStartTime(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetStartTime(t)
	return smu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableStartTime(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetStartTime(*t)
	}
	return smu
}

// ClearStartTime clears the value of the "start_time" field.
func (smu *ScheduleMemberUpdate) ClearStartTime() *ScheduleMemberUpdate {
	smu.mutation.ClearStartTime()
	return smu
}

// SetEndTime sets the "end_time" field.
func (smu *ScheduleMemberUpdate) SetEndTime(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetEndTime(t)
	return smu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableEndTime(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetEndTime(*t)
	}
	return smu
}

// ClearEndTime clears the value of the "end_time" field.
func (smu *ScheduleMemberUpdate) ClearEndTime() *ScheduleMemberUpdate {
	smu.mutation.ClearEndTime()
	return smu
}

// SetSignStartTime sets the "sign_start_time" field.
func (smu *ScheduleMemberUpdate) SetSignStartTime(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetSignStartTime(t)
	return smu
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableSignStartTime(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetSignStartTime(*t)
	}
	return smu
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (smu *ScheduleMemberUpdate) ClearSignStartTime() *ScheduleMemberUpdate {
	smu.mutation.ClearSignStartTime()
	return smu
}

// SetSignEndTime sets the "sign_end_time" field.
func (smu *ScheduleMemberUpdate) SetSignEndTime(t time.Time) *ScheduleMemberUpdate {
	smu.mutation.SetSignEndTime(t)
	return smu
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableSignEndTime(t *time.Time) *ScheduleMemberUpdate {
	if t != nil {
		smu.SetSignEndTime(*t)
	}
	return smu
}

// ClearSignEndTime clears the value of the "sign_end_time" field.
func (smu *ScheduleMemberUpdate) ClearSignEndTime() *ScheduleMemberUpdate {
	smu.mutation.ClearSignEndTime()
	return smu
}

// SetMemberName sets the "member_name" field.
func (smu *ScheduleMemberUpdate) SetMemberName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetMemberName(s)
	return smu
}

// SetNillableMemberName sets the "member_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetMemberName(*s)
	}
	return smu
}

// ClearMemberName clears the value of the "member_name" field.
func (smu *ScheduleMemberUpdate) ClearMemberName() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberName()
	return smu
}

// SetMemberProductName sets the "member_product_name" field.
func (smu *ScheduleMemberUpdate) SetMemberProductName(s string) *ScheduleMemberUpdate {
	smu.mutation.SetMemberProductName(s)
	return smu
}

// SetNillableMemberProductName sets the "member_product_name" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableMemberProductName(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetMemberProductName(*s)
	}
	return smu
}

// ClearMemberProductName clears the value of the "member_product_name" field.
func (smu *ScheduleMemberUpdate) ClearMemberProductName() *ScheduleMemberUpdate {
	smu.mutation.ClearMemberProductName()
	return smu
}

// SetRemark sets the "remark" field.
func (smu *ScheduleMemberUpdate) SetRemark(s string) *ScheduleMemberUpdate {
	smu.mutation.SetRemark(s)
	return smu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smu *ScheduleMemberUpdate) SetNillableRemark(s *string) *ScheduleMemberUpdate {
	if s != nil {
		smu.SetRemark(*s)
	}
	return smu
}

// ClearRemark clears the value of the "remark" field.
func (smu *ScheduleMemberUpdate) ClearRemark() *ScheduleMemberUpdate {
	smu.mutation.ClearRemark()
	return smu
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (smu *ScheduleMemberUpdate) SetSchedule(s *Schedule) *ScheduleMemberUpdate {
	return smu.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleMemberMutation object of the builder.
func (smu *ScheduleMemberUpdate) Mutation() *ScheduleMemberMutation {
	return smu.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (smu *ScheduleMemberUpdate) ClearSchedule() *ScheduleMemberUpdate {
	smu.mutation.ClearSchedule()
	return smu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *ScheduleMemberUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *ScheduleMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *ScheduleMemberUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *ScheduleMemberUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *ScheduleMemberUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		v := schedulemember.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

func (smu *ScheduleMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulemember.Table, schedulemember.Columns, sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.Delete(); ok {
		_spec.SetField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedDelete(); ok {
		_spec.AddField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if smu.mutation.DeleteCleared() {
		_spec.ClearField(schedulemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := smu.mutation.CreatedID(); ok {
		_spec.SetField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if smu.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := smu.mutation.Status(); ok {
		_spec.SetField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedStatus(); ok {
		_spec.AddField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if smu.mutation.StatusCleared() {
		_spec.ClearField(schedulemember.FieldStatus, field.TypeInt64)
	}
	if value, ok := smu.mutation.VenueID(); ok {
		_spec.SetField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if smu.mutation.VenueIDCleared() {
		_spec.ClearField(schedulemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := smu.mutation.ScheduleName(); ok {
		_spec.SetField(schedulemember.FieldScheduleName, field.TypeString, value)
	}
	if smu.mutation.ScheduleNameCleared() {
		_spec.ClearField(schedulemember.FieldScheduleName, field.TypeString)
	}
	if value, ok := smu.mutation.MemberID(); ok {
		_spec.SetField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedMemberID(); ok {
		_spec.AddField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if smu.mutation.MemberIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberID, field.TypeInt64)
	}
	if value, ok := smu.mutation.MemberProductID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedMemberProductID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if smu.mutation.MemberProductIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductID, field.TypeInt64)
	}
	if value, ok := smu.mutation.GetType(); ok {
		_spec.SetField(schedulemember.FieldType, field.TypeString, value)
	}
	if smu.mutation.TypeCleared() {
		_spec.ClearField(schedulemember.FieldType, field.TypeString)
	}
	if value, ok := smu.mutation.StartTime(); ok {
		_spec.SetField(schedulemember.FieldStartTime, field.TypeTime, value)
	}
	if smu.mutation.StartTimeCleared() {
		_spec.ClearField(schedulemember.FieldStartTime, field.TypeTime)
	}
	if value, ok := smu.mutation.EndTime(); ok {
		_spec.SetField(schedulemember.FieldEndTime, field.TypeTime, value)
	}
	if smu.mutation.EndTimeCleared() {
		_spec.ClearField(schedulemember.FieldEndTime, field.TypeTime)
	}
	if value, ok := smu.mutation.SignStartTime(); ok {
		_spec.SetField(schedulemember.FieldSignStartTime, field.TypeTime, value)
	}
	if smu.mutation.SignStartTimeCleared() {
		_spec.ClearField(schedulemember.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := smu.mutation.SignEndTime(); ok {
		_spec.SetField(schedulemember.FieldSignEndTime, field.TypeTime, value)
	}
	if smu.mutation.SignEndTimeCleared() {
		_spec.ClearField(schedulemember.FieldSignEndTime, field.TypeTime)
	}
	if value, ok := smu.mutation.MemberName(); ok {
		_spec.SetField(schedulemember.FieldMemberName, field.TypeString, value)
	}
	if smu.mutation.MemberNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberName, field.TypeString)
	}
	if value, ok := smu.mutation.MemberProductName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductName, field.TypeString, value)
	}
	if smu.mutation.MemberProductNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductName, field.TypeString)
	}
	if value, ok := smu.mutation.Remark(); ok {
		_spec.SetField(schedulemember.FieldRemark, field.TypeString, value)
	}
	if smu.mutation.RemarkCleared() {
		_spec.ClearField(schedulemember.FieldRemark, field.TypeString)
	}
	if smu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// ScheduleMemberUpdateOne is the builder for updating a single ScheduleMember entity.
type ScheduleMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleMemberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *ScheduleMemberUpdateOne) SetUpdatedAt(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *ScheduleMemberUpdateOne) ClearUpdatedAt() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// SetDelete sets the "delete" field.
func (smuo *ScheduleMemberUpdateOne) SetDelete(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetDelete()
	smuo.mutation.SetDelete(i)
	return smuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableDelete(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetDelete(*i)
	}
	return smuo
}

// AddDelete adds i to the "delete" field.
func (smuo *ScheduleMemberUpdateOne) AddDelete(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddDelete(i)
	return smuo
}

// ClearDelete clears the value of the "delete" field.
func (smuo *ScheduleMemberUpdateOne) ClearDelete() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearDelete()
	return smuo
}

// SetCreatedID sets the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) SetCreatedID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetCreatedID()
	smuo.mutation.SetCreatedID(i)
	return smuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableCreatedID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetCreatedID(*i)
	}
	return smuo
}

// AddCreatedID adds i to the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) AddCreatedID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddCreatedID(i)
	return smuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearCreatedID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearCreatedID()
	return smuo
}

// SetStatus sets the "status" field.
func (smuo *ScheduleMemberUpdateOne) SetStatus(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetStatus()
	smuo.mutation.SetStatus(i)
	return smuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableStatus(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetStatus(*i)
	}
	return smuo
}

// AddStatus adds i to the "status" field.
func (smuo *ScheduleMemberUpdateOne) AddStatus(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddStatus(i)
	return smuo
}

// ClearStatus clears the value of the "status" field.
func (smuo *ScheduleMemberUpdateOne) ClearStatus() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearStatus()
	return smuo
}

// SetVenueID sets the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) SetVenueID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetVenueID()
	smuo.mutation.SetVenueID(i)
	return smuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableVenueID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetVenueID(*i)
	}
	return smuo
}

// AddVenueID adds i to the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) AddVenueID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddVenueID(i)
	return smuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearVenueID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearVenueID()
	return smuo
}

// SetScheduleID sets the "schedule_id" field.
func (smuo *ScheduleMemberUpdateOne) SetScheduleID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.SetScheduleID(i)
	return smuo
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableScheduleID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetScheduleID(*i)
	}
	return smuo
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearScheduleID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearScheduleID()
	return smuo
}

// SetScheduleName sets the "schedule_name" field.
func (smuo *ScheduleMemberUpdateOne) SetScheduleName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetScheduleName(s)
	return smuo
}

// SetNillableScheduleName sets the "schedule_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableScheduleName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetScheduleName(*s)
	}
	return smuo
}

// ClearScheduleName clears the value of the "schedule_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearScheduleName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearScheduleName()
	return smuo
}

// SetMemberID sets the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetMemberID()
	smuo.mutation.SetMemberID(i)
	return smuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetMemberID(*i)
	}
	return smuo
}

// AddMemberID adds i to the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) AddMemberID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddMemberID(i)
	return smuo
}

// ClearMemberID clears the value of the "member_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberID()
	return smuo
}

// SetMemberProductID sets the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.ResetMemberProductID()
	smuo.mutation.SetMemberProductID(i)
	return smuo
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductID(i *int64) *ScheduleMemberUpdateOne {
	if i != nil {
		smuo.SetMemberProductID(*i)
	}
	return smuo
}

// AddMemberProductID adds i to the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) AddMemberProductID(i int64) *ScheduleMemberUpdateOne {
	smuo.mutation.AddMemberProductID(i)
	return smuo
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductID() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductID()
	return smuo
}

// SetType sets the "type" field.
func (smuo *ScheduleMemberUpdateOne) SetType(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetType(s)
	return smuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableType(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetType(*s)
	}
	return smuo
}

// ClearType clears the value of the "type" field.
func (smuo *ScheduleMemberUpdateOne) ClearType() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearType()
	return smuo
}

// SetStartTime sets the "start_time" field.
func (smuo *ScheduleMemberUpdateOne) SetStartTime(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetStartTime(t)
	return smuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableStartTime(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetStartTime(*t)
	}
	return smuo
}

// ClearStartTime clears the value of the "start_time" field.
func (smuo *ScheduleMemberUpdateOne) ClearStartTime() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearStartTime()
	return smuo
}

// SetEndTime sets the "end_time" field.
func (smuo *ScheduleMemberUpdateOne) SetEndTime(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetEndTime(t)
	return smuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableEndTime(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetEndTime(*t)
	}
	return smuo
}

// ClearEndTime clears the value of the "end_time" field.
func (smuo *ScheduleMemberUpdateOne) ClearEndTime() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearEndTime()
	return smuo
}

// SetSignStartTime sets the "sign_start_time" field.
func (smuo *ScheduleMemberUpdateOne) SetSignStartTime(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetSignStartTime(t)
	return smuo
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableSignStartTime(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetSignStartTime(*t)
	}
	return smuo
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (smuo *ScheduleMemberUpdateOne) ClearSignStartTime() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSignStartTime()
	return smuo
}

// SetSignEndTime sets the "sign_end_time" field.
func (smuo *ScheduleMemberUpdateOne) SetSignEndTime(t time.Time) *ScheduleMemberUpdateOne {
	smuo.mutation.SetSignEndTime(t)
	return smuo
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableSignEndTime(t *time.Time) *ScheduleMemberUpdateOne {
	if t != nil {
		smuo.SetSignEndTime(*t)
	}
	return smuo
}

// ClearSignEndTime clears the value of the "sign_end_time" field.
func (smuo *ScheduleMemberUpdateOne) ClearSignEndTime() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSignEndTime()
	return smuo
}

// SetMemberName sets the "member_name" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetMemberName(s)
	return smuo
}

// SetNillableMemberName sets the "member_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetMemberName(*s)
	}
	return smuo
}

// ClearMemberName clears the value of the "member_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberName()
	return smuo
}

// SetMemberProductName sets the "member_product_name" field.
func (smuo *ScheduleMemberUpdateOne) SetMemberProductName(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetMemberProductName(s)
	return smuo
}

// SetNillableMemberProductName sets the "member_product_name" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableMemberProductName(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetMemberProductName(*s)
	}
	return smuo
}

// ClearMemberProductName clears the value of the "member_product_name" field.
func (smuo *ScheduleMemberUpdateOne) ClearMemberProductName() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearMemberProductName()
	return smuo
}

// SetRemark sets the "remark" field.
func (smuo *ScheduleMemberUpdateOne) SetRemark(s string) *ScheduleMemberUpdateOne {
	smuo.mutation.SetRemark(s)
	return smuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smuo *ScheduleMemberUpdateOne) SetNillableRemark(s *string) *ScheduleMemberUpdateOne {
	if s != nil {
		smuo.SetRemark(*s)
	}
	return smuo
}

// ClearRemark clears the value of the "remark" field.
func (smuo *ScheduleMemberUpdateOne) ClearRemark() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearRemark()
	return smuo
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (smuo *ScheduleMemberUpdateOne) SetSchedule(s *Schedule) *ScheduleMemberUpdateOne {
	return smuo.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleMemberMutation object of the builder.
func (smuo *ScheduleMemberUpdateOne) Mutation() *ScheduleMemberMutation {
	return smuo.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (smuo *ScheduleMemberUpdateOne) ClearSchedule() *ScheduleMemberUpdateOne {
	smuo.mutation.ClearSchedule()
	return smuo
}

// Where appends a list predicates to the ScheduleMemberUpdate builder.
func (smuo *ScheduleMemberUpdateOne) Where(ps ...predicate.ScheduleMember) *ScheduleMemberUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *ScheduleMemberUpdateOne) Select(field string, fields ...string) *ScheduleMemberUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated ScheduleMember entity.
func (smuo *ScheduleMemberUpdateOne) Save(ctx context.Context) (*ScheduleMember, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *ScheduleMemberUpdateOne) SaveX(ctx context.Context) *ScheduleMember {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *ScheduleMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *ScheduleMemberUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *ScheduleMemberUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		v := schedulemember.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

func (smuo *ScheduleMemberUpdateOne) sqlSave(ctx context.Context) (_node *ScheduleMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulemember.Table, schedulemember.Columns, sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduleMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedulemember.FieldID)
		for _, f := range fields {
			if !schedulemember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedulemember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulemember.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulemember.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulemember.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.Delete(); ok {
		_spec.SetField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedDelete(); ok {
		_spec.AddField(schedulemember.FieldDelete, field.TypeInt64, value)
	}
	if smuo.mutation.DeleteCleared() {
		_spec.ClearField(schedulemember.FieldDelete, field.TypeInt64)
	}
	if value, ok := smuo.mutation.CreatedID(); ok {
		_spec.SetField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulemember.FieldCreatedID, field.TypeInt64, value)
	}
	if smuo.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulemember.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.Status(); ok {
		_spec.SetField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedStatus(); ok {
		_spec.AddField(schedulemember.FieldStatus, field.TypeInt64, value)
	}
	if smuo.mutation.StatusCleared() {
		_spec.ClearField(schedulemember.FieldStatus, field.TypeInt64)
	}
	if value, ok := smuo.mutation.VenueID(); ok {
		_spec.SetField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulemember.FieldVenueID, field.TypeInt64, value)
	}
	if smuo.mutation.VenueIDCleared() {
		_spec.ClearField(schedulemember.FieldVenueID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.ScheduleName(); ok {
		_spec.SetField(schedulemember.FieldScheduleName, field.TypeString, value)
	}
	if smuo.mutation.ScheduleNameCleared() {
		_spec.ClearField(schedulemember.FieldScheduleName, field.TypeString)
	}
	if value, ok := smuo.mutation.MemberID(); ok {
		_spec.SetField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedMemberID(); ok {
		_spec.AddField(schedulemember.FieldMemberID, field.TypeInt64, value)
	}
	if smuo.mutation.MemberIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.MemberProductID(); ok {
		_spec.SetField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedMemberProductID(); ok {
		_spec.AddField(schedulemember.FieldMemberProductID, field.TypeInt64, value)
	}
	if smuo.mutation.MemberProductIDCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.GetType(); ok {
		_spec.SetField(schedulemember.FieldType, field.TypeString, value)
	}
	if smuo.mutation.TypeCleared() {
		_spec.ClearField(schedulemember.FieldType, field.TypeString)
	}
	if value, ok := smuo.mutation.StartTime(); ok {
		_spec.SetField(schedulemember.FieldStartTime, field.TypeTime, value)
	}
	if smuo.mutation.StartTimeCleared() {
		_spec.ClearField(schedulemember.FieldStartTime, field.TypeTime)
	}
	if value, ok := smuo.mutation.EndTime(); ok {
		_spec.SetField(schedulemember.FieldEndTime, field.TypeTime, value)
	}
	if smuo.mutation.EndTimeCleared() {
		_spec.ClearField(schedulemember.FieldEndTime, field.TypeTime)
	}
	if value, ok := smuo.mutation.SignStartTime(); ok {
		_spec.SetField(schedulemember.FieldSignStartTime, field.TypeTime, value)
	}
	if smuo.mutation.SignStartTimeCleared() {
		_spec.ClearField(schedulemember.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := smuo.mutation.SignEndTime(); ok {
		_spec.SetField(schedulemember.FieldSignEndTime, field.TypeTime, value)
	}
	if smuo.mutation.SignEndTimeCleared() {
		_spec.ClearField(schedulemember.FieldSignEndTime, field.TypeTime)
	}
	if value, ok := smuo.mutation.MemberName(); ok {
		_spec.SetField(schedulemember.FieldMemberName, field.TypeString, value)
	}
	if smuo.mutation.MemberNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberName, field.TypeString)
	}
	if value, ok := smuo.mutation.MemberProductName(); ok {
		_spec.SetField(schedulemember.FieldMemberProductName, field.TypeString, value)
	}
	if smuo.mutation.MemberProductNameCleared() {
		_spec.ClearField(schedulemember.FieldMemberProductName, field.TypeString)
	}
	if value, ok := smuo.mutation.Remark(); ok {
		_spec.SetField(schedulemember.FieldRemark, field.TypeString, value)
	}
	if smuo.mutation.RemarkCleared() {
		_spec.ClearField(schedulemember.FieldRemark, field.TypeString)
	}
	if smuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulemember.ScheduleTable,
			Columns: []string{schedulemember.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduleMember{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulemember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}

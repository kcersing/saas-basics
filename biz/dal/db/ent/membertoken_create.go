// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/membertoken"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberTokenCreate is the builder for creating a MemberToken entity.
type MemberTokenCreate struct {
	config
	mutation *MemberTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MemberTokenCreate) SetCreatedAt(t time.Time) *MemberTokenCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MemberTokenCreate) SetNillableCreatedAt(t *time.Time) *MemberTokenCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MemberTokenCreate) SetUpdatedAt(t time.Time) *MemberTokenCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MemberTokenCreate) SetNillableUpdatedAt(t *time.Time) *MemberTokenCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetDelete sets the "delete" field.
func (mtc *MemberTokenCreate) SetDelete(i int64) *MemberTokenCreate {
	mtc.mutation.SetDelete(i)
	return mtc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mtc *MemberTokenCreate) SetNillableDelete(i *int64) *MemberTokenCreate {
	if i != nil {
		mtc.SetDelete(*i)
	}
	return mtc
}

// SetCreatedID sets the "created_id" field.
func (mtc *MemberTokenCreate) SetCreatedID(i int64) *MemberTokenCreate {
	mtc.mutation.SetCreatedID(i)
	return mtc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mtc *MemberTokenCreate) SetNillableCreatedID(i *int64) *MemberTokenCreate {
	if i != nil {
		mtc.SetCreatedID(*i)
	}
	return mtc
}

// SetMemberID sets the "member_id" field.
func (mtc *MemberTokenCreate) SetMemberID(i int64) *MemberTokenCreate {
	mtc.mutation.SetMemberID(i)
	return mtc
}

// SetToken sets the "token" field.
func (mtc *MemberTokenCreate) SetToken(s string) *MemberTokenCreate {
	mtc.mutation.SetToken(s)
	return mtc
}

// SetSource sets the "source" field.
func (mtc *MemberTokenCreate) SetSource(s string) *MemberTokenCreate {
	mtc.mutation.SetSource(s)
	return mtc
}

// SetExpiredAt sets the "expired_at" field.
func (mtc *MemberTokenCreate) SetExpiredAt(t time.Time) *MemberTokenCreate {
	mtc.mutation.SetExpiredAt(t)
	return mtc
}

// SetID sets the "id" field.
func (mtc *MemberTokenCreate) SetID(i int64) *MemberTokenCreate {
	mtc.mutation.SetID(i)
	return mtc
}

// Mutation returns the MemberTokenMutation object of the builder.
func (mtc *MemberTokenCreate) Mutation() *MemberTokenMutation {
	return mtc.mutation
}

// Save creates the MemberToken in the database.
func (mtc *MemberTokenCreate) Save(ctx context.Context) (*MemberToken, error) {
	mtc.defaults()
	return withHooks(ctx, mtc.sqlSave, mtc.mutation, mtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MemberTokenCreate) SaveX(ctx context.Context) *MemberToken {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MemberTokenCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MemberTokenCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MemberTokenCreate) defaults() {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		v := membertoken.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		v := membertoken.DefaultUpdatedAt()
		mtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtc.mutation.Delete(); !ok {
		v := membertoken.DefaultDelete
		mtc.mutation.SetDelete(v)
	}
	if _, ok := mtc.mutation.CreatedID(); !ok {
		v := membertoken.DefaultCreatedID
		mtc.mutation.SetCreatedID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MemberTokenCreate) check() error {
	if _, ok := mtc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "MemberToken.member_id"`)}
	}
	if _, ok := mtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "MemberToken.token"`)}
	}
	if _, ok := mtc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "MemberToken.source"`)}
	}
	if _, ok := mtc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New(`ent: missing required field "MemberToken.expired_at"`)}
	}
	return nil
}

func (mtc *MemberTokenCreate) sqlSave(ctx context.Context) (*MemberToken, error) {
	if err := mtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mtc.mutation.id = &_node.ID
	mtc.mutation.done = true
	return _node, nil
}

func (mtc *MemberTokenCreate) createSpec() (*MemberToken, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberToken{config: mtc.config}
		_spec = sqlgraph.NewCreateSpec(membertoken.Table, sqlgraph.NewFieldSpec(membertoken.FieldID, field.TypeInt64))
	)
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.SetField(membertoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.SetField(membertoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.Delete(); ok {
		_spec.SetField(membertoken.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := mtc.mutation.CreatedID(); ok {
		_spec.SetField(membertoken.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := mtc.mutation.MemberID(); ok {
		_spec.SetField(membertoken.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if value, ok := mtc.mutation.Token(); ok {
		_spec.SetField(membertoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := mtc.mutation.Source(); ok {
		_spec.SetField(membertoken.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := mtc.mutation.ExpiredAt(); ok {
		_spec.SetField(membertoken.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	return _node, _spec
}

// MemberTokenCreateBulk is the builder for creating many MemberToken entities in bulk.
type MemberTokenCreateBulk struct {
	config
	err      error
	builders []*MemberTokenCreate
}

// Save creates the MemberToken entities in the database.
func (mtcb *MemberTokenCreateBulk) Save(ctx context.Context) ([]*MemberToken, error) {
	if mtcb.err != nil {
		return nil, mtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MemberToken, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MemberTokenCreateBulk) SaveX(ctx context.Context) []*MemberToken {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MemberTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MemberTokenCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/memberdetails"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberDetailsUpdate is the builder for updating MemberDetails entities.
type MemberDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *MemberDetailsMutation
}

// Where appends a list predicates to the MemberDetailsUpdate builder.
func (mdu *MemberDetailsUpdate) Where(ps ...predicate.MemberDetails) *MemberDetailsUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetUpdatedAt sets the "updated_at" field.
func (mdu *MemberDetailsUpdate) SetUpdatedAt(t time.Time) *MemberDetailsUpdate {
	mdu.mutation.SetUpdatedAt(t)
	return mdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdu *MemberDetailsUpdate) ClearUpdatedAt() *MemberDetailsUpdate {
	mdu.mutation.ClearUpdatedAt()
	return mdu
}

// SetDelete sets the "delete" field.
func (mdu *MemberDetailsUpdate) SetDelete(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetDelete()
	mdu.mutation.SetDelete(i)
	return mdu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableDelete(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetDelete(*i)
	}
	return mdu
}

// AddDelete adds i to the "delete" field.
func (mdu *MemberDetailsUpdate) AddDelete(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddDelete(i)
	return mdu
}

// ClearDelete clears the value of the "delete" field.
func (mdu *MemberDetailsUpdate) ClearDelete() *MemberDetailsUpdate {
	mdu.mutation.ClearDelete()
	return mdu
}

// SetCreatedID sets the "created_id" field.
func (mdu *MemberDetailsUpdate) SetCreatedID(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetCreatedID()
	mdu.mutation.SetCreatedID(i)
	return mdu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableCreatedID(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetCreatedID(*i)
	}
	return mdu
}

// AddCreatedID adds i to the "created_id" field.
func (mdu *MemberDetailsUpdate) AddCreatedID(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddCreatedID(i)
	return mdu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mdu *MemberDetailsUpdate) ClearCreatedID() *MemberDetailsUpdate {
	mdu.mutation.ClearCreatedID()
	return mdu
}

// SetMemberID sets the "member_id" field.
func (mdu *MemberDetailsUpdate) SetMemberID(i int64) *MemberDetailsUpdate {
	mdu.mutation.SetMemberID(i)
	return mdu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableMemberID(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetMemberID(*i)
	}
	return mdu
}

// ClearMemberID clears the value of the "member_id" field.
func (mdu *MemberDetailsUpdate) ClearMemberID() *MemberDetailsUpdate {
	mdu.mutation.ClearMemberID()
	return mdu
}

// SetMoneySum sets the "money_sum" field.
func (mdu *MemberDetailsUpdate) SetMoneySum(f float64) *MemberDetailsUpdate {
	mdu.mutation.ResetMoneySum()
	mdu.mutation.SetMoneySum(f)
	return mdu
}

// SetNillableMoneySum sets the "money_sum" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableMoneySum(f *float64) *MemberDetailsUpdate {
	if f != nil {
		mdu.SetMoneySum(*f)
	}
	return mdu
}

// AddMoneySum adds f to the "money_sum" field.
func (mdu *MemberDetailsUpdate) AddMoneySum(f float64) *MemberDetailsUpdate {
	mdu.mutation.AddMoneySum(f)
	return mdu
}

// ClearMoneySum clears the value of the "money_sum" field.
func (mdu *MemberDetailsUpdate) ClearMoneySum() *MemberDetailsUpdate {
	mdu.mutation.ClearMoneySum()
	return mdu
}

// SetProductID sets the "product_id" field.
func (mdu *MemberDetailsUpdate) SetProductID(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetProductID()
	mdu.mutation.SetProductID(i)
	return mdu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableProductID(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetProductID(*i)
	}
	return mdu
}

// AddProductID adds i to the "product_id" field.
func (mdu *MemberDetailsUpdate) AddProductID(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddProductID(i)
	return mdu
}

// ClearProductID clears the value of the "product_id" field.
func (mdu *MemberDetailsUpdate) ClearProductID() *MemberDetailsUpdate {
	mdu.mutation.ClearProductID()
	return mdu
}

// SetProductName sets the "product_name" field.
func (mdu *MemberDetailsUpdate) SetProductName(s string) *MemberDetailsUpdate {
	mdu.mutation.SetProductName(s)
	return mdu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableProductName(s *string) *MemberDetailsUpdate {
	if s != nil {
		mdu.SetProductName(*s)
	}
	return mdu
}

// ClearProductName clears the value of the "product_name" field.
func (mdu *MemberDetailsUpdate) ClearProductName() *MemberDetailsUpdate {
	mdu.mutation.ClearProductName()
	return mdu
}

// SetProductVenue sets the "product_venue" field.
func (mdu *MemberDetailsUpdate) SetProductVenue(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetProductVenue()
	mdu.mutation.SetProductVenue(i)
	return mdu
}

// SetNillableProductVenue sets the "product_venue" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableProductVenue(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetProductVenue(*i)
	}
	return mdu
}

// AddProductVenue adds i to the "product_venue" field.
func (mdu *MemberDetailsUpdate) AddProductVenue(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddProductVenue(i)
	return mdu
}

// ClearProductVenue clears the value of the "product_venue" field.
func (mdu *MemberDetailsUpdate) ClearProductVenue() *MemberDetailsUpdate {
	mdu.mutation.ClearProductVenue()
	return mdu
}

// SetProductVenueName sets the "product_venue_name" field.
func (mdu *MemberDetailsUpdate) SetProductVenueName(s string) *MemberDetailsUpdate {
	mdu.mutation.SetProductVenueName(s)
	return mdu
}

// SetNillableProductVenueName sets the "product_venue_name" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableProductVenueName(s *string) *MemberDetailsUpdate {
	if s != nil {
		mdu.SetProductVenueName(*s)
	}
	return mdu
}

// ClearProductVenueName clears the value of the "product_venue_name" field.
func (mdu *MemberDetailsUpdate) ClearProductVenueName() *MemberDetailsUpdate {
	mdu.mutation.ClearProductVenueName()
	return mdu
}

// SetEntrySum sets the "entry_sum" field.
func (mdu *MemberDetailsUpdate) SetEntrySum(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetEntrySum()
	mdu.mutation.SetEntrySum(i)
	return mdu
}

// SetNillableEntrySum sets the "entry_sum" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableEntrySum(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetEntrySum(*i)
	}
	return mdu
}

// AddEntrySum adds i to the "entry_sum" field.
func (mdu *MemberDetailsUpdate) AddEntrySum(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddEntrySum(i)
	return mdu
}

// ClearEntrySum clears the value of the "entry_sum" field.
func (mdu *MemberDetailsUpdate) ClearEntrySum() *MemberDetailsUpdate {
	mdu.mutation.ClearEntrySum()
	return mdu
}

// SetEntryLastTime sets the "entry_last_time" field.
func (mdu *MemberDetailsUpdate) SetEntryLastTime(t time.Time) *MemberDetailsUpdate {
	mdu.mutation.SetEntryLastTime(t)
	return mdu
}

// SetNillableEntryLastTime sets the "entry_last_time" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableEntryLastTime(t *time.Time) *MemberDetailsUpdate {
	if t != nil {
		mdu.SetEntryLastTime(*t)
	}
	return mdu
}

// ClearEntryLastTime clears the value of the "entry_last_time" field.
func (mdu *MemberDetailsUpdate) ClearEntryLastTime() *MemberDetailsUpdate {
	mdu.mutation.ClearEntryLastTime()
	return mdu
}

// SetEntryDeadlineTime sets the "entry_deadline_time" field.
func (mdu *MemberDetailsUpdate) SetEntryDeadlineTime(t time.Time) *MemberDetailsUpdate {
	mdu.mutation.SetEntryDeadlineTime(t)
	return mdu
}

// SetNillableEntryDeadlineTime sets the "entry_deadline_time" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableEntryDeadlineTime(t *time.Time) *MemberDetailsUpdate {
	if t != nil {
		mdu.SetEntryDeadlineTime(*t)
	}
	return mdu
}

// ClearEntryDeadlineTime clears the value of the "entry_deadline_time" field.
func (mdu *MemberDetailsUpdate) ClearEntryDeadlineTime() *MemberDetailsUpdate {
	mdu.mutation.ClearEntryDeadlineTime()
	return mdu
}

// SetClassLastTime sets the "class_last_time" field.
func (mdu *MemberDetailsUpdate) SetClassLastTime(t time.Time) *MemberDetailsUpdate {
	mdu.mutation.SetClassLastTime(t)
	return mdu
}

// SetNillableClassLastTime sets the "class_last_time" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableClassLastTime(t *time.Time) *MemberDetailsUpdate {
	if t != nil {
		mdu.SetClassLastTime(*t)
	}
	return mdu
}

// ClearClassLastTime clears the value of the "class_last_time" field.
func (mdu *MemberDetailsUpdate) ClearClassLastTime() *MemberDetailsUpdate {
	mdu.mutation.ClearClassLastTime()
	return mdu
}

// SetRelationUID sets the "relation_uid" field.
func (mdu *MemberDetailsUpdate) SetRelationUID(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetRelationUID()
	mdu.mutation.SetRelationUID(i)
	return mdu
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableRelationUID(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetRelationUID(*i)
	}
	return mdu
}

// AddRelationUID adds i to the "relation_uid" field.
func (mdu *MemberDetailsUpdate) AddRelationUID(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddRelationUID(i)
	return mdu
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (mdu *MemberDetailsUpdate) ClearRelationUID() *MemberDetailsUpdate {
	mdu.mutation.ClearRelationUID()
	return mdu
}

// SetRelationUname sets the "relation_uname" field.
func (mdu *MemberDetailsUpdate) SetRelationUname(s string) *MemberDetailsUpdate {
	mdu.mutation.SetRelationUname(s)
	return mdu
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableRelationUname(s *string) *MemberDetailsUpdate {
	if s != nil {
		mdu.SetRelationUname(*s)
	}
	return mdu
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (mdu *MemberDetailsUpdate) ClearRelationUname() *MemberDetailsUpdate {
	mdu.mutation.ClearRelationUname()
	return mdu
}

// SetRelationMid sets the "relation_mid" field.
func (mdu *MemberDetailsUpdate) SetRelationMid(i int64) *MemberDetailsUpdate {
	mdu.mutation.ResetRelationMid()
	mdu.mutation.SetRelationMid(i)
	return mdu
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableRelationMid(i *int64) *MemberDetailsUpdate {
	if i != nil {
		mdu.SetRelationMid(*i)
	}
	return mdu
}

// AddRelationMid adds i to the "relation_mid" field.
func (mdu *MemberDetailsUpdate) AddRelationMid(i int64) *MemberDetailsUpdate {
	mdu.mutation.AddRelationMid(i)
	return mdu
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (mdu *MemberDetailsUpdate) ClearRelationMid() *MemberDetailsUpdate {
	mdu.mutation.ClearRelationMid()
	return mdu
}

// SetRelationMame sets the "relation_mame" field.
func (mdu *MemberDetailsUpdate) SetRelationMame(s string) *MemberDetailsUpdate {
	mdu.mutation.SetRelationMame(s)
	return mdu
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (mdu *MemberDetailsUpdate) SetNillableRelationMame(s *string) *MemberDetailsUpdate {
	if s != nil {
		mdu.SetRelationMame(*s)
	}
	return mdu
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (mdu *MemberDetailsUpdate) ClearRelationMame() *MemberDetailsUpdate {
	mdu.mutation.ClearRelationMame()
	return mdu
}

// SetMember sets the "member" edge to the Member entity.
func (mdu *MemberDetailsUpdate) SetMember(m *Member) *MemberDetailsUpdate {
	return mdu.SetMemberID(m.ID)
}

// Mutation returns the MemberDetailsMutation object of the builder.
func (mdu *MemberDetailsUpdate) Mutation() *MemberDetailsMutation {
	return mdu.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mdu *MemberDetailsUpdate) ClearMember() *MemberDetailsUpdate {
	mdu.mutation.ClearMember()
	return mdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *MemberDetailsUpdate) Save(ctx context.Context) (int, error) {
	mdu.defaults()
	return withHooks(ctx, mdu.sqlSave, mdu.mutation, mdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MemberDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MemberDetailsUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MemberDetailsUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdu *MemberDetailsUpdate) defaults() {
	if _, ok := mdu.mutation.UpdatedAt(); !ok && !mdu.mutation.UpdatedAtCleared() {
		v := memberdetails.UpdateDefaultUpdatedAt()
		mdu.mutation.SetUpdatedAt(v)
	}
}

func (mdu *MemberDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberdetails.Table, memberdetails.Columns, sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64))
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdu.mutation.CreatedAtCleared() {
		_spec.ClearField(memberdetails.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mdu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if mdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberdetails.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mdu.mutation.Delete(); ok {
		_spec.SetField(memberdetails.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedDelete(); ok {
		_spec.AddField(memberdetails.FieldDelete, field.TypeInt64, value)
	}
	if mdu.mutation.DeleteCleared() {
		_spec.ClearField(memberdetails.FieldDelete, field.TypeInt64)
	}
	if value, ok := mdu.mutation.CreatedID(); ok {
		_spec.SetField(memberdetails.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberdetails.FieldCreatedID, field.TypeInt64, value)
	}
	if mdu.mutation.CreatedIDCleared() {
		_spec.ClearField(memberdetails.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mdu.mutation.MoneySum(); ok {
		_spec.SetField(memberdetails.FieldMoneySum, field.TypeFloat64, value)
	}
	if value, ok := mdu.mutation.AddedMoneySum(); ok {
		_spec.AddField(memberdetails.FieldMoneySum, field.TypeFloat64, value)
	}
	if mdu.mutation.MoneySumCleared() {
		_spec.ClearField(memberdetails.FieldMoneySum, field.TypeFloat64)
	}
	if value, ok := mdu.mutation.ProductID(); ok {
		_spec.SetField(memberdetails.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedProductID(); ok {
		_spec.AddField(memberdetails.FieldProductID, field.TypeInt64, value)
	}
	if mdu.mutation.ProductIDCleared() {
		_spec.ClearField(memberdetails.FieldProductID, field.TypeInt64)
	}
	if value, ok := mdu.mutation.ProductName(); ok {
		_spec.SetField(memberdetails.FieldProductName, field.TypeString, value)
	}
	if mdu.mutation.ProductNameCleared() {
		_spec.ClearField(memberdetails.FieldProductName, field.TypeString)
	}
	if value, ok := mdu.mutation.ProductVenue(); ok {
		_spec.SetField(memberdetails.FieldProductVenue, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedProductVenue(); ok {
		_spec.AddField(memberdetails.FieldProductVenue, field.TypeInt64, value)
	}
	if mdu.mutation.ProductVenueCleared() {
		_spec.ClearField(memberdetails.FieldProductVenue, field.TypeInt64)
	}
	if value, ok := mdu.mutation.ProductVenueName(); ok {
		_spec.SetField(memberdetails.FieldProductVenueName, field.TypeString, value)
	}
	if mdu.mutation.ProductVenueNameCleared() {
		_spec.ClearField(memberdetails.FieldProductVenueName, field.TypeString)
	}
	if value, ok := mdu.mutation.EntrySum(); ok {
		_spec.SetField(memberdetails.FieldEntrySum, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedEntrySum(); ok {
		_spec.AddField(memberdetails.FieldEntrySum, field.TypeInt64, value)
	}
	if mdu.mutation.EntrySumCleared() {
		_spec.ClearField(memberdetails.FieldEntrySum, field.TypeInt64)
	}
	if value, ok := mdu.mutation.EntryLastTime(); ok {
		_spec.SetField(memberdetails.FieldEntryLastTime, field.TypeTime, value)
	}
	if mdu.mutation.EntryLastTimeCleared() {
		_spec.ClearField(memberdetails.FieldEntryLastTime, field.TypeTime)
	}
	if value, ok := mdu.mutation.EntryDeadlineTime(); ok {
		_spec.SetField(memberdetails.FieldEntryDeadlineTime, field.TypeTime, value)
	}
	if mdu.mutation.EntryDeadlineTimeCleared() {
		_spec.ClearField(memberdetails.FieldEntryDeadlineTime, field.TypeTime)
	}
	if value, ok := mdu.mutation.ClassLastTime(); ok {
		_spec.SetField(memberdetails.FieldClassLastTime, field.TypeTime, value)
	}
	if mdu.mutation.ClassLastTimeCleared() {
		_spec.ClearField(memberdetails.FieldClassLastTime, field.TypeTime)
	}
	if value, ok := mdu.mutation.RelationUID(); ok {
		_spec.SetField(memberdetails.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedRelationUID(); ok {
		_spec.AddField(memberdetails.FieldRelationUID, field.TypeInt64, value)
	}
	if mdu.mutation.RelationUIDCleared() {
		_spec.ClearField(memberdetails.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := mdu.mutation.RelationUname(); ok {
		_spec.SetField(memberdetails.FieldRelationUname, field.TypeString, value)
	}
	if mdu.mutation.RelationUnameCleared() {
		_spec.ClearField(memberdetails.FieldRelationUname, field.TypeString)
	}
	if value, ok := mdu.mutation.RelationMid(); ok {
		_spec.SetField(memberdetails.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := mdu.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberdetails.FieldRelationMid, field.TypeInt64, value)
	}
	if mdu.mutation.RelationMidCleared() {
		_spec.ClearField(memberdetails.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := mdu.mutation.RelationMame(); ok {
		_spec.SetField(memberdetails.FieldRelationMame, field.TypeString, value)
	}
	if mdu.mutation.RelationMameCleared() {
		_spec.ClearField(memberdetails.FieldRelationMame, field.TypeString)
	}
	if mdu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberdetails.MemberTable,
			Columns: []string{memberdetails.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberdetails.MemberTable,
			Columns: []string{memberdetails.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdu.mutation.done = true
	return n, nil
}

// MemberDetailsUpdateOne is the builder for updating a single MemberDetails entity.
type MemberDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberDetailsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mduo *MemberDetailsUpdateOne) SetUpdatedAt(t time.Time) *MemberDetailsUpdateOne {
	mduo.mutation.SetUpdatedAt(t)
	return mduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mduo *MemberDetailsUpdateOne) ClearUpdatedAt() *MemberDetailsUpdateOne {
	mduo.mutation.ClearUpdatedAt()
	return mduo
}

// SetDelete sets the "delete" field.
func (mduo *MemberDetailsUpdateOne) SetDelete(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetDelete()
	mduo.mutation.SetDelete(i)
	return mduo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableDelete(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetDelete(*i)
	}
	return mduo
}

// AddDelete adds i to the "delete" field.
func (mduo *MemberDetailsUpdateOne) AddDelete(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddDelete(i)
	return mduo
}

// ClearDelete clears the value of the "delete" field.
func (mduo *MemberDetailsUpdateOne) ClearDelete() *MemberDetailsUpdateOne {
	mduo.mutation.ClearDelete()
	return mduo
}

// SetCreatedID sets the "created_id" field.
func (mduo *MemberDetailsUpdateOne) SetCreatedID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetCreatedID()
	mduo.mutation.SetCreatedID(i)
	return mduo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableCreatedID(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetCreatedID(*i)
	}
	return mduo
}

// AddCreatedID adds i to the "created_id" field.
func (mduo *MemberDetailsUpdateOne) AddCreatedID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddCreatedID(i)
	return mduo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mduo *MemberDetailsUpdateOne) ClearCreatedID() *MemberDetailsUpdateOne {
	mduo.mutation.ClearCreatedID()
	return mduo
}

// SetMemberID sets the "member_id" field.
func (mduo *MemberDetailsUpdateOne) SetMemberID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.SetMemberID(i)
	return mduo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableMemberID(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetMemberID(*i)
	}
	return mduo
}

// ClearMemberID clears the value of the "member_id" field.
func (mduo *MemberDetailsUpdateOne) ClearMemberID() *MemberDetailsUpdateOne {
	mduo.mutation.ClearMemberID()
	return mduo
}

// SetMoneySum sets the "money_sum" field.
func (mduo *MemberDetailsUpdateOne) SetMoneySum(f float64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetMoneySum()
	mduo.mutation.SetMoneySum(f)
	return mduo
}

// SetNillableMoneySum sets the "money_sum" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableMoneySum(f *float64) *MemberDetailsUpdateOne {
	if f != nil {
		mduo.SetMoneySum(*f)
	}
	return mduo
}

// AddMoneySum adds f to the "money_sum" field.
func (mduo *MemberDetailsUpdateOne) AddMoneySum(f float64) *MemberDetailsUpdateOne {
	mduo.mutation.AddMoneySum(f)
	return mduo
}

// ClearMoneySum clears the value of the "money_sum" field.
func (mduo *MemberDetailsUpdateOne) ClearMoneySum() *MemberDetailsUpdateOne {
	mduo.mutation.ClearMoneySum()
	return mduo
}

// SetProductID sets the "product_id" field.
func (mduo *MemberDetailsUpdateOne) SetProductID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetProductID()
	mduo.mutation.SetProductID(i)
	return mduo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableProductID(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetProductID(*i)
	}
	return mduo
}

// AddProductID adds i to the "product_id" field.
func (mduo *MemberDetailsUpdateOne) AddProductID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddProductID(i)
	return mduo
}

// ClearProductID clears the value of the "product_id" field.
func (mduo *MemberDetailsUpdateOne) ClearProductID() *MemberDetailsUpdateOne {
	mduo.mutation.ClearProductID()
	return mduo
}

// SetProductName sets the "product_name" field.
func (mduo *MemberDetailsUpdateOne) SetProductName(s string) *MemberDetailsUpdateOne {
	mduo.mutation.SetProductName(s)
	return mduo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableProductName(s *string) *MemberDetailsUpdateOne {
	if s != nil {
		mduo.SetProductName(*s)
	}
	return mduo
}

// ClearProductName clears the value of the "product_name" field.
func (mduo *MemberDetailsUpdateOne) ClearProductName() *MemberDetailsUpdateOne {
	mduo.mutation.ClearProductName()
	return mduo
}

// SetProductVenue sets the "product_venue" field.
func (mduo *MemberDetailsUpdateOne) SetProductVenue(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetProductVenue()
	mduo.mutation.SetProductVenue(i)
	return mduo
}

// SetNillableProductVenue sets the "product_venue" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableProductVenue(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetProductVenue(*i)
	}
	return mduo
}

// AddProductVenue adds i to the "product_venue" field.
func (mduo *MemberDetailsUpdateOne) AddProductVenue(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddProductVenue(i)
	return mduo
}

// ClearProductVenue clears the value of the "product_venue" field.
func (mduo *MemberDetailsUpdateOne) ClearProductVenue() *MemberDetailsUpdateOne {
	mduo.mutation.ClearProductVenue()
	return mduo
}

// SetProductVenueName sets the "product_venue_name" field.
func (mduo *MemberDetailsUpdateOne) SetProductVenueName(s string) *MemberDetailsUpdateOne {
	mduo.mutation.SetProductVenueName(s)
	return mduo
}

// SetNillableProductVenueName sets the "product_venue_name" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableProductVenueName(s *string) *MemberDetailsUpdateOne {
	if s != nil {
		mduo.SetProductVenueName(*s)
	}
	return mduo
}

// ClearProductVenueName clears the value of the "product_venue_name" field.
func (mduo *MemberDetailsUpdateOne) ClearProductVenueName() *MemberDetailsUpdateOne {
	mduo.mutation.ClearProductVenueName()
	return mduo
}

// SetEntrySum sets the "entry_sum" field.
func (mduo *MemberDetailsUpdateOne) SetEntrySum(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetEntrySum()
	mduo.mutation.SetEntrySum(i)
	return mduo
}

// SetNillableEntrySum sets the "entry_sum" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableEntrySum(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetEntrySum(*i)
	}
	return mduo
}

// AddEntrySum adds i to the "entry_sum" field.
func (mduo *MemberDetailsUpdateOne) AddEntrySum(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddEntrySum(i)
	return mduo
}

// ClearEntrySum clears the value of the "entry_sum" field.
func (mduo *MemberDetailsUpdateOne) ClearEntrySum() *MemberDetailsUpdateOne {
	mduo.mutation.ClearEntrySum()
	return mduo
}

// SetEntryLastTime sets the "entry_last_time" field.
func (mduo *MemberDetailsUpdateOne) SetEntryLastTime(t time.Time) *MemberDetailsUpdateOne {
	mduo.mutation.SetEntryLastTime(t)
	return mduo
}

// SetNillableEntryLastTime sets the "entry_last_time" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableEntryLastTime(t *time.Time) *MemberDetailsUpdateOne {
	if t != nil {
		mduo.SetEntryLastTime(*t)
	}
	return mduo
}

// ClearEntryLastTime clears the value of the "entry_last_time" field.
func (mduo *MemberDetailsUpdateOne) ClearEntryLastTime() *MemberDetailsUpdateOne {
	mduo.mutation.ClearEntryLastTime()
	return mduo
}

// SetEntryDeadlineTime sets the "entry_deadline_time" field.
func (mduo *MemberDetailsUpdateOne) SetEntryDeadlineTime(t time.Time) *MemberDetailsUpdateOne {
	mduo.mutation.SetEntryDeadlineTime(t)
	return mduo
}

// SetNillableEntryDeadlineTime sets the "entry_deadline_time" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableEntryDeadlineTime(t *time.Time) *MemberDetailsUpdateOne {
	if t != nil {
		mduo.SetEntryDeadlineTime(*t)
	}
	return mduo
}

// ClearEntryDeadlineTime clears the value of the "entry_deadline_time" field.
func (mduo *MemberDetailsUpdateOne) ClearEntryDeadlineTime() *MemberDetailsUpdateOne {
	mduo.mutation.ClearEntryDeadlineTime()
	return mduo
}

// SetClassLastTime sets the "class_last_time" field.
func (mduo *MemberDetailsUpdateOne) SetClassLastTime(t time.Time) *MemberDetailsUpdateOne {
	mduo.mutation.SetClassLastTime(t)
	return mduo
}

// SetNillableClassLastTime sets the "class_last_time" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableClassLastTime(t *time.Time) *MemberDetailsUpdateOne {
	if t != nil {
		mduo.SetClassLastTime(*t)
	}
	return mduo
}

// ClearClassLastTime clears the value of the "class_last_time" field.
func (mduo *MemberDetailsUpdateOne) ClearClassLastTime() *MemberDetailsUpdateOne {
	mduo.mutation.ClearClassLastTime()
	return mduo
}

// SetRelationUID sets the "relation_uid" field.
func (mduo *MemberDetailsUpdateOne) SetRelationUID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetRelationUID()
	mduo.mutation.SetRelationUID(i)
	return mduo
}

// SetNillableRelationUID sets the "relation_uid" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableRelationUID(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetRelationUID(*i)
	}
	return mduo
}

// AddRelationUID adds i to the "relation_uid" field.
func (mduo *MemberDetailsUpdateOne) AddRelationUID(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddRelationUID(i)
	return mduo
}

// ClearRelationUID clears the value of the "relation_uid" field.
func (mduo *MemberDetailsUpdateOne) ClearRelationUID() *MemberDetailsUpdateOne {
	mduo.mutation.ClearRelationUID()
	return mduo
}

// SetRelationUname sets the "relation_uname" field.
func (mduo *MemberDetailsUpdateOne) SetRelationUname(s string) *MemberDetailsUpdateOne {
	mduo.mutation.SetRelationUname(s)
	return mduo
}

// SetNillableRelationUname sets the "relation_uname" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableRelationUname(s *string) *MemberDetailsUpdateOne {
	if s != nil {
		mduo.SetRelationUname(*s)
	}
	return mduo
}

// ClearRelationUname clears the value of the "relation_uname" field.
func (mduo *MemberDetailsUpdateOne) ClearRelationUname() *MemberDetailsUpdateOne {
	mduo.mutation.ClearRelationUname()
	return mduo
}

// SetRelationMid sets the "relation_mid" field.
func (mduo *MemberDetailsUpdateOne) SetRelationMid(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.ResetRelationMid()
	mduo.mutation.SetRelationMid(i)
	return mduo
}

// SetNillableRelationMid sets the "relation_mid" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableRelationMid(i *int64) *MemberDetailsUpdateOne {
	if i != nil {
		mduo.SetRelationMid(*i)
	}
	return mduo
}

// AddRelationMid adds i to the "relation_mid" field.
func (mduo *MemberDetailsUpdateOne) AddRelationMid(i int64) *MemberDetailsUpdateOne {
	mduo.mutation.AddRelationMid(i)
	return mduo
}

// ClearRelationMid clears the value of the "relation_mid" field.
func (mduo *MemberDetailsUpdateOne) ClearRelationMid() *MemberDetailsUpdateOne {
	mduo.mutation.ClearRelationMid()
	return mduo
}

// SetRelationMame sets the "relation_mame" field.
func (mduo *MemberDetailsUpdateOne) SetRelationMame(s string) *MemberDetailsUpdateOne {
	mduo.mutation.SetRelationMame(s)
	return mduo
}

// SetNillableRelationMame sets the "relation_mame" field if the given value is not nil.
func (mduo *MemberDetailsUpdateOne) SetNillableRelationMame(s *string) *MemberDetailsUpdateOne {
	if s != nil {
		mduo.SetRelationMame(*s)
	}
	return mduo
}

// ClearRelationMame clears the value of the "relation_mame" field.
func (mduo *MemberDetailsUpdateOne) ClearRelationMame() *MemberDetailsUpdateOne {
	mduo.mutation.ClearRelationMame()
	return mduo
}

// SetMember sets the "member" edge to the Member entity.
func (mduo *MemberDetailsUpdateOne) SetMember(m *Member) *MemberDetailsUpdateOne {
	return mduo.SetMemberID(m.ID)
}

// Mutation returns the MemberDetailsMutation object of the builder.
func (mduo *MemberDetailsUpdateOne) Mutation() *MemberDetailsMutation {
	return mduo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (mduo *MemberDetailsUpdateOne) ClearMember() *MemberDetailsUpdateOne {
	mduo.mutation.ClearMember()
	return mduo
}

// Where appends a list predicates to the MemberDetailsUpdate builder.
func (mduo *MemberDetailsUpdateOne) Where(ps ...predicate.MemberDetails) *MemberDetailsUpdateOne {
	mduo.mutation.Where(ps...)
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *MemberDetailsUpdateOne) Select(field string, fields ...string) *MemberDetailsUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated MemberDetails entity.
func (mduo *MemberDetailsUpdateOne) Save(ctx context.Context) (*MemberDetails, error) {
	mduo.defaults()
	return withHooks(ctx, mduo.sqlSave, mduo.mutation, mduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MemberDetailsUpdateOne) SaveX(ctx context.Context) *MemberDetails {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MemberDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MemberDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mduo *MemberDetailsUpdateOne) defaults() {
	if _, ok := mduo.mutation.UpdatedAt(); !ok && !mduo.mutation.UpdatedAtCleared() {
		v := memberdetails.UpdateDefaultUpdatedAt()
		mduo.mutation.SetUpdatedAt(v)
	}
}

func (mduo *MemberDetailsUpdateOne) sqlSave(ctx context.Context) (_node *MemberDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberdetails.Table, memberdetails.Columns, sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64))
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberdetails.FieldID)
		for _, f := range fields {
			if !memberdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mduo.mutation.CreatedAtCleared() {
		_spec.ClearField(memberdetails.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mduo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if mduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(memberdetails.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mduo.mutation.Delete(); ok {
		_spec.SetField(memberdetails.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedDelete(); ok {
		_spec.AddField(memberdetails.FieldDelete, field.TypeInt64, value)
	}
	if mduo.mutation.DeleteCleared() {
		_spec.ClearField(memberdetails.FieldDelete, field.TypeInt64)
	}
	if value, ok := mduo.mutation.CreatedID(); ok {
		_spec.SetField(memberdetails.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedCreatedID(); ok {
		_spec.AddField(memberdetails.FieldCreatedID, field.TypeInt64, value)
	}
	if mduo.mutation.CreatedIDCleared() {
		_spec.ClearField(memberdetails.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mduo.mutation.MoneySum(); ok {
		_spec.SetField(memberdetails.FieldMoneySum, field.TypeFloat64, value)
	}
	if value, ok := mduo.mutation.AddedMoneySum(); ok {
		_spec.AddField(memberdetails.FieldMoneySum, field.TypeFloat64, value)
	}
	if mduo.mutation.MoneySumCleared() {
		_spec.ClearField(memberdetails.FieldMoneySum, field.TypeFloat64)
	}
	if value, ok := mduo.mutation.ProductID(); ok {
		_spec.SetField(memberdetails.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedProductID(); ok {
		_spec.AddField(memberdetails.FieldProductID, field.TypeInt64, value)
	}
	if mduo.mutation.ProductIDCleared() {
		_spec.ClearField(memberdetails.FieldProductID, field.TypeInt64)
	}
	if value, ok := mduo.mutation.ProductName(); ok {
		_spec.SetField(memberdetails.FieldProductName, field.TypeString, value)
	}
	if mduo.mutation.ProductNameCleared() {
		_spec.ClearField(memberdetails.FieldProductName, field.TypeString)
	}
	if value, ok := mduo.mutation.ProductVenue(); ok {
		_spec.SetField(memberdetails.FieldProductVenue, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedProductVenue(); ok {
		_spec.AddField(memberdetails.FieldProductVenue, field.TypeInt64, value)
	}
	if mduo.mutation.ProductVenueCleared() {
		_spec.ClearField(memberdetails.FieldProductVenue, field.TypeInt64)
	}
	if value, ok := mduo.mutation.ProductVenueName(); ok {
		_spec.SetField(memberdetails.FieldProductVenueName, field.TypeString, value)
	}
	if mduo.mutation.ProductVenueNameCleared() {
		_spec.ClearField(memberdetails.FieldProductVenueName, field.TypeString)
	}
	if value, ok := mduo.mutation.EntrySum(); ok {
		_spec.SetField(memberdetails.FieldEntrySum, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedEntrySum(); ok {
		_spec.AddField(memberdetails.FieldEntrySum, field.TypeInt64, value)
	}
	if mduo.mutation.EntrySumCleared() {
		_spec.ClearField(memberdetails.FieldEntrySum, field.TypeInt64)
	}
	if value, ok := mduo.mutation.EntryLastTime(); ok {
		_spec.SetField(memberdetails.FieldEntryLastTime, field.TypeTime, value)
	}
	if mduo.mutation.EntryLastTimeCleared() {
		_spec.ClearField(memberdetails.FieldEntryLastTime, field.TypeTime)
	}
	if value, ok := mduo.mutation.EntryDeadlineTime(); ok {
		_spec.SetField(memberdetails.FieldEntryDeadlineTime, field.TypeTime, value)
	}
	if mduo.mutation.EntryDeadlineTimeCleared() {
		_spec.ClearField(memberdetails.FieldEntryDeadlineTime, field.TypeTime)
	}
	if value, ok := mduo.mutation.ClassLastTime(); ok {
		_spec.SetField(memberdetails.FieldClassLastTime, field.TypeTime, value)
	}
	if mduo.mutation.ClassLastTimeCleared() {
		_spec.ClearField(memberdetails.FieldClassLastTime, field.TypeTime)
	}
	if value, ok := mduo.mutation.RelationUID(); ok {
		_spec.SetField(memberdetails.FieldRelationUID, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedRelationUID(); ok {
		_spec.AddField(memberdetails.FieldRelationUID, field.TypeInt64, value)
	}
	if mduo.mutation.RelationUIDCleared() {
		_spec.ClearField(memberdetails.FieldRelationUID, field.TypeInt64)
	}
	if value, ok := mduo.mutation.RelationUname(); ok {
		_spec.SetField(memberdetails.FieldRelationUname, field.TypeString, value)
	}
	if mduo.mutation.RelationUnameCleared() {
		_spec.ClearField(memberdetails.FieldRelationUname, field.TypeString)
	}
	if value, ok := mduo.mutation.RelationMid(); ok {
		_spec.SetField(memberdetails.FieldRelationMid, field.TypeInt64, value)
	}
	if value, ok := mduo.mutation.AddedRelationMid(); ok {
		_spec.AddField(memberdetails.FieldRelationMid, field.TypeInt64, value)
	}
	if mduo.mutation.RelationMidCleared() {
		_spec.ClearField(memberdetails.FieldRelationMid, field.TypeInt64)
	}
	if value, ok := mduo.mutation.RelationMame(); ok {
		_spec.SetField(memberdetails.FieldRelationMame, field.TypeString, value)
	}
	if mduo.mutation.RelationMameCleared() {
		_spec.ClearField(memberdetails.FieldRelationMame, field.TypeString)
	}
	if mduo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberdetails.MemberTable,
			Columns: []string{memberdetails.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberdetails.MemberTable,
			Columns: []string{memberdetails.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberDetails{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mduo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/community"
	"saas/biz/dal/db/ent/communityparticipant"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityParticipantUpdate is the builder for updating CommunityParticipant entities.
type CommunityParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityParticipantMutation
}

// Where appends a list predicates to the CommunityParticipantUpdate builder.
func (cpu *CommunityParticipantUpdate) Where(ps ...predicate.CommunityParticipant) *CommunityParticipantUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpu *CommunityParticipantUpdate) SetUpdatedAt(t time.Time) *CommunityParticipantUpdate {
	cpu.mutation.SetUpdatedAt(t)
	return cpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cpu *CommunityParticipantUpdate) ClearUpdatedAt() *CommunityParticipantUpdate {
	cpu.mutation.ClearUpdatedAt()
	return cpu
}

// SetDelete sets the "delete" field.
func (cpu *CommunityParticipantUpdate) SetDelete(i int64) *CommunityParticipantUpdate {
	cpu.mutation.ResetDelete()
	cpu.mutation.SetDelete(i)
	return cpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableDelete(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetDelete(*i)
	}
	return cpu
}

// AddDelete adds i to the "delete" field.
func (cpu *CommunityParticipantUpdate) AddDelete(i int64) *CommunityParticipantUpdate {
	cpu.mutation.AddDelete(i)
	return cpu
}

// ClearDelete clears the value of the "delete" field.
func (cpu *CommunityParticipantUpdate) ClearDelete() *CommunityParticipantUpdate {
	cpu.mutation.ClearDelete()
	return cpu
}

// SetCreatedID sets the "created_id" field.
func (cpu *CommunityParticipantUpdate) SetCreatedID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.ResetCreatedID()
	cpu.mutation.SetCreatedID(i)
	return cpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableCreatedID(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetCreatedID(*i)
	}
	return cpu
}

// AddCreatedID adds i to the "created_id" field.
func (cpu *CommunityParticipantUpdate) AddCreatedID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.AddCreatedID(i)
	return cpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (cpu *CommunityParticipantUpdate) ClearCreatedID() *CommunityParticipantUpdate {
	cpu.mutation.ClearCreatedID()
	return cpu
}

// SetStatus sets the "status" field.
func (cpu *CommunityParticipantUpdate) SetStatus(i int64) *CommunityParticipantUpdate {
	cpu.mutation.ResetStatus()
	cpu.mutation.SetStatus(i)
	return cpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableStatus(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetStatus(*i)
	}
	return cpu
}

// AddStatus adds i to the "status" field.
func (cpu *CommunityParticipantUpdate) AddStatus(i int64) *CommunityParticipantUpdate {
	cpu.mutation.AddStatus(i)
	return cpu
}

// ClearStatus clears the value of the "status" field.
func (cpu *CommunityParticipantUpdate) ClearStatus() *CommunityParticipantUpdate {
	cpu.mutation.ClearStatus()
	return cpu
}

// SetCommunityID sets the "community_id" field.
func (cpu *CommunityParticipantUpdate) SetCommunityID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.SetCommunityID(i)
	return cpu
}

// SetNillableCommunityID sets the "community_id" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableCommunityID(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetCommunityID(*i)
	}
	return cpu
}

// ClearCommunityID clears the value of the "community_id" field.
func (cpu *CommunityParticipantUpdate) ClearCommunityID() *CommunityParticipantUpdate {
	cpu.mutation.ClearCommunityID()
	return cpu
}

// SetName sets the "name" field.
func (cpu *CommunityParticipantUpdate) SetName(s string) *CommunityParticipantUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableName(s *string) *CommunityParticipantUpdate {
	if s != nil {
		cpu.SetName(*s)
	}
	return cpu
}

// ClearName clears the value of the "name" field.
func (cpu *CommunityParticipantUpdate) ClearName() *CommunityParticipantUpdate {
	cpu.mutation.ClearName()
	return cpu
}

// SetMobile sets the "mobile" field.
func (cpu *CommunityParticipantUpdate) SetMobile(s string) *CommunityParticipantUpdate {
	cpu.mutation.SetMobile(s)
	return cpu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableMobile(s *string) *CommunityParticipantUpdate {
	if s != nil {
		cpu.SetMobile(*s)
	}
	return cpu
}

// ClearMobile clears the value of the "mobile" field.
func (cpu *CommunityParticipantUpdate) ClearMobile() *CommunityParticipantUpdate {
	cpu.mutation.ClearMobile()
	return cpu
}

// SetFields sets the "fields" field.
func (cpu *CommunityParticipantUpdate) SetFields(s string) *CommunityParticipantUpdate {
	cpu.mutation.SetFields(s)
	return cpu
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableFields(s *string) *CommunityParticipantUpdate {
	if s != nil {
		cpu.SetFields(*s)
	}
	return cpu
}

// ClearFields clears the value of the "fields" field.
func (cpu *CommunityParticipantUpdate) ClearFields() *CommunityParticipantUpdate {
	cpu.mutation.ClearFields()
	return cpu
}

// SetOrderID sets the "order_id" field.
func (cpu *CommunityParticipantUpdate) SetOrderID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.ResetOrderID()
	cpu.mutation.SetOrderID(i)
	return cpu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableOrderID(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetOrderID(*i)
	}
	return cpu
}

// AddOrderID adds i to the "order_id" field.
func (cpu *CommunityParticipantUpdate) AddOrderID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.AddOrderID(i)
	return cpu
}

// ClearOrderID clears the value of the "order_id" field.
func (cpu *CommunityParticipantUpdate) ClearOrderID() *CommunityParticipantUpdate {
	cpu.mutation.ClearOrderID()
	return cpu
}

// SetOrderSn sets the "order_sn" field.
func (cpu *CommunityParticipantUpdate) SetOrderSn(s string) *CommunityParticipantUpdate {
	cpu.mutation.SetOrderSn(s)
	return cpu
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableOrderSn(s *string) *CommunityParticipantUpdate {
	if s != nil {
		cpu.SetOrderSn(*s)
	}
	return cpu
}

// ClearOrderSn clears the value of the "order_sn" field.
func (cpu *CommunityParticipantUpdate) ClearOrderSn() *CommunityParticipantUpdate {
	cpu.mutation.ClearOrderSn()
	return cpu
}

// SetFee sets the "fee" field.
func (cpu *CommunityParticipantUpdate) SetFee(f float64) *CommunityParticipantUpdate {
	cpu.mutation.ResetFee()
	cpu.mutation.SetFee(f)
	return cpu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableFee(f *float64) *CommunityParticipantUpdate {
	if f != nil {
		cpu.SetFee(*f)
	}
	return cpu
}

// AddFee adds f to the "fee" field.
func (cpu *CommunityParticipantUpdate) AddFee(f float64) *CommunityParticipantUpdate {
	cpu.mutation.AddFee(f)
	return cpu
}

// ClearFee clears the value of the "fee" field.
func (cpu *CommunityParticipantUpdate) ClearFee() *CommunityParticipantUpdate {
	cpu.mutation.ClearFee()
	return cpu
}

// SetMemberID sets the "member_id" field.
func (cpu *CommunityParticipantUpdate) SetMemberID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.ResetMemberID()
	cpu.mutation.SetMemberID(i)
	return cpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cpu *CommunityParticipantUpdate) SetNillableMemberID(i *int64) *CommunityParticipantUpdate {
	if i != nil {
		cpu.SetMemberID(*i)
	}
	return cpu
}

// AddMemberID adds i to the "member_id" field.
func (cpu *CommunityParticipantUpdate) AddMemberID(i int64) *CommunityParticipantUpdate {
	cpu.mutation.AddMemberID(i)
	return cpu
}

// ClearMemberID clears the value of the "member_id" field.
func (cpu *CommunityParticipantUpdate) ClearMemberID() *CommunityParticipantUpdate {
	cpu.mutation.ClearMemberID()
	return cpu
}

// SetCommunity sets the "community" edge to the Community entity.
func (cpu *CommunityParticipantUpdate) SetCommunity(c *Community) *CommunityParticipantUpdate {
	return cpu.SetCommunityID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (cpu *CommunityParticipantUpdate) AddMemberIDs(ids ...int64) *CommunityParticipantUpdate {
	cpu.mutation.AddMemberIDs(ids...)
	return cpu
}

// AddMembers adds the "members" edges to the Member entity.
func (cpu *CommunityParticipantUpdate) AddMembers(m ...*Member) *CommunityParticipantUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cpu.AddMemberIDs(ids...)
}

// Mutation returns the CommunityParticipantMutation object of the builder.
func (cpu *CommunityParticipantUpdate) Mutation() *CommunityParticipantMutation {
	return cpu.mutation
}

// ClearCommunity clears the "community" edge to the Community entity.
func (cpu *CommunityParticipantUpdate) ClearCommunity() *CommunityParticipantUpdate {
	cpu.mutation.ClearCommunity()
	return cpu
}

// ClearMembers clears all "members" edges to the Member entity.
func (cpu *CommunityParticipantUpdate) ClearMembers() *CommunityParticipantUpdate {
	cpu.mutation.ClearMembers()
	return cpu
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (cpu *CommunityParticipantUpdate) RemoveMemberIDs(ids ...int64) *CommunityParticipantUpdate {
	cpu.mutation.RemoveMemberIDs(ids...)
	return cpu
}

// RemoveMembers removes "members" edges to Member entities.
func (cpu *CommunityParticipantUpdate) RemoveMembers(m ...*Member) *CommunityParticipantUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cpu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CommunityParticipantUpdate) Save(ctx context.Context) (int, error) {
	cpu.defaults()
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CommunityParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CommunityParticipantUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CommunityParticipantUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpu *CommunityParticipantUpdate) defaults() {
	if _, ok := cpu.mutation.UpdatedAt(); !ok && !cpu.mutation.UpdatedAtCleared() {
		v := communityparticipant.UpdateDefaultUpdatedAt()
		cpu.mutation.SetUpdatedAt(v)
	}
}

func (cpu *CommunityParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(communityparticipant.Table, communityparticipant.Columns, sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cpu.mutation.CreatedAtCleared() {
		_spec.ClearField(communityparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.SetField(communityparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if cpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(communityparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cpu.mutation.Delete(); ok {
		_spec.SetField(communityparticipant.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedDelete(); ok {
		_spec.AddField(communityparticipant.FieldDelete, field.TypeInt64, value)
	}
	if cpu.mutation.DeleteCleared() {
		_spec.ClearField(communityparticipant.FieldDelete, field.TypeInt64)
	}
	if value, ok := cpu.mutation.CreatedID(); ok {
		_spec.SetField(communityparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(communityparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if cpu.mutation.CreatedIDCleared() {
		_spec.ClearField(communityparticipant.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cpu.mutation.Status(); ok {
		_spec.SetField(communityparticipant.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedStatus(); ok {
		_spec.AddField(communityparticipant.FieldStatus, field.TypeInt64, value)
	}
	if cpu.mutation.StatusCleared() {
		_spec.ClearField(communityparticipant.FieldStatus, field.TypeInt64)
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.SetField(communityparticipant.FieldName, field.TypeString, value)
	}
	if cpu.mutation.NameCleared() {
		_spec.ClearField(communityparticipant.FieldName, field.TypeString)
	}
	if value, ok := cpu.mutation.Mobile(); ok {
		_spec.SetField(communityparticipant.FieldMobile, field.TypeString, value)
	}
	if cpu.mutation.MobileCleared() {
		_spec.ClearField(communityparticipant.FieldMobile, field.TypeString)
	}
	if value, ok := cpu.mutation.GetFields(); ok {
		_spec.SetField(communityparticipant.FieldFields, field.TypeString, value)
	}
	if cpu.mutation.FieldsCleared() {
		_spec.ClearField(communityparticipant.FieldFields, field.TypeString)
	}
	if value, ok := cpu.mutation.OrderID(); ok {
		_spec.SetField(communityparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedOrderID(); ok {
		_spec.AddField(communityparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if cpu.mutation.OrderIDCleared() {
		_spec.ClearField(communityparticipant.FieldOrderID, field.TypeInt64)
	}
	if value, ok := cpu.mutation.OrderSn(); ok {
		_spec.SetField(communityparticipant.FieldOrderSn, field.TypeString, value)
	}
	if cpu.mutation.OrderSnCleared() {
		_spec.ClearField(communityparticipant.FieldOrderSn, field.TypeString)
	}
	if value, ok := cpu.mutation.Fee(); ok {
		_spec.SetField(communityparticipant.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := cpu.mutation.AddedFee(); ok {
		_spec.AddField(communityparticipant.FieldFee, field.TypeFloat64, value)
	}
	if cpu.mutation.FeeCleared() {
		_spec.ClearField(communityparticipant.FieldFee, field.TypeFloat64)
	}
	if value, ok := cpu.mutation.MemberID(); ok {
		_spec.SetField(communityparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedMemberID(); ok {
		_spec.AddField(communityparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if cpu.mutation.MemberIDCleared() {
		_spec.ClearField(communityparticipant.FieldMemberID, field.TypeInt64)
	}
	if cpu.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communityparticipant.CommunityTable,
			Columns: []string{communityparticipant.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpu.schemaConfig.CommunityParticipant
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communityparticipant.CommunityTable,
			Columns: []string{communityparticipant.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpu.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpu.schemaConfig.MemberMemberCommunitys
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cpu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpu.schemaConfig.MemberMemberCommunitys
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpu.schemaConfig.MemberMemberCommunitys
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cpu.schemaConfig.CommunityParticipant
	ctx = internal.NewSchemaConfigContext(ctx, cpu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communityparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CommunityParticipantUpdateOne is the builder for updating a single CommunityParticipant entity.
type CommunityParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityParticipantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuo *CommunityParticipantUpdateOne) SetUpdatedAt(t time.Time) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetUpdatedAt(t)
	return cpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cpuo *CommunityParticipantUpdateOne) ClearUpdatedAt() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearUpdatedAt()
	return cpuo
}

// SetDelete sets the "delete" field.
func (cpuo *CommunityParticipantUpdateOne) SetDelete(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetDelete()
	cpuo.mutation.SetDelete(i)
	return cpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableDelete(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetDelete(*i)
	}
	return cpuo
}

// AddDelete adds i to the "delete" field.
func (cpuo *CommunityParticipantUpdateOne) AddDelete(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddDelete(i)
	return cpuo
}

// ClearDelete clears the value of the "delete" field.
func (cpuo *CommunityParticipantUpdateOne) ClearDelete() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearDelete()
	return cpuo
}

// SetCreatedID sets the "created_id" field.
func (cpuo *CommunityParticipantUpdateOne) SetCreatedID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetCreatedID()
	cpuo.mutation.SetCreatedID(i)
	return cpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableCreatedID(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetCreatedID(*i)
	}
	return cpuo
}

// AddCreatedID adds i to the "created_id" field.
func (cpuo *CommunityParticipantUpdateOne) AddCreatedID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddCreatedID(i)
	return cpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (cpuo *CommunityParticipantUpdateOne) ClearCreatedID() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearCreatedID()
	return cpuo
}

// SetStatus sets the "status" field.
func (cpuo *CommunityParticipantUpdateOne) SetStatus(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetStatus()
	cpuo.mutation.SetStatus(i)
	return cpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableStatus(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetStatus(*i)
	}
	return cpuo
}

// AddStatus adds i to the "status" field.
func (cpuo *CommunityParticipantUpdateOne) AddStatus(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddStatus(i)
	return cpuo
}

// ClearStatus clears the value of the "status" field.
func (cpuo *CommunityParticipantUpdateOne) ClearStatus() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearStatus()
	return cpuo
}

// SetCommunityID sets the "community_id" field.
func (cpuo *CommunityParticipantUpdateOne) SetCommunityID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetCommunityID(i)
	return cpuo
}

// SetNillableCommunityID sets the "community_id" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableCommunityID(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetCommunityID(*i)
	}
	return cpuo
}

// ClearCommunityID clears the value of the "community_id" field.
func (cpuo *CommunityParticipantUpdateOne) ClearCommunityID() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearCommunityID()
	return cpuo
}

// SetName sets the "name" field.
func (cpuo *CommunityParticipantUpdateOne) SetName(s string) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableName(s *string) *CommunityParticipantUpdateOne {
	if s != nil {
		cpuo.SetName(*s)
	}
	return cpuo
}

// ClearName clears the value of the "name" field.
func (cpuo *CommunityParticipantUpdateOne) ClearName() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearName()
	return cpuo
}

// SetMobile sets the "mobile" field.
func (cpuo *CommunityParticipantUpdateOne) SetMobile(s string) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetMobile(s)
	return cpuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableMobile(s *string) *CommunityParticipantUpdateOne {
	if s != nil {
		cpuo.SetMobile(*s)
	}
	return cpuo
}

// ClearMobile clears the value of the "mobile" field.
func (cpuo *CommunityParticipantUpdateOne) ClearMobile() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearMobile()
	return cpuo
}

// SetFields sets the "fields" field.
func (cpuo *CommunityParticipantUpdateOne) SetFields(s string) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetFields(s)
	return cpuo
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableFields(s *string) *CommunityParticipantUpdateOne {
	if s != nil {
		cpuo.SetFields(*s)
	}
	return cpuo
}

// ClearFields clears the value of the "fields" field.
func (cpuo *CommunityParticipantUpdateOne) ClearFields() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearFields()
	return cpuo
}

// SetOrderID sets the "order_id" field.
func (cpuo *CommunityParticipantUpdateOne) SetOrderID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetOrderID()
	cpuo.mutation.SetOrderID(i)
	return cpuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableOrderID(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetOrderID(*i)
	}
	return cpuo
}

// AddOrderID adds i to the "order_id" field.
func (cpuo *CommunityParticipantUpdateOne) AddOrderID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddOrderID(i)
	return cpuo
}

// ClearOrderID clears the value of the "order_id" field.
func (cpuo *CommunityParticipantUpdateOne) ClearOrderID() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearOrderID()
	return cpuo
}

// SetOrderSn sets the "order_sn" field.
func (cpuo *CommunityParticipantUpdateOne) SetOrderSn(s string) *CommunityParticipantUpdateOne {
	cpuo.mutation.SetOrderSn(s)
	return cpuo
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableOrderSn(s *string) *CommunityParticipantUpdateOne {
	if s != nil {
		cpuo.SetOrderSn(*s)
	}
	return cpuo
}

// ClearOrderSn clears the value of the "order_sn" field.
func (cpuo *CommunityParticipantUpdateOne) ClearOrderSn() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearOrderSn()
	return cpuo
}

// SetFee sets the "fee" field.
func (cpuo *CommunityParticipantUpdateOne) SetFee(f float64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetFee()
	cpuo.mutation.SetFee(f)
	return cpuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableFee(f *float64) *CommunityParticipantUpdateOne {
	if f != nil {
		cpuo.SetFee(*f)
	}
	return cpuo
}

// AddFee adds f to the "fee" field.
func (cpuo *CommunityParticipantUpdateOne) AddFee(f float64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddFee(f)
	return cpuo
}

// ClearFee clears the value of the "fee" field.
func (cpuo *CommunityParticipantUpdateOne) ClearFee() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearFee()
	return cpuo
}

// SetMemberID sets the "member_id" field.
func (cpuo *CommunityParticipantUpdateOne) SetMemberID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.ResetMemberID()
	cpuo.mutation.SetMemberID(i)
	return cpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cpuo *CommunityParticipantUpdateOne) SetNillableMemberID(i *int64) *CommunityParticipantUpdateOne {
	if i != nil {
		cpuo.SetMemberID(*i)
	}
	return cpuo
}

// AddMemberID adds i to the "member_id" field.
func (cpuo *CommunityParticipantUpdateOne) AddMemberID(i int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddMemberID(i)
	return cpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (cpuo *CommunityParticipantUpdateOne) ClearMemberID() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearMemberID()
	return cpuo
}

// SetCommunity sets the "community" edge to the Community entity.
func (cpuo *CommunityParticipantUpdateOne) SetCommunity(c *Community) *CommunityParticipantUpdateOne {
	return cpuo.SetCommunityID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (cpuo *CommunityParticipantUpdateOne) AddMemberIDs(ids ...int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.AddMemberIDs(ids...)
	return cpuo
}

// AddMembers adds the "members" edges to the Member entity.
func (cpuo *CommunityParticipantUpdateOne) AddMembers(m ...*Member) *CommunityParticipantUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cpuo.AddMemberIDs(ids...)
}

// Mutation returns the CommunityParticipantMutation object of the builder.
func (cpuo *CommunityParticipantUpdateOne) Mutation() *CommunityParticipantMutation {
	return cpuo.mutation
}

// ClearCommunity clears the "community" edge to the Community entity.
func (cpuo *CommunityParticipantUpdateOne) ClearCommunity() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearCommunity()
	return cpuo
}

// ClearMembers clears all "members" edges to the Member entity.
func (cpuo *CommunityParticipantUpdateOne) ClearMembers() *CommunityParticipantUpdateOne {
	cpuo.mutation.ClearMembers()
	return cpuo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (cpuo *CommunityParticipantUpdateOne) RemoveMemberIDs(ids ...int64) *CommunityParticipantUpdateOne {
	cpuo.mutation.RemoveMemberIDs(ids...)
	return cpuo
}

// RemoveMembers removes "members" edges to Member entities.
func (cpuo *CommunityParticipantUpdateOne) RemoveMembers(m ...*Member) *CommunityParticipantUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cpuo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the CommunityParticipantUpdate builder.
func (cpuo *CommunityParticipantUpdateOne) Where(ps ...predicate.CommunityParticipant) *CommunityParticipantUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CommunityParticipantUpdateOne) Select(field string, fields ...string) *CommunityParticipantUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CommunityParticipant entity.
func (cpuo *CommunityParticipantUpdateOne) Save(ctx context.Context) (*CommunityParticipant, error) {
	cpuo.defaults()
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CommunityParticipantUpdateOne) SaveX(ctx context.Context) *CommunityParticipant {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CommunityParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CommunityParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuo *CommunityParticipantUpdateOne) defaults() {
	if _, ok := cpuo.mutation.UpdatedAt(); !ok && !cpuo.mutation.UpdatedAtCleared() {
		v := communityparticipant.UpdateDefaultUpdatedAt()
		cpuo.mutation.SetUpdatedAt(v)
	}
}

func (cpuo *CommunityParticipantUpdateOne) sqlSave(ctx context.Context) (_node *CommunityParticipant, err error) {
	_spec := sqlgraph.NewUpdateSpec(communityparticipant.Table, communityparticipant.Columns, sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommunityParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, communityparticipant.FieldID)
		for _, f := range fields {
			if !communityparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != communityparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(communityparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(communityparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if cpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(communityparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cpuo.mutation.Delete(); ok {
		_spec.SetField(communityparticipant.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedDelete(); ok {
		_spec.AddField(communityparticipant.FieldDelete, field.TypeInt64, value)
	}
	if cpuo.mutation.DeleteCleared() {
		_spec.ClearField(communityparticipant.FieldDelete, field.TypeInt64)
	}
	if value, ok := cpuo.mutation.CreatedID(); ok {
		_spec.SetField(communityparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(communityparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if cpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(communityparticipant.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cpuo.mutation.Status(); ok {
		_spec.SetField(communityparticipant.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedStatus(); ok {
		_spec.AddField(communityparticipant.FieldStatus, field.TypeInt64, value)
	}
	if cpuo.mutation.StatusCleared() {
		_spec.ClearField(communityparticipant.FieldStatus, field.TypeInt64)
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.SetField(communityparticipant.FieldName, field.TypeString, value)
	}
	if cpuo.mutation.NameCleared() {
		_spec.ClearField(communityparticipant.FieldName, field.TypeString)
	}
	if value, ok := cpuo.mutation.Mobile(); ok {
		_spec.SetField(communityparticipant.FieldMobile, field.TypeString, value)
	}
	if cpuo.mutation.MobileCleared() {
		_spec.ClearField(communityparticipant.FieldMobile, field.TypeString)
	}
	if value, ok := cpuo.mutation.GetFields(); ok {
		_spec.SetField(communityparticipant.FieldFields, field.TypeString, value)
	}
	if cpuo.mutation.FieldsCleared() {
		_spec.ClearField(communityparticipant.FieldFields, field.TypeString)
	}
	if value, ok := cpuo.mutation.OrderID(); ok {
		_spec.SetField(communityparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedOrderID(); ok {
		_spec.AddField(communityparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if cpuo.mutation.OrderIDCleared() {
		_spec.ClearField(communityparticipant.FieldOrderID, field.TypeInt64)
	}
	if value, ok := cpuo.mutation.OrderSn(); ok {
		_spec.SetField(communityparticipant.FieldOrderSn, field.TypeString, value)
	}
	if cpuo.mutation.OrderSnCleared() {
		_spec.ClearField(communityparticipant.FieldOrderSn, field.TypeString)
	}
	if value, ok := cpuo.mutation.Fee(); ok {
		_spec.SetField(communityparticipant.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := cpuo.mutation.AddedFee(); ok {
		_spec.AddField(communityparticipant.FieldFee, field.TypeFloat64, value)
	}
	if cpuo.mutation.FeeCleared() {
		_spec.ClearField(communityparticipant.FieldFee, field.TypeFloat64)
	}
	if value, ok := cpuo.mutation.MemberID(); ok {
		_spec.SetField(communityparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedMemberID(); ok {
		_spec.AddField(communityparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if cpuo.mutation.MemberIDCleared() {
		_spec.ClearField(communityparticipant.FieldMemberID, field.TypeInt64)
	}
	if cpuo.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communityparticipant.CommunityTable,
			Columns: []string{communityparticipant.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpuo.schemaConfig.CommunityParticipant
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communityparticipant.CommunityTable,
			Columns: []string{communityparticipant.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpuo.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpuo.schemaConfig.MemberMemberCommunitys
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cpuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpuo.schemaConfig.MemberMemberCommunitys
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpuo.schemaConfig.MemberMemberCommunitys
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cpuo.schemaConfig.CommunityParticipant
	ctx = internal.NewSchemaConfigContext(ctx, cpuo.schemaConfig)
	_node = &CommunityParticipant{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communityparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}

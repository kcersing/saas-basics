// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesmslog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueSmsLogCreate is the builder for creating a VenueSmsLog entity.
type VenueSmsLogCreate struct {
	config
	mutation *VenueSmsLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vslc *VenueSmsLogCreate) SetCreatedAt(t time.Time) *VenueSmsLogCreate {
	vslc.mutation.SetCreatedAt(t)
	return vslc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableCreatedAt(t *time.Time) *VenueSmsLogCreate {
	if t != nil {
		vslc.SetCreatedAt(*t)
	}
	return vslc
}

// SetUpdatedAt sets the "updated_at" field.
func (vslc *VenueSmsLogCreate) SetUpdatedAt(t time.Time) *VenueSmsLogCreate {
	vslc.mutation.SetUpdatedAt(t)
	return vslc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableUpdatedAt(t *time.Time) *VenueSmsLogCreate {
	if t != nil {
		vslc.SetUpdatedAt(*t)
	}
	return vslc
}

// SetDelete sets the "delete" field.
func (vslc *VenueSmsLogCreate) SetDelete(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetDelete(i)
	return vslc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableDelete(i *int64) *VenueSmsLogCreate {
	if i != nil {
		vslc.SetDelete(*i)
	}
	return vslc
}

// SetCreatedID sets the "created_id" field.
func (vslc *VenueSmsLogCreate) SetCreatedID(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetCreatedID(i)
	return vslc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableCreatedID(i *int64) *VenueSmsLogCreate {
	if i != nil {
		vslc.SetCreatedID(*i)
	}
	return vslc
}

// SetStatus sets the "status" field.
func (vslc *VenueSmsLogCreate) SetStatus(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetStatus(i)
	return vslc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableStatus(i *int64) *VenueSmsLogCreate {
	if i != nil {
		vslc.SetStatus(*i)
	}
	return vslc
}

// SetVenueID sets the "venue_id" field.
func (vslc *VenueSmsLogCreate) SetVenueID(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetVenueID(i)
	return vslc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableVenueID(i *int64) *VenueSmsLogCreate {
	if i != nil {
		vslc.SetVenueID(*i)
	}
	return vslc
}

// SetMobile sets the "mobile" field.
func (vslc *VenueSmsLogCreate) SetMobile(s string) *VenueSmsLogCreate {
	vslc.mutation.SetMobile(s)
	return vslc
}

// SetBizID sets the "biz_id" field.
func (vslc *VenueSmsLogCreate) SetBizID(s string) *VenueSmsLogCreate {
	vslc.mutation.SetBizID(s)
	return vslc
}

// SetCode sets the "code" field.
func (vslc *VenueSmsLogCreate) SetCode(s string) *VenueSmsLogCreate {
	vslc.mutation.SetCode(s)
	return vslc
}

// SetContent sets the "content" field.
func (vslc *VenueSmsLogCreate) SetContent(s string) *VenueSmsLogCreate {
	vslc.mutation.SetContent(s)
	return vslc
}

// SetNotifyType sets the "notify_type" field.
func (vslc *VenueSmsLogCreate) SetNotifyType(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetNotifyType(i)
	return vslc
}

// SetNillableNotifyType sets the "notify_type" field if the given value is not nil.
func (vslc *VenueSmsLogCreate) SetNillableNotifyType(i *int64) *VenueSmsLogCreate {
	if i != nil {
		vslc.SetNotifyType(*i)
	}
	return vslc
}

// SetTemplate sets the "template" field.
func (vslc *VenueSmsLogCreate) SetTemplate(s string) *VenueSmsLogCreate {
	vslc.mutation.SetTemplate(s)
	return vslc
}

// SetID sets the "id" field.
func (vslc *VenueSmsLogCreate) SetID(i int64) *VenueSmsLogCreate {
	vslc.mutation.SetID(i)
	return vslc
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vslc *VenueSmsLogCreate) SetVenue(v *Venue) *VenueSmsLogCreate {
	return vslc.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsLogMutation object of the builder.
func (vslc *VenueSmsLogCreate) Mutation() *VenueSmsLogMutation {
	return vslc.mutation
}

// Save creates the VenueSmsLog in the database.
func (vslc *VenueSmsLogCreate) Save(ctx context.Context) (*VenueSmsLog, error) {
	vslc.defaults()
	return withHooks(ctx, vslc.sqlSave, vslc.mutation, vslc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vslc *VenueSmsLogCreate) SaveX(ctx context.Context) *VenueSmsLog {
	v, err := vslc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vslc *VenueSmsLogCreate) Exec(ctx context.Context) error {
	_, err := vslc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vslc *VenueSmsLogCreate) ExecX(ctx context.Context) {
	if err := vslc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vslc *VenueSmsLogCreate) defaults() {
	if _, ok := vslc.mutation.CreatedAt(); !ok {
		v := venuesmslog.DefaultCreatedAt()
		vslc.mutation.SetCreatedAt(v)
	}
	if _, ok := vslc.mutation.UpdatedAt(); !ok {
		v := venuesmslog.DefaultUpdatedAt()
		vslc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vslc.mutation.Delete(); !ok {
		v := venuesmslog.DefaultDelete
		vslc.mutation.SetDelete(v)
	}
	if _, ok := vslc.mutation.CreatedID(); !ok {
		v := venuesmslog.DefaultCreatedID
		vslc.mutation.SetCreatedID(v)
	}
	if _, ok := vslc.mutation.Status(); !ok {
		v := venuesmslog.DefaultStatus
		vslc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vslc *VenueSmsLogCreate) check() error {
	if _, ok := vslc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "VenueSmsLog.mobile"`)}
	}
	if _, ok := vslc.mutation.BizID(); !ok {
		return &ValidationError{Name: "biz_id", err: errors.New(`ent: missing required field "VenueSmsLog.biz_id"`)}
	}
	if _, ok := vslc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "VenueSmsLog.code"`)}
	}
	if _, ok := vslc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "VenueSmsLog.content"`)}
	}
	if _, ok := vslc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required field "VenueSmsLog.template"`)}
	}
	return nil
}

func (vslc *VenueSmsLogCreate) sqlSave(ctx context.Context) (*VenueSmsLog, error) {
	if err := vslc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vslc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vslc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vslc.mutation.id = &_node.ID
	vslc.mutation.done = true
	return _node, nil
}

func (vslc *VenueSmsLogCreate) createSpec() (*VenueSmsLog, *sqlgraph.CreateSpec) {
	var (
		_node = &VenueSmsLog{config: vslc.config}
		_spec = sqlgraph.NewCreateSpec(venuesmslog.Table, sqlgraph.NewFieldSpec(venuesmslog.FieldID, field.TypeInt64))
	)
	_spec.Schema = vslc.schemaConfig.VenueSmsLog
	if id, ok := vslc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vslc.mutation.CreatedAt(); ok {
		_spec.SetField(venuesmslog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vslc.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesmslog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vslc.mutation.Delete(); ok {
		_spec.SetField(venuesmslog.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := vslc.mutation.CreatedID(); ok {
		_spec.SetField(venuesmslog.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := vslc.mutation.Status(); ok {
		_spec.SetField(venuesmslog.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := vslc.mutation.Mobile(); ok {
		_spec.SetField(venuesmslog.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := vslc.mutation.BizID(); ok {
		_spec.SetField(venuesmslog.FieldBizID, field.TypeString, value)
		_node.BizID = value
	}
	if value, ok := vslc.mutation.Code(); ok {
		_spec.SetField(venuesmslog.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := vslc.mutation.Content(); ok {
		_spec.SetField(venuesmslog.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := vslc.mutation.NotifyType(); ok {
		_spec.SetField(venuesmslog.FieldNotifyType, field.TypeInt64, value)
		_node.NotifyType = value
	}
	if value, ok := vslc.mutation.Template(); ok {
		_spec.SetField(venuesmslog.FieldTemplate, field.TypeString, value)
		_node.Template = value
	}
	if nodes := vslc.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesmslog.VenueTable,
			Columns: []string{venuesmslog.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vslc.schemaConfig.VenueSmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VenueID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VenueSmsLogCreateBulk is the builder for creating many VenueSmsLog entities in bulk.
type VenueSmsLogCreateBulk struct {
	config
	err      error
	builders []*VenueSmsLogCreate
}

// Save creates the VenueSmsLog entities in the database.
func (vslcb *VenueSmsLogCreateBulk) Save(ctx context.Context) ([]*VenueSmsLog, error) {
	if vslcb.err != nil {
		return nil, vslcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vslcb.builders))
	nodes := make([]*VenueSmsLog, len(vslcb.builders))
	mutators := make([]Mutator, len(vslcb.builders))
	for i := range vslcb.builders {
		func(i int, root context.Context) {
			builder := vslcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueSmsLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vslcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vslcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vslcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vslcb *VenueSmsLogCreateBulk) SaveX(ctx context.Context) []*VenueSmsLog {
	v, err := vslcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vslcb *VenueSmsLogCreateBulk) Exec(ctx context.Context) error {
	_, err := vslcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vslcb *VenueSmsLogCreateBulk) ExecX(ctx context.Context) {
	if err := vslcb.Exec(ctx); err != nil {
		panic(err)
	}
}

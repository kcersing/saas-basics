// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStatus, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldName, v))
}

// VenueID applies equality check predicate on the "venue_id" field. It's identical to VenueIDEQ.
func VenueID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldVenueID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldProductID, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldLength, v))
}

// PlaceID applies equality check predicate on the "place_id" field. It's identical to PlaceIDEQ.
func PlaceID(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPlaceID, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldNum, v))
}

// NumSurplus applies equality check predicate on the "num_surplus" field. It's identical to NumSurplusEQ.
func NumSurplus(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldNumSurplus, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldEndTime, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPrice, v))
}

// VenueName applies equality check predicate on the "venue_name" field. It's identical to VenueNameEQ.
func VenueName(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldVenueName, v))
}

// PlaceName applies equality check predicate on the "place_name" field. It's identical to PlaceNameEQ.
func PlaceName(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPlaceName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldStatus))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldName, v))
}

// VenueIDEQ applies the EQ predicate on the "venue_id" field.
func VenueIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldVenueID, v))
}

// VenueIDNEQ applies the NEQ predicate on the "venue_id" field.
func VenueIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldVenueID, v))
}

// VenueIDIn applies the In predicate on the "venue_id" field.
func VenueIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldVenueID, vs...))
}

// VenueIDNotIn applies the NotIn predicate on the "venue_id" field.
func VenueIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldVenueID, vs...))
}

// VenueIDGT applies the GT predicate on the "venue_id" field.
func VenueIDGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldVenueID, v))
}

// VenueIDGTE applies the GTE predicate on the "venue_id" field.
func VenueIDGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldVenueID, v))
}

// VenueIDLT applies the LT predicate on the "venue_id" field.
func VenueIDLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldVenueID, v))
}

// VenueIDLTE applies the LTE predicate on the "venue_id" field.
func VenueIDLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldVenueID, v))
}

// VenueIDIsNil applies the IsNil predicate on the "venue_id" field.
func VenueIDIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldVenueID))
}

// VenueIDNotNil applies the NotNil predicate on the "venue_id" field.
func VenueIDNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldVenueID))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldProductID))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldLength))
}

// PlaceIDEQ applies the EQ predicate on the "place_id" field.
func PlaceIDEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPlaceID, v))
}

// PlaceIDNEQ applies the NEQ predicate on the "place_id" field.
func PlaceIDNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldPlaceID, v))
}

// PlaceIDIn applies the In predicate on the "place_id" field.
func PlaceIDIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldPlaceID, vs...))
}

// PlaceIDNotIn applies the NotIn predicate on the "place_id" field.
func PlaceIDNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldPlaceID, vs...))
}

// PlaceIDGT applies the GT predicate on the "place_id" field.
func PlaceIDGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldPlaceID, v))
}

// PlaceIDGTE applies the GTE predicate on the "place_id" field.
func PlaceIDGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldPlaceID, v))
}

// PlaceIDLT applies the LT predicate on the "place_id" field.
func PlaceIDLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldPlaceID, v))
}

// PlaceIDLTE applies the LTE predicate on the "place_id" field.
func PlaceIDLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldPlaceID, v))
}

// PlaceIDIsNil applies the IsNil predicate on the "place_id" field.
func PlaceIDIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldPlaceID))
}

// PlaceIDNotNil applies the NotNil predicate on the "place_id" field.
func PlaceIDNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldPlaceID))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldNum, v))
}

// NumIsNil applies the IsNil predicate on the "num" field.
func NumIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldNum))
}

// NumNotNil applies the NotNil predicate on the "num" field.
func NumNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldNum))
}

// NumSurplusEQ applies the EQ predicate on the "num_surplus" field.
func NumSurplusEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldNumSurplus, v))
}

// NumSurplusNEQ applies the NEQ predicate on the "num_surplus" field.
func NumSurplusNEQ(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldNumSurplus, v))
}

// NumSurplusIn applies the In predicate on the "num_surplus" field.
func NumSurplusIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldNumSurplus, vs...))
}

// NumSurplusNotIn applies the NotIn predicate on the "num_surplus" field.
func NumSurplusNotIn(vs ...int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldNumSurplus, vs...))
}

// NumSurplusGT applies the GT predicate on the "num_surplus" field.
func NumSurplusGT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldNumSurplus, v))
}

// NumSurplusGTE applies the GTE predicate on the "num_surplus" field.
func NumSurplusGTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldNumSurplus, v))
}

// NumSurplusLT applies the LT predicate on the "num_surplus" field.
func NumSurplusLT(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldNumSurplus, v))
}

// NumSurplusLTE applies the LTE predicate on the "num_surplus" field.
func NumSurplusLTE(v int64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldNumSurplus, v))
}

// NumSurplusIsNil applies the IsNil predicate on the "num_surplus" field.
func NumSurplusIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldNumSurplus))
}

// NumSurplusNotNil applies the NotNil predicate on the "num_surplus" field.
func NumSurplusNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldNumSurplus))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldDate, v))
}

// DateIsNil applies the IsNil predicate on the "date" field.
func DateIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldDate))
}

// DateNotNil applies the NotNil predicate on the "date" field.
func DateNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldDate))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldEndTime))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldPrice))
}

// VenueNameEQ applies the EQ predicate on the "venue_name" field.
func VenueNameEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldVenueName, v))
}

// VenueNameNEQ applies the NEQ predicate on the "venue_name" field.
func VenueNameNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldVenueName, v))
}

// VenueNameIn applies the In predicate on the "venue_name" field.
func VenueNameIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldVenueName, vs...))
}

// VenueNameNotIn applies the NotIn predicate on the "venue_name" field.
func VenueNameNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldVenueName, vs...))
}

// VenueNameGT applies the GT predicate on the "venue_name" field.
func VenueNameGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldVenueName, v))
}

// VenueNameGTE applies the GTE predicate on the "venue_name" field.
func VenueNameGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldVenueName, v))
}

// VenueNameLT applies the LT predicate on the "venue_name" field.
func VenueNameLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldVenueName, v))
}

// VenueNameLTE applies the LTE predicate on the "venue_name" field.
func VenueNameLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldVenueName, v))
}

// VenueNameContains applies the Contains predicate on the "venue_name" field.
func VenueNameContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldVenueName, v))
}

// VenueNameHasPrefix applies the HasPrefix predicate on the "venue_name" field.
func VenueNameHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldVenueName, v))
}

// VenueNameHasSuffix applies the HasSuffix predicate on the "venue_name" field.
func VenueNameHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldVenueName, v))
}

// VenueNameIsNil applies the IsNil predicate on the "venue_name" field.
func VenueNameIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldVenueName))
}

// VenueNameNotNil applies the NotNil predicate on the "venue_name" field.
func VenueNameNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldVenueName))
}

// VenueNameEqualFold applies the EqualFold predicate on the "venue_name" field.
func VenueNameEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldVenueName, v))
}

// VenueNameContainsFold applies the ContainsFold predicate on the "venue_name" field.
func VenueNameContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldVenueName, v))
}

// PlaceNameEQ applies the EQ predicate on the "place_name" field.
func PlaceNameEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldPlaceName, v))
}

// PlaceNameNEQ applies the NEQ predicate on the "place_name" field.
func PlaceNameNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldPlaceName, v))
}

// PlaceNameIn applies the In predicate on the "place_name" field.
func PlaceNameIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldPlaceName, vs...))
}

// PlaceNameNotIn applies the NotIn predicate on the "place_name" field.
func PlaceNameNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldPlaceName, vs...))
}

// PlaceNameGT applies the GT predicate on the "place_name" field.
func PlaceNameGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldPlaceName, v))
}

// PlaceNameGTE applies the GTE predicate on the "place_name" field.
func PlaceNameGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldPlaceName, v))
}

// PlaceNameLT applies the LT predicate on the "place_name" field.
func PlaceNameLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldPlaceName, v))
}

// PlaceNameLTE applies the LTE predicate on the "place_name" field.
func PlaceNameLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldPlaceName, v))
}

// PlaceNameContains applies the Contains predicate on the "place_name" field.
func PlaceNameContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldPlaceName, v))
}

// PlaceNameHasPrefix applies the HasPrefix predicate on the "place_name" field.
func PlaceNameHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldPlaceName, v))
}

// PlaceNameHasSuffix applies the HasSuffix predicate on the "place_name" field.
func PlaceNameHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldPlaceName, v))
}

// PlaceNameIsNil applies the IsNil predicate on the "place_name" field.
func PlaceNameIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldPlaceName))
}

// PlaceNameNotNil applies the NotNil predicate on the "place_name" field.
func PlaceNameNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldPlaceName))
}

// PlaceNameEqualFold applies the EqualFold predicate on the "place_name" field.
func PlaceNameEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldPlaceName, v))
}

// PlaceNameContainsFold applies the ContainsFold predicate on the "place_name" field.
func PlaceNameContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldPlaceName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldRemark, v))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduleMember
		step.Edge.Schema = schemaConfig.ScheduleMember
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.ScheduleMember) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newMembersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduleMember
		step.Edge.Schema = schemaConfig.ScheduleMember
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoachs applies the HasEdge predicate on the "coachs" edge.
func HasCoachs() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CoachsTable, CoachsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduleCoach
		step.Edge.Schema = schemaConfig.ScheduleCoach
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoachsWith applies the HasEdge predicate on the "coachs" edge with a given conditions (other predicates).
func HasCoachsWith(preds ...predicate.ScheduleCoach) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newCoachsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduleCoach
		step.Edge.Schema = schemaConfig.ScheduleCoach
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.NotPredicates(p))
}

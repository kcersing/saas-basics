// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/product"
	"saas/biz/dal/db/ent/productcourses"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductCourses is the model entity for the ProductCourses schema.
type ProductCourses struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 课名
	Name string `json:"name,omitempty"`
	// 节数
	Number int64 `json:"number,omitempty"`
	// 产品名称
	ProductID int64 `json:"product_id,omitempty"`
	// 课名称
	CoursesID int64 `json:"courses_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductCoursesQuery when eager-loading is set.
	Edges        ProductCoursesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductCoursesEdges holds the relations/edges for other nodes in the graph.
type ProductCoursesEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductCoursesEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductCourses) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productcourses.FieldID, productcourses.FieldDelete, productcourses.FieldCreatedID, productcourses.FieldStatus, productcourses.FieldNumber, productcourses.FieldProductID, productcourses.FieldCoursesID:
			values[i] = new(sql.NullInt64)
		case productcourses.FieldType, productcourses.FieldName:
			values[i] = new(sql.NullString)
		case productcourses.FieldCreatedAt, productcourses.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductCourses fields.
func (pc *ProductCourses) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productcourses.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int64(value.Int64)
		case productcourses.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case productcourses.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case productcourses.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				pc.Delete = value.Int64
			}
		case productcourses.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				pc.CreatedID = value.Int64
			}
		case productcourses.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pc.Status = value.Int64
			}
		case productcourses.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pc.Type = value.String
			}
		case productcourses.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case productcourses.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pc.Number = value.Int64
			}
		case productcourses.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pc.ProductID = value.Int64
			}
		case productcourses.FieldCoursesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field courses_id", values[i])
			} else if value.Valid {
				pc.CoursesID = value.Int64
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductCourses.
// This includes values selected through modifiers, order, etc.
func (pc *ProductCourses) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductCourses entity.
func (pc *ProductCourses) QueryProduct() *ProductQuery {
	return NewProductCoursesClient(pc.config).QueryProduct(pc)
}

// Update returns a builder for updating this ProductCourses.
// Note that you need to call ProductCourses.Unwrap() before calling this method if this ProductCourses
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProductCourses) Update() *ProductCoursesUpdateOne {
	return NewProductCoursesClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProductCourses entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProductCourses) Unwrap() *ProductCourses {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductCourses is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProductCourses) String() string {
	var builder strings.Builder
	builder.WriteString("ProductCourses(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", pc.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pc.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pc.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", pc.Number))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.ProductID))
	builder.WriteString(", ")
	builder.WriteString("courses_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.CoursesID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductCoursesSlice is a parsable slice of ProductCourses.
type ProductCoursesSlice []*ProductCourses

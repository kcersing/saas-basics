// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membernote"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberNoteUpdate is the builder for updating MemberNote entities.
type MemberNoteUpdate struct {
	config
	hooks    []Hook
	mutation *MemberNoteMutation
}

// Where appends a list predicates to the MemberNoteUpdate builder.
func (mnu *MemberNoteUpdate) Where(ps ...predicate.MemberNote) *MemberNoteUpdate {
	mnu.mutation.Where(ps...)
	return mnu
}

// SetUpdatedAt sets the "updated_at" field.
func (mnu *MemberNoteUpdate) SetUpdatedAt(t time.Time) *MemberNoteUpdate {
	mnu.mutation.SetUpdatedAt(t)
	return mnu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mnu *MemberNoteUpdate) ClearUpdatedAt() *MemberNoteUpdate {
	mnu.mutation.ClearUpdatedAt()
	return mnu
}

// SetDelete sets the "delete" field.
func (mnu *MemberNoteUpdate) SetDelete(i int64) *MemberNoteUpdate {
	mnu.mutation.ResetDelete()
	mnu.mutation.SetDelete(i)
	return mnu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableDelete(i *int64) *MemberNoteUpdate {
	if i != nil {
		mnu.SetDelete(*i)
	}
	return mnu
}

// AddDelete adds i to the "delete" field.
func (mnu *MemberNoteUpdate) AddDelete(i int64) *MemberNoteUpdate {
	mnu.mutation.AddDelete(i)
	return mnu
}

// ClearDelete clears the value of the "delete" field.
func (mnu *MemberNoteUpdate) ClearDelete() *MemberNoteUpdate {
	mnu.mutation.ClearDelete()
	return mnu
}

// SetCreatedID sets the "created_id" field.
func (mnu *MemberNoteUpdate) SetCreatedID(i int64) *MemberNoteUpdate {
	mnu.mutation.ResetCreatedID()
	mnu.mutation.SetCreatedID(i)
	return mnu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableCreatedID(i *int64) *MemberNoteUpdate {
	if i != nil {
		mnu.SetCreatedID(*i)
	}
	return mnu
}

// AddCreatedID adds i to the "created_id" field.
func (mnu *MemberNoteUpdate) AddCreatedID(i int64) *MemberNoteUpdate {
	mnu.mutation.AddCreatedID(i)
	return mnu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mnu *MemberNoteUpdate) ClearCreatedID() *MemberNoteUpdate {
	mnu.mutation.ClearCreatedID()
	return mnu
}

// SetStatus sets the "status" field.
func (mnu *MemberNoteUpdate) SetStatus(i int64) *MemberNoteUpdate {
	mnu.mutation.ResetStatus()
	mnu.mutation.SetStatus(i)
	return mnu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableStatus(i *int64) *MemberNoteUpdate {
	if i != nil {
		mnu.SetStatus(*i)
	}
	return mnu
}

// AddStatus adds i to the "status" field.
func (mnu *MemberNoteUpdate) AddStatus(i int64) *MemberNoteUpdate {
	mnu.mutation.AddStatus(i)
	return mnu
}

// ClearStatus clears the value of the "status" field.
func (mnu *MemberNoteUpdate) ClearStatus() *MemberNoteUpdate {
	mnu.mutation.ClearStatus()
	return mnu
}

// SetMemberID sets the "member_id" field.
func (mnu *MemberNoteUpdate) SetMemberID(i int64) *MemberNoteUpdate {
	mnu.mutation.SetMemberID(i)
	return mnu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableMemberID(i *int64) *MemberNoteUpdate {
	if i != nil {
		mnu.SetMemberID(*i)
	}
	return mnu
}

// ClearMemberID clears the value of the "member_id" field.
func (mnu *MemberNoteUpdate) ClearMemberID() *MemberNoteUpdate {
	mnu.mutation.ClearMemberID()
	return mnu
}

// SetNote sets the "note" field.
func (mnu *MemberNoteUpdate) SetNote(s string) *MemberNoteUpdate {
	mnu.mutation.SetNote(s)
	return mnu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableNote(s *string) *MemberNoteUpdate {
	if s != nil {
		mnu.SetNote(*s)
	}
	return mnu
}

// ClearNote clears the value of the "note" field.
func (mnu *MemberNoteUpdate) ClearNote() *MemberNoteUpdate {
	mnu.mutation.ClearNote()
	return mnu
}

// SetNotesID sets the "notes" edge to the Member entity by ID.
func (mnu *MemberNoteUpdate) SetNotesID(id int64) *MemberNoteUpdate {
	mnu.mutation.SetNotesID(id)
	return mnu
}

// SetNillableNotesID sets the "notes" edge to the Member entity by ID if the given value is not nil.
func (mnu *MemberNoteUpdate) SetNillableNotesID(id *int64) *MemberNoteUpdate {
	if id != nil {
		mnu = mnu.SetNotesID(*id)
	}
	return mnu
}

// SetNotes sets the "notes" edge to the Member entity.
func (mnu *MemberNoteUpdate) SetNotes(m *Member) *MemberNoteUpdate {
	return mnu.SetNotesID(m.ID)
}

// Mutation returns the MemberNoteMutation object of the builder.
func (mnu *MemberNoteUpdate) Mutation() *MemberNoteMutation {
	return mnu.mutation
}

// ClearNotes clears the "notes" edge to the Member entity.
func (mnu *MemberNoteUpdate) ClearNotes() *MemberNoteUpdate {
	mnu.mutation.ClearNotes()
	return mnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mnu *MemberNoteUpdate) Save(ctx context.Context) (int, error) {
	mnu.defaults()
	return withHooks(ctx, mnu.sqlSave, mnu.mutation, mnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mnu *MemberNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := mnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mnu *MemberNoteUpdate) Exec(ctx context.Context) error {
	_, err := mnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mnu *MemberNoteUpdate) ExecX(ctx context.Context) {
	if err := mnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mnu *MemberNoteUpdate) defaults() {
	if _, ok := mnu.mutation.UpdatedAt(); !ok && !mnu.mutation.UpdatedAtCleared() {
		v := membernote.UpdateDefaultUpdatedAt()
		mnu.mutation.SetUpdatedAt(v)
	}
}

func (mnu *MemberNoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(membernote.Table, membernote.Columns, sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64))
	if ps := mnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mnu.mutation.CreatedAtCleared() {
		_spec.ClearField(membernote.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mnu.mutation.UpdatedAt(); ok {
		_spec.SetField(membernote.FieldUpdatedAt, field.TypeTime, value)
	}
	if mnu.mutation.UpdatedAtCleared() {
		_spec.ClearField(membernote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mnu.mutation.Delete(); ok {
		_spec.SetField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mnu.mutation.AddedDelete(); ok {
		_spec.AddField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if mnu.mutation.DeleteCleared() {
		_spec.ClearField(membernote.FieldDelete, field.TypeInt64)
	}
	if value, ok := mnu.mutation.CreatedID(); ok {
		_spec.SetField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mnu.mutation.AddedCreatedID(); ok {
		_spec.AddField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if mnu.mutation.CreatedIDCleared() {
		_spec.ClearField(membernote.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mnu.mutation.Status(); ok {
		_spec.SetField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mnu.mutation.AddedStatus(); ok {
		_spec.AddField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if mnu.mutation.StatusCleared() {
		_spec.ClearField(membernote.FieldStatus, field.TypeInt64)
	}
	if value, ok := mnu.mutation.Note(); ok {
		_spec.SetField(membernote.FieldNote, field.TypeString, value)
	}
	if mnu.mutation.NoteCleared() {
		_spec.ClearField(membernote.FieldNote, field.TypeString)
	}
	if mnu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mnu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mnu.mutation.done = true
	return n, nil
}

// MemberNoteUpdateOne is the builder for updating a single MemberNote entity.
type MemberNoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberNoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mnuo *MemberNoteUpdateOne) SetUpdatedAt(t time.Time) *MemberNoteUpdateOne {
	mnuo.mutation.SetUpdatedAt(t)
	return mnuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mnuo *MemberNoteUpdateOne) ClearUpdatedAt() *MemberNoteUpdateOne {
	mnuo.mutation.ClearUpdatedAt()
	return mnuo
}

// SetDelete sets the "delete" field.
func (mnuo *MemberNoteUpdateOne) SetDelete(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.ResetDelete()
	mnuo.mutation.SetDelete(i)
	return mnuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableDelete(i *int64) *MemberNoteUpdateOne {
	if i != nil {
		mnuo.SetDelete(*i)
	}
	return mnuo
}

// AddDelete adds i to the "delete" field.
func (mnuo *MemberNoteUpdateOne) AddDelete(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.AddDelete(i)
	return mnuo
}

// ClearDelete clears the value of the "delete" field.
func (mnuo *MemberNoteUpdateOne) ClearDelete() *MemberNoteUpdateOne {
	mnuo.mutation.ClearDelete()
	return mnuo
}

// SetCreatedID sets the "created_id" field.
func (mnuo *MemberNoteUpdateOne) SetCreatedID(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.ResetCreatedID()
	mnuo.mutation.SetCreatedID(i)
	return mnuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableCreatedID(i *int64) *MemberNoteUpdateOne {
	if i != nil {
		mnuo.SetCreatedID(*i)
	}
	return mnuo
}

// AddCreatedID adds i to the "created_id" field.
func (mnuo *MemberNoteUpdateOne) AddCreatedID(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.AddCreatedID(i)
	return mnuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (mnuo *MemberNoteUpdateOne) ClearCreatedID() *MemberNoteUpdateOne {
	mnuo.mutation.ClearCreatedID()
	return mnuo
}

// SetStatus sets the "status" field.
func (mnuo *MemberNoteUpdateOne) SetStatus(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.ResetStatus()
	mnuo.mutation.SetStatus(i)
	return mnuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableStatus(i *int64) *MemberNoteUpdateOne {
	if i != nil {
		mnuo.SetStatus(*i)
	}
	return mnuo
}

// AddStatus adds i to the "status" field.
func (mnuo *MemberNoteUpdateOne) AddStatus(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.AddStatus(i)
	return mnuo
}

// ClearStatus clears the value of the "status" field.
func (mnuo *MemberNoteUpdateOne) ClearStatus() *MemberNoteUpdateOne {
	mnuo.mutation.ClearStatus()
	return mnuo
}

// SetMemberID sets the "member_id" field.
func (mnuo *MemberNoteUpdateOne) SetMemberID(i int64) *MemberNoteUpdateOne {
	mnuo.mutation.SetMemberID(i)
	return mnuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableMemberID(i *int64) *MemberNoteUpdateOne {
	if i != nil {
		mnuo.SetMemberID(*i)
	}
	return mnuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mnuo *MemberNoteUpdateOne) ClearMemberID() *MemberNoteUpdateOne {
	mnuo.mutation.ClearMemberID()
	return mnuo
}

// SetNote sets the "note" field.
func (mnuo *MemberNoteUpdateOne) SetNote(s string) *MemberNoteUpdateOne {
	mnuo.mutation.SetNote(s)
	return mnuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableNote(s *string) *MemberNoteUpdateOne {
	if s != nil {
		mnuo.SetNote(*s)
	}
	return mnuo
}

// ClearNote clears the value of the "note" field.
func (mnuo *MemberNoteUpdateOne) ClearNote() *MemberNoteUpdateOne {
	mnuo.mutation.ClearNote()
	return mnuo
}

// SetNotesID sets the "notes" edge to the Member entity by ID.
func (mnuo *MemberNoteUpdateOne) SetNotesID(id int64) *MemberNoteUpdateOne {
	mnuo.mutation.SetNotesID(id)
	return mnuo
}

// SetNillableNotesID sets the "notes" edge to the Member entity by ID if the given value is not nil.
func (mnuo *MemberNoteUpdateOne) SetNillableNotesID(id *int64) *MemberNoteUpdateOne {
	if id != nil {
		mnuo = mnuo.SetNotesID(*id)
	}
	return mnuo
}

// SetNotes sets the "notes" edge to the Member entity.
func (mnuo *MemberNoteUpdateOne) SetNotes(m *Member) *MemberNoteUpdateOne {
	return mnuo.SetNotesID(m.ID)
}

// Mutation returns the MemberNoteMutation object of the builder.
func (mnuo *MemberNoteUpdateOne) Mutation() *MemberNoteMutation {
	return mnuo.mutation
}

// ClearNotes clears the "notes" edge to the Member entity.
func (mnuo *MemberNoteUpdateOne) ClearNotes() *MemberNoteUpdateOne {
	mnuo.mutation.ClearNotes()
	return mnuo
}

// Where appends a list predicates to the MemberNoteUpdate builder.
func (mnuo *MemberNoteUpdateOne) Where(ps ...predicate.MemberNote) *MemberNoteUpdateOne {
	mnuo.mutation.Where(ps...)
	return mnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mnuo *MemberNoteUpdateOne) Select(field string, fields ...string) *MemberNoteUpdateOne {
	mnuo.fields = append([]string{field}, fields...)
	return mnuo
}

// Save executes the query and returns the updated MemberNote entity.
func (mnuo *MemberNoteUpdateOne) Save(ctx context.Context) (*MemberNote, error) {
	mnuo.defaults()
	return withHooks(ctx, mnuo.sqlSave, mnuo.mutation, mnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mnuo *MemberNoteUpdateOne) SaveX(ctx context.Context) *MemberNote {
	node, err := mnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mnuo *MemberNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := mnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mnuo *MemberNoteUpdateOne) ExecX(ctx context.Context) {
	if err := mnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mnuo *MemberNoteUpdateOne) defaults() {
	if _, ok := mnuo.mutation.UpdatedAt(); !ok && !mnuo.mutation.UpdatedAtCleared() {
		v := membernote.UpdateDefaultUpdatedAt()
		mnuo.mutation.SetUpdatedAt(v)
	}
}

func (mnuo *MemberNoteUpdateOne) sqlSave(ctx context.Context) (_node *MemberNote, err error) {
	_spec := sqlgraph.NewUpdateSpec(membernote.Table, membernote.Columns, sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64))
	id, ok := mnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membernote.FieldID)
		for _, f := range fields {
			if !membernote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membernote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mnuo.mutation.CreatedAtCleared() {
		_spec.ClearField(membernote.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(membernote.FieldUpdatedAt, field.TypeTime, value)
	}
	if mnuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(membernote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mnuo.mutation.Delete(); ok {
		_spec.SetField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mnuo.mutation.AddedDelete(); ok {
		_spec.AddField(membernote.FieldDelete, field.TypeInt64, value)
	}
	if mnuo.mutation.DeleteCleared() {
		_spec.ClearField(membernote.FieldDelete, field.TypeInt64)
	}
	if value, ok := mnuo.mutation.CreatedID(); ok {
		_spec.SetField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mnuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(membernote.FieldCreatedID, field.TypeInt64, value)
	}
	if mnuo.mutation.CreatedIDCleared() {
		_spec.ClearField(membernote.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mnuo.mutation.Status(); ok {
		_spec.SetField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mnuo.mutation.AddedStatus(); ok {
		_spec.AddField(membernote.FieldStatus, field.TypeInt64, value)
	}
	if mnuo.mutation.StatusCleared() {
		_spec.ClearField(membernote.FieldStatus, field.TypeInt64)
	}
	if value, ok := mnuo.mutation.Note(); ok {
		_spec.SetField(membernote.FieldNote, field.TypeString, value)
	}
	if mnuo.mutation.NoteCleared() {
		_spec.ClearField(membernote.FieldNote, field.TypeString)
	}
	if mnuo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mnuo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membernote.NotesTable,
			Columns: []string{membernote.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberNote{config: mnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membernote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mnuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/membercontractcontent"
	"saas/biz/dal/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberContractContentDelete is the builder for deleting a MemberContractContent entity.
type MemberContractContentDelete struct {
	config
	hooks    []Hook
	mutation *MemberContractContentMutation
}

// Where appends a list predicates to the MemberContractContentDelete builder.
func (mccd *MemberContractContentDelete) Where(ps ...predicate.MemberContractContent) *MemberContractContentDelete {
	mccd.mutation.Where(ps...)
	return mccd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mccd *MemberContractContentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mccd.sqlExec, mccd.mutation, mccd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mccd *MemberContractContentDelete) ExecX(ctx context.Context) int {
	n, err := mccd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mccd *MemberContractContentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(membercontractcontent.Table, sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64))
	_spec.Node.Schema = mccd.schemaConfig.MemberContractContent
	ctx = internal.NewSchemaConfigContext(ctx, mccd.schemaConfig)
	if ps := mccd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mccd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mccd.mutation.done = true
	return affected, err
}

// MemberContractContentDeleteOne is the builder for deleting a single MemberContractContent entity.
type MemberContractContentDeleteOne struct {
	mccd *MemberContractContentDelete
}

// Where appends a list predicates to the MemberContractContentDelete builder.
func (mccdo *MemberContractContentDeleteOne) Where(ps ...predicate.MemberContractContent) *MemberContractContentDeleteOne {
	mccdo.mccd.mutation.Where(ps...)
	return mccdo
}

// Exec executes the deletion query.
func (mccdo *MemberContractContentDeleteOne) Exec(ctx context.Context) error {
	n, err := mccdo.mccd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{membercontractcontent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mccdo *MemberContractContentDeleteOne) ExecX(ctx context.Context) {
	if err := mccdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/bootcampparticipant"
	"saas/biz/dal/db/ent/communityparticipant"
	"saas/biz/dal/db/ent/contestparticipant"
	"saas/biz/dal/db/ent/entrylogs"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membercontract"
	"saas/biz/dal/db/ent/memberdetails"
	"saas/biz/dal/db/ent/membernote"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/memberprofile"
	"saas/biz/dal/db/ent/order"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MemberUpdate) SetUpdatedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MemberUpdate) ClearUpdatedAt() *MemberUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetDelete sets the "delete" field.
func (mu *MemberUpdate) SetDelete(i int64) *MemberUpdate {
	mu.mutation.ResetDelete()
	mu.mutation.SetDelete(i)
	return mu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDelete(i *int64) *MemberUpdate {
	if i != nil {
		mu.SetDelete(*i)
	}
	return mu
}

// AddDelete adds i to the "delete" field.
func (mu *MemberUpdate) AddDelete(i int64) *MemberUpdate {
	mu.mutation.AddDelete(i)
	return mu
}

// ClearDelete clears the value of the "delete" field.
func (mu *MemberUpdate) ClearDelete() *MemberUpdate {
	mu.mutation.ClearDelete()
	return mu
}

// SetCreatedID sets the "created_id" field.
func (mu *MemberUpdate) SetCreatedID(i int64) *MemberUpdate {
	mu.mutation.ResetCreatedID()
	mu.mutation.SetCreatedID(i)
	return mu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCreatedID(i *int64) *MemberUpdate {
	if i != nil {
		mu.SetCreatedID(*i)
	}
	return mu
}

// AddCreatedID adds i to the "created_id" field.
func (mu *MemberUpdate) AddCreatedID(i int64) *MemberUpdate {
	mu.mutation.AddCreatedID(i)
	return mu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mu *MemberUpdate) ClearCreatedID() *MemberUpdate {
	mu.mutation.ClearCreatedID()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MemberUpdate) SetStatus(i int64) *MemberUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableStatus(i *int64) *MemberUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MemberUpdate) AddStatus(i int64) *MemberUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MemberUpdate) ClearStatus() *MemberUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetPassword sets the "password" field.
func (mu *MemberUpdate) SetPassword(s string) *MemberUpdate {
	mu.mutation.SetPassword(s)
	return mu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mu *MemberUpdate) SetNillablePassword(s *string) *MemberUpdate {
	if s != nil {
		mu.SetPassword(*s)
	}
	return mu
}

// ClearPassword clears the value of the "password" field.
func (mu *MemberUpdate) ClearPassword() *MemberUpdate {
	mu.mutation.ClearPassword()
	return mu
}

// SetName sets the "name" field.
func (mu *MemberUpdate) SetName(s string) *MemberUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableName(s *string) *MemberUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *MemberUpdate) ClearName() *MemberUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetNickname sets the "nickname" field.
func (mu *MemberUpdate) SetNickname(s string) *MemberUpdate {
	mu.mutation.SetNickname(s)
	return mu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableNickname(s *string) *MemberUpdate {
	if s != nil {
		mu.SetNickname(*s)
	}
	return mu
}

// ClearNickname clears the value of the "nickname" field.
func (mu *MemberUpdate) ClearNickname() *MemberUpdate {
	mu.mutation.ClearNickname()
	return mu
}

// SetMobile sets the "mobile" field.
func (mu *MemberUpdate) SetMobile(s string) *MemberUpdate {
	mu.mutation.SetMobile(s)
	return mu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableMobile(s *string) *MemberUpdate {
	if s != nil {
		mu.SetMobile(*s)
	}
	return mu
}

// ClearMobile clears the value of the "mobile" field.
func (mu *MemberUpdate) ClearMobile() *MemberUpdate {
	mu.mutation.ClearMobile()
	return mu
}

// SetAvatar sets the "avatar" field.
func (mu *MemberUpdate) SetAvatar(s string) *MemberUpdate {
	mu.mutation.SetAvatar(s)
	return mu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableAvatar(s *string) *MemberUpdate {
	if s != nil {
		mu.SetAvatar(*s)
	}
	return mu
}

// ClearAvatar clears the value of the "avatar" field.
func (mu *MemberUpdate) ClearAvatar() *MemberUpdate {
	mu.mutation.ClearAvatar()
	return mu
}

// SetCondition sets the "condition" field.
func (mu *MemberUpdate) SetCondition(i int64) *MemberUpdate {
	mu.mutation.ResetCondition()
	mu.mutation.SetCondition(i)
	return mu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCondition(i *int64) *MemberUpdate {
	if i != nil {
		mu.SetCondition(*i)
	}
	return mu
}

// AddCondition adds i to the "condition" field.
func (mu *MemberUpdate) AddCondition(i int64) *MemberUpdate {
	mu.mutation.AddCondition(i)
	return mu
}

// ClearCondition clears the value of the "condition" field.
func (mu *MemberUpdate) ClearCondition() *MemberUpdate {
	mu.mutation.ClearCondition()
	return mu
}

// AddMemberProfileIDs adds the "member_profile" edge to the MemberProfile entity by IDs.
func (mu *MemberUpdate) AddMemberProfileIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberProfileIDs(ids...)
	return mu
}

// AddMemberProfile adds the "member_profile" edges to the MemberProfile entity.
func (mu *MemberUpdate) AddMemberProfile(m ...*MemberProfile) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberProfileIDs(ids...)
}

// AddMemberDetailIDs adds the "member_details" edge to the MemberDetails entity by IDs.
func (mu *MemberUpdate) AddMemberDetailIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberDetailIDs(ids...)
	return mu
}

// AddMemberDetails adds the "member_details" edges to the MemberDetails entity.
func (mu *MemberUpdate) AddMemberDetails(m ...*MemberDetails) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberDetailIDs(ids...)
}

// AddMemberNoteIDs adds the "member_notes" edge to the MemberNote entity by IDs.
func (mu *MemberUpdate) AddMemberNoteIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberNoteIDs(ids...)
	return mu
}

// AddMemberNotes adds the "member_notes" edges to the MemberNote entity.
func (mu *MemberUpdate) AddMemberNotes(m ...*MemberNote) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberNoteIDs(ids...)
}

// AddMemberOrderIDs adds the "member_orders" edge to the Order entity by IDs.
func (mu *MemberUpdate) AddMemberOrderIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberOrderIDs(ids...)
	return mu
}

// AddMemberOrders adds the "member_orders" edges to the Order entity.
func (mu *MemberUpdate) AddMemberOrders(o ...*Order) *MemberUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mu.AddMemberOrderIDs(ids...)
}

// AddMemberProductIDs adds the "member_products" edge to the MemberProduct entity by IDs.
func (mu *MemberUpdate) AddMemberProductIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberProductIDs(ids...)
	return mu
}

// AddMemberProducts adds the "member_products" edges to the MemberProduct entity.
func (mu *MemberUpdate) AddMemberProducts(m ...*MemberProduct) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberProductIDs(ids...)
}

// AddMemberEntryIDs adds the "member_entry" edge to the EntryLogs entity by IDs.
func (mu *MemberUpdate) AddMemberEntryIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberEntryIDs(ids...)
	return mu
}

// AddMemberEntry adds the "member_entry" edges to the EntryLogs entity.
func (mu *MemberUpdate) AddMemberEntry(e ...*EntryLogs) *MemberUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.AddMemberEntryIDs(ids...)
}

// AddMemberContentIDs adds the "member_contents" edge to the MemberContract entity by IDs.
func (mu *MemberUpdate) AddMemberContentIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberContentIDs(ids...)
	return mu
}

// AddMemberContents adds the "member_contents" edges to the MemberContract entity.
func (mu *MemberUpdate) AddMemberContents(m ...*MemberContract) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemberContentIDs(ids...)
}

// AddMemberContestIDs adds the "member_contests" edge to the ContestParticipant entity by IDs.
func (mu *MemberUpdate) AddMemberContestIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberContestIDs(ids...)
	return mu
}

// AddMemberContests adds the "member_contests" edges to the ContestParticipant entity.
func (mu *MemberUpdate) AddMemberContests(c ...*ContestParticipant) *MemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddMemberContestIDs(ids...)
}

// AddMemberBootcampIDs adds the "member_bootcamps" edge to the BootcampParticipant entity by IDs.
func (mu *MemberUpdate) AddMemberBootcampIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberBootcampIDs(ids...)
	return mu
}

// AddMemberBootcamps adds the "member_bootcamps" edges to the BootcampParticipant entity.
func (mu *MemberUpdate) AddMemberBootcamps(b ...*BootcampParticipant) *MemberUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.AddMemberBootcampIDs(ids...)
}

// AddMemberCommunityIDs adds the "member_communitys" edge to the CommunityParticipant entity by IDs.
func (mu *MemberUpdate) AddMemberCommunityIDs(ids ...int64) *MemberUpdate {
	mu.mutation.AddMemberCommunityIDs(ids...)
	return mu
}

// AddMemberCommunitys adds the "member_communitys" edges to the CommunityParticipant entity.
func (mu *MemberUpdate) AddMemberCommunitys(c ...*CommunityParticipant) *MemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddMemberCommunityIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearMemberProfile clears all "member_profile" edges to the MemberProfile entity.
func (mu *MemberUpdate) ClearMemberProfile() *MemberUpdate {
	mu.mutation.ClearMemberProfile()
	return mu
}

// RemoveMemberProfileIDs removes the "member_profile" edge to MemberProfile entities by IDs.
func (mu *MemberUpdate) RemoveMemberProfileIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberProfileIDs(ids...)
	return mu
}

// RemoveMemberProfile removes "member_profile" edges to MemberProfile entities.
func (mu *MemberUpdate) RemoveMemberProfile(m ...*MemberProfile) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberProfileIDs(ids...)
}

// ClearMemberDetails clears all "member_details" edges to the MemberDetails entity.
func (mu *MemberUpdate) ClearMemberDetails() *MemberUpdate {
	mu.mutation.ClearMemberDetails()
	return mu
}

// RemoveMemberDetailIDs removes the "member_details" edge to MemberDetails entities by IDs.
func (mu *MemberUpdate) RemoveMemberDetailIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberDetailIDs(ids...)
	return mu
}

// RemoveMemberDetails removes "member_details" edges to MemberDetails entities.
func (mu *MemberUpdate) RemoveMemberDetails(m ...*MemberDetails) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberDetailIDs(ids...)
}

// ClearMemberNotes clears all "member_notes" edges to the MemberNote entity.
func (mu *MemberUpdate) ClearMemberNotes() *MemberUpdate {
	mu.mutation.ClearMemberNotes()
	return mu
}

// RemoveMemberNoteIDs removes the "member_notes" edge to MemberNote entities by IDs.
func (mu *MemberUpdate) RemoveMemberNoteIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberNoteIDs(ids...)
	return mu
}

// RemoveMemberNotes removes "member_notes" edges to MemberNote entities.
func (mu *MemberUpdate) RemoveMemberNotes(m ...*MemberNote) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberNoteIDs(ids...)
}

// ClearMemberOrders clears all "member_orders" edges to the Order entity.
func (mu *MemberUpdate) ClearMemberOrders() *MemberUpdate {
	mu.mutation.ClearMemberOrders()
	return mu
}

// RemoveMemberOrderIDs removes the "member_orders" edge to Order entities by IDs.
func (mu *MemberUpdate) RemoveMemberOrderIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberOrderIDs(ids...)
	return mu
}

// RemoveMemberOrders removes "member_orders" edges to Order entities.
func (mu *MemberUpdate) RemoveMemberOrders(o ...*Order) *MemberUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mu.RemoveMemberOrderIDs(ids...)
}

// ClearMemberProducts clears all "member_products" edges to the MemberProduct entity.
func (mu *MemberUpdate) ClearMemberProducts() *MemberUpdate {
	mu.mutation.ClearMemberProducts()
	return mu
}

// RemoveMemberProductIDs removes the "member_products" edge to MemberProduct entities by IDs.
func (mu *MemberUpdate) RemoveMemberProductIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberProductIDs(ids...)
	return mu
}

// RemoveMemberProducts removes "member_products" edges to MemberProduct entities.
func (mu *MemberUpdate) RemoveMemberProducts(m ...*MemberProduct) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberProductIDs(ids...)
}

// ClearMemberEntry clears all "member_entry" edges to the EntryLogs entity.
func (mu *MemberUpdate) ClearMemberEntry() *MemberUpdate {
	mu.mutation.ClearMemberEntry()
	return mu
}

// RemoveMemberEntryIDs removes the "member_entry" edge to EntryLogs entities by IDs.
func (mu *MemberUpdate) RemoveMemberEntryIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberEntryIDs(ids...)
	return mu
}

// RemoveMemberEntry removes "member_entry" edges to EntryLogs entities.
func (mu *MemberUpdate) RemoveMemberEntry(e ...*EntryLogs) *MemberUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.RemoveMemberEntryIDs(ids...)
}

// ClearMemberContents clears all "member_contents" edges to the MemberContract entity.
func (mu *MemberUpdate) ClearMemberContents() *MemberUpdate {
	mu.mutation.ClearMemberContents()
	return mu
}

// RemoveMemberContentIDs removes the "member_contents" edge to MemberContract entities by IDs.
func (mu *MemberUpdate) RemoveMemberContentIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberContentIDs(ids...)
	return mu
}

// RemoveMemberContents removes "member_contents" edges to MemberContract entities.
func (mu *MemberUpdate) RemoveMemberContents(m ...*MemberContract) *MemberUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemberContentIDs(ids...)
}

// ClearMemberContests clears all "member_contests" edges to the ContestParticipant entity.
func (mu *MemberUpdate) ClearMemberContests() *MemberUpdate {
	mu.mutation.ClearMemberContests()
	return mu
}

// RemoveMemberContestIDs removes the "member_contests" edge to ContestParticipant entities by IDs.
func (mu *MemberUpdate) RemoveMemberContestIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberContestIDs(ids...)
	return mu
}

// RemoveMemberContests removes "member_contests" edges to ContestParticipant entities.
func (mu *MemberUpdate) RemoveMemberContests(c ...*ContestParticipant) *MemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveMemberContestIDs(ids...)
}

// ClearMemberBootcamps clears all "member_bootcamps" edges to the BootcampParticipant entity.
func (mu *MemberUpdate) ClearMemberBootcamps() *MemberUpdate {
	mu.mutation.ClearMemberBootcamps()
	return mu
}

// RemoveMemberBootcampIDs removes the "member_bootcamps" edge to BootcampParticipant entities by IDs.
func (mu *MemberUpdate) RemoveMemberBootcampIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberBootcampIDs(ids...)
	return mu
}

// RemoveMemberBootcamps removes "member_bootcamps" edges to BootcampParticipant entities.
func (mu *MemberUpdate) RemoveMemberBootcamps(b ...*BootcampParticipant) *MemberUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.RemoveMemberBootcampIDs(ids...)
}

// ClearMemberCommunitys clears all "member_communitys" edges to the CommunityParticipant entity.
func (mu *MemberUpdate) ClearMemberCommunitys() *MemberUpdate {
	mu.mutation.ClearMemberCommunitys()
	return mu
}

// RemoveMemberCommunityIDs removes the "member_communitys" edge to CommunityParticipant entities by IDs.
func (mu *MemberUpdate) RemoveMemberCommunityIDs(ids ...int64) *MemberUpdate {
	mu.mutation.RemoveMemberCommunityIDs(ids...)
	return mu
}

// RemoveMemberCommunitys removes "member_communitys" edges to CommunityParticipant entities.
func (mu *MemberUpdate) RemoveMemberCommunitys(c ...*CommunityParticipant) *MemberUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveMemberCommunityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := member.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(member.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(member.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Delete(); ok {
		_spec.SetField(member.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedDelete(); ok {
		_spec.AddField(member.FieldDelete, field.TypeInt64, value)
	}
	if mu.mutation.DeleteCleared() {
		_spec.ClearField(member.FieldDelete, field.TypeInt64)
	}
	if value, ok := mu.mutation.CreatedID(); ok {
		_spec.SetField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedID(); ok {
		_spec.AddField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if mu.mutation.CreatedIDCleared() {
		_spec.ClearField(member.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt64, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(member.FieldStatus, field.TypeInt64)
	}
	if value, ok := mu.mutation.Password(); ok {
		_spec.SetField(member.FieldPassword, field.TypeString, value)
	}
	if mu.mutation.PasswordCleared() {
		_spec.ClearField(member.FieldPassword, field.TypeString)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if mu.mutation.NameCleared() {
		_spec.ClearField(member.FieldName, field.TypeString)
	}
	if value, ok := mu.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if mu.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := mu.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if mu.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := mu.mutation.Avatar(); ok {
		_spec.SetField(member.FieldAvatar, field.TypeString, value)
	}
	if mu.mutation.AvatarCleared() {
		_spec.ClearField(member.FieldAvatar, field.TypeString)
	}
	if value, ok := mu.mutation.Condition(); ok {
		_spec.SetField(member.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCondition(); ok {
		_spec.AddField(member.FieldCondition, field.TypeInt64, value)
	}
	if mu.mutation.ConditionCleared() {
		_spec.ClearField(member.FieldCondition, field.TypeInt64)
	}
	if mu.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberProfileIDs(); len(nodes) > 0 && !mu.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberDetailsIDs(); len(nodes) > 0 && !mu.mutation.MemberDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberNotesIDs(); len(nodes) > 0 && !mu.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberOrdersIDs(); len(nodes) > 0 && !mu.mutation.MemberOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberProductsIDs(); len(nodes) > 0 && !mu.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberEntryIDs(); len(nodes) > 0 && !mu.mutation.MemberEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberContentsIDs(); len(nodes) > 0 && !mu.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberContestsIDs(); len(nodes) > 0 && !mu.mutation.MemberContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberContestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberBootcampsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberBootcampsIDs(); len(nodes) > 0 && !mu.mutation.MemberBootcampsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberBootcampsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemberCommunitysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemberCommunitysIDs(); len(nodes) > 0 && !mu.mutation.MemberCommunitysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemberCommunitysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MemberUpdateOne) SetUpdatedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MemberUpdateOne) ClearUpdatedAt() *MemberUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetDelete sets the "delete" field.
func (muo *MemberUpdateOne) SetDelete(i int64) *MemberUpdateOne {
	muo.mutation.ResetDelete()
	muo.mutation.SetDelete(i)
	return muo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDelete(i *int64) *MemberUpdateOne {
	if i != nil {
		muo.SetDelete(*i)
	}
	return muo
}

// AddDelete adds i to the "delete" field.
func (muo *MemberUpdateOne) AddDelete(i int64) *MemberUpdateOne {
	muo.mutation.AddDelete(i)
	return muo
}

// ClearDelete clears the value of the "delete" field.
func (muo *MemberUpdateOne) ClearDelete() *MemberUpdateOne {
	muo.mutation.ClearDelete()
	return muo
}

// SetCreatedID sets the "created_id" field.
func (muo *MemberUpdateOne) SetCreatedID(i int64) *MemberUpdateOne {
	muo.mutation.ResetCreatedID()
	muo.mutation.SetCreatedID(i)
	return muo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCreatedID(i *int64) *MemberUpdateOne {
	if i != nil {
		muo.SetCreatedID(*i)
	}
	return muo
}

// AddCreatedID adds i to the "created_id" field.
func (muo *MemberUpdateOne) AddCreatedID(i int64) *MemberUpdateOne {
	muo.mutation.AddCreatedID(i)
	return muo
}

// ClearCreatedID clears the value of the "created_id" field.
func (muo *MemberUpdateOne) ClearCreatedID() *MemberUpdateOne {
	muo.mutation.ClearCreatedID()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MemberUpdateOne) SetStatus(i int64) *MemberUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableStatus(i *int64) *MemberUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MemberUpdateOne) AddStatus(i int64) *MemberUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MemberUpdateOne) ClearStatus() *MemberUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetPassword sets the "password" field.
func (muo *MemberUpdateOne) SetPassword(s string) *MemberUpdateOne {
	muo.mutation.SetPassword(s)
	return muo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillablePassword(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetPassword(*s)
	}
	return muo
}

// ClearPassword clears the value of the "password" field.
func (muo *MemberUpdateOne) ClearPassword() *MemberUpdateOne {
	muo.mutation.ClearPassword()
	return muo
}

// SetName sets the "name" field.
func (muo *MemberUpdateOne) SetName(s string) *MemberUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableName(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *MemberUpdateOne) ClearName() *MemberUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetNickname sets the "nickname" field.
func (muo *MemberUpdateOne) SetNickname(s string) *MemberUpdateOne {
	muo.mutation.SetNickname(s)
	return muo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableNickname(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetNickname(*s)
	}
	return muo
}

// ClearNickname clears the value of the "nickname" field.
func (muo *MemberUpdateOne) ClearNickname() *MemberUpdateOne {
	muo.mutation.ClearNickname()
	return muo
}

// SetMobile sets the "mobile" field.
func (muo *MemberUpdateOne) SetMobile(s string) *MemberUpdateOne {
	muo.mutation.SetMobile(s)
	return muo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableMobile(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetMobile(*s)
	}
	return muo
}

// ClearMobile clears the value of the "mobile" field.
func (muo *MemberUpdateOne) ClearMobile() *MemberUpdateOne {
	muo.mutation.ClearMobile()
	return muo
}

// SetAvatar sets the "avatar" field.
func (muo *MemberUpdateOne) SetAvatar(s string) *MemberUpdateOne {
	muo.mutation.SetAvatar(s)
	return muo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableAvatar(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetAvatar(*s)
	}
	return muo
}

// ClearAvatar clears the value of the "avatar" field.
func (muo *MemberUpdateOne) ClearAvatar() *MemberUpdateOne {
	muo.mutation.ClearAvatar()
	return muo
}

// SetCondition sets the "condition" field.
func (muo *MemberUpdateOne) SetCondition(i int64) *MemberUpdateOne {
	muo.mutation.ResetCondition()
	muo.mutation.SetCondition(i)
	return muo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCondition(i *int64) *MemberUpdateOne {
	if i != nil {
		muo.SetCondition(*i)
	}
	return muo
}

// AddCondition adds i to the "condition" field.
func (muo *MemberUpdateOne) AddCondition(i int64) *MemberUpdateOne {
	muo.mutation.AddCondition(i)
	return muo
}

// ClearCondition clears the value of the "condition" field.
func (muo *MemberUpdateOne) ClearCondition() *MemberUpdateOne {
	muo.mutation.ClearCondition()
	return muo
}

// AddMemberProfileIDs adds the "member_profile" edge to the MemberProfile entity by IDs.
func (muo *MemberUpdateOne) AddMemberProfileIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberProfileIDs(ids...)
	return muo
}

// AddMemberProfile adds the "member_profile" edges to the MemberProfile entity.
func (muo *MemberUpdateOne) AddMemberProfile(m ...*MemberProfile) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberProfileIDs(ids...)
}

// AddMemberDetailIDs adds the "member_details" edge to the MemberDetails entity by IDs.
func (muo *MemberUpdateOne) AddMemberDetailIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberDetailIDs(ids...)
	return muo
}

// AddMemberDetails adds the "member_details" edges to the MemberDetails entity.
func (muo *MemberUpdateOne) AddMemberDetails(m ...*MemberDetails) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberDetailIDs(ids...)
}

// AddMemberNoteIDs adds the "member_notes" edge to the MemberNote entity by IDs.
func (muo *MemberUpdateOne) AddMemberNoteIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberNoteIDs(ids...)
	return muo
}

// AddMemberNotes adds the "member_notes" edges to the MemberNote entity.
func (muo *MemberUpdateOne) AddMemberNotes(m ...*MemberNote) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberNoteIDs(ids...)
}

// AddMemberOrderIDs adds the "member_orders" edge to the Order entity by IDs.
func (muo *MemberUpdateOne) AddMemberOrderIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberOrderIDs(ids...)
	return muo
}

// AddMemberOrders adds the "member_orders" edges to the Order entity.
func (muo *MemberUpdateOne) AddMemberOrders(o ...*Order) *MemberUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return muo.AddMemberOrderIDs(ids...)
}

// AddMemberProductIDs adds the "member_products" edge to the MemberProduct entity by IDs.
func (muo *MemberUpdateOne) AddMemberProductIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberProductIDs(ids...)
	return muo
}

// AddMemberProducts adds the "member_products" edges to the MemberProduct entity.
func (muo *MemberUpdateOne) AddMemberProducts(m ...*MemberProduct) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberProductIDs(ids...)
}

// AddMemberEntryIDs adds the "member_entry" edge to the EntryLogs entity by IDs.
func (muo *MemberUpdateOne) AddMemberEntryIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberEntryIDs(ids...)
	return muo
}

// AddMemberEntry adds the "member_entry" edges to the EntryLogs entity.
func (muo *MemberUpdateOne) AddMemberEntry(e ...*EntryLogs) *MemberUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.AddMemberEntryIDs(ids...)
}

// AddMemberContentIDs adds the "member_contents" edge to the MemberContract entity by IDs.
func (muo *MemberUpdateOne) AddMemberContentIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberContentIDs(ids...)
	return muo
}

// AddMemberContents adds the "member_contents" edges to the MemberContract entity.
func (muo *MemberUpdateOne) AddMemberContents(m ...*MemberContract) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemberContentIDs(ids...)
}

// AddMemberContestIDs adds the "member_contests" edge to the ContestParticipant entity by IDs.
func (muo *MemberUpdateOne) AddMemberContestIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberContestIDs(ids...)
	return muo
}

// AddMemberContests adds the "member_contests" edges to the ContestParticipant entity.
func (muo *MemberUpdateOne) AddMemberContests(c ...*ContestParticipant) *MemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddMemberContestIDs(ids...)
}

// AddMemberBootcampIDs adds the "member_bootcamps" edge to the BootcampParticipant entity by IDs.
func (muo *MemberUpdateOne) AddMemberBootcampIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberBootcampIDs(ids...)
	return muo
}

// AddMemberBootcamps adds the "member_bootcamps" edges to the BootcampParticipant entity.
func (muo *MemberUpdateOne) AddMemberBootcamps(b ...*BootcampParticipant) *MemberUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.AddMemberBootcampIDs(ids...)
}

// AddMemberCommunityIDs adds the "member_communitys" edge to the CommunityParticipant entity by IDs.
func (muo *MemberUpdateOne) AddMemberCommunityIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.AddMemberCommunityIDs(ids...)
	return muo
}

// AddMemberCommunitys adds the "member_communitys" edges to the CommunityParticipant entity.
func (muo *MemberUpdateOne) AddMemberCommunitys(c ...*CommunityParticipant) *MemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddMemberCommunityIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearMemberProfile clears all "member_profile" edges to the MemberProfile entity.
func (muo *MemberUpdateOne) ClearMemberProfile() *MemberUpdateOne {
	muo.mutation.ClearMemberProfile()
	return muo
}

// RemoveMemberProfileIDs removes the "member_profile" edge to MemberProfile entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberProfileIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberProfileIDs(ids...)
	return muo
}

// RemoveMemberProfile removes "member_profile" edges to MemberProfile entities.
func (muo *MemberUpdateOne) RemoveMemberProfile(m ...*MemberProfile) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberProfileIDs(ids...)
}

// ClearMemberDetails clears all "member_details" edges to the MemberDetails entity.
func (muo *MemberUpdateOne) ClearMemberDetails() *MemberUpdateOne {
	muo.mutation.ClearMemberDetails()
	return muo
}

// RemoveMemberDetailIDs removes the "member_details" edge to MemberDetails entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberDetailIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberDetailIDs(ids...)
	return muo
}

// RemoveMemberDetails removes "member_details" edges to MemberDetails entities.
func (muo *MemberUpdateOne) RemoveMemberDetails(m ...*MemberDetails) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberDetailIDs(ids...)
}

// ClearMemberNotes clears all "member_notes" edges to the MemberNote entity.
func (muo *MemberUpdateOne) ClearMemberNotes() *MemberUpdateOne {
	muo.mutation.ClearMemberNotes()
	return muo
}

// RemoveMemberNoteIDs removes the "member_notes" edge to MemberNote entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberNoteIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberNoteIDs(ids...)
	return muo
}

// RemoveMemberNotes removes "member_notes" edges to MemberNote entities.
func (muo *MemberUpdateOne) RemoveMemberNotes(m ...*MemberNote) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberNoteIDs(ids...)
}

// ClearMemberOrders clears all "member_orders" edges to the Order entity.
func (muo *MemberUpdateOne) ClearMemberOrders() *MemberUpdateOne {
	muo.mutation.ClearMemberOrders()
	return muo
}

// RemoveMemberOrderIDs removes the "member_orders" edge to Order entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberOrderIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberOrderIDs(ids...)
	return muo
}

// RemoveMemberOrders removes "member_orders" edges to Order entities.
func (muo *MemberUpdateOne) RemoveMemberOrders(o ...*Order) *MemberUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return muo.RemoveMemberOrderIDs(ids...)
}

// ClearMemberProducts clears all "member_products" edges to the MemberProduct entity.
func (muo *MemberUpdateOne) ClearMemberProducts() *MemberUpdateOne {
	muo.mutation.ClearMemberProducts()
	return muo
}

// RemoveMemberProductIDs removes the "member_products" edge to MemberProduct entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberProductIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberProductIDs(ids...)
	return muo
}

// RemoveMemberProducts removes "member_products" edges to MemberProduct entities.
func (muo *MemberUpdateOne) RemoveMemberProducts(m ...*MemberProduct) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberProductIDs(ids...)
}

// ClearMemberEntry clears all "member_entry" edges to the EntryLogs entity.
func (muo *MemberUpdateOne) ClearMemberEntry() *MemberUpdateOne {
	muo.mutation.ClearMemberEntry()
	return muo
}

// RemoveMemberEntryIDs removes the "member_entry" edge to EntryLogs entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberEntryIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberEntryIDs(ids...)
	return muo
}

// RemoveMemberEntry removes "member_entry" edges to EntryLogs entities.
func (muo *MemberUpdateOne) RemoveMemberEntry(e ...*EntryLogs) *MemberUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.RemoveMemberEntryIDs(ids...)
}

// ClearMemberContents clears all "member_contents" edges to the MemberContract entity.
func (muo *MemberUpdateOne) ClearMemberContents() *MemberUpdateOne {
	muo.mutation.ClearMemberContents()
	return muo
}

// RemoveMemberContentIDs removes the "member_contents" edge to MemberContract entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberContentIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberContentIDs(ids...)
	return muo
}

// RemoveMemberContents removes "member_contents" edges to MemberContract entities.
func (muo *MemberUpdateOne) RemoveMemberContents(m ...*MemberContract) *MemberUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemberContentIDs(ids...)
}

// ClearMemberContests clears all "member_contests" edges to the ContestParticipant entity.
func (muo *MemberUpdateOne) ClearMemberContests() *MemberUpdateOne {
	muo.mutation.ClearMemberContests()
	return muo
}

// RemoveMemberContestIDs removes the "member_contests" edge to ContestParticipant entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberContestIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberContestIDs(ids...)
	return muo
}

// RemoveMemberContests removes "member_contests" edges to ContestParticipant entities.
func (muo *MemberUpdateOne) RemoveMemberContests(c ...*ContestParticipant) *MemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveMemberContestIDs(ids...)
}

// ClearMemberBootcamps clears all "member_bootcamps" edges to the BootcampParticipant entity.
func (muo *MemberUpdateOne) ClearMemberBootcamps() *MemberUpdateOne {
	muo.mutation.ClearMemberBootcamps()
	return muo
}

// RemoveMemberBootcampIDs removes the "member_bootcamps" edge to BootcampParticipant entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberBootcampIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberBootcampIDs(ids...)
	return muo
}

// RemoveMemberBootcamps removes "member_bootcamps" edges to BootcampParticipant entities.
func (muo *MemberUpdateOne) RemoveMemberBootcamps(b ...*BootcampParticipant) *MemberUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.RemoveMemberBootcampIDs(ids...)
}

// ClearMemberCommunitys clears all "member_communitys" edges to the CommunityParticipant entity.
func (muo *MemberUpdateOne) ClearMemberCommunitys() *MemberUpdateOne {
	muo.mutation.ClearMemberCommunitys()
	return muo
}

// RemoveMemberCommunityIDs removes the "member_communitys" edge to CommunityParticipant entities by IDs.
func (muo *MemberUpdateOne) RemoveMemberCommunityIDs(ids ...int64) *MemberUpdateOne {
	muo.mutation.RemoveMemberCommunityIDs(ids...)
	return muo
}

// RemoveMemberCommunitys removes "member_communitys" edges to CommunityParticipant entities.
func (muo *MemberUpdateOne) RemoveMemberCommunitys(c ...*CommunityParticipant) *MemberUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveMemberCommunityIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := member.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(member.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(member.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Delete(); ok {
		_spec.SetField(member.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedDelete(); ok {
		_spec.AddField(member.FieldDelete, field.TypeInt64, value)
	}
	if muo.mutation.DeleteCleared() {
		_spec.ClearField(member.FieldDelete, field.TypeInt64)
	}
	if value, ok := muo.mutation.CreatedID(); ok {
		_spec.SetField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedID(); ok {
		_spec.AddField(member.FieldCreatedID, field.TypeInt64, value)
	}
	if muo.mutation.CreatedIDCleared() {
		_spec.ClearField(member.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt64, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(member.FieldStatus, field.TypeInt64)
	}
	if value, ok := muo.mutation.Password(); ok {
		_spec.SetField(member.FieldPassword, field.TypeString, value)
	}
	if muo.mutation.PasswordCleared() {
		_spec.ClearField(member.FieldPassword, field.TypeString)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if muo.mutation.NameCleared() {
		_spec.ClearField(member.FieldName, field.TypeString)
	}
	if value, ok := muo.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if muo.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := muo.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if muo.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := muo.mutation.Avatar(); ok {
		_spec.SetField(member.FieldAvatar, field.TypeString, value)
	}
	if muo.mutation.AvatarCleared() {
		_spec.ClearField(member.FieldAvatar, field.TypeString)
	}
	if value, ok := muo.mutation.Condition(); ok {
		_spec.SetField(member.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCondition(); ok {
		_spec.AddField(member.FieldCondition, field.TypeInt64, value)
	}
	if muo.mutation.ConditionCleared() {
		_spec.ClearField(member.FieldCondition, field.TypeInt64)
	}
	if muo.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberProfileIDs(); len(nodes) > 0 && !muo.mutation.MemberProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProfileTable,
			Columns: []string{member.MemberProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberprofile.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberDetailsIDs(); len(nodes) > 0 && !muo.mutation.MemberDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberDetailsTable,
			Columns: []string{member.MemberDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberdetails.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberNotesIDs(); len(nodes) > 0 && !muo.mutation.MemberNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberNotesTable,
			Columns: []string{member.MemberNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membernote.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberOrdersIDs(); len(nodes) > 0 && !muo.mutation.MemberOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberOrdersTable,
			Columns: []string{member.MemberOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberProductsIDs(); len(nodes) > 0 && !muo.mutation.MemberProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberProductsTable,
			Columns: []string{member.MemberProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberEntryIDs(); len(nodes) > 0 && !muo.mutation.MemberEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberEntryTable,
			Columns: []string{member.MemberEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberContentsIDs(); len(nodes) > 0 && !muo.mutation.MemberContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberContentsTable,
			Columns: []string{member.MemberContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberContestsIDs(); len(nodes) > 0 && !muo.mutation.MemberContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberContestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberContestsTable,
			Columns: member.MemberContestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contestparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberBootcampsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberBootcampsIDs(); len(nodes) > 0 && !muo.mutation.MemberBootcampsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberBootcampsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberBootcampsTable,
			Columns: member.MemberBootcampsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemberCommunitysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemberCommunitysIDs(); len(nodes) > 0 && !muo.mutation.MemberCommunitysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemberCommunitysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.MemberCommunitysTable,
			Columns: member.MemberCommunitysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package memberproduct

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldStatus, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldSn, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldType, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldMemberID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldProductID, v))
}

// VenueID applies equality check predicate on the "venue_id" field. It's identical to VenueIDEQ.
func VenueID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldVenueID, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldOrderID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldPrice, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldFee, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDuration, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldLength, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCount, v))
}

// CountSurplus applies equality check predicate on the "count_surplus" field. It's identical to CountSurplusEQ.
func CountSurplus(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCountSurplus, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDeadline, v))
}

// ValidityAt applies equality check predicate on the "validity_at" field. It's identical to ValidityAtEQ.
func ValidityAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldValidityAt, v))
}

// CancelAt applies equality check predicate on the "cancel_at" field. It's identical to CancelAtEQ.
func CancelAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCancelAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldStatus))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasSuffix(FieldSn, v))
}

// SnIsNil applies the IsNil predicate on the "sn" field.
func SnIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldSn))
}

// SnNotNil applies the NotNil predicate on the "sn" field.
func SnNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldSn))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContainsFold(FieldSn, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContainsFold(FieldType, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldMemberID))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldProductID))
}

// VenueIDEQ applies the EQ predicate on the "venue_id" field.
func VenueIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldVenueID, v))
}

// VenueIDNEQ applies the NEQ predicate on the "venue_id" field.
func VenueIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldVenueID, v))
}

// VenueIDIn applies the In predicate on the "venue_id" field.
func VenueIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldVenueID, vs...))
}

// VenueIDNotIn applies the NotIn predicate on the "venue_id" field.
func VenueIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldVenueID, vs...))
}

// VenueIDGT applies the GT predicate on the "venue_id" field.
func VenueIDGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldVenueID, v))
}

// VenueIDGTE applies the GTE predicate on the "venue_id" field.
func VenueIDGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldVenueID, v))
}

// VenueIDLT applies the LT predicate on the "venue_id" field.
func VenueIDLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldVenueID, v))
}

// VenueIDLTE applies the LTE predicate on the "venue_id" field.
func VenueIDLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldVenueID, v))
}

// VenueIDIsNil applies the IsNil predicate on the "venue_id" field.
func VenueIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldVenueID))
}

// VenueIDNotNil applies the NotNil predicate on the "venue_id" field.
func VenueIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldVenueID))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldOrderID, v))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldOrderID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldPrice))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldFee, v))
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldFee))
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldFee))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldDuration))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldLength))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCount))
}

// CountSurplusEQ applies the EQ predicate on the "count_surplus" field.
func CountSurplusEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCountSurplus, v))
}

// CountSurplusNEQ applies the NEQ predicate on the "count_surplus" field.
func CountSurplusNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCountSurplus, v))
}

// CountSurplusIn applies the In predicate on the "count_surplus" field.
func CountSurplusIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCountSurplus, vs...))
}

// CountSurplusNotIn applies the NotIn predicate on the "count_surplus" field.
func CountSurplusNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCountSurplus, vs...))
}

// CountSurplusGT applies the GT predicate on the "count_surplus" field.
func CountSurplusGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCountSurplus, v))
}

// CountSurplusGTE applies the GTE predicate on the "count_surplus" field.
func CountSurplusGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCountSurplus, v))
}

// CountSurplusLT applies the LT predicate on the "count_surplus" field.
func CountSurplusLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCountSurplus, v))
}

// CountSurplusLTE applies the LTE predicate on the "count_surplus" field.
func CountSurplusLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCountSurplus, v))
}

// CountSurplusIsNil applies the IsNil predicate on the "count_surplus" field.
func CountSurplusIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCountSurplus))
}

// CountSurplusNotNil applies the NotNil predicate on the "count_surplus" field.
func CountSurplusNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCountSurplus))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldDeadline))
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldDeadline))
}

// ValidityAtEQ applies the EQ predicate on the "validity_at" field.
func ValidityAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldValidityAt, v))
}

// ValidityAtNEQ applies the NEQ predicate on the "validity_at" field.
func ValidityAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldValidityAt, v))
}

// ValidityAtIn applies the In predicate on the "validity_at" field.
func ValidityAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldValidityAt, vs...))
}

// ValidityAtNotIn applies the NotIn predicate on the "validity_at" field.
func ValidityAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldValidityAt, vs...))
}

// ValidityAtGT applies the GT predicate on the "validity_at" field.
func ValidityAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldValidityAt, v))
}

// ValidityAtGTE applies the GTE predicate on the "validity_at" field.
func ValidityAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldValidityAt, v))
}

// ValidityAtLT applies the LT predicate on the "validity_at" field.
func ValidityAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldValidityAt, v))
}

// ValidityAtLTE applies the LTE predicate on the "validity_at" field.
func ValidityAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldValidityAt, v))
}

// ValidityAtIsNil applies the IsNil predicate on the "validity_at" field.
func ValidityAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldValidityAt))
}

// ValidityAtNotNil applies the NotNil predicate on the "validity_at" field.
func ValidityAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldValidityAt))
}

// CancelAtEQ applies the EQ predicate on the "cancel_at" field.
func CancelAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtNEQ applies the NEQ predicate on the "cancel_at" field.
func CancelAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCancelAt, v))
}

// CancelAtIn applies the In predicate on the "cancel_at" field.
func CancelAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCancelAt, vs...))
}

// CancelAtNotIn applies the NotIn predicate on the "cancel_at" field.
func CancelAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCancelAt, vs...))
}

// CancelAtGT applies the GT predicate on the "cancel_at" field.
func CancelAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCancelAt, v))
}

// CancelAtGTE applies the GTE predicate on the "cancel_at" field.
func CancelAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCancelAt, v))
}

// CancelAtLT applies the LT predicate on the "cancel_at" field.
func CancelAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCancelAt, v))
}

// CancelAtLTE applies the LTE predicate on the "cancel_at" field.
func CancelAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCancelAt, v))
}

// CancelAtIsNil applies the IsNil predicate on the "cancel_at" field.
func CancelAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCancelAt))
}

// CancelAtNotNil applies the NotNil predicate on the "cancel_at" field.
func CancelAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCancelAt))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.Member) predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberProductEntry applies the HasEdge predicate on the "member_product_entry" edge.
func HasMemberProductEntry() predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberProductEntryTable, MemberProductEntryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberProductEntryWith applies the HasEdge predicate on the "member_product_entry" edge with a given conditions (other predicates).
func HasMemberProductEntryWith(preds ...predicate.EntryLogs) predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := newMemberProductEntryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberProductContents applies the HasEdge predicate on the "member_product_contents" edge.
func HasMemberProductContents() predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberProductContentsTable, MemberProductContentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberProductContentsWith applies the HasEdge predicate on the "member_product_contents" edge with a given conditions (other predicates).
func HasMemberProductContentsWith(preds ...predicate.MemberContract) predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := newMemberProductContentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.NotPredicates(p))
}

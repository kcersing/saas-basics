// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/memberdetails"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MemberDetails is the model entity for the MemberDetails schema.
type MemberDetails struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 会员id
	MemberID int64 `json:"member_id,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// 消费总金额
	MoneySum float64 `json:"money_sum,omitempty"`
	// 首次的产品
	ProductID int64 `json:"product_id,omitempty"`
	// 首次的产品
	ProductName string `json:"product_name,omitempty"`
	// 进馆总次数
	EntrySum int64 `json:"entry_sum,omitempty"`
	// 最后一次进馆时间
	EntryLastTime time.Time `json:"entry_last_time,omitempty"`
	// 进馆最后期限时间
	EntryDeadlineTime time.Time `json:"entry_deadline_time,omitempty"`
	// 最后一次上课时间
	ClassLastTime time.Time `json:"class_last_time,omitempty"`
	// 跟进人员工
	RelationUID int64 `json:"relation_uid,omitempty"`
	// 跟进人员工
	RelationUname string `json:"relation_uname,omitempty"`
	// 关联会员
	RelationMid int64 `json:"relation_mid,omitempty"`
	// 关联会员
	RelationMame string `json:"relation_mame,omitempty"`
	// 成为会员时间
	FirstTime time.Time `json:"first_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberDetailsQuery when eager-loading is set.
	Edges        MemberDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberDetailsEdges holds the relations/edges for other nodes in the graph.
type MemberDetailsEdges struct {
	// Member holds the value of the member edge.
	Member *Member `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberDetailsEdges) MemberOrErr() (*Member, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: member.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberdetails.FieldMoneySum:
			values[i] = new(sql.NullFloat64)
		case memberdetails.FieldID, memberdetails.FieldDelete, memberdetails.FieldCreatedID, memberdetails.FieldMemberID, memberdetails.FieldVenueID, memberdetails.FieldProductID, memberdetails.FieldEntrySum, memberdetails.FieldRelationUID, memberdetails.FieldRelationMid:
			values[i] = new(sql.NullInt64)
		case memberdetails.FieldProductName, memberdetails.FieldRelationUname, memberdetails.FieldRelationMame:
			values[i] = new(sql.NullString)
		case memberdetails.FieldCreatedAt, memberdetails.FieldUpdatedAt, memberdetails.FieldEntryLastTime, memberdetails.FieldEntryDeadlineTime, memberdetails.FieldClassLastTime, memberdetails.FieldFirstTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberDetails fields.
func (md *MemberDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			md.ID = int64(value.Int64)
		case memberdetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				md.CreatedAt = value.Time
			}
		case memberdetails.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				md.UpdatedAt = value.Time
			}
		case memberdetails.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				md.Delete = value.Int64
			}
		case memberdetails.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				md.CreatedID = value.Int64
			}
		case memberdetails.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				md.MemberID = value.Int64
			}
		case memberdetails.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				md.VenueID = value.Int64
			}
		case memberdetails.FieldMoneySum:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field money_sum", values[i])
			} else if value.Valid {
				md.MoneySum = value.Float64
			}
		case memberdetails.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				md.ProductID = value.Int64
			}
		case memberdetails.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				md.ProductName = value.String
			}
		case memberdetails.FieldEntrySum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entry_sum", values[i])
			} else if value.Valid {
				md.EntrySum = value.Int64
			}
		case memberdetails.FieldEntryLastTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field entry_last_time", values[i])
			} else if value.Valid {
				md.EntryLastTime = value.Time
			}
		case memberdetails.FieldEntryDeadlineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field entry_deadline_time", values[i])
			} else if value.Valid {
				md.EntryDeadlineTime = value.Time
			}
		case memberdetails.FieldClassLastTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field class_last_time", values[i])
			} else if value.Valid {
				md.ClassLastTime = value.Time
			}
		case memberdetails.FieldRelationUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relation_uid", values[i])
			} else if value.Valid {
				md.RelationUID = value.Int64
			}
		case memberdetails.FieldRelationUname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation_uname", values[i])
			} else if value.Valid {
				md.RelationUname = value.String
			}
		case memberdetails.FieldRelationMid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relation_mid", values[i])
			} else if value.Valid {
				md.RelationMid = value.Int64
			}
		case memberdetails.FieldRelationMame:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation_mame", values[i])
			} else if value.Valid {
				md.RelationMame = value.String
			}
		case memberdetails.FieldFirstTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_time", values[i])
			} else if value.Valid {
				md.FirstTime = value.Time
			}
		default:
			md.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberDetails.
// This includes values selected through modifiers, order, etc.
func (md *MemberDetails) Value(name string) (ent.Value, error) {
	return md.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the MemberDetails entity.
func (md *MemberDetails) QueryMember() *MemberQuery {
	return NewMemberDetailsClient(md.config).QueryMember(md)
}

// Update returns a builder for updating this MemberDetails.
// Note that you need to call MemberDetails.Unwrap() before calling this method if this MemberDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *MemberDetails) Update() *MemberDetailsUpdateOne {
	return NewMemberDetailsClient(md.config).UpdateOne(md)
}

// Unwrap unwraps the MemberDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *MemberDetails) Unwrap() *MemberDetails {
	_tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberDetails is not a transactional entity")
	}
	md.config.driver = _tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *MemberDetails) String() string {
	var builder strings.Builder
	builder.WriteString("MemberDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", md.ID))
	builder.WriteString("created_at=")
	builder.WriteString(md.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(md.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", md.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", md.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", md.MemberID))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", md.VenueID))
	builder.WriteString(", ")
	builder.WriteString("money_sum=")
	builder.WriteString(fmt.Sprintf("%v", md.MoneySum))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", md.ProductID))
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(md.ProductName)
	builder.WriteString(", ")
	builder.WriteString("entry_sum=")
	builder.WriteString(fmt.Sprintf("%v", md.EntrySum))
	builder.WriteString(", ")
	builder.WriteString("entry_last_time=")
	builder.WriteString(md.EntryLastTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entry_deadline_time=")
	builder.WriteString(md.EntryDeadlineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("class_last_time=")
	builder.WriteString(md.ClassLastTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("relation_uid=")
	builder.WriteString(fmt.Sprintf("%v", md.RelationUID))
	builder.WriteString(", ")
	builder.WriteString("relation_uname=")
	builder.WriteString(md.RelationUname)
	builder.WriteString(", ")
	builder.WriteString("relation_mid=")
	builder.WriteString(fmt.Sprintf("%v", md.RelationMid))
	builder.WriteString(", ")
	builder.WriteString("relation_mame=")
	builder.WriteString(md.RelationMame)
	builder.WriteString(", ")
	builder.WriteString("first_time=")
	builder.WriteString(md.FirstTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MemberDetailsSlice is a parsable slice of MemberDetails.
type MemberDetailsSlice []*MemberDetails

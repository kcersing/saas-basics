// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/dictionarydetail"
	"saas/biz/dal/db/ent/entrylogs"
	"saas/biz/dal/db/ent/order"
	"saas/biz/dal/db/ent/role"
	"saas/biz/dal/db/ent/token"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/usertimeperiod"
	"saas/biz/dal/db/ent/venue"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDelete sets the "delete" field.
func (uc *UserCreate) SetDelete(i int64) *UserCreate {
	uc.mutation.SetDelete(i)
	return uc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (uc *UserCreate) SetNillableDelete(i *int64) *UserCreate {
	if i != nil {
		uc.SetDelete(*i)
	}
	return uc
}

// SetCreatedID sets the "created_id" field.
func (uc *UserCreate) SetCreatedID(i int64) *UserCreate {
	uc.mutation.SetCreatedID(i)
	return uc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedID(i *int64) *UserCreate {
	if i != nil {
		uc.SetCreatedID(*i)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(i int64) *UserCreate {
	uc.mutation.SetStatus(i)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(i *int64) *UserCreate {
	if i != nil {
		uc.SetStatus(*i)
	}
	return uc
}

// SetMobile sets the "mobile" field.
func (uc *UserCreate) SetMobile(s string) *UserCreate {
	uc.mutation.SetMobile(s)
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetGender sets the "gender" field.
func (uc *UserCreate) SetGender(i int64) *UserCreate {
	uc.mutation.SetGender(i)
	return uc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uc *UserCreate) SetNillableGender(i *int64) *UserCreate {
	if i != nil {
		uc.SetGender(*i)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetFunctions sets the "functions" field.
func (uc *UserCreate) SetFunctions(s []string) *UserCreate {
	uc.mutation.SetFunctions(s)
	return uc
}

// SetType sets the "type" field.
func (uc *UserCreate) SetType(i int64) *UserCreate {
	uc.mutation.SetType(i)
	return uc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uc *UserCreate) SetNillableType(i *int64) *UserCreate {
	if i != nil {
		uc.SetType(*i)
	}
	return uc
}

// SetJobTime sets the "job_time" field.
func (uc *UserCreate) SetJobTime(i int64) *UserCreate {
	uc.mutation.SetJobTime(i)
	return uc
}

// SetNillableJobTime sets the "job_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableJobTime(i *int64) *UserCreate {
	if i != nil {
		uc.SetJobTime(*i)
	}
	return uc
}

// SetDefaultVenueID sets the "default_venue_id" field.
func (uc *UserCreate) SetDefaultVenueID(i int64) *UserCreate {
	uc.mutation.SetDefaultVenueID(i)
	return uc
}

// SetNillableDefaultVenueID sets the "default_venue_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableDefaultVenueID(i *int64) *UserCreate {
	if i != nil {
		uc.SetDefaultVenueID(*i)
	}
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetDetail sets the "detail" field.
func (uc *UserCreate) SetDetail(s string) *UserCreate {
	uc.mutation.SetDetail(s)
	return uc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uc *UserCreate) SetNillableDetail(s *string) *UserCreate {
	if s != nil {
		uc.SetDetail(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (uc *UserCreate) SetTokenID(id int64) *UserCreate {
	uc.mutation.SetTokenID(id)
	return uc
}

// SetNillableTokenID sets the "token" edge to the Token entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableTokenID(id *int64) *UserCreate {
	if id != nil {
		uc = uc.SetTokenID(*id)
	}
	return uc
}

// SetToken sets the "token" edge to the Token entity.
func (uc *UserCreate) SetToken(t *Token) *UserCreate {
	return uc.SetTokenID(t.ID)
}

// AddTagIDs adds the "tags" edge to the DictionaryDetail entity by IDs.
func (uc *UserCreate) AddTagIDs(ids ...int64) *UserCreate {
	uc.mutation.AddTagIDs(ids...)
	return uc
}

// AddTags adds the "tags" edges to the DictionaryDetail entity.
func (uc *UserCreate) AddTags(d ...*DictionaryDetail) *UserCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddTagIDs(ids...)
}

// AddCreatedOrderIDs adds the "created_orders" edge to the Order entity by IDs.
func (uc *UserCreate) AddCreatedOrderIDs(ids ...int64) *UserCreate {
	uc.mutation.AddCreatedOrderIDs(ids...)
	return uc
}

// AddCreatedOrders adds the "created_orders" edges to the Order entity.
func (uc *UserCreate) AddCreatedOrders(o ...*Order) *UserCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddCreatedOrderIDs(ids...)
}

// AddUserEntryIDs adds the "user_entry" edge to the EntryLogs entity by IDs.
func (uc *UserCreate) AddUserEntryIDs(ids ...int64) *UserCreate {
	uc.mutation.AddUserEntryIDs(ids...)
	return uc
}

// AddUserEntry adds the "user_entry" edges to the EntryLogs entity.
func (uc *UserCreate) AddUserEntry(e ...*EntryLogs) *UserCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddUserEntryIDs(ids...)
}

// AddVenueIDs adds the "venues" edge to the Venue entity by IDs.
func (uc *UserCreate) AddVenueIDs(ids ...int64) *UserCreate {
	uc.mutation.AddVenueIDs(ids...)
	return uc
}

// AddVenues adds the "venues" edges to the Venue entity.
func (uc *UserCreate) AddVenues(v ...*Venue) *UserCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVenueIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uc *UserCreate) AddRoleIDs(ids ...int64) *UserCreate {
	uc.mutation.AddRoleIDs(ids...)
	return uc
}

// AddRoles adds the "roles" edges to the Role entity.
func (uc *UserCreate) AddRoles(r ...*Role) *UserCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRoleIDs(ids...)
}

// AddUserTimePeriodIDs adds the "user_time_period" edge to the UserTimePeriod entity by IDs.
func (uc *UserCreate) AddUserTimePeriodIDs(ids ...int64) *UserCreate {
	uc.mutation.AddUserTimePeriodIDs(ids...)
	return uc
}

// AddUserTimePeriod adds the "user_time_period" edges to the UserTimePeriod entity.
func (uc *UserCreate) AddUserTimePeriod(u ...*UserTimePeriod) *UserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserTimePeriodIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Delete(); !ok {
		v := user.DefaultDelete
		uc.mutation.SetDelete(v)
	}
	if _, ok := uc.mutation.CreatedID(); !ok {
		v := user.DefaultCreatedID
		uc.mutation.SetCreatedID(v)
	}
	if _, ok := uc.mutation.Status(); !ok {
		v := user.DefaultStatus
		uc.mutation.SetStatus(v)
	}
	if _, ok := uc.mutation.Gender(); !ok {
		v := user.DefaultGender
		uc.mutation.SetGender(v)
	}
	if _, ok := uc.mutation.GetType(); !ok {
		v := user.DefaultType
		uc.mutation.SetType(v)
	}
	if _, ok := uc.mutation.JobTime(); !ok {
		v := user.DefaultJobTime
		uc.mutation.SetJobTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "User.mobile"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Functions(); !ok {
		return &ValidationError{Name: "functions", err: errors.New(`ent: missing required field "User.functions"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	)
	_spec.Schema = uc.schemaConfig.User
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Delete(); ok {
		_spec.SetField(user.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := uc.mutation.CreatedID(); ok {
		_spec.SetField(user.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt64, value)
		_node.Gender = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.Functions(); ok {
		_spec.SetField(user.FieldFunctions, field.TypeJSON, value)
		_node.Functions = value
	}
	if value, ok := uc.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeInt64, value)
		_node.Type = value
	}
	if value, ok := uc.mutation.JobTime(); ok {
		_spec.SetField(user.FieldJobTime, field.TypeInt64, value)
		_node.JobTime = value
	}
	if value, ok := uc.mutation.DefaultVenueID(); ok {
		_spec.SetField(user.FieldDefaultVenueID, field.TypeInt64, value)
		_node.DefaultVenueID = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := uc.mutation.Detail(); ok {
		_spec.SetField(user.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if nodes := uc.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TokenTable,
			Columns: []string{user.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.Token
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TagsTable,
			Columns: user.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.UserTags
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreatedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedOrdersTable,
			Columns: []string{user.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserEntryTable,
			Columns: []string{user.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.EntryLogs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.VenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VenuesTable,
			Columns: user.VenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.UserVenues
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.UserRoles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserTimePeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTimePeriodTable,
			Columns: []string{user.UserTimePeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertimeperiod.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = uc.schemaConfig.UserTimePeriod
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

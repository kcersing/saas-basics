// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/memberproductcourses"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductCoursesCreate is the builder for creating a MemberProductCourses entity.
type MemberProductCoursesCreate struct {
	config
	mutation *MemberProductCoursesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mpcc *MemberProductCoursesCreate) SetCreatedAt(t time.Time) *MemberProductCoursesCreate {
	mpcc.mutation.SetCreatedAt(t)
	return mpcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableCreatedAt(t *time.Time) *MemberProductCoursesCreate {
	if t != nil {
		mpcc.SetCreatedAt(*t)
	}
	return mpcc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpcc *MemberProductCoursesCreate) SetUpdatedAt(t time.Time) *MemberProductCoursesCreate {
	mpcc.mutation.SetUpdatedAt(t)
	return mpcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableUpdatedAt(t *time.Time) *MemberProductCoursesCreate {
	if t != nil {
		mpcc.SetUpdatedAt(*t)
	}
	return mpcc
}

// SetDelete sets the "delete" field.
func (mpcc *MemberProductCoursesCreate) SetDelete(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetDelete(i)
	return mpcc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableDelete(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetDelete(*i)
	}
	return mpcc
}

// SetCreatedID sets the "created_id" field.
func (mpcc *MemberProductCoursesCreate) SetCreatedID(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetCreatedID(i)
	return mpcc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableCreatedID(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetCreatedID(*i)
	}
	return mpcc
}

// SetStatus sets the "status" field.
func (mpcc *MemberProductCoursesCreate) SetStatus(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetStatus(i)
	return mpcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableStatus(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetStatus(*i)
	}
	return mpcc
}

// SetType sets the "type" field.
func (mpcc *MemberProductCoursesCreate) SetType(s string) *MemberProductCoursesCreate {
	mpcc.mutation.SetType(s)
	return mpcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableType(s *string) *MemberProductCoursesCreate {
	if s != nil {
		mpcc.SetType(*s)
	}
	return mpcc
}

// SetName sets the "name" field.
func (mpcc *MemberProductCoursesCreate) SetName(s string) *MemberProductCoursesCreate {
	mpcc.mutation.SetName(s)
	return mpcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableName(s *string) *MemberProductCoursesCreate {
	if s != nil {
		mpcc.SetName(*s)
	}
	return mpcc
}

// SetNumber sets the "number" field.
func (mpcc *MemberProductCoursesCreate) SetNumber(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetNumber(i)
	return mpcc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableNumber(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetNumber(*i)
	}
	return mpcc
}

// SetMemberProductID sets the "member_product_id" field.
func (mpcc *MemberProductCoursesCreate) SetMemberProductID(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetMemberProductID(i)
	return mpcc
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableMemberProductID(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetMemberProductID(*i)
	}
	return mpcc
}

// SetCoursesID sets the "courses_id" field.
func (mpcc *MemberProductCoursesCreate) SetCoursesID(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetCoursesID(i)
	return mpcc
}

// SetNillableCoursesID sets the "courses_id" field if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableCoursesID(i *int64) *MemberProductCoursesCreate {
	if i != nil {
		mpcc.SetCoursesID(*i)
	}
	return mpcc
}

// SetID sets the "id" field.
func (mpcc *MemberProductCoursesCreate) SetID(i int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetID(i)
	return mpcc
}

// SetProductCoursesID sets the "productCourses" edge to the MemberProduct entity by ID.
func (mpcc *MemberProductCoursesCreate) SetProductCoursesID(id int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetProductCoursesID(id)
	return mpcc
}

// SetNillableProductCoursesID sets the "productCourses" edge to the MemberProduct entity by ID if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableProductCoursesID(id *int64) *MemberProductCoursesCreate {
	if id != nil {
		mpcc = mpcc.SetProductCoursesID(*id)
	}
	return mpcc
}

// SetProductCourses sets the "productCourses" edge to the MemberProduct entity.
func (mpcc *MemberProductCoursesCreate) SetProductCourses(m *MemberProduct) *MemberProductCoursesCreate {
	return mpcc.SetProductCoursesID(m.ID)
}

// SetProductLessonsID sets the "productLessons" edge to the MemberProduct entity by ID.
func (mpcc *MemberProductCoursesCreate) SetProductLessonsID(id int64) *MemberProductCoursesCreate {
	mpcc.mutation.SetProductLessonsID(id)
	return mpcc
}

// SetNillableProductLessonsID sets the "productLessons" edge to the MemberProduct entity by ID if the given value is not nil.
func (mpcc *MemberProductCoursesCreate) SetNillableProductLessonsID(id *int64) *MemberProductCoursesCreate {
	if id != nil {
		mpcc = mpcc.SetProductLessonsID(*id)
	}
	return mpcc
}

// SetProductLessons sets the "productLessons" edge to the MemberProduct entity.
func (mpcc *MemberProductCoursesCreate) SetProductLessons(m *MemberProduct) *MemberProductCoursesCreate {
	return mpcc.SetProductLessonsID(m.ID)
}

// Mutation returns the MemberProductCoursesMutation object of the builder.
func (mpcc *MemberProductCoursesCreate) Mutation() *MemberProductCoursesMutation {
	return mpcc.mutation
}

// Save creates the MemberProductCourses in the database.
func (mpcc *MemberProductCoursesCreate) Save(ctx context.Context) (*MemberProductCourses, error) {
	mpcc.defaults()
	return withHooks(ctx, mpcc.sqlSave, mpcc.mutation, mpcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpcc *MemberProductCoursesCreate) SaveX(ctx context.Context) *MemberProductCourses {
	v, err := mpcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcc *MemberProductCoursesCreate) Exec(ctx context.Context) error {
	_, err := mpcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcc *MemberProductCoursesCreate) ExecX(ctx context.Context) {
	if err := mpcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpcc *MemberProductCoursesCreate) defaults() {
	if _, ok := mpcc.mutation.CreatedAt(); !ok {
		v := memberproductcourses.DefaultCreatedAt()
		mpcc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpcc.mutation.UpdatedAt(); !ok {
		v := memberproductcourses.DefaultUpdatedAt()
		mpcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpcc.mutation.Delete(); !ok {
		v := memberproductcourses.DefaultDelete
		mpcc.mutation.SetDelete(v)
	}
	if _, ok := mpcc.mutation.CreatedID(); !ok {
		v := memberproductcourses.DefaultCreatedID
		mpcc.mutation.SetCreatedID(v)
	}
	if _, ok := mpcc.mutation.Status(); !ok {
		v := memberproductcourses.DefaultStatus
		mpcc.mutation.SetStatus(v)
	}
	if _, ok := mpcc.mutation.GetType(); !ok {
		v := memberproductcourses.DefaultType
		mpcc.mutation.SetType(v)
	}
	if _, ok := mpcc.mutation.Name(); !ok {
		v := memberproductcourses.DefaultName
		mpcc.mutation.SetName(v)
	}
	if _, ok := mpcc.mutation.Number(); !ok {
		v := memberproductcourses.DefaultNumber
		mpcc.mutation.SetNumber(v)
	}
	if _, ok := mpcc.mutation.MemberProductID(); !ok {
		v := memberproductcourses.DefaultMemberProductID
		mpcc.mutation.SetMemberProductID(v)
	}
	if _, ok := mpcc.mutation.CoursesID(); !ok {
		v := memberproductcourses.DefaultCoursesID
		mpcc.mutation.SetCoursesID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpcc *MemberProductCoursesCreate) check() error {
	return nil
}

func (mpcc *MemberProductCoursesCreate) sqlSave(ctx context.Context) (*MemberProductCourses, error) {
	if err := mpcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mpcc.mutation.id = &_node.ID
	mpcc.mutation.done = true
	return _node, nil
}

func (mpcc *MemberProductCoursesCreate) createSpec() (*MemberProductCourses, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberProductCourses{config: mpcc.config}
		_spec = sqlgraph.NewCreateSpec(memberproductcourses.Table, sqlgraph.NewFieldSpec(memberproductcourses.FieldID, field.TypeInt64))
	)
	if id, ok := mpcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpcc.mutation.CreatedAt(); ok {
		_spec.SetField(memberproductcourses.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpcc.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductcourses.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mpcc.mutation.Delete(); ok {
		_spec.SetField(memberproductcourses.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := mpcc.mutation.CreatedID(); ok {
		_spec.SetField(memberproductcourses.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := mpcc.mutation.Status(); ok {
		_spec.SetField(memberproductcourses.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := mpcc.mutation.GetType(); ok {
		_spec.SetField(memberproductcourses.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mpcc.mutation.Name(); ok {
		_spec.SetField(memberproductcourses.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mpcc.mutation.Number(); ok {
		_spec.SetField(memberproductcourses.FieldNumber, field.TypeInt64, value)
		_node.Number = value
	}
	if value, ok := mpcc.mutation.CoursesID(); ok {
		_spec.SetField(memberproductcourses.FieldCoursesID, field.TypeInt64, value)
		_node.CoursesID = value
	}
	if nodes := mpcc.mutation.ProductCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductcourses.ProductCoursesTable,
			Columns: []string{memberproductcourses.ProductCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpcc.mutation.ProductLessonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductcourses.ProductLessonsTable,
			Columns: []string{memberproductcourses.ProductLessonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberProductCoursesCreateBulk is the builder for creating many MemberProductCourses entities in bulk.
type MemberProductCoursesCreateBulk struct {
	config
	err      error
	builders []*MemberProductCoursesCreate
}

// Save creates the MemberProductCourses entities in the database.
func (mpccb *MemberProductCoursesCreateBulk) Save(ctx context.Context) ([]*MemberProductCourses, error) {
	if mpccb.err != nil {
		return nil, mpccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpccb.builders))
	nodes := make([]*MemberProductCourses, len(mpccb.builders))
	mutators := make([]Mutator, len(mpccb.builders))
	for i := range mpccb.builders {
		func(i int, root context.Context) {
			builder := mpccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberProductCoursesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpccb *MemberProductCoursesCreateBulk) SaveX(ctx context.Context) []*MemberProductCourses {
	v, err := mpccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpccb *MemberProductCoursesCreateBulk) Exec(ctx context.Context) error {
	_, err := mpccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpccb *MemberProductCoursesCreateBulk) ExecX(ctx context.Context) {
	if err := mpccb.Exec(ctx); err != nil {
		panic(err)
	}
}

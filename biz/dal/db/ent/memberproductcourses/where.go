// Code generated by ent, DO NOT EDIT.

package memberproductcourses

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCreatedID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldStatus, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldName, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldNumber, v))
}

// MemberProductID applies equality check predicate on the "member_product_id" field. It's identical to MemberProductIDEQ.
func MemberProductID(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldMemberProductID, v))
}

// CoursesID applies equality check predicate on the "courses_id" field. It's identical to CoursesIDEQ.
func CoursesID(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCoursesID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldCreatedID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldStatus))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldContainsFold(FieldName, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldNumber))
}

// MemberProductIDEQ applies the EQ predicate on the "member_product_id" field.
func MemberProductIDEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldMemberProductID, v))
}

// MemberProductIDNEQ applies the NEQ predicate on the "member_product_id" field.
func MemberProductIDNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldMemberProductID, v))
}

// MemberProductIDIn applies the In predicate on the "member_product_id" field.
func MemberProductIDIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldMemberProductID, vs...))
}

// MemberProductIDNotIn applies the NotIn predicate on the "member_product_id" field.
func MemberProductIDNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldMemberProductID, vs...))
}

// MemberProductIDIsNil applies the IsNil predicate on the "member_product_id" field.
func MemberProductIDIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldMemberProductID))
}

// MemberProductIDNotNil applies the NotNil predicate on the "member_product_id" field.
func MemberProductIDNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldMemberProductID))
}

// CoursesIDEQ applies the EQ predicate on the "courses_id" field.
func CoursesIDEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldEQ(FieldCoursesID, v))
}

// CoursesIDNEQ applies the NEQ predicate on the "courses_id" field.
func CoursesIDNEQ(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNEQ(FieldCoursesID, v))
}

// CoursesIDIn applies the In predicate on the "courses_id" field.
func CoursesIDIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIn(FieldCoursesID, vs...))
}

// CoursesIDNotIn applies the NotIn predicate on the "courses_id" field.
func CoursesIDNotIn(vs ...int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotIn(FieldCoursesID, vs...))
}

// CoursesIDGT applies the GT predicate on the "courses_id" field.
func CoursesIDGT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGT(FieldCoursesID, v))
}

// CoursesIDGTE applies the GTE predicate on the "courses_id" field.
func CoursesIDGTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldGTE(FieldCoursesID, v))
}

// CoursesIDLT applies the LT predicate on the "courses_id" field.
func CoursesIDLT(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLT(FieldCoursesID, v))
}

// CoursesIDLTE applies the LTE predicate on the "courses_id" field.
func CoursesIDLTE(v int64) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldLTE(FieldCoursesID, v))
}

// CoursesIDIsNil applies the IsNil predicate on the "courses_id" field.
func CoursesIDIsNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldIsNull(FieldCoursesID))
}

// CoursesIDNotNil applies the NotNil predicate on the "courses_id" field.
func CoursesIDNotNil() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.FieldNotNull(FieldCoursesID))
}

// HasNodeC applies the HasEdge predicate on the "nodeC" edge.
func HasNodeC() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeCTable, NodeCColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeCWith applies the HasEdge predicate on the "nodeC" edge with a given conditions (other predicates).
func HasNodeCWith(preds ...predicate.MemberProduct) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(func(s *sql.Selector) {
		step := newNodeCStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodeL applies the HasEdge predicate on the "nodeL" edge.
func HasNodeL() predicate.MemberProductCourses {
	return predicate.MemberProductCourses(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeLTable, NodeLColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeLWith applies the HasEdge predicate on the "nodeL" edge with a given conditions (other predicates).
func HasNodeLWith(preds ...predicate.MemberProduct) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(func(s *sql.Selector) {
		step := newNodeLStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProductCourses) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProductCourses) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProductCourses) predicate.MemberProductCourses {
	return predicate.MemberProductCourses(sql.NotPredicates(p))
}

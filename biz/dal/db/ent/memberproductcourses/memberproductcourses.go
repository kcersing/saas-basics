// Code generated by ent, DO NOT EDIT.

package memberproductcourses

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the memberproductcourses type in the database.
	Label = "member_product_courses"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldMemberProductID holds the string denoting the member_product_id field in the database.
	FieldMemberProductID = "member_product_id"
	// FieldCoursesID holds the string denoting the courses_id field in the database.
	FieldCoursesID = "courses_id"
	// EdgeProductCourses holds the string denoting the productcourses edge name in mutations.
	EdgeProductCourses = "productCourses"
	// EdgeProductLessons holds the string denoting the productlessons edge name in mutations.
	EdgeProductLessons = "productLessons"
	// Table holds the table name of the memberproductcourses in the database.
	Table = "member_product_courses"
	// ProductCoursesTable is the table that holds the productCourses relation/edge.
	ProductCoursesTable = "member_product_courses"
	// ProductCoursesInverseTable is the table name for the MemberProduct entity.
	// It exists in this package in order to avoid circular dependency with the "memberproduct" package.
	ProductCoursesInverseTable = "member_product"
	// ProductCoursesColumn is the table column denoting the productCourses relation/edge.
	ProductCoursesColumn = "member_product_id"
	// ProductLessonsTable is the table that holds the productLessons relation/edge.
	ProductLessonsTable = "member_product_courses"
	// ProductLessonsInverseTable is the table name for the MemberProduct entity.
	// It exists in this package in order to avoid circular dependency with the "memberproduct" package.
	ProductLessonsInverseTable = "member_product"
	// ProductLessonsColumn is the table column denoting the productLessons relation/edge.
	ProductLessonsColumn = "member_product_id"
)

// Columns holds all SQL columns for memberproductcourses fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldType,
	FieldName,
	FieldNumber,
	FieldMemberProductID,
	FieldCoursesID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultNumber holds the default value on creation for the "number" field.
	DefaultNumber int64
	// DefaultMemberProductID holds the default value on creation for the "member_product_id" field.
	DefaultMemberProductID int64
	// DefaultCoursesID holds the default value on creation for the "courses_id" field.
	DefaultCoursesID int64
)

// OrderOption defines the ordering options for the MemberProductCourses queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByMemberProductID orders the results by the member_product_id field.
func ByMemberProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberProductID, opts...).ToFunc()
}

// ByCoursesID orders the results by the courses_id field.
func ByCoursesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoursesID, opts...).ToFunc()
}

// ByProductCoursesField orders the results by productCourses field.
func ByProductCoursesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductCoursesStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductLessonsField orders the results by productLessons field.
func ByProductLessonsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductLessonsStep(), sql.OrderByField(field, opts...))
	}
}
func newProductCoursesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductCoursesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductCoursesTable, ProductCoursesColumn),
	)
}
func newProductLessonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductLessonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductLessonsTable, ProductLessonsColumn),
	)
}

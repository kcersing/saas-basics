// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/bootcamp"
	"saas/biz/dal/db/ent/bootcampparticipant"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BootcampParticipantUpdate is the builder for updating BootcampParticipant entities.
type BootcampParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *BootcampParticipantMutation
}

// Where appends a list predicates to the BootcampParticipantUpdate builder.
func (bpu *BootcampParticipantUpdate) Where(ps ...predicate.BootcampParticipant) *BootcampParticipantUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetUpdatedAt sets the "updated_at" field.
func (bpu *BootcampParticipantUpdate) SetUpdatedAt(t time.Time) *BootcampParticipantUpdate {
	bpu.mutation.SetUpdatedAt(t)
	return bpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bpu *BootcampParticipantUpdate) ClearUpdatedAt() *BootcampParticipantUpdate {
	bpu.mutation.ClearUpdatedAt()
	return bpu
}

// SetDelete sets the "delete" field.
func (bpu *BootcampParticipantUpdate) SetDelete(i int64) *BootcampParticipantUpdate {
	bpu.mutation.ResetDelete()
	bpu.mutation.SetDelete(i)
	return bpu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableDelete(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetDelete(*i)
	}
	return bpu
}

// AddDelete adds i to the "delete" field.
func (bpu *BootcampParticipantUpdate) AddDelete(i int64) *BootcampParticipantUpdate {
	bpu.mutation.AddDelete(i)
	return bpu
}

// ClearDelete clears the value of the "delete" field.
func (bpu *BootcampParticipantUpdate) ClearDelete() *BootcampParticipantUpdate {
	bpu.mutation.ClearDelete()
	return bpu
}

// SetCreatedID sets the "created_id" field.
func (bpu *BootcampParticipantUpdate) SetCreatedID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.ResetCreatedID()
	bpu.mutation.SetCreatedID(i)
	return bpu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableCreatedID(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetCreatedID(*i)
	}
	return bpu
}

// AddCreatedID adds i to the "created_id" field.
func (bpu *BootcampParticipantUpdate) AddCreatedID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.AddCreatedID(i)
	return bpu
}

// ClearCreatedID clears the value of the "created_id" field.
func (bpu *BootcampParticipantUpdate) ClearCreatedID() *BootcampParticipantUpdate {
	bpu.mutation.ClearCreatedID()
	return bpu
}

// SetStatus sets the "status" field.
func (bpu *BootcampParticipantUpdate) SetStatus(i int64) *BootcampParticipantUpdate {
	bpu.mutation.ResetStatus()
	bpu.mutation.SetStatus(i)
	return bpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableStatus(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetStatus(*i)
	}
	return bpu
}

// AddStatus adds i to the "status" field.
func (bpu *BootcampParticipantUpdate) AddStatus(i int64) *BootcampParticipantUpdate {
	bpu.mutation.AddStatus(i)
	return bpu
}

// ClearStatus clears the value of the "status" field.
func (bpu *BootcampParticipantUpdate) ClearStatus() *BootcampParticipantUpdate {
	bpu.mutation.ClearStatus()
	return bpu
}

// SetBootcampID sets the "bootcamp_id" field.
func (bpu *BootcampParticipantUpdate) SetBootcampID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.SetBootcampID(i)
	return bpu
}

// SetNillableBootcampID sets the "bootcamp_id" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableBootcampID(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetBootcampID(*i)
	}
	return bpu
}

// ClearBootcampID clears the value of the "bootcamp_id" field.
func (bpu *BootcampParticipantUpdate) ClearBootcampID() *BootcampParticipantUpdate {
	bpu.mutation.ClearBootcampID()
	return bpu
}

// SetName sets the "name" field.
func (bpu *BootcampParticipantUpdate) SetName(s string) *BootcampParticipantUpdate {
	bpu.mutation.SetName(s)
	return bpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableName(s *string) *BootcampParticipantUpdate {
	if s != nil {
		bpu.SetName(*s)
	}
	return bpu
}

// ClearName clears the value of the "name" field.
func (bpu *BootcampParticipantUpdate) ClearName() *BootcampParticipantUpdate {
	bpu.mutation.ClearName()
	return bpu
}

// SetMobile sets the "mobile" field.
func (bpu *BootcampParticipantUpdate) SetMobile(s string) *BootcampParticipantUpdate {
	bpu.mutation.SetMobile(s)
	return bpu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableMobile(s *string) *BootcampParticipantUpdate {
	if s != nil {
		bpu.SetMobile(*s)
	}
	return bpu
}

// ClearMobile clears the value of the "mobile" field.
func (bpu *BootcampParticipantUpdate) ClearMobile() *BootcampParticipantUpdate {
	bpu.mutation.ClearMobile()
	return bpu
}

// SetFields sets the "fields" field.
func (bpu *BootcampParticipantUpdate) SetFields(s string) *BootcampParticipantUpdate {
	bpu.mutation.SetFields(s)
	return bpu
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableFields(s *string) *BootcampParticipantUpdate {
	if s != nil {
		bpu.SetFields(*s)
	}
	return bpu
}

// ClearFields clears the value of the "fields" field.
func (bpu *BootcampParticipantUpdate) ClearFields() *BootcampParticipantUpdate {
	bpu.mutation.ClearFields()
	return bpu
}

// SetOrderID sets the "order_id" field.
func (bpu *BootcampParticipantUpdate) SetOrderID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.ResetOrderID()
	bpu.mutation.SetOrderID(i)
	return bpu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableOrderID(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetOrderID(*i)
	}
	return bpu
}

// AddOrderID adds i to the "order_id" field.
func (bpu *BootcampParticipantUpdate) AddOrderID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.AddOrderID(i)
	return bpu
}

// ClearOrderID clears the value of the "order_id" field.
func (bpu *BootcampParticipantUpdate) ClearOrderID() *BootcampParticipantUpdate {
	bpu.mutation.ClearOrderID()
	return bpu
}

// SetOrderSn sets the "order_sn" field.
func (bpu *BootcampParticipantUpdate) SetOrderSn(s string) *BootcampParticipantUpdate {
	bpu.mutation.SetOrderSn(s)
	return bpu
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableOrderSn(s *string) *BootcampParticipantUpdate {
	if s != nil {
		bpu.SetOrderSn(*s)
	}
	return bpu
}

// ClearOrderSn clears the value of the "order_sn" field.
func (bpu *BootcampParticipantUpdate) ClearOrderSn() *BootcampParticipantUpdate {
	bpu.mutation.ClearOrderSn()
	return bpu
}

// SetFee sets the "fee" field.
func (bpu *BootcampParticipantUpdate) SetFee(f float64) *BootcampParticipantUpdate {
	bpu.mutation.ResetFee()
	bpu.mutation.SetFee(f)
	return bpu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableFee(f *float64) *BootcampParticipantUpdate {
	if f != nil {
		bpu.SetFee(*f)
	}
	return bpu
}

// AddFee adds f to the "fee" field.
func (bpu *BootcampParticipantUpdate) AddFee(f float64) *BootcampParticipantUpdate {
	bpu.mutation.AddFee(f)
	return bpu
}

// ClearFee clears the value of the "fee" field.
func (bpu *BootcampParticipantUpdate) ClearFee() *BootcampParticipantUpdate {
	bpu.mutation.ClearFee()
	return bpu
}

// SetMemberID sets the "member_id" field.
func (bpu *BootcampParticipantUpdate) SetMemberID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.ResetMemberID()
	bpu.mutation.SetMemberID(i)
	return bpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (bpu *BootcampParticipantUpdate) SetNillableMemberID(i *int64) *BootcampParticipantUpdate {
	if i != nil {
		bpu.SetMemberID(*i)
	}
	return bpu
}

// AddMemberID adds i to the "member_id" field.
func (bpu *BootcampParticipantUpdate) AddMemberID(i int64) *BootcampParticipantUpdate {
	bpu.mutation.AddMemberID(i)
	return bpu
}

// ClearMemberID clears the value of the "member_id" field.
func (bpu *BootcampParticipantUpdate) ClearMemberID() *BootcampParticipantUpdate {
	bpu.mutation.ClearMemberID()
	return bpu
}

// SetBootcamp sets the "Bootcamp" edge to the Bootcamp entity.
func (bpu *BootcampParticipantUpdate) SetBootcamp(b *Bootcamp) *BootcampParticipantUpdate {
	return bpu.SetBootcampID(b.ID)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (bpu *BootcampParticipantUpdate) AddMemberIDs(ids ...int64) *BootcampParticipantUpdate {
	bpu.mutation.AddMemberIDs(ids...)
	return bpu
}

// AddMembers adds the "members" edges to the Member entity.
func (bpu *BootcampParticipantUpdate) AddMembers(m ...*Member) *BootcampParticipantUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bpu.AddMemberIDs(ids...)
}

// Mutation returns the BootcampParticipantMutation object of the builder.
func (bpu *BootcampParticipantUpdate) Mutation() *BootcampParticipantMutation {
	return bpu.mutation
}

// ClearBootcamp clears the "Bootcamp" edge to the Bootcamp entity.
func (bpu *BootcampParticipantUpdate) ClearBootcamp() *BootcampParticipantUpdate {
	bpu.mutation.ClearBootcamp()
	return bpu
}

// ClearMembers clears all "members" edges to the Member entity.
func (bpu *BootcampParticipantUpdate) ClearMembers() *BootcampParticipantUpdate {
	bpu.mutation.ClearMembers()
	return bpu
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (bpu *BootcampParticipantUpdate) RemoveMemberIDs(ids ...int64) *BootcampParticipantUpdate {
	bpu.mutation.RemoveMemberIDs(ids...)
	return bpu
}

// RemoveMembers removes "members" edges to Member entities.
func (bpu *BootcampParticipantUpdate) RemoveMembers(m ...*Member) *BootcampParticipantUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bpu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BootcampParticipantUpdate) Save(ctx context.Context) (int, error) {
	bpu.defaults()
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BootcampParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BootcampParticipantUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BootcampParticipantUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BootcampParticipantUpdate) defaults() {
	if _, ok := bpu.mutation.UpdatedAt(); !ok && !bpu.mutation.UpdatedAtCleared() {
		v := bootcampparticipant.UpdateDefaultUpdatedAt()
		bpu.mutation.SetUpdatedAt(v)
	}
}

func (bpu *BootcampParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bootcampparticipant.Table, bootcampparticipant.Columns, sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bpu.mutation.CreatedAtCleared() {
		_spec.ClearField(bootcampparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := bpu.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcampparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if bpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(bootcampparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bpu.mutation.Delete(); ok {
		_spec.SetField(bootcampparticipant.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := bpu.mutation.AddedDelete(); ok {
		_spec.AddField(bootcampparticipant.FieldDelete, field.TypeInt64, value)
	}
	if bpu.mutation.DeleteCleared() {
		_spec.ClearField(bootcampparticipant.FieldDelete, field.TypeInt64)
	}
	if value, ok := bpu.mutation.CreatedID(); ok {
		_spec.SetField(bootcampparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := bpu.mutation.AddedCreatedID(); ok {
		_spec.AddField(bootcampparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if bpu.mutation.CreatedIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := bpu.mutation.Status(); ok {
		_spec.SetField(bootcampparticipant.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bpu.mutation.AddedStatus(); ok {
		_spec.AddField(bootcampparticipant.FieldStatus, field.TypeInt64, value)
	}
	if bpu.mutation.StatusCleared() {
		_spec.ClearField(bootcampparticipant.FieldStatus, field.TypeInt64)
	}
	if value, ok := bpu.mutation.Name(); ok {
		_spec.SetField(bootcampparticipant.FieldName, field.TypeString, value)
	}
	if bpu.mutation.NameCleared() {
		_spec.ClearField(bootcampparticipant.FieldName, field.TypeString)
	}
	if value, ok := bpu.mutation.Mobile(); ok {
		_spec.SetField(bootcampparticipant.FieldMobile, field.TypeString, value)
	}
	if bpu.mutation.MobileCleared() {
		_spec.ClearField(bootcampparticipant.FieldMobile, field.TypeString)
	}
	if value, ok := bpu.mutation.GetFields(); ok {
		_spec.SetField(bootcampparticipant.FieldFields, field.TypeString, value)
	}
	if bpu.mutation.FieldsCleared() {
		_spec.ClearField(bootcampparticipant.FieldFields, field.TypeString)
	}
	if value, ok := bpu.mutation.OrderID(); ok {
		_spec.SetField(bootcampparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := bpu.mutation.AddedOrderID(); ok {
		_spec.AddField(bootcampparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if bpu.mutation.OrderIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldOrderID, field.TypeInt64)
	}
	if value, ok := bpu.mutation.OrderSn(); ok {
		_spec.SetField(bootcampparticipant.FieldOrderSn, field.TypeString, value)
	}
	if bpu.mutation.OrderSnCleared() {
		_spec.ClearField(bootcampparticipant.FieldOrderSn, field.TypeString)
	}
	if value, ok := bpu.mutation.Fee(); ok {
		_spec.SetField(bootcampparticipant.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := bpu.mutation.AddedFee(); ok {
		_spec.AddField(bootcampparticipant.FieldFee, field.TypeFloat64, value)
	}
	if bpu.mutation.FeeCleared() {
		_spec.ClearField(bootcampparticipant.FieldFee, field.TypeFloat64)
	}
	if value, ok := bpu.mutation.MemberID(); ok {
		_spec.SetField(bootcampparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := bpu.mutation.AddedMemberID(); ok {
		_spec.AddField(bootcampparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if bpu.mutation.MemberIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldMemberID, field.TypeInt64)
	}
	if bpu.mutation.BootcampCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bootcampparticipant.BootcampTable,
			Columns: []string{bootcampparticipant.BootcampColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.BootcampIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bootcampparticipant.BootcampTable,
			Columns: []string{bootcampparticipant.BootcampColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !bpu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bootcampparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BootcampParticipantUpdateOne is the builder for updating a single BootcampParticipant entity.
type BootcampParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BootcampParticipantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bpuo *BootcampParticipantUpdateOne) SetUpdatedAt(t time.Time) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetUpdatedAt(t)
	return bpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bpuo *BootcampParticipantUpdateOne) ClearUpdatedAt() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearUpdatedAt()
	return bpuo
}

// SetDelete sets the "delete" field.
func (bpuo *BootcampParticipantUpdateOne) SetDelete(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetDelete()
	bpuo.mutation.SetDelete(i)
	return bpuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableDelete(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetDelete(*i)
	}
	return bpuo
}

// AddDelete adds i to the "delete" field.
func (bpuo *BootcampParticipantUpdateOne) AddDelete(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddDelete(i)
	return bpuo
}

// ClearDelete clears the value of the "delete" field.
func (bpuo *BootcampParticipantUpdateOne) ClearDelete() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearDelete()
	return bpuo
}

// SetCreatedID sets the "created_id" field.
func (bpuo *BootcampParticipantUpdateOne) SetCreatedID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetCreatedID()
	bpuo.mutation.SetCreatedID(i)
	return bpuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableCreatedID(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetCreatedID(*i)
	}
	return bpuo
}

// AddCreatedID adds i to the "created_id" field.
func (bpuo *BootcampParticipantUpdateOne) AddCreatedID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddCreatedID(i)
	return bpuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (bpuo *BootcampParticipantUpdateOne) ClearCreatedID() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearCreatedID()
	return bpuo
}

// SetStatus sets the "status" field.
func (bpuo *BootcampParticipantUpdateOne) SetStatus(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetStatus()
	bpuo.mutation.SetStatus(i)
	return bpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableStatus(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetStatus(*i)
	}
	return bpuo
}

// AddStatus adds i to the "status" field.
func (bpuo *BootcampParticipantUpdateOne) AddStatus(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddStatus(i)
	return bpuo
}

// ClearStatus clears the value of the "status" field.
func (bpuo *BootcampParticipantUpdateOne) ClearStatus() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearStatus()
	return bpuo
}

// SetBootcampID sets the "bootcamp_id" field.
func (bpuo *BootcampParticipantUpdateOne) SetBootcampID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetBootcampID(i)
	return bpuo
}

// SetNillableBootcampID sets the "bootcamp_id" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableBootcampID(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetBootcampID(*i)
	}
	return bpuo
}

// ClearBootcampID clears the value of the "bootcamp_id" field.
func (bpuo *BootcampParticipantUpdateOne) ClearBootcampID() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearBootcampID()
	return bpuo
}

// SetName sets the "name" field.
func (bpuo *BootcampParticipantUpdateOne) SetName(s string) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetName(s)
	return bpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableName(s *string) *BootcampParticipantUpdateOne {
	if s != nil {
		bpuo.SetName(*s)
	}
	return bpuo
}

// ClearName clears the value of the "name" field.
func (bpuo *BootcampParticipantUpdateOne) ClearName() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearName()
	return bpuo
}

// SetMobile sets the "mobile" field.
func (bpuo *BootcampParticipantUpdateOne) SetMobile(s string) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetMobile(s)
	return bpuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableMobile(s *string) *BootcampParticipantUpdateOne {
	if s != nil {
		bpuo.SetMobile(*s)
	}
	return bpuo
}

// ClearMobile clears the value of the "mobile" field.
func (bpuo *BootcampParticipantUpdateOne) ClearMobile() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearMobile()
	return bpuo
}

// SetFields sets the "fields" field.
func (bpuo *BootcampParticipantUpdateOne) SetFields(s string) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetFields(s)
	return bpuo
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableFields(s *string) *BootcampParticipantUpdateOne {
	if s != nil {
		bpuo.SetFields(*s)
	}
	return bpuo
}

// ClearFields clears the value of the "fields" field.
func (bpuo *BootcampParticipantUpdateOne) ClearFields() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearFields()
	return bpuo
}

// SetOrderID sets the "order_id" field.
func (bpuo *BootcampParticipantUpdateOne) SetOrderID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetOrderID()
	bpuo.mutation.SetOrderID(i)
	return bpuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableOrderID(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetOrderID(*i)
	}
	return bpuo
}

// AddOrderID adds i to the "order_id" field.
func (bpuo *BootcampParticipantUpdateOne) AddOrderID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddOrderID(i)
	return bpuo
}

// ClearOrderID clears the value of the "order_id" field.
func (bpuo *BootcampParticipantUpdateOne) ClearOrderID() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearOrderID()
	return bpuo
}

// SetOrderSn sets the "order_sn" field.
func (bpuo *BootcampParticipantUpdateOne) SetOrderSn(s string) *BootcampParticipantUpdateOne {
	bpuo.mutation.SetOrderSn(s)
	return bpuo
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableOrderSn(s *string) *BootcampParticipantUpdateOne {
	if s != nil {
		bpuo.SetOrderSn(*s)
	}
	return bpuo
}

// ClearOrderSn clears the value of the "order_sn" field.
func (bpuo *BootcampParticipantUpdateOne) ClearOrderSn() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearOrderSn()
	return bpuo
}

// SetFee sets the "fee" field.
func (bpuo *BootcampParticipantUpdateOne) SetFee(f float64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetFee()
	bpuo.mutation.SetFee(f)
	return bpuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableFee(f *float64) *BootcampParticipantUpdateOne {
	if f != nil {
		bpuo.SetFee(*f)
	}
	return bpuo
}

// AddFee adds f to the "fee" field.
func (bpuo *BootcampParticipantUpdateOne) AddFee(f float64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddFee(f)
	return bpuo
}

// ClearFee clears the value of the "fee" field.
func (bpuo *BootcampParticipantUpdateOne) ClearFee() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearFee()
	return bpuo
}

// SetMemberID sets the "member_id" field.
func (bpuo *BootcampParticipantUpdateOne) SetMemberID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.ResetMemberID()
	bpuo.mutation.SetMemberID(i)
	return bpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (bpuo *BootcampParticipantUpdateOne) SetNillableMemberID(i *int64) *BootcampParticipantUpdateOne {
	if i != nil {
		bpuo.SetMemberID(*i)
	}
	return bpuo
}

// AddMemberID adds i to the "member_id" field.
func (bpuo *BootcampParticipantUpdateOne) AddMemberID(i int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddMemberID(i)
	return bpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (bpuo *BootcampParticipantUpdateOne) ClearMemberID() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearMemberID()
	return bpuo
}

// SetBootcamp sets the "Bootcamp" edge to the Bootcamp entity.
func (bpuo *BootcampParticipantUpdateOne) SetBootcamp(b *Bootcamp) *BootcampParticipantUpdateOne {
	return bpuo.SetBootcampID(b.ID)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (bpuo *BootcampParticipantUpdateOne) AddMemberIDs(ids ...int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.AddMemberIDs(ids...)
	return bpuo
}

// AddMembers adds the "members" edges to the Member entity.
func (bpuo *BootcampParticipantUpdateOne) AddMembers(m ...*Member) *BootcampParticipantUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bpuo.AddMemberIDs(ids...)
}

// Mutation returns the BootcampParticipantMutation object of the builder.
func (bpuo *BootcampParticipantUpdateOne) Mutation() *BootcampParticipantMutation {
	return bpuo.mutation
}

// ClearBootcamp clears the "Bootcamp" edge to the Bootcamp entity.
func (bpuo *BootcampParticipantUpdateOne) ClearBootcamp() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearBootcamp()
	return bpuo
}

// ClearMembers clears all "members" edges to the Member entity.
func (bpuo *BootcampParticipantUpdateOne) ClearMembers() *BootcampParticipantUpdateOne {
	bpuo.mutation.ClearMembers()
	return bpuo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (bpuo *BootcampParticipantUpdateOne) RemoveMemberIDs(ids ...int64) *BootcampParticipantUpdateOne {
	bpuo.mutation.RemoveMemberIDs(ids...)
	return bpuo
}

// RemoveMembers removes "members" edges to Member entities.
func (bpuo *BootcampParticipantUpdateOne) RemoveMembers(m ...*Member) *BootcampParticipantUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bpuo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the BootcampParticipantUpdate builder.
func (bpuo *BootcampParticipantUpdateOne) Where(ps ...predicate.BootcampParticipant) *BootcampParticipantUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BootcampParticipantUpdateOne) Select(field string, fields ...string) *BootcampParticipantUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BootcampParticipant entity.
func (bpuo *BootcampParticipantUpdateOne) Save(ctx context.Context) (*BootcampParticipant, error) {
	bpuo.defaults()
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BootcampParticipantUpdateOne) SaveX(ctx context.Context) *BootcampParticipant {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BootcampParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BootcampParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BootcampParticipantUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdatedAt(); !ok && !bpuo.mutation.UpdatedAtCleared() {
		v := bootcampparticipant.UpdateDefaultUpdatedAt()
		bpuo.mutation.SetUpdatedAt(v)
	}
}

func (bpuo *BootcampParticipantUpdateOne) sqlSave(ctx context.Context) (_node *BootcampParticipant, err error) {
	_spec := sqlgraph.NewUpdateSpec(bootcampparticipant.Table, bootcampparticipant.Columns, sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BootcampParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bootcampparticipant.FieldID)
		for _, f := range fields {
			if !bootcampparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bootcampparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(bootcampparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := bpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcampparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if bpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(bootcampparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bpuo.mutation.Delete(); ok {
		_spec.SetField(bootcampparticipant.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := bpuo.mutation.AddedDelete(); ok {
		_spec.AddField(bootcampparticipant.FieldDelete, field.TypeInt64, value)
	}
	if bpuo.mutation.DeleteCleared() {
		_spec.ClearField(bootcampparticipant.FieldDelete, field.TypeInt64)
	}
	if value, ok := bpuo.mutation.CreatedID(); ok {
		_spec.SetField(bootcampparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := bpuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(bootcampparticipant.FieldCreatedID, field.TypeInt64, value)
	}
	if bpuo.mutation.CreatedIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := bpuo.mutation.Status(); ok {
		_spec.SetField(bootcampparticipant.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bpuo.mutation.AddedStatus(); ok {
		_spec.AddField(bootcampparticipant.FieldStatus, field.TypeInt64, value)
	}
	if bpuo.mutation.StatusCleared() {
		_spec.ClearField(bootcampparticipant.FieldStatus, field.TypeInt64)
	}
	if value, ok := bpuo.mutation.Name(); ok {
		_spec.SetField(bootcampparticipant.FieldName, field.TypeString, value)
	}
	if bpuo.mutation.NameCleared() {
		_spec.ClearField(bootcampparticipant.FieldName, field.TypeString)
	}
	if value, ok := bpuo.mutation.Mobile(); ok {
		_spec.SetField(bootcampparticipant.FieldMobile, field.TypeString, value)
	}
	if bpuo.mutation.MobileCleared() {
		_spec.ClearField(bootcampparticipant.FieldMobile, field.TypeString)
	}
	if value, ok := bpuo.mutation.GetFields(); ok {
		_spec.SetField(bootcampparticipant.FieldFields, field.TypeString, value)
	}
	if bpuo.mutation.FieldsCleared() {
		_spec.ClearField(bootcampparticipant.FieldFields, field.TypeString)
	}
	if value, ok := bpuo.mutation.OrderID(); ok {
		_spec.SetField(bootcampparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := bpuo.mutation.AddedOrderID(); ok {
		_spec.AddField(bootcampparticipant.FieldOrderID, field.TypeInt64, value)
	}
	if bpuo.mutation.OrderIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldOrderID, field.TypeInt64)
	}
	if value, ok := bpuo.mutation.OrderSn(); ok {
		_spec.SetField(bootcampparticipant.FieldOrderSn, field.TypeString, value)
	}
	if bpuo.mutation.OrderSnCleared() {
		_spec.ClearField(bootcampparticipant.FieldOrderSn, field.TypeString)
	}
	if value, ok := bpuo.mutation.Fee(); ok {
		_spec.SetField(bootcampparticipant.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := bpuo.mutation.AddedFee(); ok {
		_spec.AddField(bootcampparticipant.FieldFee, field.TypeFloat64, value)
	}
	if bpuo.mutation.FeeCleared() {
		_spec.ClearField(bootcampparticipant.FieldFee, field.TypeFloat64)
	}
	if value, ok := bpuo.mutation.MemberID(); ok {
		_spec.SetField(bootcampparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := bpuo.mutation.AddedMemberID(); ok {
		_spec.AddField(bootcampparticipant.FieldMemberID, field.TypeInt64, value)
	}
	if bpuo.mutation.MemberIDCleared() {
		_spec.ClearField(bootcampparticipant.FieldMemberID, field.TypeInt64)
	}
	if bpuo.mutation.BootcampCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bootcampparticipant.BootcampTable,
			Columns: []string{bootcampparticipant.BootcampColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.BootcampIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bootcampparticipant.BootcampTable,
			Columns: []string{bootcampparticipant.BootcampColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !bpuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bootcampparticipant.MembersTable,
			Columns: bootcampparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BootcampParticipant{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bootcampparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/community"
	"saas/biz/dal/db/ent/communityparticipant"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityUpdate is the builder for updating Community entities.
type CommunityUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMutation
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cu *CommunityUpdate) Where(ps ...predicate.Community) *CommunityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommunityUpdate) SetUpdatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CommunityUpdate) ClearUpdatedAt() *CommunityUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDelete sets the "delete" field.
func (cu *CommunityUpdate) SetDelete(i int64) *CommunityUpdate {
	cu.mutation.ResetDelete()
	cu.mutation.SetDelete(i)
	return cu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableDelete(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetDelete(*i)
	}
	return cu
}

// AddDelete adds i to the "delete" field.
func (cu *CommunityUpdate) AddDelete(i int64) *CommunityUpdate {
	cu.mutation.AddDelete(i)
	return cu
}

// ClearDelete clears the value of the "delete" field.
func (cu *CommunityUpdate) ClearDelete() *CommunityUpdate {
	cu.mutation.ClearDelete()
	return cu
}

// SetCreatedID sets the "created_id" field.
func (cu *CommunityUpdate) SetCreatedID(i int64) *CommunityUpdate {
	cu.mutation.ResetCreatedID()
	cu.mutation.SetCreatedID(i)
	return cu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableCreatedID(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetCreatedID(*i)
	}
	return cu
}

// AddCreatedID adds i to the "created_id" field.
func (cu *CommunityUpdate) AddCreatedID(i int64) *CommunityUpdate {
	cu.mutation.AddCreatedID(i)
	return cu
}

// ClearCreatedID clears the value of the "created_id" field.
func (cu *CommunityUpdate) ClearCreatedID() *CommunityUpdate {
	cu.mutation.ClearCreatedID()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommunityUpdate) SetStatus(i int64) *CommunityUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableStatus(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CommunityUpdate) AddStatus(i int64) *CommunityUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *CommunityUpdate) ClearStatus() *CommunityUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetName sets the "name" field.
func (cu *CommunityUpdate) SetName(s string) *CommunityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableName(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CommunityUpdate) ClearName() *CommunityUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetSignNumber sets the "sign_number" field.
func (cu *CommunityUpdate) SetSignNumber(i int64) *CommunityUpdate {
	cu.mutation.ResetSignNumber()
	cu.mutation.SetSignNumber(i)
	return cu
}

// SetNillableSignNumber sets the "sign_number" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableSignNumber(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetSignNumber(*i)
	}
	return cu
}

// AddSignNumber adds i to the "sign_number" field.
func (cu *CommunityUpdate) AddSignNumber(i int64) *CommunityUpdate {
	cu.mutation.AddSignNumber(i)
	return cu
}

// ClearSignNumber clears the value of the "sign_number" field.
func (cu *CommunityUpdate) ClearSignNumber() *CommunityUpdate {
	cu.mutation.ClearSignNumber()
	return cu
}

// SetSignStartAt sets the "sign_start_at" field.
func (cu *CommunityUpdate) SetSignStartAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetSignStartAt(t)
	return cu
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableSignStartAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetSignStartAt(*t)
	}
	return cu
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (cu *CommunityUpdate) ClearSignStartAt() *CommunityUpdate {
	cu.mutation.ClearSignStartAt()
	return cu
}

// SetSignEndAt sets the "sign_end_at" field.
func (cu *CommunityUpdate) SetSignEndAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetSignEndAt(t)
	return cu
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableSignEndAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetSignEndAt(*t)
	}
	return cu
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (cu *CommunityUpdate) ClearSignEndAt() *CommunityUpdate {
	cu.mutation.ClearSignEndAt()
	return cu
}

// SetNumber sets the "number" field.
func (cu *CommunityUpdate) SetNumber(i int64) *CommunityUpdate {
	cu.mutation.ResetNumber()
	cu.mutation.SetNumber(i)
	return cu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableNumber(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetNumber(*i)
	}
	return cu
}

// AddNumber adds i to the "number" field.
func (cu *CommunityUpdate) AddNumber(i int64) *CommunityUpdate {
	cu.mutation.AddNumber(i)
	return cu
}

// ClearNumber clears the value of the "number" field.
func (cu *CommunityUpdate) ClearNumber() *CommunityUpdate {
	cu.mutation.ClearNumber()
	return cu
}

// SetStartAt sets the "start_at" field.
func (cu *CommunityUpdate) SetStartAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetStartAt(t)
	return cu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableStartAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetStartAt(*t)
	}
	return cu
}

// ClearStartAt clears the value of the "start_at" field.
func (cu *CommunityUpdate) ClearStartAt() *CommunityUpdate {
	cu.mutation.ClearStartAt()
	return cu
}

// SetEndAt sets the "end_at" field.
func (cu *CommunityUpdate) SetEndAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetEndAt(t)
	return cu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableEndAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetEndAt(*t)
	}
	return cu
}

// ClearEndAt clears the value of the "end_at" field.
func (cu *CommunityUpdate) ClearEndAt() *CommunityUpdate {
	cu.mutation.ClearEndAt()
	return cu
}

// SetPic sets the "pic" field.
func (cu *CommunityUpdate) SetPic(s string) *CommunityUpdate {
	cu.mutation.SetPic(s)
	return cu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillablePic(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetPic(*s)
	}
	return cu
}

// ClearPic clears the value of the "pic" field.
func (cu *CommunityUpdate) ClearPic() *CommunityUpdate {
	cu.mutation.ClearPic()
	return cu
}

// SetSponsor sets the "sponsor" field.
func (cu *CommunityUpdate) SetSponsor(s string) *CommunityUpdate {
	cu.mutation.SetSponsor(s)
	return cu
}

// SetNillableSponsor sets the "sponsor" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableSponsor(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetSponsor(*s)
	}
	return cu
}

// ClearSponsor clears the value of the "sponsor" field.
func (cu *CommunityUpdate) ClearSponsor() *CommunityUpdate {
	cu.mutation.ClearSponsor()
	return cu
}

// SetFee sets the "fee" field.
func (cu *CommunityUpdate) SetFee(f float64) *CommunityUpdate {
	cu.mutation.ResetFee()
	cu.mutation.SetFee(f)
	return cu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableFee(f *float64) *CommunityUpdate {
	if f != nil {
		cu.SetFee(*f)
	}
	return cu
}

// AddFee adds f to the "fee" field.
func (cu *CommunityUpdate) AddFee(f float64) *CommunityUpdate {
	cu.mutation.AddFee(f)
	return cu
}

// ClearFee clears the value of the "fee" field.
func (cu *CommunityUpdate) ClearFee() *CommunityUpdate {
	cu.mutation.ClearFee()
	return cu
}

// SetIsFee sets the "is_fee" field.
func (cu *CommunityUpdate) SetIsFee(i int64) *CommunityUpdate {
	cu.mutation.ResetIsFee()
	cu.mutation.SetIsFee(i)
	return cu
}

// SetNillableIsFee sets the "is_fee" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableIsFee(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetIsFee(*i)
	}
	return cu
}

// AddIsFee adds i to the "is_fee" field.
func (cu *CommunityUpdate) AddIsFee(i int64) *CommunityUpdate {
	cu.mutation.AddIsFee(i)
	return cu
}

// ClearIsFee clears the value of the "is_fee" field.
func (cu *CommunityUpdate) ClearIsFee() *CommunityUpdate {
	cu.mutation.ClearIsFee()
	return cu
}

// SetIsShow sets the "is_show" field.
func (cu *CommunityUpdate) SetIsShow(i int64) *CommunityUpdate {
	cu.mutation.ResetIsShow()
	cu.mutation.SetIsShow(i)
	return cu
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableIsShow(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetIsShow(*i)
	}
	return cu
}

// AddIsShow adds i to the "is_show" field.
func (cu *CommunityUpdate) AddIsShow(i int64) *CommunityUpdate {
	cu.mutation.AddIsShow(i)
	return cu
}

// ClearIsShow clears the value of the "is_show" field.
func (cu *CommunityUpdate) ClearIsShow() *CommunityUpdate {
	cu.mutation.ClearIsShow()
	return cu
}

// SetIsCancel sets the "is_cancel" field.
func (cu *CommunityUpdate) SetIsCancel(i int64) *CommunityUpdate {
	cu.mutation.ResetIsCancel()
	cu.mutation.SetIsCancel(i)
	return cu
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableIsCancel(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetIsCancel(*i)
	}
	return cu
}

// AddIsCancel adds i to the "is_cancel" field.
func (cu *CommunityUpdate) AddIsCancel(i int64) *CommunityUpdate {
	cu.mutation.AddIsCancel(i)
	return cu
}

// ClearIsCancel clears the value of the "is_cancel" field.
func (cu *CommunityUpdate) ClearIsCancel() *CommunityUpdate {
	cu.mutation.ClearIsCancel()
	return cu
}

// SetCancelTime sets the "cancel_time" field.
func (cu *CommunityUpdate) SetCancelTime(i int64) *CommunityUpdate {
	cu.mutation.ResetCancelTime()
	cu.mutation.SetCancelTime(i)
	return cu
}

// SetNillableCancelTime sets the "cancel_time" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableCancelTime(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetCancelTime(*i)
	}
	return cu
}

// AddCancelTime adds i to the "cancel_time" field.
func (cu *CommunityUpdate) AddCancelTime(i int64) *CommunityUpdate {
	cu.mutation.AddCancelTime(i)
	return cu
}

// ClearCancelTime clears the value of the "cancel_time" field.
func (cu *CommunityUpdate) ClearCancelTime() *CommunityUpdate {
	cu.mutation.ClearCancelTime()
	return cu
}

// SetDetail sets the "detail" field.
func (cu *CommunityUpdate) SetDetail(s string) *CommunityUpdate {
	cu.mutation.SetDetail(s)
	return cu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableDetail(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetDetail(*s)
	}
	return cu
}

// ClearDetail clears the value of the "detail" field.
func (cu *CommunityUpdate) ClearDetail() *CommunityUpdate {
	cu.mutation.ClearDetail()
	return cu
}

// SetSignFields sets the "sign_fields" field.
func (cu *CommunityUpdate) SetSignFields(s string) *CommunityUpdate {
	cu.mutation.SetSignFields(s)
	return cu
}

// SetNillableSignFields sets the "sign_fields" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableSignFields(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetSignFields(*s)
	}
	return cu
}

// ClearSignFields clears the value of the "sign_fields" field.
func (cu *CommunityUpdate) ClearSignFields() *CommunityUpdate {
	cu.mutation.ClearSignFields()
	return cu
}

// SetCondition sets the "condition" field.
func (cu *CommunityUpdate) SetCondition(i int64) *CommunityUpdate {
	cu.mutation.ResetCondition()
	cu.mutation.SetCondition(i)
	return cu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableCondition(i *int64) *CommunityUpdate {
	if i != nil {
		cu.SetCondition(*i)
	}
	return cu
}

// AddCondition adds i to the "condition" field.
func (cu *CommunityUpdate) AddCondition(i int64) *CommunityUpdate {
	cu.mutation.AddCondition(i)
	return cu
}

// ClearCondition clears the value of the "condition" field.
func (cu *CommunityUpdate) ClearCondition() *CommunityUpdate {
	cu.mutation.ClearCondition()
	return cu
}

// AddCommunityParticipantIDs adds the "community_participants" edge to the CommunityParticipant entity by IDs.
func (cu *CommunityUpdate) AddCommunityParticipantIDs(ids ...int64) *CommunityUpdate {
	cu.mutation.AddCommunityParticipantIDs(ids...)
	return cu
}

// AddCommunityParticipants adds the "community_participants" edges to the CommunityParticipant entity.
func (cu *CommunityUpdate) AddCommunityParticipants(c ...*CommunityParticipant) *CommunityUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCommunityParticipantIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cu *CommunityUpdate) Mutation() *CommunityMutation {
	return cu.mutation
}

// ClearCommunityParticipants clears all "community_participants" edges to the CommunityParticipant entity.
func (cu *CommunityUpdate) ClearCommunityParticipants() *CommunityUpdate {
	cu.mutation.ClearCommunityParticipants()
	return cu
}

// RemoveCommunityParticipantIDs removes the "community_participants" edge to CommunityParticipant entities by IDs.
func (cu *CommunityUpdate) RemoveCommunityParticipantIDs(ids ...int64) *CommunityUpdate {
	cu.mutation.RemoveCommunityParticipantIDs(ids...)
	return cu
}

// RemoveCommunityParticipants removes "community_participants" edges to CommunityParticipant entities.
func (cu *CommunityUpdate) RemoveCommunityParticipants(c ...*CommunityParticipant) *CommunityUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCommunityParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommunityUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommunityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommunityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommunityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommunityUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := community.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CommunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(community.Table, community.Columns, sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(community.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(community.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(community.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Delete(); ok {
		_spec.SetField(community.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedDelete(); ok {
		_spec.AddField(community.FieldDelete, field.TypeInt64, value)
	}
	if cu.mutation.DeleteCleared() {
		_spec.ClearField(community.FieldDelete, field.TypeInt64)
	}
	if value, ok := cu.mutation.CreatedID(); ok {
		_spec.SetField(community.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedID(); ok {
		_spec.AddField(community.FieldCreatedID, field.TypeInt64, value)
	}
	if cu.mutation.CreatedIDCleared() {
		_spec.ClearField(community.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(community.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(community.FieldStatus, field.TypeInt64, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(community.FieldStatus, field.TypeInt64)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(community.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(community.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.SignNumber(); ok {
		_spec.SetField(community.FieldSignNumber, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedSignNumber(); ok {
		_spec.AddField(community.FieldSignNumber, field.TypeInt64, value)
	}
	if cu.mutation.SignNumberCleared() {
		_spec.ClearField(community.FieldSignNumber, field.TypeInt64)
	}
	if value, ok := cu.mutation.SignStartAt(); ok {
		_spec.SetField(community.FieldSignStartAt, field.TypeTime, value)
	}
	if cu.mutation.SignStartAtCleared() {
		_spec.ClearField(community.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := cu.mutation.SignEndAt(); ok {
		_spec.SetField(community.FieldSignEndAt, field.TypeTime, value)
	}
	if cu.mutation.SignEndAtCleared() {
		_spec.ClearField(community.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Number(); ok {
		_spec.SetField(community.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedNumber(); ok {
		_spec.AddField(community.FieldNumber, field.TypeInt64, value)
	}
	if cu.mutation.NumberCleared() {
		_spec.ClearField(community.FieldNumber, field.TypeInt64)
	}
	if value, ok := cu.mutation.StartAt(); ok {
		_spec.SetField(community.FieldStartAt, field.TypeTime, value)
	}
	if cu.mutation.StartAtCleared() {
		_spec.ClearField(community.FieldStartAt, field.TypeTime)
	}
	if value, ok := cu.mutation.EndAt(); ok {
		_spec.SetField(community.FieldEndAt, field.TypeTime, value)
	}
	if cu.mutation.EndAtCleared() {
		_spec.ClearField(community.FieldEndAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Pic(); ok {
		_spec.SetField(community.FieldPic, field.TypeString, value)
	}
	if cu.mutation.PicCleared() {
		_spec.ClearField(community.FieldPic, field.TypeString)
	}
	if value, ok := cu.mutation.Sponsor(); ok {
		_spec.SetField(community.FieldSponsor, field.TypeString, value)
	}
	if cu.mutation.SponsorCleared() {
		_spec.ClearField(community.FieldSponsor, field.TypeString)
	}
	if value, ok := cu.mutation.Fee(); ok {
		_spec.SetField(community.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedFee(); ok {
		_spec.AddField(community.FieldFee, field.TypeFloat64, value)
	}
	if cu.mutation.FeeCleared() {
		_spec.ClearField(community.FieldFee, field.TypeFloat64)
	}
	if value, ok := cu.mutation.IsFee(); ok {
		_spec.SetField(community.FieldIsFee, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedIsFee(); ok {
		_spec.AddField(community.FieldIsFee, field.TypeInt64, value)
	}
	if cu.mutation.IsFeeCleared() {
		_spec.ClearField(community.FieldIsFee, field.TypeInt64)
	}
	if value, ok := cu.mutation.IsShow(); ok {
		_spec.SetField(community.FieldIsShow, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedIsShow(); ok {
		_spec.AddField(community.FieldIsShow, field.TypeInt64, value)
	}
	if cu.mutation.IsShowCleared() {
		_spec.ClearField(community.FieldIsShow, field.TypeInt64)
	}
	if value, ok := cu.mutation.IsCancel(); ok {
		_spec.SetField(community.FieldIsCancel, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedIsCancel(); ok {
		_spec.AddField(community.FieldIsCancel, field.TypeInt64, value)
	}
	if cu.mutation.IsCancelCleared() {
		_spec.ClearField(community.FieldIsCancel, field.TypeInt64)
	}
	if value, ok := cu.mutation.CancelTime(); ok {
		_spec.SetField(community.FieldCancelTime, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCancelTime(); ok {
		_spec.AddField(community.FieldCancelTime, field.TypeInt64, value)
	}
	if cu.mutation.CancelTimeCleared() {
		_spec.ClearField(community.FieldCancelTime, field.TypeInt64)
	}
	if value, ok := cu.mutation.Detail(); ok {
		_spec.SetField(community.FieldDetail, field.TypeString, value)
	}
	if cu.mutation.DetailCleared() {
		_spec.ClearField(community.FieldDetail, field.TypeString)
	}
	if value, ok := cu.mutation.SignFields(); ok {
		_spec.SetField(community.FieldSignFields, field.TypeString, value)
	}
	if cu.mutation.SignFieldsCleared() {
		_spec.ClearField(community.FieldSignFields, field.TypeString)
	}
	if value, ok := cu.mutation.Condition(); ok {
		_spec.SetField(community.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCondition(); ok {
		_spec.AddField(community.FieldCondition, field.TypeInt64, value)
	}
	if cu.mutation.ConditionCleared() {
		_spec.ClearField(community.FieldCondition, field.TypeInt64)
	}
	if cu.mutation.CommunityParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cu.schemaConfig.CommunityParticipant
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommunityParticipantsIDs(); len(nodes) > 0 && !cu.mutation.CommunityParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cu.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommunityParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cu.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Community
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommunityUpdateOne is the builder for updating a single Community entity.
type CommunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommunityUpdateOne) SetUpdatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CommunityUpdateOne) ClearUpdatedAt() *CommunityUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDelete sets the "delete" field.
func (cuo *CommunityUpdateOne) SetDelete(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetDelete()
	cuo.mutation.SetDelete(i)
	return cuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableDelete(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetDelete(*i)
	}
	return cuo
}

// AddDelete adds i to the "delete" field.
func (cuo *CommunityUpdateOne) AddDelete(i int64) *CommunityUpdateOne {
	cuo.mutation.AddDelete(i)
	return cuo
}

// ClearDelete clears the value of the "delete" field.
func (cuo *CommunityUpdateOne) ClearDelete() *CommunityUpdateOne {
	cuo.mutation.ClearDelete()
	return cuo
}

// SetCreatedID sets the "created_id" field.
func (cuo *CommunityUpdateOne) SetCreatedID(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetCreatedID()
	cuo.mutation.SetCreatedID(i)
	return cuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableCreatedID(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetCreatedID(*i)
	}
	return cuo
}

// AddCreatedID adds i to the "created_id" field.
func (cuo *CommunityUpdateOne) AddCreatedID(i int64) *CommunityUpdateOne {
	cuo.mutation.AddCreatedID(i)
	return cuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (cuo *CommunityUpdateOne) ClearCreatedID() *CommunityUpdateOne {
	cuo.mutation.ClearCreatedID()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommunityUpdateOne) SetStatus(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableStatus(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CommunityUpdateOne) AddStatus(i int64) *CommunityUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *CommunityUpdateOne) ClearStatus() *CommunityUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CommunityUpdateOne) SetName(s string) *CommunityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableName(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CommunityUpdateOne) ClearName() *CommunityUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetSignNumber sets the "sign_number" field.
func (cuo *CommunityUpdateOne) SetSignNumber(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetSignNumber()
	cuo.mutation.SetSignNumber(i)
	return cuo
}

// SetNillableSignNumber sets the "sign_number" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableSignNumber(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetSignNumber(*i)
	}
	return cuo
}

// AddSignNumber adds i to the "sign_number" field.
func (cuo *CommunityUpdateOne) AddSignNumber(i int64) *CommunityUpdateOne {
	cuo.mutation.AddSignNumber(i)
	return cuo
}

// ClearSignNumber clears the value of the "sign_number" field.
func (cuo *CommunityUpdateOne) ClearSignNumber() *CommunityUpdateOne {
	cuo.mutation.ClearSignNumber()
	return cuo
}

// SetSignStartAt sets the "sign_start_at" field.
func (cuo *CommunityUpdateOne) SetSignStartAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetSignStartAt(t)
	return cuo
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableSignStartAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetSignStartAt(*t)
	}
	return cuo
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (cuo *CommunityUpdateOne) ClearSignStartAt() *CommunityUpdateOne {
	cuo.mutation.ClearSignStartAt()
	return cuo
}

// SetSignEndAt sets the "sign_end_at" field.
func (cuo *CommunityUpdateOne) SetSignEndAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetSignEndAt(t)
	return cuo
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableSignEndAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetSignEndAt(*t)
	}
	return cuo
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (cuo *CommunityUpdateOne) ClearSignEndAt() *CommunityUpdateOne {
	cuo.mutation.ClearSignEndAt()
	return cuo
}

// SetNumber sets the "number" field.
func (cuo *CommunityUpdateOne) SetNumber(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetNumber()
	cuo.mutation.SetNumber(i)
	return cuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableNumber(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetNumber(*i)
	}
	return cuo
}

// AddNumber adds i to the "number" field.
func (cuo *CommunityUpdateOne) AddNumber(i int64) *CommunityUpdateOne {
	cuo.mutation.AddNumber(i)
	return cuo
}

// ClearNumber clears the value of the "number" field.
func (cuo *CommunityUpdateOne) ClearNumber() *CommunityUpdateOne {
	cuo.mutation.ClearNumber()
	return cuo
}

// SetStartAt sets the "start_at" field.
func (cuo *CommunityUpdateOne) SetStartAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetStartAt(t)
	return cuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableStartAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetStartAt(*t)
	}
	return cuo
}

// ClearStartAt clears the value of the "start_at" field.
func (cuo *CommunityUpdateOne) ClearStartAt() *CommunityUpdateOne {
	cuo.mutation.ClearStartAt()
	return cuo
}

// SetEndAt sets the "end_at" field.
func (cuo *CommunityUpdateOne) SetEndAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetEndAt(t)
	return cuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableEndAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetEndAt(*t)
	}
	return cuo
}

// ClearEndAt clears the value of the "end_at" field.
func (cuo *CommunityUpdateOne) ClearEndAt() *CommunityUpdateOne {
	cuo.mutation.ClearEndAt()
	return cuo
}

// SetPic sets the "pic" field.
func (cuo *CommunityUpdateOne) SetPic(s string) *CommunityUpdateOne {
	cuo.mutation.SetPic(s)
	return cuo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillablePic(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetPic(*s)
	}
	return cuo
}

// ClearPic clears the value of the "pic" field.
func (cuo *CommunityUpdateOne) ClearPic() *CommunityUpdateOne {
	cuo.mutation.ClearPic()
	return cuo
}

// SetSponsor sets the "sponsor" field.
func (cuo *CommunityUpdateOne) SetSponsor(s string) *CommunityUpdateOne {
	cuo.mutation.SetSponsor(s)
	return cuo
}

// SetNillableSponsor sets the "sponsor" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableSponsor(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetSponsor(*s)
	}
	return cuo
}

// ClearSponsor clears the value of the "sponsor" field.
func (cuo *CommunityUpdateOne) ClearSponsor() *CommunityUpdateOne {
	cuo.mutation.ClearSponsor()
	return cuo
}

// SetFee sets the "fee" field.
func (cuo *CommunityUpdateOne) SetFee(f float64) *CommunityUpdateOne {
	cuo.mutation.ResetFee()
	cuo.mutation.SetFee(f)
	return cuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableFee(f *float64) *CommunityUpdateOne {
	if f != nil {
		cuo.SetFee(*f)
	}
	return cuo
}

// AddFee adds f to the "fee" field.
func (cuo *CommunityUpdateOne) AddFee(f float64) *CommunityUpdateOne {
	cuo.mutation.AddFee(f)
	return cuo
}

// ClearFee clears the value of the "fee" field.
func (cuo *CommunityUpdateOne) ClearFee() *CommunityUpdateOne {
	cuo.mutation.ClearFee()
	return cuo
}

// SetIsFee sets the "is_fee" field.
func (cuo *CommunityUpdateOne) SetIsFee(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetIsFee()
	cuo.mutation.SetIsFee(i)
	return cuo
}

// SetNillableIsFee sets the "is_fee" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableIsFee(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetIsFee(*i)
	}
	return cuo
}

// AddIsFee adds i to the "is_fee" field.
func (cuo *CommunityUpdateOne) AddIsFee(i int64) *CommunityUpdateOne {
	cuo.mutation.AddIsFee(i)
	return cuo
}

// ClearIsFee clears the value of the "is_fee" field.
func (cuo *CommunityUpdateOne) ClearIsFee() *CommunityUpdateOne {
	cuo.mutation.ClearIsFee()
	return cuo
}

// SetIsShow sets the "is_show" field.
func (cuo *CommunityUpdateOne) SetIsShow(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetIsShow()
	cuo.mutation.SetIsShow(i)
	return cuo
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableIsShow(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetIsShow(*i)
	}
	return cuo
}

// AddIsShow adds i to the "is_show" field.
func (cuo *CommunityUpdateOne) AddIsShow(i int64) *CommunityUpdateOne {
	cuo.mutation.AddIsShow(i)
	return cuo
}

// ClearIsShow clears the value of the "is_show" field.
func (cuo *CommunityUpdateOne) ClearIsShow() *CommunityUpdateOne {
	cuo.mutation.ClearIsShow()
	return cuo
}

// SetIsCancel sets the "is_cancel" field.
func (cuo *CommunityUpdateOne) SetIsCancel(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetIsCancel()
	cuo.mutation.SetIsCancel(i)
	return cuo
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableIsCancel(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetIsCancel(*i)
	}
	return cuo
}

// AddIsCancel adds i to the "is_cancel" field.
func (cuo *CommunityUpdateOne) AddIsCancel(i int64) *CommunityUpdateOne {
	cuo.mutation.AddIsCancel(i)
	return cuo
}

// ClearIsCancel clears the value of the "is_cancel" field.
func (cuo *CommunityUpdateOne) ClearIsCancel() *CommunityUpdateOne {
	cuo.mutation.ClearIsCancel()
	return cuo
}

// SetCancelTime sets the "cancel_time" field.
func (cuo *CommunityUpdateOne) SetCancelTime(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetCancelTime()
	cuo.mutation.SetCancelTime(i)
	return cuo
}

// SetNillableCancelTime sets the "cancel_time" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableCancelTime(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetCancelTime(*i)
	}
	return cuo
}

// AddCancelTime adds i to the "cancel_time" field.
func (cuo *CommunityUpdateOne) AddCancelTime(i int64) *CommunityUpdateOne {
	cuo.mutation.AddCancelTime(i)
	return cuo
}

// ClearCancelTime clears the value of the "cancel_time" field.
func (cuo *CommunityUpdateOne) ClearCancelTime() *CommunityUpdateOne {
	cuo.mutation.ClearCancelTime()
	return cuo
}

// SetDetail sets the "detail" field.
func (cuo *CommunityUpdateOne) SetDetail(s string) *CommunityUpdateOne {
	cuo.mutation.SetDetail(s)
	return cuo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableDetail(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetDetail(*s)
	}
	return cuo
}

// ClearDetail clears the value of the "detail" field.
func (cuo *CommunityUpdateOne) ClearDetail() *CommunityUpdateOne {
	cuo.mutation.ClearDetail()
	return cuo
}

// SetSignFields sets the "sign_fields" field.
func (cuo *CommunityUpdateOne) SetSignFields(s string) *CommunityUpdateOne {
	cuo.mutation.SetSignFields(s)
	return cuo
}

// SetNillableSignFields sets the "sign_fields" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableSignFields(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetSignFields(*s)
	}
	return cuo
}

// ClearSignFields clears the value of the "sign_fields" field.
func (cuo *CommunityUpdateOne) ClearSignFields() *CommunityUpdateOne {
	cuo.mutation.ClearSignFields()
	return cuo
}

// SetCondition sets the "condition" field.
func (cuo *CommunityUpdateOne) SetCondition(i int64) *CommunityUpdateOne {
	cuo.mutation.ResetCondition()
	cuo.mutation.SetCondition(i)
	return cuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableCondition(i *int64) *CommunityUpdateOne {
	if i != nil {
		cuo.SetCondition(*i)
	}
	return cuo
}

// AddCondition adds i to the "condition" field.
func (cuo *CommunityUpdateOne) AddCondition(i int64) *CommunityUpdateOne {
	cuo.mutation.AddCondition(i)
	return cuo
}

// ClearCondition clears the value of the "condition" field.
func (cuo *CommunityUpdateOne) ClearCondition() *CommunityUpdateOne {
	cuo.mutation.ClearCondition()
	return cuo
}

// AddCommunityParticipantIDs adds the "community_participants" edge to the CommunityParticipant entity by IDs.
func (cuo *CommunityUpdateOne) AddCommunityParticipantIDs(ids ...int64) *CommunityUpdateOne {
	cuo.mutation.AddCommunityParticipantIDs(ids...)
	return cuo
}

// AddCommunityParticipants adds the "community_participants" edges to the CommunityParticipant entity.
func (cuo *CommunityUpdateOne) AddCommunityParticipants(c ...*CommunityParticipant) *CommunityUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCommunityParticipantIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cuo *CommunityUpdateOne) Mutation() *CommunityMutation {
	return cuo.mutation
}

// ClearCommunityParticipants clears all "community_participants" edges to the CommunityParticipant entity.
func (cuo *CommunityUpdateOne) ClearCommunityParticipants() *CommunityUpdateOne {
	cuo.mutation.ClearCommunityParticipants()
	return cuo
}

// RemoveCommunityParticipantIDs removes the "community_participants" edge to CommunityParticipant entities by IDs.
func (cuo *CommunityUpdateOne) RemoveCommunityParticipantIDs(ids ...int64) *CommunityUpdateOne {
	cuo.mutation.RemoveCommunityParticipantIDs(ids...)
	return cuo
}

// RemoveCommunityParticipants removes "community_participants" edges to CommunityParticipant entities.
func (cuo *CommunityUpdateOne) RemoveCommunityParticipants(c ...*CommunityParticipant) *CommunityUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCommunityParticipantIDs(ids...)
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cuo *CommunityUpdateOne) Where(ps ...predicate.Community) *CommunityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommunityUpdateOne) Select(field string, fields ...string) *CommunityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Community entity.
func (cuo *CommunityUpdateOne) Save(ctx context.Context) (*Community, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommunityUpdateOne) SaveX(ctx context.Context) *Community {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommunityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommunityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommunityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := community.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CommunityUpdateOne) sqlSave(ctx context.Context) (_node *Community, err error) {
	_spec := sqlgraph.NewUpdateSpec(community.Table, community.Columns, sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Community.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, community.FieldID)
		for _, f := range fields {
			if !community.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != community.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(community.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(community.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(community.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Delete(); ok {
		_spec.SetField(community.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedDelete(); ok {
		_spec.AddField(community.FieldDelete, field.TypeInt64, value)
	}
	if cuo.mutation.DeleteCleared() {
		_spec.ClearField(community.FieldDelete, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CreatedID(); ok {
		_spec.SetField(community.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(community.FieldCreatedID, field.TypeInt64, value)
	}
	if cuo.mutation.CreatedIDCleared() {
		_spec.ClearField(community.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(community.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(community.FieldStatus, field.TypeInt64, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(community.FieldStatus, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(community.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(community.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.SignNumber(); ok {
		_spec.SetField(community.FieldSignNumber, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedSignNumber(); ok {
		_spec.AddField(community.FieldSignNumber, field.TypeInt64, value)
	}
	if cuo.mutation.SignNumberCleared() {
		_spec.ClearField(community.FieldSignNumber, field.TypeInt64)
	}
	if value, ok := cuo.mutation.SignStartAt(); ok {
		_spec.SetField(community.FieldSignStartAt, field.TypeTime, value)
	}
	if cuo.mutation.SignStartAtCleared() {
		_spec.ClearField(community.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.SignEndAt(); ok {
		_spec.SetField(community.FieldSignEndAt, field.TypeTime, value)
	}
	if cuo.mutation.SignEndAtCleared() {
		_spec.ClearField(community.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Number(); ok {
		_spec.SetField(community.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedNumber(); ok {
		_spec.AddField(community.FieldNumber, field.TypeInt64, value)
	}
	if cuo.mutation.NumberCleared() {
		_spec.ClearField(community.FieldNumber, field.TypeInt64)
	}
	if value, ok := cuo.mutation.StartAt(); ok {
		_spec.SetField(community.FieldStartAt, field.TypeTime, value)
	}
	if cuo.mutation.StartAtCleared() {
		_spec.ClearField(community.FieldStartAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.EndAt(); ok {
		_spec.SetField(community.FieldEndAt, field.TypeTime, value)
	}
	if cuo.mutation.EndAtCleared() {
		_spec.ClearField(community.FieldEndAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Pic(); ok {
		_spec.SetField(community.FieldPic, field.TypeString, value)
	}
	if cuo.mutation.PicCleared() {
		_spec.ClearField(community.FieldPic, field.TypeString)
	}
	if value, ok := cuo.mutation.Sponsor(); ok {
		_spec.SetField(community.FieldSponsor, field.TypeString, value)
	}
	if cuo.mutation.SponsorCleared() {
		_spec.ClearField(community.FieldSponsor, field.TypeString)
	}
	if value, ok := cuo.mutation.Fee(); ok {
		_spec.SetField(community.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedFee(); ok {
		_spec.AddField(community.FieldFee, field.TypeFloat64, value)
	}
	if cuo.mutation.FeeCleared() {
		_spec.ClearField(community.FieldFee, field.TypeFloat64)
	}
	if value, ok := cuo.mutation.IsFee(); ok {
		_spec.SetField(community.FieldIsFee, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedIsFee(); ok {
		_spec.AddField(community.FieldIsFee, field.TypeInt64, value)
	}
	if cuo.mutation.IsFeeCleared() {
		_spec.ClearField(community.FieldIsFee, field.TypeInt64)
	}
	if value, ok := cuo.mutation.IsShow(); ok {
		_spec.SetField(community.FieldIsShow, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedIsShow(); ok {
		_spec.AddField(community.FieldIsShow, field.TypeInt64, value)
	}
	if cuo.mutation.IsShowCleared() {
		_spec.ClearField(community.FieldIsShow, field.TypeInt64)
	}
	if value, ok := cuo.mutation.IsCancel(); ok {
		_spec.SetField(community.FieldIsCancel, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedIsCancel(); ok {
		_spec.AddField(community.FieldIsCancel, field.TypeInt64, value)
	}
	if cuo.mutation.IsCancelCleared() {
		_spec.ClearField(community.FieldIsCancel, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CancelTime(); ok {
		_spec.SetField(community.FieldCancelTime, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCancelTime(); ok {
		_spec.AddField(community.FieldCancelTime, field.TypeInt64, value)
	}
	if cuo.mutation.CancelTimeCleared() {
		_spec.ClearField(community.FieldCancelTime, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Detail(); ok {
		_spec.SetField(community.FieldDetail, field.TypeString, value)
	}
	if cuo.mutation.DetailCleared() {
		_spec.ClearField(community.FieldDetail, field.TypeString)
	}
	if value, ok := cuo.mutation.SignFields(); ok {
		_spec.SetField(community.FieldSignFields, field.TypeString, value)
	}
	if cuo.mutation.SignFieldsCleared() {
		_spec.ClearField(community.FieldSignFields, field.TypeString)
	}
	if value, ok := cuo.mutation.Condition(); ok {
		_spec.SetField(community.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCondition(); ok {
		_spec.AddField(community.FieldCondition, field.TypeInt64, value)
	}
	if cuo.mutation.ConditionCleared() {
		_spec.ClearField(community.FieldCondition, field.TypeInt64)
	}
	if cuo.mutation.CommunityParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cuo.schemaConfig.CommunityParticipant
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommunityParticipantsIDs(); len(nodes) > 0 && !cuo.mutation.CommunityParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cuo.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommunityParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.CommunityParticipantsTable,
			Columns: []string{community.CommunityParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cuo.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Community
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_node = &Community{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

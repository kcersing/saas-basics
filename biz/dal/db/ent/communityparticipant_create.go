// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/community"
	"saas/biz/dal/db/ent/communityparticipant"
	"saas/biz/dal/db/ent/member"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityParticipantCreate is the builder for creating a CommunityParticipant entity.
type CommunityParticipantCreate struct {
	config
	mutation *CommunityParticipantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cpc *CommunityParticipantCreate) SetCreatedAt(t time.Time) *CommunityParticipantCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableCreatedAt(t *time.Time) *CommunityParticipantCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpc *CommunityParticipantCreate) SetUpdatedAt(t time.Time) *CommunityParticipantCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableUpdatedAt(t *time.Time) *CommunityParticipantCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetDelete sets the "delete" field.
func (cpc *CommunityParticipantCreate) SetDelete(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetDelete(i)
	return cpc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableDelete(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetDelete(*i)
	}
	return cpc
}

// SetCreatedID sets the "created_id" field.
func (cpc *CommunityParticipantCreate) SetCreatedID(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetCreatedID(i)
	return cpc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableCreatedID(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetCreatedID(*i)
	}
	return cpc
}

// SetStatus sets the "status" field.
func (cpc *CommunityParticipantCreate) SetStatus(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetStatus(i)
	return cpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableStatus(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetStatus(*i)
	}
	return cpc
}

// SetCommunityID sets the "community_id" field.
func (cpc *CommunityParticipantCreate) SetCommunityID(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetCommunityID(i)
	return cpc
}

// SetNillableCommunityID sets the "community_id" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableCommunityID(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetCommunityID(*i)
	}
	return cpc
}

// SetName sets the "name" field.
func (cpc *CommunityParticipantCreate) SetName(s string) *CommunityParticipantCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableName(s *string) *CommunityParticipantCreate {
	if s != nil {
		cpc.SetName(*s)
	}
	return cpc
}

// SetMobile sets the "mobile" field.
func (cpc *CommunityParticipantCreate) SetMobile(s string) *CommunityParticipantCreate {
	cpc.mutation.SetMobile(s)
	return cpc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableMobile(s *string) *CommunityParticipantCreate {
	if s != nil {
		cpc.SetMobile(*s)
	}
	return cpc
}

// SetFields sets the "fields" field.
func (cpc *CommunityParticipantCreate) SetFields(s string) *CommunityParticipantCreate {
	cpc.mutation.SetFields(s)
	return cpc
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableFields(s *string) *CommunityParticipantCreate {
	if s != nil {
		cpc.SetFields(*s)
	}
	return cpc
}

// SetOrderID sets the "order_id" field.
func (cpc *CommunityParticipantCreate) SetOrderID(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetOrderID(i)
	return cpc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableOrderID(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetOrderID(*i)
	}
	return cpc
}

// SetOrderSn sets the "order_sn" field.
func (cpc *CommunityParticipantCreate) SetOrderSn(s string) *CommunityParticipantCreate {
	cpc.mutation.SetOrderSn(s)
	return cpc
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableOrderSn(s *string) *CommunityParticipantCreate {
	if s != nil {
		cpc.SetOrderSn(*s)
	}
	return cpc
}

// SetFee sets the "fee" field.
func (cpc *CommunityParticipantCreate) SetFee(f float64) *CommunityParticipantCreate {
	cpc.mutation.SetFee(f)
	return cpc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableFee(f *float64) *CommunityParticipantCreate {
	if f != nil {
		cpc.SetFee(*f)
	}
	return cpc
}

// SetMemberID sets the "member_id" field.
func (cpc *CommunityParticipantCreate) SetMemberID(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetMemberID(i)
	return cpc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cpc *CommunityParticipantCreate) SetNillableMemberID(i *int64) *CommunityParticipantCreate {
	if i != nil {
		cpc.SetMemberID(*i)
	}
	return cpc
}

// SetID sets the "id" field.
func (cpc *CommunityParticipantCreate) SetID(i int64) *CommunityParticipantCreate {
	cpc.mutation.SetID(i)
	return cpc
}

// SetCommunity sets the "community" edge to the Community entity.
func (cpc *CommunityParticipantCreate) SetCommunity(c *Community) *CommunityParticipantCreate {
	return cpc.SetCommunityID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (cpc *CommunityParticipantCreate) AddMemberIDs(ids ...int64) *CommunityParticipantCreate {
	cpc.mutation.AddMemberIDs(ids...)
	return cpc
}

// AddMembers adds the "members" edges to the Member entity.
func (cpc *CommunityParticipantCreate) AddMembers(m ...*Member) *CommunityParticipantCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cpc.AddMemberIDs(ids...)
}

// Mutation returns the CommunityParticipantMutation object of the builder.
func (cpc *CommunityParticipantCreate) Mutation() *CommunityParticipantMutation {
	return cpc.mutation
}

// Save creates the CommunityParticipant in the database.
func (cpc *CommunityParticipantCreate) Save(ctx context.Context) (*CommunityParticipant, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CommunityParticipantCreate) SaveX(ctx context.Context) *CommunityParticipant {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CommunityParticipantCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CommunityParticipantCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CommunityParticipantCreate) defaults() {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := communityparticipant.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := communityparticipant.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cpc.mutation.Delete(); !ok {
		v := communityparticipant.DefaultDelete
		cpc.mutation.SetDelete(v)
	}
	if _, ok := cpc.mutation.CreatedID(); !ok {
		v := communityparticipant.DefaultCreatedID
		cpc.mutation.SetCreatedID(v)
	}
	if _, ok := cpc.mutation.Status(); !ok {
		v := communityparticipant.DefaultStatus
		cpc.mutation.SetStatus(v)
	}
	if _, ok := cpc.mutation.OrderID(); !ok {
		v := communityparticipant.DefaultOrderID
		cpc.mutation.SetOrderID(v)
	}
	if _, ok := cpc.mutation.OrderSn(); !ok {
		v := communityparticipant.DefaultOrderSn
		cpc.mutation.SetOrderSn(v)
	}
	if _, ok := cpc.mutation.MemberID(); !ok {
		v := communityparticipant.DefaultMemberID
		cpc.mutation.SetMemberID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CommunityParticipantCreate) check() error {
	return nil
}

func (cpc *CommunityParticipantCreate) sqlSave(ctx context.Context) (*CommunityParticipant, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CommunityParticipantCreate) createSpec() (*CommunityParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &CommunityParticipant{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(communityparticipant.Table, sqlgraph.NewFieldSpec(communityparticipant.FieldID, field.TypeInt64))
	)
	_spec.Schema = cpc.schemaConfig.CommunityParticipant
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.SetField(communityparticipant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.SetField(communityparticipant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cpc.mutation.Delete(); ok {
		_spec.SetField(communityparticipant.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := cpc.mutation.CreatedID(); ok {
		_spec.SetField(communityparticipant.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := cpc.mutation.Status(); ok {
		_spec.SetField(communityparticipant.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.SetField(communityparticipant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cpc.mutation.Mobile(); ok {
		_spec.SetField(communityparticipant.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := cpc.mutation.GetFields(); ok {
		_spec.SetField(communityparticipant.FieldFields, field.TypeString, value)
		_node.Fields = value
	}
	if value, ok := cpc.mutation.OrderID(); ok {
		_spec.SetField(communityparticipant.FieldOrderID, field.TypeInt64, value)
		_node.OrderID = value
	}
	if value, ok := cpc.mutation.OrderSn(); ok {
		_spec.SetField(communityparticipant.FieldOrderSn, field.TypeString, value)
		_node.OrderSn = value
	}
	if value, ok := cpc.mutation.Fee(); ok {
		_spec.SetField(communityparticipant.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := cpc.mutation.MemberID(); ok {
		_spec.SetField(communityparticipant.FieldMemberID, field.TypeInt64, value)
		_node.MemberID = value
	}
	if nodes := cpc.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communityparticipant.CommunityTable,
			Columns: []string{communityparticipant.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpc.schemaConfig.CommunityParticipant
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommunityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   communityparticipant.MembersTable,
			Columns: communityparticipant.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = cpc.schemaConfig.MemberMemberCommunitys
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommunityParticipantCreateBulk is the builder for creating many CommunityParticipant entities in bulk.
type CommunityParticipantCreateBulk struct {
	config
	err      error
	builders []*CommunityParticipantCreate
}

// Save creates the CommunityParticipant entities in the database.
func (cpcb *CommunityParticipantCreateBulk) Save(ctx context.Context) ([]*CommunityParticipant, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CommunityParticipant, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CommunityParticipantCreateBulk) SaveX(ctx context.Context) []*CommunityParticipant {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CommunityParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CommunityParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

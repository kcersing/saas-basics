// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/usertimeperiod"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTimePeriodDelete is the builder for deleting a UserTimePeriod entity.
type UserTimePeriodDelete struct {
	config
	hooks    []Hook
	mutation *UserTimePeriodMutation
}

// Where appends a list predicates to the UserTimePeriodDelete builder.
func (utpd *UserTimePeriodDelete) Where(ps ...predicate.UserTimePeriod) *UserTimePeriodDelete {
	utpd.mutation.Where(ps...)
	return utpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utpd *UserTimePeriodDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utpd.sqlExec, utpd.mutation, utpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utpd *UserTimePeriodDelete) ExecX(ctx context.Context) int {
	n, err := utpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utpd *UserTimePeriodDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertimeperiod.Table, sqlgraph.NewFieldSpec(usertimeperiod.FieldID, field.TypeInt64))
	_spec.Node.Schema = utpd.schemaConfig.UserTimePeriod
	ctx = internal.NewSchemaConfigContext(ctx, utpd.schemaConfig)
	if ps := utpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utpd.mutation.done = true
	return affected, err
}

// UserTimePeriodDeleteOne is the builder for deleting a single UserTimePeriod entity.
type UserTimePeriodDeleteOne struct {
	utpd *UserTimePeriodDelete
}

// Where appends a list predicates to the UserTimePeriodDelete builder.
func (utpdo *UserTimePeriodDeleteOne) Where(ps ...predicate.UserTimePeriod) *UserTimePeriodDeleteOne {
	utpdo.utpd.mutation.Where(ps...)
	return utpdo
}

// Exec executes the deletion query.
func (utpdo *UserTimePeriodDeleteOne) Exec(ctx context.Context) error {
	n, err := utpdo.utpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertimeperiod.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utpdo *UserTimePeriodDeleteOne) ExecX(ctx context.Context) {
	if err := utpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/biz/dal/db/ent/memberproduct"
	"saas/biz/dal/db/ent/memberproductcourses"
	"saas/biz/dal/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductCoursesQuery is the builder for querying MemberProductCourses entities.
type MemberProductCoursesQuery struct {
	config
	ctx                *QueryContext
	order              []memberproductcourses.OrderOption
	inters             []Interceptor
	predicates         []predicate.MemberProductCourses
	withProductCourses *MemberProductQuery
	withProductLessons *MemberProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MemberProductCoursesQuery builder.
func (mpcq *MemberProductCoursesQuery) Where(ps ...predicate.MemberProductCourses) *MemberProductCoursesQuery {
	mpcq.predicates = append(mpcq.predicates, ps...)
	return mpcq
}

// Limit the number of records to be returned by this query.
func (mpcq *MemberProductCoursesQuery) Limit(limit int) *MemberProductCoursesQuery {
	mpcq.ctx.Limit = &limit
	return mpcq
}

// Offset to start from.
func (mpcq *MemberProductCoursesQuery) Offset(offset int) *MemberProductCoursesQuery {
	mpcq.ctx.Offset = &offset
	return mpcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mpcq *MemberProductCoursesQuery) Unique(unique bool) *MemberProductCoursesQuery {
	mpcq.ctx.Unique = &unique
	return mpcq
}

// Order specifies how the records should be ordered.
func (mpcq *MemberProductCoursesQuery) Order(o ...memberproductcourses.OrderOption) *MemberProductCoursesQuery {
	mpcq.order = append(mpcq.order, o...)
	return mpcq
}

// QueryProductCourses chains the current query on the "productCourses" edge.
func (mpcq *MemberProductCoursesQuery) QueryProductCourses() *MemberProductQuery {
	query := (&MemberProductClient{config: mpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproductcourses.Table, memberproductcourses.FieldID, selector),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberproductcourses.ProductCoursesTable, memberproductcourses.ProductCoursesColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductLessons chains the current query on the "productLessons" edge.
func (mpcq *MemberProductCoursesQuery) QueryProductLessons() *MemberProductQuery {
	query := (&MemberProductClient{config: mpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproductcourses.Table, memberproductcourses.FieldID, selector),
			sqlgraph.To(memberproduct.Table, memberproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberproductcourses.ProductLessonsTable, memberproductcourses.ProductLessonsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MemberProductCourses entity from the query.
// Returns a *NotFoundError when no MemberProductCourses was found.
func (mpcq *MemberProductCoursesQuery) First(ctx context.Context) (*MemberProductCourses, error) {
	nodes, err := mpcq.Limit(1).All(setContextOp(ctx, mpcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{memberproductcourses.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) FirstX(ctx context.Context) *MemberProductCourses {
	node, err := mpcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MemberProductCourses ID from the query.
// Returns a *NotFoundError when no MemberProductCourses ID was found.
func (mpcq *MemberProductCoursesQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mpcq.Limit(1).IDs(setContextOp(ctx, mpcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{memberproductcourses.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mpcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MemberProductCourses entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MemberProductCourses entity is found.
// Returns a *NotFoundError when no MemberProductCourses entities are found.
func (mpcq *MemberProductCoursesQuery) Only(ctx context.Context) (*MemberProductCourses, error) {
	nodes, err := mpcq.Limit(2).All(setContextOp(ctx, mpcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{memberproductcourses.Label}
	default:
		return nil, &NotSingularError{memberproductcourses.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) OnlyX(ctx context.Context) *MemberProductCourses {
	node, err := mpcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MemberProductCourses ID in the query.
// Returns a *NotSingularError when more than one MemberProductCourses ID is found.
// Returns a *NotFoundError when no entities are found.
func (mpcq *MemberProductCoursesQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mpcq.Limit(2).IDs(setContextOp(ctx, mpcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{memberproductcourses.Label}
	default:
		err = &NotSingularError{memberproductcourses.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mpcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MemberProductCoursesSlice.
func (mpcq *MemberProductCoursesQuery) All(ctx context.Context) ([]*MemberProductCourses, error) {
	ctx = setContextOp(ctx, mpcq.ctx, "All")
	if err := mpcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MemberProductCourses, *MemberProductCoursesQuery]()
	return withInterceptors[[]*MemberProductCourses](ctx, mpcq, qr, mpcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) AllX(ctx context.Context) []*MemberProductCourses {
	nodes, err := mpcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MemberProductCourses IDs.
func (mpcq *MemberProductCoursesQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mpcq.ctx.Unique == nil && mpcq.path != nil {
		mpcq.Unique(true)
	}
	ctx = setContextOp(ctx, mpcq.ctx, "IDs")
	if err = mpcq.Select(memberproductcourses.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mpcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mpcq *MemberProductCoursesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mpcq.ctx, "Count")
	if err := mpcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mpcq, querierCount[*MemberProductCoursesQuery](), mpcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) CountX(ctx context.Context) int {
	count, err := mpcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mpcq *MemberProductCoursesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mpcq.ctx, "Exist")
	switch _, err := mpcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mpcq *MemberProductCoursesQuery) ExistX(ctx context.Context) bool {
	exist, err := mpcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MemberProductCoursesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mpcq *MemberProductCoursesQuery) Clone() *MemberProductCoursesQuery {
	if mpcq == nil {
		return nil
	}
	return &MemberProductCoursesQuery{
		config:             mpcq.config,
		ctx:                mpcq.ctx.Clone(),
		order:              append([]memberproductcourses.OrderOption{}, mpcq.order...),
		inters:             append([]Interceptor{}, mpcq.inters...),
		predicates:         append([]predicate.MemberProductCourses{}, mpcq.predicates...),
		withProductCourses: mpcq.withProductCourses.Clone(),
		withProductLessons: mpcq.withProductLessons.Clone(),
		// clone intermediate query.
		sql:  mpcq.sql.Clone(),
		path: mpcq.path,
	}
}

// WithProductCourses tells the query-builder to eager-load the nodes that are connected to
// the "productCourses" edge. The optional arguments are used to configure the query builder of the edge.
func (mpcq *MemberProductCoursesQuery) WithProductCourses(opts ...func(*MemberProductQuery)) *MemberProductCoursesQuery {
	query := (&MemberProductClient{config: mpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpcq.withProductCourses = query
	return mpcq
}

// WithProductLessons tells the query-builder to eager-load the nodes that are connected to
// the "productLessons" edge. The optional arguments are used to configure the query builder of the edge.
func (mpcq *MemberProductCoursesQuery) WithProductLessons(opts ...func(*MemberProductQuery)) *MemberProductCoursesQuery {
	query := (&MemberProductClient{config: mpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpcq.withProductLessons = query
	return mpcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MemberProductCourses.Query().
//		GroupBy(memberproductcourses.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mpcq *MemberProductCoursesQuery) GroupBy(field string, fields ...string) *MemberProductCoursesGroupBy {
	mpcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MemberProductCoursesGroupBy{build: mpcq}
	grbuild.flds = &mpcq.ctx.Fields
	grbuild.label = memberproductcourses.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MemberProductCourses.Query().
//		Select(memberproductcourses.FieldCreatedAt).
//		Scan(ctx, &v)
func (mpcq *MemberProductCoursesQuery) Select(fields ...string) *MemberProductCoursesSelect {
	mpcq.ctx.Fields = append(mpcq.ctx.Fields, fields...)
	sbuild := &MemberProductCoursesSelect{MemberProductCoursesQuery: mpcq}
	sbuild.label = memberproductcourses.Label
	sbuild.flds, sbuild.scan = &mpcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MemberProductCoursesSelect configured with the given aggregations.
func (mpcq *MemberProductCoursesQuery) Aggregate(fns ...AggregateFunc) *MemberProductCoursesSelect {
	return mpcq.Select().Aggregate(fns...)
}

func (mpcq *MemberProductCoursesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mpcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mpcq); err != nil {
				return err
			}
		}
	}
	for _, f := range mpcq.ctx.Fields {
		if !memberproductcourses.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mpcq.path != nil {
		prev, err := mpcq.path(ctx)
		if err != nil {
			return err
		}
		mpcq.sql = prev
	}
	return nil
}

func (mpcq *MemberProductCoursesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MemberProductCourses, error) {
	var (
		nodes       = []*MemberProductCourses{}
		_spec       = mpcq.querySpec()
		loadedTypes = [2]bool{
			mpcq.withProductCourses != nil,
			mpcq.withProductLessons != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MemberProductCourses).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MemberProductCourses{config: mpcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mpcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mpcq.withProductCourses; query != nil {
		if err := mpcq.loadProductCourses(ctx, query, nodes, nil,
			func(n *MemberProductCourses, e *MemberProduct) { n.Edges.ProductCourses = e }); err != nil {
			return nil, err
		}
	}
	if query := mpcq.withProductLessons; query != nil {
		if err := mpcq.loadProductLessons(ctx, query, nodes, nil,
			func(n *MemberProductCourses, e *MemberProduct) { n.Edges.ProductLessons = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mpcq *MemberProductCoursesQuery) loadProductCourses(ctx context.Context, query *MemberProductQuery, nodes []*MemberProductCourses, init func(*MemberProductCourses), assign func(*MemberProductCourses, *MemberProduct)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MemberProductCourses)
	for i := range nodes {
		fk := nodes[i].MemberProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(memberproduct.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mpcq *MemberProductCoursesQuery) loadProductLessons(ctx context.Context, query *MemberProductQuery, nodes []*MemberProductCourses, init func(*MemberProductCourses), assign func(*MemberProductCourses, *MemberProduct)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MemberProductCourses)
	for i := range nodes {
		fk := nodes[i].MemberProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(memberproduct.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mpcq *MemberProductCoursesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mpcq.querySpec()
	_spec.Node.Columns = mpcq.ctx.Fields
	if len(mpcq.ctx.Fields) > 0 {
		_spec.Unique = mpcq.ctx.Unique != nil && *mpcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mpcq.driver, _spec)
}

func (mpcq *MemberProductCoursesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(memberproductcourses.Table, memberproductcourses.Columns, sqlgraph.NewFieldSpec(memberproductcourses.FieldID, field.TypeInt64))
	_spec.From = mpcq.sql
	if unique := mpcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mpcq.path != nil {
		_spec.Unique = true
	}
	if fields := mpcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproductcourses.FieldID)
		for i := range fields {
			if fields[i] != memberproductcourses.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mpcq.withProductCourses != nil {
			_spec.Node.AddColumnOnce(memberproductcourses.FieldMemberProductID)
		}
		if mpcq.withProductLessons != nil {
			_spec.Node.AddColumnOnce(memberproductcourses.FieldMemberProductID)
		}
	}
	if ps := mpcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mpcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mpcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mpcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mpcq *MemberProductCoursesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mpcq.driver.Dialect())
	t1 := builder.Table(memberproductcourses.Table)
	columns := mpcq.ctx.Fields
	if len(columns) == 0 {
		columns = memberproductcourses.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mpcq.sql != nil {
		selector = mpcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mpcq.ctx.Unique != nil && *mpcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mpcq.predicates {
		p(selector)
	}
	for _, p := range mpcq.order {
		p(selector)
	}
	if offset := mpcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mpcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MemberProductCoursesGroupBy is the group-by builder for MemberProductCourses entities.
type MemberProductCoursesGroupBy struct {
	selector
	build *MemberProductCoursesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mpcgb *MemberProductCoursesGroupBy) Aggregate(fns ...AggregateFunc) *MemberProductCoursesGroupBy {
	mpcgb.fns = append(mpcgb.fns, fns...)
	return mpcgb
}

// Scan applies the selector query and scans the result into the given value.
func (mpcgb *MemberProductCoursesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpcgb.build.ctx, "GroupBy")
	if err := mpcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MemberProductCoursesQuery, *MemberProductCoursesGroupBy](ctx, mpcgb.build, mpcgb, mpcgb.build.inters, v)
}

func (mpcgb *MemberProductCoursesGroupBy) sqlScan(ctx context.Context, root *MemberProductCoursesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mpcgb.fns))
	for _, fn := range mpcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mpcgb.flds)+len(mpcgb.fns))
		for _, f := range *mpcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mpcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MemberProductCoursesSelect is the builder for selecting fields of MemberProductCourses entities.
type MemberProductCoursesSelect struct {
	*MemberProductCoursesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mpcs *MemberProductCoursesSelect) Aggregate(fns ...AggregateFunc) *MemberProductCoursesSelect {
	mpcs.fns = append(mpcs.fns, fns...)
	return mpcs
}

// Scan applies the selector query and scans the result into the given value.
func (mpcs *MemberProductCoursesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpcs.ctx, "Select")
	if err := mpcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MemberProductCoursesQuery, *MemberProductCoursesSelect](ctx, mpcs.MemberProductCoursesQuery, mpcs, mpcs.inters, v)
}

func (mpcs *MemberProductCoursesSelect) sqlScan(ctx context.Context, root *MemberProductCoursesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mpcs.fns))
	for _, fn := range mpcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mpcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

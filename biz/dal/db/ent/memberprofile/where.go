// Code generated by ent, DO NOT EDIT.

package memberprofile

import (
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// Delete applies equality check predicate on the "delete" field. It's identical to DeleteEQ.
func Delete(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldDelete, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedID, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMemberID, v))
}

// MobileAscription applies equality check predicate on the "mobile_ascription" field. It's identical to MobileAscriptionEQ.
func MobileAscription(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMobileAscription, v))
}

// FatherName applies equality check predicate on the "father_name" field. It's identical to FatherNameEQ.
func FatherName(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldFatherName, v))
}

// MotherName applies equality check predicate on the "mother_name" field. It's identical to MotherNameEQ.
func MotherName(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMotherName, v))
}

// Grade applies equality check predicate on the "grade" field. It's identical to GradeEQ.
func Grade(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldGrade, v))
}

// Intention applies equality check predicate on the "intention" field. It's identical to IntentionEQ.
func Intention(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldIntention, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldSource, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteEQ applies the EQ predicate on the "delete" field.
func DeleteEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldDelete, v))
}

// DeleteNEQ applies the NEQ predicate on the "delete" field.
func DeleteNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldDelete, v))
}

// DeleteIn applies the In predicate on the "delete" field.
func DeleteIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldDelete, vs...))
}

// DeleteNotIn applies the NotIn predicate on the "delete" field.
func DeleteNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldDelete, vs...))
}

// DeleteGT applies the GT predicate on the "delete" field.
func DeleteGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldDelete, v))
}

// DeleteGTE applies the GTE predicate on the "delete" field.
func DeleteGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldDelete, v))
}

// DeleteLT applies the LT predicate on the "delete" field.
func DeleteLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldDelete, v))
}

// DeleteLTE applies the LTE predicate on the "delete" field.
func DeleteLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldDelete, v))
}

// DeleteIsNil applies the IsNil predicate on the "delete" field.
func DeleteIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldDelete))
}

// DeleteNotNil applies the NotNil predicate on the "delete" field.
func DeleteNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldDelete))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldCreatedID, v))
}

// CreatedIDIsNil applies the IsNil predicate on the "created_id" field.
func CreatedIDIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldCreatedID))
}

// CreatedIDNotNil applies the NotNil predicate on the "created_id" field.
func CreatedIDNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldCreatedID))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldMemberID))
}

// MobileAscriptionEQ applies the EQ predicate on the "mobile_ascription" field.
func MobileAscriptionEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMobileAscription, v))
}

// MobileAscriptionNEQ applies the NEQ predicate on the "mobile_ascription" field.
func MobileAscriptionNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldMobileAscription, v))
}

// MobileAscriptionIn applies the In predicate on the "mobile_ascription" field.
func MobileAscriptionIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldMobileAscription, vs...))
}

// MobileAscriptionNotIn applies the NotIn predicate on the "mobile_ascription" field.
func MobileAscriptionNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldMobileAscription, vs...))
}

// MobileAscriptionGT applies the GT predicate on the "mobile_ascription" field.
func MobileAscriptionGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldMobileAscription, v))
}

// MobileAscriptionGTE applies the GTE predicate on the "mobile_ascription" field.
func MobileAscriptionGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldMobileAscription, v))
}

// MobileAscriptionLT applies the LT predicate on the "mobile_ascription" field.
func MobileAscriptionLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldMobileAscription, v))
}

// MobileAscriptionLTE applies the LTE predicate on the "mobile_ascription" field.
func MobileAscriptionLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldMobileAscription, v))
}

// MobileAscriptionIsNil applies the IsNil predicate on the "mobile_ascription" field.
func MobileAscriptionIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldMobileAscription))
}

// MobileAscriptionNotNil applies the NotNil predicate on the "mobile_ascription" field.
func MobileAscriptionNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldMobileAscription))
}

// FatherNameEQ applies the EQ predicate on the "father_name" field.
func FatherNameEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldFatherName, v))
}

// FatherNameNEQ applies the NEQ predicate on the "father_name" field.
func FatherNameNEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldFatherName, v))
}

// FatherNameIn applies the In predicate on the "father_name" field.
func FatherNameIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldFatherName, vs...))
}

// FatherNameNotIn applies the NotIn predicate on the "father_name" field.
func FatherNameNotIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldFatherName, vs...))
}

// FatherNameGT applies the GT predicate on the "father_name" field.
func FatherNameGT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldFatherName, v))
}

// FatherNameGTE applies the GTE predicate on the "father_name" field.
func FatherNameGTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldFatherName, v))
}

// FatherNameLT applies the LT predicate on the "father_name" field.
func FatherNameLT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldFatherName, v))
}

// FatherNameLTE applies the LTE predicate on the "father_name" field.
func FatherNameLTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldFatherName, v))
}

// FatherNameContains applies the Contains predicate on the "father_name" field.
func FatherNameContains(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContains(FieldFatherName, v))
}

// FatherNameHasPrefix applies the HasPrefix predicate on the "father_name" field.
func FatherNameHasPrefix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasPrefix(FieldFatherName, v))
}

// FatherNameHasSuffix applies the HasSuffix predicate on the "father_name" field.
func FatherNameHasSuffix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasSuffix(FieldFatherName, v))
}

// FatherNameIsNil applies the IsNil predicate on the "father_name" field.
func FatherNameIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldFatherName))
}

// FatherNameNotNil applies the NotNil predicate on the "father_name" field.
func FatherNameNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldFatherName))
}

// FatherNameEqualFold applies the EqualFold predicate on the "father_name" field.
func FatherNameEqualFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEqualFold(FieldFatherName, v))
}

// FatherNameContainsFold applies the ContainsFold predicate on the "father_name" field.
func FatherNameContainsFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContainsFold(FieldFatherName, v))
}

// MotherNameEQ applies the EQ predicate on the "mother_name" field.
func MotherNameEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldMotherName, v))
}

// MotherNameNEQ applies the NEQ predicate on the "mother_name" field.
func MotherNameNEQ(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldMotherName, v))
}

// MotherNameIn applies the In predicate on the "mother_name" field.
func MotherNameIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldMotherName, vs...))
}

// MotherNameNotIn applies the NotIn predicate on the "mother_name" field.
func MotherNameNotIn(vs ...string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldMotherName, vs...))
}

// MotherNameGT applies the GT predicate on the "mother_name" field.
func MotherNameGT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldMotherName, v))
}

// MotherNameGTE applies the GTE predicate on the "mother_name" field.
func MotherNameGTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldMotherName, v))
}

// MotherNameLT applies the LT predicate on the "mother_name" field.
func MotherNameLT(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldMotherName, v))
}

// MotherNameLTE applies the LTE predicate on the "mother_name" field.
func MotherNameLTE(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldMotherName, v))
}

// MotherNameContains applies the Contains predicate on the "mother_name" field.
func MotherNameContains(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContains(FieldMotherName, v))
}

// MotherNameHasPrefix applies the HasPrefix predicate on the "mother_name" field.
func MotherNameHasPrefix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasPrefix(FieldMotherName, v))
}

// MotherNameHasSuffix applies the HasSuffix predicate on the "mother_name" field.
func MotherNameHasSuffix(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldHasSuffix(FieldMotherName, v))
}

// MotherNameIsNil applies the IsNil predicate on the "mother_name" field.
func MotherNameIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldMotherName))
}

// MotherNameNotNil applies the NotNil predicate on the "mother_name" field.
func MotherNameNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldMotherName))
}

// MotherNameEqualFold applies the EqualFold predicate on the "mother_name" field.
func MotherNameEqualFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEqualFold(FieldMotherName, v))
}

// MotherNameContainsFold applies the ContainsFold predicate on the "mother_name" field.
func MotherNameContainsFold(v string) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldContainsFold(FieldMotherName, v))
}

// GradeEQ applies the EQ predicate on the "grade" field.
func GradeEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldGrade, v))
}

// GradeNEQ applies the NEQ predicate on the "grade" field.
func GradeNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldGrade, v))
}

// GradeIn applies the In predicate on the "grade" field.
func GradeIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldGrade, vs...))
}

// GradeNotIn applies the NotIn predicate on the "grade" field.
func GradeNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldGrade, vs...))
}

// GradeGT applies the GT predicate on the "grade" field.
func GradeGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldGrade, v))
}

// GradeGTE applies the GTE predicate on the "grade" field.
func GradeGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldGrade, v))
}

// GradeLT applies the LT predicate on the "grade" field.
func GradeLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldGrade, v))
}

// GradeLTE applies the LTE predicate on the "grade" field.
func GradeLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldGrade, v))
}

// GradeIsNil applies the IsNil predicate on the "grade" field.
func GradeIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldGrade))
}

// GradeNotNil applies the NotNil predicate on the "grade" field.
func GradeNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldGrade))
}

// IntentionEQ applies the EQ predicate on the "intention" field.
func IntentionEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldIntention, v))
}

// IntentionNEQ applies the NEQ predicate on the "intention" field.
func IntentionNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldIntention, v))
}

// IntentionIn applies the In predicate on the "intention" field.
func IntentionIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldIntention, vs...))
}

// IntentionNotIn applies the NotIn predicate on the "intention" field.
func IntentionNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldIntention, vs...))
}

// IntentionGT applies the GT predicate on the "intention" field.
func IntentionGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldIntention, v))
}

// IntentionGTE applies the GTE predicate on the "intention" field.
func IntentionGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldIntention, v))
}

// IntentionLT applies the LT predicate on the "intention" field.
func IntentionLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldIntention, v))
}

// IntentionLTE applies the LTE predicate on the "intention" field.
func IntentionLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldIntention, v))
}

// IntentionIsNil applies the IsNil predicate on the "intention" field.
func IntentionIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldIntention))
}

// IntentionNotNil applies the NotNil predicate on the "intention" field.
func IntentionNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldIntention))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v int64) predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldLTE(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.MemberProfile {
	return predicate.MemberProfile(sql.FieldNotNull(FieldSource))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.MemberProfile {
	return predicate.MemberProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Member) predicate.MemberProfile {
	return predicate.MemberProfile(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProfile) predicate.MemberProfile {
	return predicate.MemberProfile(sql.NotPredicates(p))
}

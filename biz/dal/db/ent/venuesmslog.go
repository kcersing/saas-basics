// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesmslog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VenueSmsLog is the model entity for the VenueSmsLog schema.
type VenueSmsLog struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// 手机号
	Mobile string `json:"mobile,omitempty"`
	// BizId
	BizID string `json:"biz_id,omitempty"`
	// 验证码
	Code string `json:"code,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 通知类型[1会员;2员工]
	NotifyType int64 `json:"notify_type,omitempty"`
	// 短信模板
	Template string `json:"template,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VenueSmsLogQuery when eager-loading is set.
	Edges        VenueSmsLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VenueSmsLogEdges holds the relations/edges for other nodes in the graph.
type VenueSmsLogEdges struct {
	// Venue holds the value of the venue edge.
	Venue *Venue `json:"venue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VenueOrErr returns the Venue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VenueSmsLogEdges) VenueOrErr() (*Venue, error) {
	if e.loadedTypes[0] {
		if e.Venue == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: venue.Label}
		}
		return e.Venue, nil
	}
	return nil, &NotLoadedError{edge: "venue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VenueSmsLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case venuesmslog.FieldID, venuesmslog.FieldDelete, venuesmslog.FieldCreatedID, venuesmslog.FieldStatus, venuesmslog.FieldVenueID, venuesmslog.FieldNotifyType:
			values[i] = new(sql.NullInt64)
		case venuesmslog.FieldMobile, venuesmslog.FieldBizID, venuesmslog.FieldCode, venuesmslog.FieldContent, venuesmslog.FieldTemplate:
			values[i] = new(sql.NullString)
		case venuesmslog.FieldCreatedAt, venuesmslog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VenueSmsLog fields.
func (vsl *VenueSmsLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case venuesmslog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vsl.ID = int64(value.Int64)
		case venuesmslog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vsl.CreatedAt = value.Time
			}
		case venuesmslog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vsl.UpdatedAt = value.Time
			}
		case venuesmslog.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				vsl.Delete = value.Int64
			}
		case venuesmslog.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				vsl.CreatedID = value.Int64
			}
		case venuesmslog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				vsl.Status = value.Int64
			}
		case venuesmslog.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				vsl.VenueID = value.Int64
			}
		case venuesmslog.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				vsl.Mobile = value.String
			}
		case venuesmslog.FieldBizID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_id", values[i])
			} else if value.Valid {
				vsl.BizID = value.String
			}
		case venuesmslog.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				vsl.Code = value.String
			}
		case venuesmslog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				vsl.Content = value.String
			}
		case venuesmslog.FieldNotifyType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notify_type", values[i])
			} else if value.Valid {
				vsl.NotifyType = value.Int64
			}
		case venuesmslog.FieldTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template", values[i])
			} else if value.Valid {
				vsl.Template = value.String
			}
		default:
			vsl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VenueSmsLog.
// This includes values selected through modifiers, order, etc.
func (vsl *VenueSmsLog) Value(name string) (ent.Value, error) {
	return vsl.selectValues.Get(name)
}

// QueryVenue queries the "venue" edge of the VenueSmsLog entity.
func (vsl *VenueSmsLog) QueryVenue() *VenueQuery {
	return NewVenueSmsLogClient(vsl.config).QueryVenue(vsl)
}

// Update returns a builder for updating this VenueSmsLog.
// Note that you need to call VenueSmsLog.Unwrap() before calling this method if this VenueSmsLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (vsl *VenueSmsLog) Update() *VenueSmsLogUpdateOne {
	return NewVenueSmsLogClient(vsl.config).UpdateOne(vsl)
}

// Unwrap unwraps the VenueSmsLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vsl *VenueSmsLog) Unwrap() *VenueSmsLog {
	_tx, ok := vsl.config.driver.(*txDriver)
	if !ok {
		panic("ent: VenueSmsLog is not a transactional entity")
	}
	vsl.config.driver = _tx.drv
	return vsl
}

// String implements the fmt.Stringer.
func (vsl *VenueSmsLog) String() string {
	var builder strings.Builder
	builder.WriteString("VenueSmsLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vsl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vsl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vsl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", vsl.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", vsl.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", vsl.Status))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", vsl.VenueID))
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(vsl.Mobile)
	builder.WriteString(", ")
	builder.WriteString("biz_id=")
	builder.WriteString(vsl.BizID)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(vsl.Code)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(vsl.Content)
	builder.WriteString(", ")
	builder.WriteString("notify_type=")
	builder.WriteString(fmt.Sprintf("%v", vsl.NotifyType))
	builder.WriteString(", ")
	builder.WriteString("template=")
	builder.WriteString(vsl.Template)
	builder.WriteByte(')')
	return builder.String()
}

// VenueSmsLogs is a parsable slice of VenueSmsLog.
type VenueSmsLogs []*VenueSmsLog

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesmslog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueSmsLogUpdate is the builder for updating VenueSmsLog entities.
type VenueSmsLogUpdate struct {
	config
	hooks    []Hook
	mutation *VenueSmsLogMutation
}

// Where appends a list predicates to the VenueSmsLogUpdate builder.
func (vslu *VenueSmsLogUpdate) Where(ps ...predicate.VenueSmsLog) *VenueSmsLogUpdate {
	vslu.mutation.Where(ps...)
	return vslu
}

// SetUpdatedAt sets the "updated_at" field.
func (vslu *VenueSmsLogUpdate) SetUpdatedAt(t time.Time) *VenueSmsLogUpdate {
	vslu.mutation.SetUpdatedAt(t)
	return vslu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vslu *VenueSmsLogUpdate) ClearUpdatedAt() *VenueSmsLogUpdate {
	vslu.mutation.ClearUpdatedAt()
	return vslu
}

// SetDelete sets the "delete" field.
func (vslu *VenueSmsLogUpdate) SetDelete(i int64) *VenueSmsLogUpdate {
	vslu.mutation.ResetDelete()
	vslu.mutation.SetDelete(i)
	return vslu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableDelete(i *int64) *VenueSmsLogUpdate {
	if i != nil {
		vslu.SetDelete(*i)
	}
	return vslu
}

// AddDelete adds i to the "delete" field.
func (vslu *VenueSmsLogUpdate) AddDelete(i int64) *VenueSmsLogUpdate {
	vslu.mutation.AddDelete(i)
	return vslu
}

// ClearDelete clears the value of the "delete" field.
func (vslu *VenueSmsLogUpdate) ClearDelete() *VenueSmsLogUpdate {
	vslu.mutation.ClearDelete()
	return vslu
}

// SetCreatedID sets the "created_id" field.
func (vslu *VenueSmsLogUpdate) SetCreatedID(i int64) *VenueSmsLogUpdate {
	vslu.mutation.ResetCreatedID()
	vslu.mutation.SetCreatedID(i)
	return vslu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableCreatedID(i *int64) *VenueSmsLogUpdate {
	if i != nil {
		vslu.SetCreatedID(*i)
	}
	return vslu
}

// AddCreatedID adds i to the "created_id" field.
func (vslu *VenueSmsLogUpdate) AddCreatedID(i int64) *VenueSmsLogUpdate {
	vslu.mutation.AddCreatedID(i)
	return vslu
}

// ClearCreatedID clears the value of the "created_id" field.
func (vslu *VenueSmsLogUpdate) ClearCreatedID() *VenueSmsLogUpdate {
	vslu.mutation.ClearCreatedID()
	return vslu
}

// SetStatus sets the "status" field.
func (vslu *VenueSmsLogUpdate) SetStatus(i int64) *VenueSmsLogUpdate {
	vslu.mutation.ResetStatus()
	vslu.mutation.SetStatus(i)
	return vslu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableStatus(i *int64) *VenueSmsLogUpdate {
	if i != nil {
		vslu.SetStatus(*i)
	}
	return vslu
}

// AddStatus adds i to the "status" field.
func (vslu *VenueSmsLogUpdate) AddStatus(i int64) *VenueSmsLogUpdate {
	vslu.mutation.AddStatus(i)
	return vslu
}

// ClearStatus clears the value of the "status" field.
func (vslu *VenueSmsLogUpdate) ClearStatus() *VenueSmsLogUpdate {
	vslu.mutation.ClearStatus()
	return vslu
}

// SetVenueID sets the "venue_id" field.
func (vslu *VenueSmsLogUpdate) SetVenueID(i int64) *VenueSmsLogUpdate {
	vslu.mutation.SetVenueID(i)
	return vslu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableVenueID(i *int64) *VenueSmsLogUpdate {
	if i != nil {
		vslu.SetVenueID(*i)
	}
	return vslu
}

// ClearVenueID clears the value of the "venue_id" field.
func (vslu *VenueSmsLogUpdate) ClearVenueID() *VenueSmsLogUpdate {
	vslu.mutation.ClearVenueID()
	return vslu
}

// SetMobile sets the "mobile" field.
func (vslu *VenueSmsLogUpdate) SetMobile(s string) *VenueSmsLogUpdate {
	vslu.mutation.SetMobile(s)
	return vslu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableMobile(s *string) *VenueSmsLogUpdate {
	if s != nil {
		vslu.SetMobile(*s)
	}
	return vslu
}

// SetBizID sets the "biz_id" field.
func (vslu *VenueSmsLogUpdate) SetBizID(s string) *VenueSmsLogUpdate {
	vslu.mutation.SetBizID(s)
	return vslu
}

// SetNillableBizID sets the "biz_id" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableBizID(s *string) *VenueSmsLogUpdate {
	if s != nil {
		vslu.SetBizID(*s)
	}
	return vslu
}

// SetCode sets the "code" field.
func (vslu *VenueSmsLogUpdate) SetCode(s string) *VenueSmsLogUpdate {
	vslu.mutation.SetCode(s)
	return vslu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableCode(s *string) *VenueSmsLogUpdate {
	if s != nil {
		vslu.SetCode(*s)
	}
	return vslu
}

// SetContent sets the "content" field.
func (vslu *VenueSmsLogUpdate) SetContent(s string) *VenueSmsLogUpdate {
	vslu.mutation.SetContent(s)
	return vslu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableContent(s *string) *VenueSmsLogUpdate {
	if s != nil {
		vslu.SetContent(*s)
	}
	return vslu
}

// SetNotifyType sets the "notify_type" field.
func (vslu *VenueSmsLogUpdate) SetNotifyType(i int64) *VenueSmsLogUpdate {
	vslu.mutation.ResetNotifyType()
	vslu.mutation.SetNotifyType(i)
	return vslu
}

// SetNillableNotifyType sets the "notify_type" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableNotifyType(i *int64) *VenueSmsLogUpdate {
	if i != nil {
		vslu.SetNotifyType(*i)
	}
	return vslu
}

// AddNotifyType adds i to the "notify_type" field.
func (vslu *VenueSmsLogUpdate) AddNotifyType(i int64) *VenueSmsLogUpdate {
	vslu.mutation.AddNotifyType(i)
	return vslu
}

// ClearNotifyType clears the value of the "notify_type" field.
func (vslu *VenueSmsLogUpdate) ClearNotifyType() *VenueSmsLogUpdate {
	vslu.mutation.ClearNotifyType()
	return vslu
}

// SetTemplate sets the "template" field.
func (vslu *VenueSmsLogUpdate) SetTemplate(s string) *VenueSmsLogUpdate {
	vslu.mutation.SetTemplate(s)
	return vslu
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (vslu *VenueSmsLogUpdate) SetNillableTemplate(s *string) *VenueSmsLogUpdate {
	if s != nil {
		vslu.SetTemplate(*s)
	}
	return vslu
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vslu *VenueSmsLogUpdate) SetVenue(v *Venue) *VenueSmsLogUpdate {
	return vslu.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsLogMutation object of the builder.
func (vslu *VenueSmsLogUpdate) Mutation() *VenueSmsLogMutation {
	return vslu.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (vslu *VenueSmsLogUpdate) ClearVenue() *VenueSmsLogUpdate {
	vslu.mutation.ClearVenue()
	return vslu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vslu *VenueSmsLogUpdate) Save(ctx context.Context) (int, error) {
	vslu.defaults()
	return withHooks(ctx, vslu.sqlSave, vslu.mutation, vslu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vslu *VenueSmsLogUpdate) SaveX(ctx context.Context) int {
	affected, err := vslu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vslu *VenueSmsLogUpdate) Exec(ctx context.Context) error {
	_, err := vslu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vslu *VenueSmsLogUpdate) ExecX(ctx context.Context) {
	if err := vslu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vslu *VenueSmsLogUpdate) defaults() {
	if _, ok := vslu.mutation.UpdatedAt(); !ok && !vslu.mutation.UpdatedAtCleared() {
		v := venuesmslog.UpdateDefaultUpdatedAt()
		vslu.mutation.SetUpdatedAt(v)
	}
}

func (vslu *VenueSmsLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuesmslog.Table, venuesmslog.Columns, sqlgraph.NewFieldSpec(venuesmslog.FieldID, field.TypeInt64))
	if ps := vslu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vslu.mutation.CreatedAtCleared() {
		_spec.ClearField(venuesmslog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vslu.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesmslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if vslu.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuesmslog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vslu.mutation.Delete(); ok {
		_spec.SetField(venuesmslog.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vslu.mutation.AddedDelete(); ok {
		_spec.AddField(venuesmslog.FieldDelete, field.TypeInt64, value)
	}
	if vslu.mutation.DeleteCleared() {
		_spec.ClearField(venuesmslog.FieldDelete, field.TypeInt64)
	}
	if value, ok := vslu.mutation.CreatedID(); ok {
		_spec.SetField(venuesmslog.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vslu.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuesmslog.FieldCreatedID, field.TypeInt64, value)
	}
	if vslu.mutation.CreatedIDCleared() {
		_spec.ClearField(venuesmslog.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vslu.mutation.Status(); ok {
		_spec.SetField(venuesmslog.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := vslu.mutation.AddedStatus(); ok {
		_spec.AddField(venuesmslog.FieldStatus, field.TypeInt64, value)
	}
	if vslu.mutation.StatusCleared() {
		_spec.ClearField(venuesmslog.FieldStatus, field.TypeInt64)
	}
	if value, ok := vslu.mutation.Mobile(); ok {
		_spec.SetField(venuesmslog.FieldMobile, field.TypeString, value)
	}
	if value, ok := vslu.mutation.BizID(); ok {
		_spec.SetField(venuesmslog.FieldBizID, field.TypeString, value)
	}
	if value, ok := vslu.mutation.Code(); ok {
		_spec.SetField(venuesmslog.FieldCode, field.TypeString, value)
	}
	if value, ok := vslu.mutation.Content(); ok {
		_spec.SetField(venuesmslog.FieldContent, field.TypeString, value)
	}
	if value, ok := vslu.mutation.NotifyType(); ok {
		_spec.SetField(venuesmslog.FieldNotifyType, field.TypeInt64, value)
	}
	if value, ok := vslu.mutation.AddedNotifyType(); ok {
		_spec.AddField(venuesmslog.FieldNotifyType, field.TypeInt64, value)
	}
	if vslu.mutation.NotifyTypeCleared() {
		_spec.ClearField(venuesmslog.FieldNotifyType, field.TypeInt64)
	}
	if value, ok := vslu.mutation.Template(); ok {
		_spec.SetField(venuesmslog.FieldTemplate, field.TypeString, value)
	}
	if vslu.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesmslog.VenueTable,
			Columns: []string{venuesmslog.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vslu.schemaConfig.VenueSmsLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vslu.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesmslog.VenueTable,
			Columns: []string{venuesmslog.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vslu.schemaConfig.VenueSmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vslu.schemaConfig.VenueSmsLog
	ctx = internal.NewSchemaConfigContext(ctx, vslu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vslu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuesmslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vslu.mutation.done = true
	return n, nil
}

// VenueSmsLogUpdateOne is the builder for updating a single VenueSmsLog entity.
type VenueSmsLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VenueSmsLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vsluo *VenueSmsLogUpdateOne) SetUpdatedAt(t time.Time) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetUpdatedAt(t)
	return vsluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vsluo *VenueSmsLogUpdateOne) ClearUpdatedAt() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearUpdatedAt()
	return vsluo
}

// SetDelete sets the "delete" field.
func (vsluo *VenueSmsLogUpdateOne) SetDelete(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.ResetDelete()
	vsluo.mutation.SetDelete(i)
	return vsluo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableDelete(i *int64) *VenueSmsLogUpdateOne {
	if i != nil {
		vsluo.SetDelete(*i)
	}
	return vsluo
}

// AddDelete adds i to the "delete" field.
func (vsluo *VenueSmsLogUpdateOne) AddDelete(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.AddDelete(i)
	return vsluo
}

// ClearDelete clears the value of the "delete" field.
func (vsluo *VenueSmsLogUpdateOne) ClearDelete() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearDelete()
	return vsluo
}

// SetCreatedID sets the "created_id" field.
func (vsluo *VenueSmsLogUpdateOne) SetCreatedID(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.ResetCreatedID()
	vsluo.mutation.SetCreatedID(i)
	return vsluo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableCreatedID(i *int64) *VenueSmsLogUpdateOne {
	if i != nil {
		vsluo.SetCreatedID(*i)
	}
	return vsluo
}

// AddCreatedID adds i to the "created_id" field.
func (vsluo *VenueSmsLogUpdateOne) AddCreatedID(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.AddCreatedID(i)
	return vsluo
}

// ClearCreatedID clears the value of the "created_id" field.
func (vsluo *VenueSmsLogUpdateOne) ClearCreatedID() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearCreatedID()
	return vsluo
}

// SetStatus sets the "status" field.
func (vsluo *VenueSmsLogUpdateOne) SetStatus(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.ResetStatus()
	vsluo.mutation.SetStatus(i)
	return vsluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableStatus(i *int64) *VenueSmsLogUpdateOne {
	if i != nil {
		vsluo.SetStatus(*i)
	}
	return vsluo
}

// AddStatus adds i to the "status" field.
func (vsluo *VenueSmsLogUpdateOne) AddStatus(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.AddStatus(i)
	return vsluo
}

// ClearStatus clears the value of the "status" field.
func (vsluo *VenueSmsLogUpdateOne) ClearStatus() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearStatus()
	return vsluo
}

// SetVenueID sets the "venue_id" field.
func (vsluo *VenueSmsLogUpdateOne) SetVenueID(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetVenueID(i)
	return vsluo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableVenueID(i *int64) *VenueSmsLogUpdateOne {
	if i != nil {
		vsluo.SetVenueID(*i)
	}
	return vsluo
}

// ClearVenueID clears the value of the "venue_id" field.
func (vsluo *VenueSmsLogUpdateOne) ClearVenueID() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearVenueID()
	return vsluo
}

// SetMobile sets the "mobile" field.
func (vsluo *VenueSmsLogUpdateOne) SetMobile(s string) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetMobile(s)
	return vsluo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableMobile(s *string) *VenueSmsLogUpdateOne {
	if s != nil {
		vsluo.SetMobile(*s)
	}
	return vsluo
}

// SetBizID sets the "biz_id" field.
func (vsluo *VenueSmsLogUpdateOne) SetBizID(s string) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetBizID(s)
	return vsluo
}

// SetNillableBizID sets the "biz_id" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableBizID(s *string) *VenueSmsLogUpdateOne {
	if s != nil {
		vsluo.SetBizID(*s)
	}
	return vsluo
}

// SetCode sets the "code" field.
func (vsluo *VenueSmsLogUpdateOne) SetCode(s string) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetCode(s)
	return vsluo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableCode(s *string) *VenueSmsLogUpdateOne {
	if s != nil {
		vsluo.SetCode(*s)
	}
	return vsluo
}

// SetContent sets the "content" field.
func (vsluo *VenueSmsLogUpdateOne) SetContent(s string) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetContent(s)
	return vsluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableContent(s *string) *VenueSmsLogUpdateOne {
	if s != nil {
		vsluo.SetContent(*s)
	}
	return vsluo
}

// SetNotifyType sets the "notify_type" field.
func (vsluo *VenueSmsLogUpdateOne) SetNotifyType(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.ResetNotifyType()
	vsluo.mutation.SetNotifyType(i)
	return vsluo
}

// SetNillableNotifyType sets the "notify_type" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableNotifyType(i *int64) *VenueSmsLogUpdateOne {
	if i != nil {
		vsluo.SetNotifyType(*i)
	}
	return vsluo
}

// AddNotifyType adds i to the "notify_type" field.
func (vsluo *VenueSmsLogUpdateOne) AddNotifyType(i int64) *VenueSmsLogUpdateOne {
	vsluo.mutation.AddNotifyType(i)
	return vsluo
}

// ClearNotifyType clears the value of the "notify_type" field.
func (vsluo *VenueSmsLogUpdateOne) ClearNotifyType() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearNotifyType()
	return vsluo
}

// SetTemplate sets the "template" field.
func (vsluo *VenueSmsLogUpdateOne) SetTemplate(s string) *VenueSmsLogUpdateOne {
	vsluo.mutation.SetTemplate(s)
	return vsluo
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (vsluo *VenueSmsLogUpdateOne) SetNillableTemplate(s *string) *VenueSmsLogUpdateOne {
	if s != nil {
		vsluo.SetTemplate(*s)
	}
	return vsluo
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vsluo *VenueSmsLogUpdateOne) SetVenue(v *Venue) *VenueSmsLogUpdateOne {
	return vsluo.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsLogMutation object of the builder.
func (vsluo *VenueSmsLogUpdateOne) Mutation() *VenueSmsLogMutation {
	return vsluo.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (vsluo *VenueSmsLogUpdateOne) ClearVenue() *VenueSmsLogUpdateOne {
	vsluo.mutation.ClearVenue()
	return vsluo
}

// Where appends a list predicates to the VenueSmsLogUpdate builder.
func (vsluo *VenueSmsLogUpdateOne) Where(ps ...predicate.VenueSmsLog) *VenueSmsLogUpdateOne {
	vsluo.mutation.Where(ps...)
	return vsluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsluo *VenueSmsLogUpdateOne) Select(field string, fields ...string) *VenueSmsLogUpdateOne {
	vsluo.fields = append([]string{field}, fields...)
	return vsluo
}

// Save executes the query and returns the updated VenueSmsLog entity.
func (vsluo *VenueSmsLogUpdateOne) Save(ctx context.Context) (*VenueSmsLog, error) {
	vsluo.defaults()
	return withHooks(ctx, vsluo.sqlSave, vsluo.mutation, vsluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsluo *VenueSmsLogUpdateOne) SaveX(ctx context.Context) *VenueSmsLog {
	node, err := vsluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsluo *VenueSmsLogUpdateOne) Exec(ctx context.Context) error {
	_, err := vsluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsluo *VenueSmsLogUpdateOne) ExecX(ctx context.Context) {
	if err := vsluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsluo *VenueSmsLogUpdateOne) defaults() {
	if _, ok := vsluo.mutation.UpdatedAt(); !ok && !vsluo.mutation.UpdatedAtCleared() {
		v := venuesmslog.UpdateDefaultUpdatedAt()
		vsluo.mutation.SetUpdatedAt(v)
	}
}

func (vsluo *VenueSmsLogUpdateOne) sqlSave(ctx context.Context) (_node *VenueSmsLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuesmslog.Table, venuesmslog.Columns, sqlgraph.NewFieldSpec(venuesmslog.FieldID, field.TypeInt64))
	id, ok := vsluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VenueSmsLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venuesmslog.FieldID)
		for _, f := range fields {
			if !venuesmslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venuesmslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsluo.mutation.CreatedAtCleared() {
		_spec.ClearField(venuesmslog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vsluo.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesmslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if vsluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuesmslog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vsluo.mutation.Delete(); ok {
		_spec.SetField(venuesmslog.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vsluo.mutation.AddedDelete(); ok {
		_spec.AddField(venuesmslog.FieldDelete, field.TypeInt64, value)
	}
	if vsluo.mutation.DeleteCleared() {
		_spec.ClearField(venuesmslog.FieldDelete, field.TypeInt64)
	}
	if value, ok := vsluo.mutation.CreatedID(); ok {
		_spec.SetField(venuesmslog.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vsluo.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuesmslog.FieldCreatedID, field.TypeInt64, value)
	}
	if vsluo.mutation.CreatedIDCleared() {
		_spec.ClearField(venuesmslog.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vsluo.mutation.Status(); ok {
		_spec.SetField(venuesmslog.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := vsluo.mutation.AddedStatus(); ok {
		_spec.AddField(venuesmslog.FieldStatus, field.TypeInt64, value)
	}
	if vsluo.mutation.StatusCleared() {
		_spec.ClearField(venuesmslog.FieldStatus, field.TypeInt64)
	}
	if value, ok := vsluo.mutation.Mobile(); ok {
		_spec.SetField(venuesmslog.FieldMobile, field.TypeString, value)
	}
	if value, ok := vsluo.mutation.BizID(); ok {
		_spec.SetField(venuesmslog.FieldBizID, field.TypeString, value)
	}
	if value, ok := vsluo.mutation.Code(); ok {
		_spec.SetField(venuesmslog.FieldCode, field.TypeString, value)
	}
	if value, ok := vsluo.mutation.Content(); ok {
		_spec.SetField(venuesmslog.FieldContent, field.TypeString, value)
	}
	if value, ok := vsluo.mutation.NotifyType(); ok {
		_spec.SetField(venuesmslog.FieldNotifyType, field.TypeInt64, value)
	}
	if value, ok := vsluo.mutation.AddedNotifyType(); ok {
		_spec.AddField(venuesmslog.FieldNotifyType, field.TypeInt64, value)
	}
	if vsluo.mutation.NotifyTypeCleared() {
		_spec.ClearField(venuesmslog.FieldNotifyType, field.TypeInt64)
	}
	if value, ok := vsluo.mutation.Template(); ok {
		_spec.SetField(venuesmslog.FieldTemplate, field.TypeString, value)
	}
	if vsluo.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesmslog.VenueTable,
			Columns: []string{venuesmslog.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsluo.schemaConfig.VenueSmsLog
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsluo.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesmslog.VenueTable,
			Columns: []string{venuesmslog.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsluo.schemaConfig.VenueSmsLog
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vsluo.schemaConfig.VenueSmsLog
	ctx = internal.NewSchemaConfigContext(ctx, vsluo.schemaConfig)
	_node = &VenueSmsLog{config: vsluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuesmslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsluo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/membercontract"
	"saas/biz/dal/db/ent/order"
	"saas/biz/dal/db/ent/orderamount"
	"saas/biz/dal/db/ent/orderitem"
	"saas/biz/dal/db/ent/orderpay"
	"saas/biz/dal/db/ent/ordersales"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/user"
	"saas/biz/dal/db/ent/venue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrderUpdate) ClearUpdatedAt() *OrderUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetDelete sets the "delete" field.
func (ou *OrderUpdate) SetDelete(i int64) *OrderUpdate {
	ou.mutation.ResetDelete()
	ou.mutation.SetDelete(i)
	return ou
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDelete(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetDelete(*i)
	}
	return ou
}

// AddDelete adds i to the "delete" field.
func (ou *OrderUpdate) AddDelete(i int64) *OrderUpdate {
	ou.mutation.AddDelete(i)
	return ou
}

// ClearDelete clears the value of the "delete" field.
func (ou *OrderUpdate) ClearDelete() *OrderUpdate {
	ou.mutation.ClearDelete()
	return ou
}

// SetCreatedID sets the "created_id" field.
func (ou *OrderUpdate) SetCreatedID(i int64) *OrderUpdate {
	ou.mutation.ResetCreatedID()
	ou.mutation.SetCreatedID(i)
	return ou
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetCreatedID(*i)
	}
	return ou
}

// AddCreatedID adds i to the "created_id" field.
func (ou *OrderUpdate) AddCreatedID(i int64) *OrderUpdate {
	ou.mutation.AddCreatedID(i)
	return ou
}

// ClearCreatedID clears the value of the "created_id" field.
func (ou *OrderUpdate) ClearCreatedID() *OrderUpdate {
	ou.mutation.ClearCreatedID()
	return ou
}

// SetOrderSn sets the "order_sn" field.
func (ou *OrderUpdate) SetOrderSn(s string) *OrderUpdate {
	ou.mutation.SetOrderSn(s)
	return ou
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderSn(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderSn(*s)
	}
	return ou
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ou *OrderUpdate) ClearOrderSn() *OrderUpdate {
	ou.mutation.ClearOrderSn()
	return ou
}

// SetVenueID sets the "venue_id" field.
func (ou *OrderUpdate) SetVenueID(i int64) *OrderUpdate {
	ou.mutation.SetVenueID(i)
	return ou
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableVenueID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetVenueID(*i)
	}
	return ou
}

// ClearVenueID clears the value of the "venue_id" field.
func (ou *OrderUpdate) ClearVenueID() *OrderUpdate {
	ou.mutation.ClearVenueID()
	return ou
}

// SetMemberID sets the "member_id" field.
func (ou *OrderUpdate) SetMemberID(i int64) *OrderUpdate {
	ou.mutation.SetMemberID(i)
	return ou
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMemberID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetMemberID(*i)
	}
	return ou
}

// ClearMemberID clears the value of the "member_id" field.
func (ou *OrderUpdate) ClearMemberID() *OrderUpdate {
	ou.mutation.ClearMemberID()
	return ou
}

// SetNature sets the "nature" field.
func (ou *OrderUpdate) SetNature(s string) *OrderUpdate {
	ou.mutation.SetNature(s)
	return ou
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNature(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNature(*s)
	}
	return ou
}

// ClearNature clears the value of the "nature" field.
func (ou *OrderUpdate) ClearNature() *OrderUpdate {
	ou.mutation.ClearNature()
	return ou
}

// SetProductType sets the "product_type" field.
func (ou *OrderUpdate) SetProductType(s string) *OrderUpdate {
	ou.mutation.SetProductType(s)
	return ou
}

// SetNillableProductType sets the "product_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableProductType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetProductType(*s)
	}
	return ou
}

// ClearProductType clears the value of the "product_type" field.
func (ou *OrderUpdate) ClearProductType() *OrderUpdate {
	ou.mutation.ClearProductType()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(i int64) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(i)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetStatus(*i)
	}
	return ou
}

// AddStatus adds i to the "status" field.
func (ou *OrderUpdate) AddStatus(i int64) *OrderUpdate {
	ou.mutation.AddStatus(i)
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrderUpdate) ClearStatus() *OrderUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetSource sets the "source" field.
func (ou *OrderUpdate) SetSource(s string) *OrderUpdate {
	ou.mutation.SetSource(s)
	return ou
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSource(s *string) *OrderUpdate {
	if s != nil {
		ou.SetSource(*s)
	}
	return ou
}

// ClearSource clears the value of the "source" field.
func (ou *OrderUpdate) ClearSource() *OrderUpdate {
	ou.mutation.ClearSource()
	return ou
}

// SetDevice sets the "device" field.
func (ou *OrderUpdate) SetDevice(s string) *OrderUpdate {
	ou.mutation.SetDevice(s)
	return ou
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDevice(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDevice(*s)
	}
	return ou
}

// ClearDevice clears the value of the "device" field.
func (ou *OrderUpdate) ClearDevice() *OrderUpdate {
	ou.mutation.ClearDevice()
	return ou
}

// SetCompletionAt sets the "completion_at" field.
func (ou *OrderUpdate) SetCompletionAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCompletionAt(t)
	return ou
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompletionAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCompletionAt(*t)
	}
	return ou
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ou *OrderUpdate) ClearCompletionAt() *OrderUpdate {
	ou.mutation.ClearCompletionAt()
	return ou
}

// SetCreateID sets the "create_id" field.
func (ou *OrderUpdate) SetCreateID(i int64) *OrderUpdate {
	ou.mutation.SetCreateID(i)
	return ou
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreateID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetCreateID(*i)
	}
	return ou
}

// ClearCreateID clears the value of the "create_id" field.
func (ou *OrderUpdate) ClearCreateID() *OrderUpdate {
	ou.mutation.ClearCreateID()
	return ou
}

// AddAmountIDs adds the "amount" edge to the OrderAmount entity by IDs.
func (ou *OrderUpdate) AddAmountIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddAmountIDs(ids...)
	return ou
}

// AddAmount adds the "amount" edges to the OrderAmount entity.
func (ou *OrderUpdate) AddAmount(o ...*OrderAmount) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddAmountIDs(ids...)
}

// AddItemIDs adds the "item" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItem adds the "item" edges to the OrderItem entity.
func (ou *OrderUpdate) AddItem(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddItemIDs(ids...)
}

// AddPayIDs adds the "pay" edge to the OrderPay entity by IDs.
func (ou *OrderUpdate) AddPayIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddPayIDs(ids...)
	return ou
}

// AddPay adds the "pay" edges to the OrderPay entity.
func (ou *OrderUpdate) AddPay(o ...*OrderPay) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddPayIDs(ids...)
}

// AddOrderContentIDs adds the "order_contents" edge to the MemberContract entity by IDs.
func (ou *OrderUpdate) AddOrderContentIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddOrderContentIDs(ids...)
	return ou
}

// AddOrderContents adds the "order_contents" edges to the MemberContract entity.
func (ou *OrderUpdate) AddOrderContents(m ...*MemberContract) *OrderUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.AddOrderContentIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the OrderSales entity by IDs.
func (ou *OrderUpdate) AddSaleIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddSaleIDs(ids...)
	return ou
}

// AddSales adds the "sales" edges to the OrderSales entity.
func (ou *OrderUpdate) AddSales(o ...*OrderSales) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddSaleIDs(ids...)
}

// SetOrderVenuesID sets the "order_venues" edge to the Venue entity by ID.
func (ou *OrderUpdate) SetOrderVenuesID(id int64) *OrderUpdate {
	ou.mutation.SetOrderVenuesID(id)
	return ou
}

// SetNillableOrderVenuesID sets the "order_venues" edge to the Venue entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderVenuesID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetOrderVenuesID(*id)
	}
	return ou
}

// SetOrderVenues sets the "order_venues" edge to the Venue entity.
func (ou *OrderUpdate) SetOrderVenues(v *Venue) *OrderUpdate {
	return ou.SetOrderVenuesID(v.ID)
}

// SetOrderMembersID sets the "order_members" edge to the Member entity by ID.
func (ou *OrderUpdate) SetOrderMembersID(id int64) *OrderUpdate {
	ou.mutation.SetOrderMembersID(id)
	return ou
}

// SetNillableOrderMembersID sets the "order_members" edge to the Member entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderMembersID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetOrderMembersID(*id)
	}
	return ou
}

// SetOrderMembers sets the "order_members" edge to the Member entity.
func (ou *OrderUpdate) SetOrderMembers(m *Member) *OrderUpdate {
	return ou.SetOrderMembersID(m.ID)
}

// SetOrderCreatesID sets the "order_creates" edge to the User entity by ID.
func (ou *OrderUpdate) SetOrderCreatesID(id int64) *OrderUpdate {
	ou.mutation.SetOrderCreatesID(id)
	return ou
}

// SetNillableOrderCreatesID sets the "order_creates" edge to the User entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderCreatesID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetOrderCreatesID(*id)
	}
	return ou
}

// SetOrderCreates sets the "order_creates" edge to the User entity.
func (ou *OrderUpdate) SetOrderCreates(u *User) *OrderUpdate {
	return ou.SetOrderCreatesID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearAmount clears all "amount" edges to the OrderAmount entity.
func (ou *OrderUpdate) ClearAmount() *OrderUpdate {
	ou.mutation.ClearAmount()
	return ou
}

// RemoveAmountIDs removes the "amount" edge to OrderAmount entities by IDs.
func (ou *OrderUpdate) RemoveAmountIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveAmountIDs(ids...)
	return ou
}

// RemoveAmount removes "amount" edges to OrderAmount entities.
func (ou *OrderUpdate) RemoveAmount(o ...*OrderAmount) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveAmountIDs(ids...)
}

// ClearItem clears all "item" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearItem() *OrderUpdate {
	ou.mutation.ClearItem()
	return ou
}

// RemoveItemIDs removes the "item" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItem removes "item" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveItem(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// ClearPay clears all "pay" edges to the OrderPay entity.
func (ou *OrderUpdate) ClearPay() *OrderUpdate {
	ou.mutation.ClearPay()
	return ou
}

// RemovePayIDs removes the "pay" edge to OrderPay entities by IDs.
func (ou *OrderUpdate) RemovePayIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemovePayIDs(ids...)
	return ou
}

// RemovePay removes "pay" edges to OrderPay entities.
func (ou *OrderUpdate) RemovePay(o ...*OrderPay) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemovePayIDs(ids...)
}

// ClearOrderContents clears all "order_contents" edges to the MemberContract entity.
func (ou *OrderUpdate) ClearOrderContents() *OrderUpdate {
	ou.mutation.ClearOrderContents()
	return ou
}

// RemoveOrderContentIDs removes the "order_contents" edge to MemberContract entities by IDs.
func (ou *OrderUpdate) RemoveOrderContentIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveOrderContentIDs(ids...)
	return ou
}

// RemoveOrderContents removes "order_contents" edges to MemberContract entities.
func (ou *OrderUpdate) RemoveOrderContents(m ...*MemberContract) *OrderUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.RemoveOrderContentIDs(ids...)
}

// ClearSales clears all "sales" edges to the OrderSales entity.
func (ou *OrderUpdate) ClearSales() *OrderUpdate {
	ou.mutation.ClearSales()
	return ou
}

// RemoveSaleIDs removes the "sales" edge to OrderSales entities by IDs.
func (ou *OrderUpdate) RemoveSaleIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveSaleIDs(ids...)
	return ou
}

// RemoveSales removes "sales" edges to OrderSales entities.
func (ou *OrderUpdate) RemoveSales(o ...*OrderSales) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveSaleIDs(ids...)
}

// ClearOrderVenues clears the "order_venues" edge to the Venue entity.
func (ou *OrderUpdate) ClearOrderVenues() *OrderUpdate {
	ou.mutation.ClearOrderVenues()
	return ou
}

// ClearOrderMembers clears the "order_members" edge to the Member entity.
func (ou *OrderUpdate) ClearOrderMembers() *OrderUpdate {
	ou.mutation.ClearOrderMembers()
	return ou
}

// ClearOrderCreates clears the "order_creates" edge to the User entity.
func (ou *OrderUpdate) ClearOrderCreates() *OrderUpdate {
	ou.mutation.ClearOrderCreates()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ou.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ou.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ou.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ou.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ou.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ou.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeString, value)
	}
	if ou.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeString)
	}
	if value, ok := ou.mutation.ProductType(); ok {
		_spec.SetField(order.FieldProductType, field.TypeString, value)
	}
	if ou.mutation.ProductTypeCleared() {
		_spec.ClearField(order.FieldProductType, field.TypeString)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt64, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeInt64)
	}
	if value, ok := ou.mutation.Source(); ok {
		_spec.SetField(order.FieldSource, field.TypeString, value)
	}
	if ou.mutation.SourceCleared() {
		_spec.ClearField(order.FieldSource, field.TypeString)
	}
	if value, ok := ou.mutation.Device(); ok {
		_spec.SetField(order.FieldDevice, field.TypeString, value)
	}
	if ou.mutation.DeviceCleared() {
		_spec.ClearField(order.FieldDevice, field.TypeString)
	}
	if value, ok := ou.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ou.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if ou.mutation.AmountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAmountIDs(); len(nodes) > 0 && !ou.mutation.AmountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AmountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemIDs(); len(nodes) > 0 && !ou.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPayIDs(); len(nodes) > 0 && !ou.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderContentsIDs(); len(nodes) > 0 && !ou.mutation.OrderContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSalesIDs(); len(nodes) > 0 && !ou.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderVenuesTable,
			Columns: []string{order.OrderVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderVenuesTable,
			Columns: []string{order.OrderVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderMembersTable,
			Columns: []string{order.OrderMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderMembersTable,
			Columns: []string{order.OrderMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderCreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderCreatesTable,
			Columns: []string{order.OrderCreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderCreatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderCreatesTable,
			Columns: []string{order.OrderCreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrderUpdateOne) ClearUpdatedAt() *OrderUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetDelete sets the "delete" field.
func (ouo *OrderUpdateOne) SetDelete(i int64) *OrderUpdateOne {
	ouo.mutation.ResetDelete()
	ouo.mutation.SetDelete(i)
	return ouo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDelete(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetDelete(*i)
	}
	return ouo
}

// AddDelete adds i to the "delete" field.
func (ouo *OrderUpdateOne) AddDelete(i int64) *OrderUpdateOne {
	ouo.mutation.AddDelete(i)
	return ouo
}

// ClearDelete clears the value of the "delete" field.
func (ouo *OrderUpdateOne) ClearDelete() *OrderUpdateOne {
	ouo.mutation.ClearDelete()
	return ouo
}

// SetCreatedID sets the "created_id" field.
func (ouo *OrderUpdateOne) SetCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetCreatedID()
	ouo.mutation.SetCreatedID(i)
	return ouo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetCreatedID(*i)
	}
	return ouo
}

// AddCreatedID adds i to the "created_id" field.
func (ouo *OrderUpdateOne) AddCreatedID(i int64) *OrderUpdateOne {
	ouo.mutation.AddCreatedID(i)
	return ouo
}

// ClearCreatedID clears the value of the "created_id" field.
func (ouo *OrderUpdateOne) ClearCreatedID() *OrderUpdateOne {
	ouo.mutation.ClearCreatedID()
	return ouo
}

// SetOrderSn sets the "order_sn" field.
func (ouo *OrderUpdateOne) SetOrderSn(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderSn(s)
	return ouo
}

// SetNillableOrderSn sets the "order_sn" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderSn(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderSn(*s)
	}
	return ouo
}

// ClearOrderSn clears the value of the "order_sn" field.
func (ouo *OrderUpdateOne) ClearOrderSn() *OrderUpdateOne {
	ouo.mutation.ClearOrderSn()
	return ouo
}

// SetVenueID sets the "venue_id" field.
func (ouo *OrderUpdateOne) SetVenueID(i int64) *OrderUpdateOne {
	ouo.mutation.SetVenueID(i)
	return ouo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableVenueID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetVenueID(*i)
	}
	return ouo
}

// ClearVenueID clears the value of the "venue_id" field.
func (ouo *OrderUpdateOne) ClearVenueID() *OrderUpdateOne {
	ouo.mutation.ClearVenueID()
	return ouo
}

// SetMemberID sets the "member_id" field.
func (ouo *OrderUpdateOne) SetMemberID(i int64) *OrderUpdateOne {
	ouo.mutation.SetMemberID(i)
	return ouo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMemberID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetMemberID(*i)
	}
	return ouo
}

// ClearMemberID clears the value of the "member_id" field.
func (ouo *OrderUpdateOne) ClearMemberID() *OrderUpdateOne {
	ouo.mutation.ClearMemberID()
	return ouo
}

// SetNature sets the "nature" field.
func (ouo *OrderUpdateOne) SetNature(s string) *OrderUpdateOne {
	ouo.mutation.SetNature(s)
	return ouo
}

// SetNillableNature sets the "nature" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNature(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNature(*s)
	}
	return ouo
}

// ClearNature clears the value of the "nature" field.
func (ouo *OrderUpdateOne) ClearNature() *OrderUpdateOne {
	ouo.mutation.ClearNature()
	return ouo
}

// SetProductType sets the "product_type" field.
func (ouo *OrderUpdateOne) SetProductType(s string) *OrderUpdateOne {
	ouo.mutation.SetProductType(s)
	return ouo
}

// SetNillableProductType sets the "product_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableProductType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetProductType(*s)
	}
	return ouo
}

// ClearProductType clears the value of the "product_type" field.
func (ouo *OrderUpdateOne) ClearProductType() *OrderUpdateOne {
	ouo.mutation.ClearProductType()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(i int64) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(i)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetStatus(*i)
	}
	return ouo
}

// AddStatus adds i to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(i int64) *OrderUpdateOne {
	ouo.mutation.AddStatus(i)
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrderUpdateOne) ClearStatus() *OrderUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetSource sets the "source" field.
func (ouo *OrderUpdateOne) SetSource(s string) *OrderUpdateOne {
	ouo.mutation.SetSource(s)
	return ouo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSource(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetSource(*s)
	}
	return ouo
}

// ClearSource clears the value of the "source" field.
func (ouo *OrderUpdateOne) ClearSource() *OrderUpdateOne {
	ouo.mutation.ClearSource()
	return ouo
}

// SetDevice sets the "device" field.
func (ouo *OrderUpdateOne) SetDevice(s string) *OrderUpdateOne {
	ouo.mutation.SetDevice(s)
	return ouo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDevice(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDevice(*s)
	}
	return ouo
}

// ClearDevice clears the value of the "device" field.
func (ouo *OrderUpdateOne) ClearDevice() *OrderUpdateOne {
	ouo.mutation.ClearDevice()
	return ouo
}

// SetCompletionAt sets the "completion_at" field.
func (ouo *OrderUpdateOne) SetCompletionAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCompletionAt(t)
	return ouo
}

// SetNillableCompletionAt sets the "completion_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompletionAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCompletionAt(*t)
	}
	return ouo
}

// ClearCompletionAt clears the value of the "completion_at" field.
func (ouo *OrderUpdateOne) ClearCompletionAt() *OrderUpdateOne {
	ouo.mutation.ClearCompletionAt()
	return ouo
}

// SetCreateID sets the "create_id" field.
func (ouo *OrderUpdateOne) SetCreateID(i int64) *OrderUpdateOne {
	ouo.mutation.SetCreateID(i)
	return ouo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreateID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetCreateID(*i)
	}
	return ouo
}

// ClearCreateID clears the value of the "create_id" field.
func (ouo *OrderUpdateOne) ClearCreateID() *OrderUpdateOne {
	ouo.mutation.ClearCreateID()
	return ouo
}

// AddAmountIDs adds the "amount" edge to the OrderAmount entity by IDs.
func (ouo *OrderUpdateOne) AddAmountIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddAmountIDs(ids...)
	return ouo
}

// AddAmount adds the "amount" edges to the OrderAmount entity.
func (ouo *OrderUpdateOne) AddAmount(o ...*OrderAmount) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddAmountIDs(ids...)
}

// AddItemIDs adds the "item" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItem adds the "item" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddItem(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddItemIDs(ids...)
}

// AddPayIDs adds the "pay" edge to the OrderPay entity by IDs.
func (ouo *OrderUpdateOne) AddPayIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddPayIDs(ids...)
	return ouo
}

// AddPay adds the "pay" edges to the OrderPay entity.
func (ouo *OrderUpdateOne) AddPay(o ...*OrderPay) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddPayIDs(ids...)
}

// AddOrderContentIDs adds the "order_contents" edge to the MemberContract entity by IDs.
func (ouo *OrderUpdateOne) AddOrderContentIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddOrderContentIDs(ids...)
	return ouo
}

// AddOrderContents adds the "order_contents" edges to the MemberContract entity.
func (ouo *OrderUpdateOne) AddOrderContents(m ...*MemberContract) *OrderUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.AddOrderContentIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the OrderSales entity by IDs.
func (ouo *OrderUpdateOne) AddSaleIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddSaleIDs(ids...)
	return ouo
}

// AddSales adds the "sales" edges to the OrderSales entity.
func (ouo *OrderUpdateOne) AddSales(o ...*OrderSales) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddSaleIDs(ids...)
}

// SetOrderVenuesID sets the "order_venues" edge to the Venue entity by ID.
func (ouo *OrderUpdateOne) SetOrderVenuesID(id int64) *OrderUpdateOne {
	ouo.mutation.SetOrderVenuesID(id)
	return ouo
}

// SetNillableOrderVenuesID sets the "order_venues" edge to the Venue entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderVenuesID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetOrderVenuesID(*id)
	}
	return ouo
}

// SetOrderVenues sets the "order_venues" edge to the Venue entity.
func (ouo *OrderUpdateOne) SetOrderVenues(v *Venue) *OrderUpdateOne {
	return ouo.SetOrderVenuesID(v.ID)
}

// SetOrderMembersID sets the "order_members" edge to the Member entity by ID.
func (ouo *OrderUpdateOne) SetOrderMembersID(id int64) *OrderUpdateOne {
	ouo.mutation.SetOrderMembersID(id)
	return ouo
}

// SetNillableOrderMembersID sets the "order_members" edge to the Member entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderMembersID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetOrderMembersID(*id)
	}
	return ouo
}

// SetOrderMembers sets the "order_members" edge to the Member entity.
func (ouo *OrderUpdateOne) SetOrderMembers(m *Member) *OrderUpdateOne {
	return ouo.SetOrderMembersID(m.ID)
}

// SetOrderCreatesID sets the "order_creates" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetOrderCreatesID(id int64) *OrderUpdateOne {
	ouo.mutation.SetOrderCreatesID(id)
	return ouo
}

// SetNillableOrderCreatesID sets the "order_creates" edge to the User entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderCreatesID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetOrderCreatesID(*id)
	}
	return ouo
}

// SetOrderCreates sets the "order_creates" edge to the User entity.
func (ouo *OrderUpdateOne) SetOrderCreates(u *User) *OrderUpdateOne {
	return ouo.SetOrderCreatesID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearAmount clears all "amount" edges to the OrderAmount entity.
func (ouo *OrderUpdateOne) ClearAmount() *OrderUpdateOne {
	ouo.mutation.ClearAmount()
	return ouo
}

// RemoveAmountIDs removes the "amount" edge to OrderAmount entities by IDs.
func (ouo *OrderUpdateOne) RemoveAmountIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveAmountIDs(ids...)
	return ouo
}

// RemoveAmount removes "amount" edges to OrderAmount entities.
func (ouo *OrderUpdateOne) RemoveAmount(o ...*OrderAmount) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveAmountIDs(ids...)
}

// ClearItem clears all "item" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearItem() *OrderUpdateOne {
	ouo.mutation.ClearItem()
	return ouo
}

// RemoveItemIDs removes the "item" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItem removes "item" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveItem(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// ClearPay clears all "pay" edges to the OrderPay entity.
func (ouo *OrderUpdateOne) ClearPay() *OrderUpdateOne {
	ouo.mutation.ClearPay()
	return ouo
}

// RemovePayIDs removes the "pay" edge to OrderPay entities by IDs.
func (ouo *OrderUpdateOne) RemovePayIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemovePayIDs(ids...)
	return ouo
}

// RemovePay removes "pay" edges to OrderPay entities.
func (ouo *OrderUpdateOne) RemovePay(o ...*OrderPay) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemovePayIDs(ids...)
}

// ClearOrderContents clears all "order_contents" edges to the MemberContract entity.
func (ouo *OrderUpdateOne) ClearOrderContents() *OrderUpdateOne {
	ouo.mutation.ClearOrderContents()
	return ouo
}

// RemoveOrderContentIDs removes the "order_contents" edge to MemberContract entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderContentIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveOrderContentIDs(ids...)
	return ouo
}

// RemoveOrderContents removes "order_contents" edges to MemberContract entities.
func (ouo *OrderUpdateOne) RemoveOrderContents(m ...*MemberContract) *OrderUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.RemoveOrderContentIDs(ids...)
}

// ClearSales clears all "sales" edges to the OrderSales entity.
func (ouo *OrderUpdateOne) ClearSales() *OrderUpdateOne {
	ouo.mutation.ClearSales()
	return ouo
}

// RemoveSaleIDs removes the "sales" edge to OrderSales entities by IDs.
func (ouo *OrderUpdateOne) RemoveSaleIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveSaleIDs(ids...)
	return ouo
}

// RemoveSales removes "sales" edges to OrderSales entities.
func (ouo *OrderUpdateOne) RemoveSales(o ...*OrderSales) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveSaleIDs(ids...)
}

// ClearOrderVenues clears the "order_venues" edge to the Venue entity.
func (ouo *OrderUpdateOne) ClearOrderVenues() *OrderUpdateOne {
	ouo.mutation.ClearOrderVenues()
	return ouo
}

// ClearOrderMembers clears the "order_members" edge to the Member entity.
func (ouo *OrderUpdateOne) ClearOrderMembers() *OrderUpdateOne {
	ouo.mutation.ClearOrderMembers()
	return ouo
}

// ClearOrderCreates clears the "order_creates" edge to the User entity.
func (ouo *OrderUpdateOne) ClearOrderCreates() *OrderUpdateOne {
	ouo.mutation.ClearOrderCreates()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(order.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(order.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Delete(); ok {
		_spec.SetField(order.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedDelete(); ok {
		_spec.AddField(order.FieldDelete, field.TypeInt64, value)
	}
	if ouo.mutation.DeleteCleared() {
		_spec.ClearField(order.FieldDelete, field.TypeInt64)
	}
	if value, ok := ouo.mutation.CreatedID(); ok {
		_spec.SetField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedCreatedID(); ok {
		_spec.AddField(order.FieldCreatedID, field.TypeInt64, value)
	}
	if ouo.mutation.CreatedIDCleared() {
		_spec.ClearField(order.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.OrderSn(); ok {
		_spec.SetField(order.FieldOrderSn, field.TypeString, value)
	}
	if ouo.mutation.OrderSnCleared() {
		_spec.ClearField(order.FieldOrderSn, field.TypeString)
	}
	if value, ok := ouo.mutation.Nature(); ok {
		_spec.SetField(order.FieldNature, field.TypeString, value)
	}
	if ouo.mutation.NatureCleared() {
		_spec.ClearField(order.FieldNature, field.TypeString)
	}
	if value, ok := ouo.mutation.ProductType(); ok {
		_spec.SetField(order.FieldProductType, field.TypeString, value)
	}
	if ouo.mutation.ProductTypeCleared() {
		_spec.ClearField(order.FieldProductType, field.TypeString)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt64, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(order.FieldStatus, field.TypeInt64)
	}
	if value, ok := ouo.mutation.Source(); ok {
		_spec.SetField(order.FieldSource, field.TypeString, value)
	}
	if ouo.mutation.SourceCleared() {
		_spec.ClearField(order.FieldSource, field.TypeString)
	}
	if value, ok := ouo.mutation.Device(); ok {
		_spec.SetField(order.FieldDevice, field.TypeString, value)
	}
	if ouo.mutation.DeviceCleared() {
		_spec.ClearField(order.FieldDevice, field.TypeString)
	}
	if value, ok := ouo.mutation.CompletionAt(); ok {
		_spec.SetField(order.FieldCompletionAt, field.TypeTime, value)
	}
	if ouo.mutation.CompletionAtCleared() {
		_spec.ClearField(order.FieldCompletionAt, field.TypeTime)
	}
	if ouo.mutation.AmountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAmountIDs(); len(nodes) > 0 && !ouo.mutation.AmountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AmountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AmountTable,
			Columns: []string{order.AmountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemIDs(); len(nodes) > 0 && !ouo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemTable,
			Columns: []string{order.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPayIDs(); len(nodes) > 0 && !ouo.mutation.PayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PayTable,
			Columns: []string{order.PayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderContentsIDs(); len(nodes) > 0 && !ouo.mutation.OrderContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderContentsTable,
			Columns: []string{order.OrderContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSalesIDs(); len(nodes) > 0 && !ouo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.SalesTable,
			Columns: []string{order.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersales.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderVenuesTable,
			Columns: []string{order.OrderVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderVenuesTable,
			Columns: []string{order.OrderVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderMembersTable,
			Columns: []string{order.OrderMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderMembersTable,
			Columns: []string{order.OrderMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderCreatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderCreatesTable,
			Columns: []string{order.OrderCreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderCreatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderCreatesTable,
			Columns: []string{order.OrderCreatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}

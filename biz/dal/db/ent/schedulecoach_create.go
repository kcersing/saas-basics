// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/biz/dal/db/ent/schedule"
	"saas/biz/dal/db/ent/schedulecoach"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleCoachCreate is the builder for creating a ScheduleCoach entity.
type ScheduleCoachCreate struct {
	config
	mutation *ScheduleCoachMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scc *ScheduleCoachCreate) SetCreatedAt(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableCreatedAt(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ScheduleCoachCreate) SetUpdatedAt(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableUpdatedAt(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetDelete sets the "delete" field.
func (scc *ScheduleCoachCreate) SetDelete(i int64) *ScheduleCoachCreate {
	scc.mutation.SetDelete(i)
	return scc
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableDelete(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetDelete(*i)
	}
	return scc
}

// SetCreatedID sets the "created_id" field.
func (scc *ScheduleCoachCreate) SetCreatedID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetCreatedID(i)
	return scc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableCreatedID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetCreatedID(*i)
	}
	return scc
}

// SetStatus sets the "status" field.
func (scc *ScheduleCoachCreate) SetStatus(i int64) *ScheduleCoachCreate {
	scc.mutation.SetStatus(i)
	return scc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableStatus(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetStatus(*i)
	}
	return scc
}

// SetVenueID sets the "venue_id" field.
func (scc *ScheduleCoachCreate) SetVenueID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetVenueID(i)
	return scc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableVenueID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetVenueID(*i)
	}
	return scc
}

// SetCoachID sets the "coach_id" field.
func (scc *ScheduleCoachCreate) SetCoachID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetCoachID(i)
	return scc
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableCoachID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetCoachID(*i)
	}
	return scc
}

// SetPlaceID sets the "place_id" field.
func (scc *ScheduleCoachCreate) SetPlaceID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetPlaceID(i)
	return scc
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillablePlaceID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetPlaceID(*i)
	}
	return scc
}

// SetScheduleID sets the "schedule_id" field.
func (scc *ScheduleCoachCreate) SetScheduleID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetScheduleID(i)
	return scc
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableScheduleID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetScheduleID(*i)
	}
	return scc
}

// SetProductID sets the "product_id" field.
func (scc *ScheduleCoachCreate) SetProductID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetProductID(i)
	return scc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableProductID(i *int64) *ScheduleCoachCreate {
	if i != nil {
		scc.SetProductID(*i)
	}
	return scc
}

// SetType sets the "type" field.
func (scc *ScheduleCoachCreate) SetType(s string) *ScheduleCoachCreate {
	scc.mutation.SetType(s)
	return scc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableType(s *string) *ScheduleCoachCreate {
	if s != nil {
		scc.SetType(*s)
	}
	return scc
}

// SetStartTime sets the "start_time" field.
func (scc *ScheduleCoachCreate) SetStartTime(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetStartTime(t)
	return scc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableStartTime(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetStartTime(*t)
	}
	return scc
}

// SetEndTime sets the "end_time" field.
func (scc *ScheduleCoachCreate) SetEndTime(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetEndTime(t)
	return scc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableEndTime(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetEndTime(*t)
	}
	return scc
}

// SetSignStartTime sets the "sign_start_time" field.
func (scc *ScheduleCoachCreate) SetSignStartTime(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetSignStartTime(t)
	return scc
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableSignStartTime(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetSignStartTime(*t)
	}
	return scc
}

// SetSignEndTime sets the "sign_end_time" field.
func (scc *ScheduleCoachCreate) SetSignEndTime(t time.Time) *ScheduleCoachCreate {
	scc.mutation.SetSignEndTime(t)
	return scc
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableSignEndTime(t *time.Time) *ScheduleCoachCreate {
	if t != nil {
		scc.SetSignEndTime(*t)
	}
	return scc
}

// SetCoachName sets the "coach_name" field.
func (scc *ScheduleCoachCreate) SetCoachName(s string) *ScheduleCoachCreate {
	scc.mutation.SetCoachName(s)
	return scc
}

// SetNillableCoachName sets the "coach_name" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableCoachName(s *string) *ScheduleCoachCreate {
	if s != nil {
		scc.SetCoachName(*s)
	}
	return scc
}

// SetRemark sets the "remark" field.
func (scc *ScheduleCoachCreate) SetRemark(s string) *ScheduleCoachCreate {
	scc.mutation.SetRemark(s)
	return scc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scc *ScheduleCoachCreate) SetNillableRemark(s *string) *ScheduleCoachCreate {
	if s != nil {
		scc.SetRemark(*s)
	}
	return scc
}

// SetID sets the "id" field.
func (scc *ScheduleCoachCreate) SetID(i int64) *ScheduleCoachCreate {
	scc.mutation.SetID(i)
	return scc
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (scc *ScheduleCoachCreate) SetSchedule(s *Schedule) *ScheduleCoachCreate {
	return scc.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleCoachMutation object of the builder.
func (scc *ScheduleCoachCreate) Mutation() *ScheduleCoachMutation {
	return scc.mutation
}

// Save creates the ScheduleCoach in the database.
func (scc *ScheduleCoachCreate) Save(ctx context.Context) (*ScheduleCoach, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ScheduleCoachCreate) SaveX(ctx context.Context) *ScheduleCoach {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ScheduleCoachCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ScheduleCoachCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ScheduleCoachCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := schedulecoach.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := schedulecoach.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.Delete(); !ok {
		v := schedulecoach.DefaultDelete
		scc.mutation.SetDelete(v)
	}
	if _, ok := scc.mutation.CreatedID(); !ok {
		v := schedulecoach.DefaultCreatedID
		scc.mutation.SetCreatedID(v)
	}
	if _, ok := scc.mutation.Status(); !ok {
		v := schedulecoach.DefaultStatus
		scc.mutation.SetStatus(v)
	}
	if _, ok := scc.mutation.StartTime(); !ok {
		v := schedulecoach.DefaultStartTime()
		scc.mutation.SetStartTime(v)
	}
	if _, ok := scc.mutation.EndTime(); !ok {
		v := schedulecoach.DefaultEndTime()
		scc.mutation.SetEndTime(v)
	}
	if _, ok := scc.mutation.SignStartTime(); !ok {
		v := schedulecoach.DefaultSignStartTime()
		scc.mutation.SetSignStartTime(v)
	}
	if _, ok := scc.mutation.SignEndTime(); !ok {
		v := schedulecoach.DefaultSignEndTime()
		scc.mutation.SetSignEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ScheduleCoachCreate) check() error {
	return nil
}

func (scc *ScheduleCoachCreate) sqlSave(ctx context.Context) (*ScheduleCoach, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ScheduleCoachCreate) createSpec() (*ScheduleCoach, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduleCoach{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(schedulecoach.Table, sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(schedulecoach.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulecoach.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.Delete(); ok {
		_spec.SetField(schedulecoach.FieldDelete, field.TypeInt64, value)
		_node.Delete = value
	}
	if value, ok := scc.mutation.CreatedID(); ok {
		_spec.SetField(schedulecoach.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.SetField(schedulecoach.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := scc.mutation.VenueID(); ok {
		_spec.SetField(schedulecoach.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if value, ok := scc.mutation.CoachID(); ok {
		_spec.SetField(schedulecoach.FieldCoachID, field.TypeInt64, value)
		_node.CoachID = value
	}
	if value, ok := scc.mutation.PlaceID(); ok {
		_spec.SetField(schedulecoach.FieldPlaceID, field.TypeInt64, value)
		_node.PlaceID = value
	}
	if value, ok := scc.mutation.ProductID(); ok {
		_spec.SetField(schedulecoach.FieldProductID, field.TypeInt64, value)
		_node.ProductID = value
	}
	if value, ok := scc.mutation.GetType(); ok {
		_spec.SetField(schedulecoach.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := scc.mutation.StartTime(); ok {
		_spec.SetField(schedulecoach.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := scc.mutation.EndTime(); ok {
		_spec.SetField(schedulecoach.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := scc.mutation.SignStartTime(); ok {
		_spec.SetField(schedulecoach.FieldSignStartTime, field.TypeTime, value)
		_node.SignStartTime = value
	}
	if value, ok := scc.mutation.SignEndTime(); ok {
		_spec.SetField(schedulecoach.FieldSignEndTime, field.TypeTime, value)
		_node.SignEndTime = value
	}
	if value, ok := scc.mutation.CoachName(); ok {
		_spec.SetField(schedulecoach.FieldCoachName, field.TypeString, value)
		_node.CoachName = value
	}
	if value, ok := scc.mutation.Remark(); ok {
		_spec.SetField(schedulecoach.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := scc.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulecoach.ScheduleTable,
			Columns: []string{schedulecoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduleCoachCreateBulk is the builder for creating many ScheduleCoach entities in bulk.
type ScheduleCoachCreateBulk struct {
	config
	err      error
	builders []*ScheduleCoachCreate
}

// Save creates the ScheduleCoach entities in the database.
func (sccb *ScheduleCoachCreateBulk) Save(ctx context.Context) ([]*ScheduleCoach, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ScheduleCoach, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduleCoachMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ScheduleCoachCreateBulk) SaveX(ctx context.Context) []*ScheduleCoach {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ScheduleCoachCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ScheduleCoachCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

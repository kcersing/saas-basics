// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesmslog"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueSmsLogQuery is the builder for querying VenueSmsLog entities.
type VenueSmsLogQuery struct {
	config
	ctx        *QueryContext
	order      []venuesmslog.OrderOption
	inters     []Interceptor
	predicates []predicate.VenueSmsLog
	withVenue  *VenueQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VenueSmsLogQuery builder.
func (vslq *VenueSmsLogQuery) Where(ps ...predicate.VenueSmsLog) *VenueSmsLogQuery {
	vslq.predicates = append(vslq.predicates, ps...)
	return vslq
}

// Limit the number of records to be returned by this query.
func (vslq *VenueSmsLogQuery) Limit(limit int) *VenueSmsLogQuery {
	vslq.ctx.Limit = &limit
	return vslq
}

// Offset to start from.
func (vslq *VenueSmsLogQuery) Offset(offset int) *VenueSmsLogQuery {
	vslq.ctx.Offset = &offset
	return vslq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vslq *VenueSmsLogQuery) Unique(unique bool) *VenueSmsLogQuery {
	vslq.ctx.Unique = &unique
	return vslq
}

// Order specifies how the records should be ordered.
func (vslq *VenueSmsLogQuery) Order(o ...venuesmslog.OrderOption) *VenueSmsLogQuery {
	vslq.order = append(vslq.order, o...)
	return vslq
}

// QueryVenue chains the current query on the "venue" edge.
func (vslq *VenueSmsLogQuery) QueryVenue() *VenueQuery {
	query := (&VenueClient{config: vslq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vslq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vslq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venuesmslog.Table, venuesmslog.FieldID, selector),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venuesmslog.VenueTable, venuesmslog.VenueColumn),
		)
		fromU = sqlgraph.SetNeighbors(vslq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VenueSmsLog entity from the query.
// Returns a *NotFoundError when no VenueSmsLog was found.
func (vslq *VenueSmsLogQuery) First(ctx context.Context) (*VenueSmsLog, error) {
	nodes, err := vslq.Limit(1).All(setContextOp(ctx, vslq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{venuesmslog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) FirstX(ctx context.Context) *VenueSmsLog {
	node, err := vslq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VenueSmsLog ID from the query.
// Returns a *NotFoundError when no VenueSmsLog ID was found.
func (vslq *VenueSmsLogQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = vslq.Limit(1).IDs(setContextOp(ctx, vslq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{venuesmslog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) FirstIDX(ctx context.Context) int64 {
	id, err := vslq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VenueSmsLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VenueSmsLog entity is found.
// Returns a *NotFoundError when no VenueSmsLog entities are found.
func (vslq *VenueSmsLogQuery) Only(ctx context.Context) (*VenueSmsLog, error) {
	nodes, err := vslq.Limit(2).All(setContextOp(ctx, vslq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{venuesmslog.Label}
	default:
		return nil, &NotSingularError{venuesmslog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) OnlyX(ctx context.Context) *VenueSmsLog {
	node, err := vslq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VenueSmsLog ID in the query.
// Returns a *NotSingularError when more than one VenueSmsLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (vslq *VenueSmsLogQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = vslq.Limit(2).IDs(setContextOp(ctx, vslq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{venuesmslog.Label}
	default:
		err = &NotSingularError{venuesmslog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := vslq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VenueSmsLogs.
func (vslq *VenueSmsLogQuery) All(ctx context.Context) ([]*VenueSmsLog, error) {
	ctx = setContextOp(ctx, vslq.ctx, ent.OpQueryAll)
	if err := vslq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VenueSmsLog, *VenueSmsLogQuery]()
	return withInterceptors[[]*VenueSmsLog](ctx, vslq, qr, vslq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) AllX(ctx context.Context) []*VenueSmsLog {
	nodes, err := vslq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VenueSmsLog IDs.
func (vslq *VenueSmsLogQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if vslq.ctx.Unique == nil && vslq.path != nil {
		vslq.Unique(true)
	}
	ctx = setContextOp(ctx, vslq.ctx, ent.OpQueryIDs)
	if err = vslq.Select(venuesmslog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) IDsX(ctx context.Context) []int64 {
	ids, err := vslq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vslq *VenueSmsLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vslq.ctx, ent.OpQueryCount)
	if err := vslq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vslq, querierCount[*VenueSmsLogQuery](), vslq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) CountX(ctx context.Context) int {
	count, err := vslq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vslq *VenueSmsLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vslq.ctx, ent.OpQueryExist)
	switch _, err := vslq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vslq *VenueSmsLogQuery) ExistX(ctx context.Context) bool {
	exist, err := vslq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VenueSmsLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vslq *VenueSmsLogQuery) Clone() *VenueSmsLogQuery {
	if vslq == nil {
		return nil
	}
	return &VenueSmsLogQuery{
		config:     vslq.config,
		ctx:        vslq.ctx.Clone(),
		order:      append([]venuesmslog.OrderOption{}, vslq.order...),
		inters:     append([]Interceptor{}, vslq.inters...),
		predicates: append([]predicate.VenueSmsLog{}, vslq.predicates...),
		withVenue:  vslq.withVenue.Clone(),
		// clone intermediate query.
		sql:  vslq.sql.Clone(),
		path: vslq.path,
	}
}

// WithVenue tells the query-builder to eager-load the nodes that are connected to
// the "venue" edge. The optional arguments are used to configure the query builder of the edge.
func (vslq *VenueSmsLogQuery) WithVenue(opts ...func(*VenueQuery)) *VenueSmsLogQuery {
	query := (&VenueClient{config: vslq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vslq.withVenue = query
	return vslq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VenueSmsLog.Query().
//		GroupBy(venuesmslog.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vslq *VenueSmsLogQuery) GroupBy(field string, fields ...string) *VenueSmsLogGroupBy {
	vslq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VenueSmsLogGroupBy{build: vslq}
	grbuild.flds = &vslq.ctx.Fields
	grbuild.label = venuesmslog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VenueSmsLog.Query().
//		Select(venuesmslog.FieldCreatedAt).
//		Scan(ctx, &v)
func (vslq *VenueSmsLogQuery) Select(fields ...string) *VenueSmsLogSelect {
	vslq.ctx.Fields = append(vslq.ctx.Fields, fields...)
	sbuild := &VenueSmsLogSelect{VenueSmsLogQuery: vslq}
	sbuild.label = venuesmslog.Label
	sbuild.flds, sbuild.scan = &vslq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VenueSmsLogSelect configured with the given aggregations.
func (vslq *VenueSmsLogQuery) Aggregate(fns ...AggregateFunc) *VenueSmsLogSelect {
	return vslq.Select().Aggregate(fns...)
}

func (vslq *VenueSmsLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vslq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vslq); err != nil {
				return err
			}
		}
	}
	for _, f := range vslq.ctx.Fields {
		if !venuesmslog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vslq.path != nil {
		prev, err := vslq.path(ctx)
		if err != nil {
			return err
		}
		vslq.sql = prev
	}
	return nil
}

func (vslq *VenueSmsLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VenueSmsLog, error) {
	var (
		nodes       = []*VenueSmsLog{}
		_spec       = vslq.querySpec()
		loadedTypes = [1]bool{
			vslq.withVenue != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VenueSmsLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VenueSmsLog{config: vslq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vslq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vslq.withVenue; query != nil {
		if err := vslq.loadVenue(ctx, query, nodes, nil,
			func(n *VenueSmsLog, e *Venue) { n.Edges.Venue = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vslq *VenueSmsLogQuery) loadVenue(ctx context.Context, query *VenueQuery, nodes []*VenueSmsLog, init func(*VenueSmsLog), assign func(*VenueSmsLog, *Venue)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*VenueSmsLog)
	for i := range nodes {
		fk := nodes[i].VenueID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(venue.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vslq *VenueSmsLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vslq.querySpec()
	_spec.Node.Columns = vslq.ctx.Fields
	if len(vslq.ctx.Fields) > 0 {
		_spec.Unique = vslq.ctx.Unique != nil && *vslq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vslq.driver, _spec)
}

func (vslq *VenueSmsLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(venuesmslog.Table, venuesmslog.Columns, sqlgraph.NewFieldSpec(venuesmslog.FieldID, field.TypeInt64))
	_spec.From = vslq.sql
	if unique := vslq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vslq.path != nil {
		_spec.Unique = true
	}
	if fields := vslq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venuesmslog.FieldID)
		for i := range fields {
			if fields[i] != venuesmslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vslq.withVenue != nil {
			_spec.Node.AddColumnOnce(venuesmslog.FieldVenueID)
		}
	}
	if ps := vslq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vslq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vslq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vslq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vslq *VenueSmsLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vslq.driver.Dialect())
	t1 := builder.Table(venuesmslog.Table)
	columns := vslq.ctx.Fields
	if len(columns) == 0 {
		columns = venuesmslog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vslq.sql != nil {
		selector = vslq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vslq.ctx.Unique != nil && *vslq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vslq.predicates {
		p(selector)
	}
	for _, p := range vslq.order {
		p(selector)
	}
	if offset := vslq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vslq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VenueSmsLogGroupBy is the group-by builder for VenueSmsLog entities.
type VenueSmsLogGroupBy struct {
	selector
	build *VenueSmsLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vslgb *VenueSmsLogGroupBy) Aggregate(fns ...AggregateFunc) *VenueSmsLogGroupBy {
	vslgb.fns = append(vslgb.fns, fns...)
	return vslgb
}

// Scan applies the selector query and scans the result into the given value.
func (vslgb *VenueSmsLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vslgb.build.ctx, ent.OpQueryGroupBy)
	if err := vslgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenueSmsLogQuery, *VenueSmsLogGroupBy](ctx, vslgb.build, vslgb, vslgb.build.inters, v)
}

func (vslgb *VenueSmsLogGroupBy) sqlScan(ctx context.Context, root *VenueSmsLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vslgb.fns))
	for _, fn := range vslgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vslgb.flds)+len(vslgb.fns))
		for _, f := range *vslgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vslgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vslgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VenueSmsLogSelect is the builder for selecting fields of VenueSmsLog entities.
type VenueSmsLogSelect struct {
	*VenueSmsLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vsls *VenueSmsLogSelect) Aggregate(fns ...AggregateFunc) *VenueSmsLogSelect {
	vsls.fns = append(vsls.fns, fns...)
	return vsls
}

// Scan applies the selector query and scans the result into the given value.
func (vsls *VenueSmsLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vsls.ctx, ent.OpQuerySelect)
	if err := vsls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VenueSmsLogQuery, *VenueSmsLogSelect](ctx, vsls.VenueSmsLogQuery, vsls, vsls.inters, v)
}

func (vsls *VenueSmsLogSelect) sqlScan(ctx context.Context, root *VenueSmsLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vsls.fns))
	for _, fn := range vsls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vsls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vsls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

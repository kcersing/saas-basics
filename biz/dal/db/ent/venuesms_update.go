// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/venue"
	"saas/biz/dal/db/ent/venuesms"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueSmsUpdate is the builder for updating VenueSms entities.
type VenueSmsUpdate struct {
	config
	hooks    []Hook
	mutation *VenueSmsMutation
}

// Where appends a list predicates to the VenueSmsUpdate builder.
func (vsu *VenueSmsUpdate) Where(ps ...predicate.VenueSms) *VenueSmsUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetUpdatedAt sets the "updated_at" field.
func (vsu *VenueSmsUpdate) SetUpdatedAt(t time.Time) *VenueSmsUpdate {
	vsu.mutation.SetUpdatedAt(t)
	return vsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vsu *VenueSmsUpdate) ClearUpdatedAt() *VenueSmsUpdate {
	vsu.mutation.ClearUpdatedAt()
	return vsu
}

// SetDelete sets the "delete" field.
func (vsu *VenueSmsUpdate) SetDelete(i int64) *VenueSmsUpdate {
	vsu.mutation.ResetDelete()
	vsu.mutation.SetDelete(i)
	return vsu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vsu *VenueSmsUpdate) SetNillableDelete(i *int64) *VenueSmsUpdate {
	if i != nil {
		vsu.SetDelete(*i)
	}
	return vsu
}

// AddDelete adds i to the "delete" field.
func (vsu *VenueSmsUpdate) AddDelete(i int64) *VenueSmsUpdate {
	vsu.mutation.AddDelete(i)
	return vsu
}

// ClearDelete clears the value of the "delete" field.
func (vsu *VenueSmsUpdate) ClearDelete() *VenueSmsUpdate {
	vsu.mutation.ClearDelete()
	return vsu
}

// SetCreatedID sets the "created_id" field.
func (vsu *VenueSmsUpdate) SetCreatedID(i int64) *VenueSmsUpdate {
	vsu.mutation.ResetCreatedID()
	vsu.mutation.SetCreatedID(i)
	return vsu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vsu *VenueSmsUpdate) SetNillableCreatedID(i *int64) *VenueSmsUpdate {
	if i != nil {
		vsu.SetCreatedID(*i)
	}
	return vsu
}

// AddCreatedID adds i to the "created_id" field.
func (vsu *VenueSmsUpdate) AddCreatedID(i int64) *VenueSmsUpdate {
	vsu.mutation.AddCreatedID(i)
	return vsu
}

// ClearCreatedID clears the value of the "created_id" field.
func (vsu *VenueSmsUpdate) ClearCreatedID() *VenueSmsUpdate {
	vsu.mutation.ClearCreatedID()
	return vsu
}

// SetVenueID sets the "venue_id" field.
func (vsu *VenueSmsUpdate) SetVenueID(i int64) *VenueSmsUpdate {
	vsu.mutation.SetVenueID(i)
	return vsu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vsu *VenueSmsUpdate) SetNillableVenueID(i *int64) *VenueSmsUpdate {
	if i != nil {
		vsu.SetVenueID(*i)
	}
	return vsu
}

// ClearVenueID clears the value of the "venue_id" field.
func (vsu *VenueSmsUpdate) ClearVenueID() *VenueSmsUpdate {
	vsu.mutation.ClearVenueID()
	return vsu
}

// SetNoticeCount sets the "notice_count" field.
func (vsu *VenueSmsUpdate) SetNoticeCount(i int64) *VenueSmsUpdate {
	vsu.mutation.ResetNoticeCount()
	vsu.mutation.SetNoticeCount(i)
	return vsu
}

// SetNillableNoticeCount sets the "notice_count" field if the given value is not nil.
func (vsu *VenueSmsUpdate) SetNillableNoticeCount(i *int64) *VenueSmsUpdate {
	if i != nil {
		vsu.SetNoticeCount(*i)
	}
	return vsu
}

// AddNoticeCount adds i to the "notice_count" field.
func (vsu *VenueSmsUpdate) AddNoticeCount(i int64) *VenueSmsUpdate {
	vsu.mutation.AddNoticeCount(i)
	return vsu
}

// SetUsedNotice sets the "used_notice" field.
func (vsu *VenueSmsUpdate) SetUsedNotice(i int64) *VenueSmsUpdate {
	vsu.mutation.ResetUsedNotice()
	vsu.mutation.SetUsedNotice(i)
	return vsu
}

// SetNillableUsedNotice sets the "used_notice" field if the given value is not nil.
func (vsu *VenueSmsUpdate) SetNillableUsedNotice(i *int64) *VenueSmsUpdate {
	if i != nil {
		vsu.SetUsedNotice(*i)
	}
	return vsu
}

// AddUsedNotice adds i to the "used_notice" field.
func (vsu *VenueSmsUpdate) AddUsedNotice(i int64) *VenueSmsUpdate {
	vsu.mutation.AddUsedNotice(i)
	return vsu
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vsu *VenueSmsUpdate) SetVenue(v *Venue) *VenueSmsUpdate {
	return vsu.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsMutation object of the builder.
func (vsu *VenueSmsUpdate) Mutation() *VenueSmsMutation {
	return vsu.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (vsu *VenueSmsUpdate) ClearVenue() *VenueSmsUpdate {
	vsu.mutation.ClearVenue()
	return vsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VenueSmsUpdate) Save(ctx context.Context) (int, error) {
	vsu.defaults()
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VenueSmsUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VenueSmsUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VenueSmsUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsu *VenueSmsUpdate) defaults() {
	if _, ok := vsu.mutation.UpdatedAt(); !ok && !vsu.mutation.UpdatedAtCleared() {
		v := venuesms.UpdateDefaultUpdatedAt()
		vsu.mutation.SetUpdatedAt(v)
	}
}

func (vsu *VenueSmsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuesms.Table, venuesms.Columns, sqlgraph.NewFieldSpec(venuesms.FieldID, field.TypeInt64))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsu.mutation.CreatedAtCleared() {
		_spec.ClearField(venuesms.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vsu.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesms.FieldUpdatedAt, field.TypeTime, value)
	}
	if vsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuesms.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vsu.mutation.Delete(); ok {
		_spec.SetField(venuesms.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedDelete(); ok {
		_spec.AddField(venuesms.FieldDelete, field.TypeInt64, value)
	}
	if vsu.mutation.DeleteCleared() {
		_spec.ClearField(venuesms.FieldDelete, field.TypeInt64)
	}
	if value, ok := vsu.mutation.CreatedID(); ok {
		_spec.SetField(venuesms.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuesms.FieldCreatedID, field.TypeInt64, value)
	}
	if vsu.mutation.CreatedIDCleared() {
		_spec.ClearField(venuesms.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vsu.mutation.NoticeCount(); ok {
		_spec.SetField(venuesms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedNoticeCount(); ok {
		_spec.AddField(venuesms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.UsedNotice(); ok {
		_spec.SetField(venuesms.FieldUsedNotice, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedUsedNotice(); ok {
		_spec.AddField(venuesms.FieldUsedNotice, field.TypeInt64, value)
	}
	if vsu.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesms.VenueTable,
			Columns: []string{venuesms.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsu.schemaConfig.VenueSms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsu.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesms.VenueTable,
			Columns: []string{venuesms.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsu.schemaConfig.VenueSms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vsu.schemaConfig.VenueSms
	ctx = internal.NewSchemaConfigContext(ctx, vsu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuesms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VenueSmsUpdateOne is the builder for updating a single VenueSms entity.
type VenueSmsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VenueSmsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vsuo *VenueSmsUpdateOne) SetUpdatedAt(t time.Time) *VenueSmsUpdateOne {
	vsuo.mutation.SetUpdatedAt(t)
	return vsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vsuo *VenueSmsUpdateOne) ClearUpdatedAt() *VenueSmsUpdateOne {
	vsuo.mutation.ClearUpdatedAt()
	return vsuo
}

// SetDelete sets the "delete" field.
func (vsuo *VenueSmsUpdateOne) SetDelete(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.ResetDelete()
	vsuo.mutation.SetDelete(i)
	return vsuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (vsuo *VenueSmsUpdateOne) SetNillableDelete(i *int64) *VenueSmsUpdateOne {
	if i != nil {
		vsuo.SetDelete(*i)
	}
	return vsuo
}

// AddDelete adds i to the "delete" field.
func (vsuo *VenueSmsUpdateOne) AddDelete(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.AddDelete(i)
	return vsuo
}

// ClearDelete clears the value of the "delete" field.
func (vsuo *VenueSmsUpdateOne) ClearDelete() *VenueSmsUpdateOne {
	vsuo.mutation.ClearDelete()
	return vsuo
}

// SetCreatedID sets the "created_id" field.
func (vsuo *VenueSmsUpdateOne) SetCreatedID(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.ResetCreatedID()
	vsuo.mutation.SetCreatedID(i)
	return vsuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (vsuo *VenueSmsUpdateOne) SetNillableCreatedID(i *int64) *VenueSmsUpdateOne {
	if i != nil {
		vsuo.SetCreatedID(*i)
	}
	return vsuo
}

// AddCreatedID adds i to the "created_id" field.
func (vsuo *VenueSmsUpdateOne) AddCreatedID(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.AddCreatedID(i)
	return vsuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (vsuo *VenueSmsUpdateOne) ClearCreatedID() *VenueSmsUpdateOne {
	vsuo.mutation.ClearCreatedID()
	return vsuo
}

// SetVenueID sets the "venue_id" field.
func (vsuo *VenueSmsUpdateOne) SetVenueID(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.SetVenueID(i)
	return vsuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (vsuo *VenueSmsUpdateOne) SetNillableVenueID(i *int64) *VenueSmsUpdateOne {
	if i != nil {
		vsuo.SetVenueID(*i)
	}
	return vsuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (vsuo *VenueSmsUpdateOne) ClearVenueID() *VenueSmsUpdateOne {
	vsuo.mutation.ClearVenueID()
	return vsuo
}

// SetNoticeCount sets the "notice_count" field.
func (vsuo *VenueSmsUpdateOne) SetNoticeCount(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.ResetNoticeCount()
	vsuo.mutation.SetNoticeCount(i)
	return vsuo
}

// SetNillableNoticeCount sets the "notice_count" field if the given value is not nil.
func (vsuo *VenueSmsUpdateOne) SetNillableNoticeCount(i *int64) *VenueSmsUpdateOne {
	if i != nil {
		vsuo.SetNoticeCount(*i)
	}
	return vsuo
}

// AddNoticeCount adds i to the "notice_count" field.
func (vsuo *VenueSmsUpdateOne) AddNoticeCount(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.AddNoticeCount(i)
	return vsuo
}

// SetUsedNotice sets the "used_notice" field.
func (vsuo *VenueSmsUpdateOne) SetUsedNotice(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.ResetUsedNotice()
	vsuo.mutation.SetUsedNotice(i)
	return vsuo
}

// SetNillableUsedNotice sets the "used_notice" field if the given value is not nil.
func (vsuo *VenueSmsUpdateOne) SetNillableUsedNotice(i *int64) *VenueSmsUpdateOne {
	if i != nil {
		vsuo.SetUsedNotice(*i)
	}
	return vsuo
}

// AddUsedNotice adds i to the "used_notice" field.
func (vsuo *VenueSmsUpdateOne) AddUsedNotice(i int64) *VenueSmsUpdateOne {
	vsuo.mutation.AddUsedNotice(i)
	return vsuo
}

// SetVenue sets the "venue" edge to the Venue entity.
func (vsuo *VenueSmsUpdateOne) SetVenue(v *Venue) *VenueSmsUpdateOne {
	return vsuo.SetVenueID(v.ID)
}

// Mutation returns the VenueSmsMutation object of the builder.
func (vsuo *VenueSmsUpdateOne) Mutation() *VenueSmsMutation {
	return vsuo.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (vsuo *VenueSmsUpdateOne) ClearVenue() *VenueSmsUpdateOne {
	vsuo.mutation.ClearVenue()
	return vsuo
}

// Where appends a list predicates to the VenueSmsUpdate builder.
func (vsuo *VenueSmsUpdateOne) Where(ps ...predicate.VenueSms) *VenueSmsUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VenueSmsUpdateOne) Select(field string, fields ...string) *VenueSmsUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VenueSms entity.
func (vsuo *VenueSmsUpdateOne) Save(ctx context.Context) (*VenueSms, error) {
	vsuo.defaults()
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VenueSmsUpdateOne) SaveX(ctx context.Context) *VenueSms {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VenueSmsUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VenueSmsUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsuo *VenueSmsUpdateOne) defaults() {
	if _, ok := vsuo.mutation.UpdatedAt(); !ok && !vsuo.mutation.UpdatedAtCleared() {
		v := venuesms.UpdateDefaultUpdatedAt()
		vsuo.mutation.SetUpdatedAt(v)
	}
}

func (vsuo *VenueSmsUpdateOne) sqlSave(ctx context.Context) (_node *VenueSms, err error) {
	_spec := sqlgraph.NewUpdateSpec(venuesms.Table, venuesms.Columns, sqlgraph.NewFieldSpec(venuesms.FieldID, field.TypeInt64))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VenueSms.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venuesms.FieldID)
		for _, f := range fields {
			if !venuesms.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venuesms.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(venuesms.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(venuesms.FieldUpdatedAt, field.TypeTime, value)
	}
	if vsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(venuesms.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := vsuo.mutation.Delete(); ok {
		_spec.SetField(venuesms.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedDelete(); ok {
		_spec.AddField(venuesms.FieldDelete, field.TypeInt64, value)
	}
	if vsuo.mutation.DeleteCleared() {
		_spec.ClearField(venuesms.FieldDelete, field.TypeInt64)
	}
	if value, ok := vsuo.mutation.CreatedID(); ok {
		_spec.SetField(venuesms.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(venuesms.FieldCreatedID, field.TypeInt64, value)
	}
	if vsuo.mutation.CreatedIDCleared() {
		_spec.ClearField(venuesms.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := vsuo.mutation.NoticeCount(); ok {
		_spec.SetField(venuesms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedNoticeCount(); ok {
		_spec.AddField(venuesms.FieldNoticeCount, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.UsedNotice(); ok {
		_spec.SetField(venuesms.FieldUsedNotice, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedUsedNotice(); ok {
		_spec.AddField(venuesms.FieldUsedNotice, field.TypeInt64, value)
	}
	if vsuo.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesms.VenueTable,
			Columns: []string{venuesms.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsuo.schemaConfig.VenueSms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vsuo.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   venuesms.VenueTable,
			Columns: []string{venuesms.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = vsuo.schemaConfig.VenueSms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vsuo.schemaConfig.VenueSms
	ctx = internal.NewSchemaConfigContext(ctx, vsuo.schemaConfig)
	_node = &VenueSms{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venuesms.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}

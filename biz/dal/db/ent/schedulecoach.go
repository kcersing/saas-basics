// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/schedule"
	"saas/biz/dal/db/ent/schedulecoach"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScheduleCoach is the model entity for the ScheduleCoach schema.
type ScheduleCoach struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// 教练ID
	CoachID int64 `json:"coach_id,omitempty"`
	// 场地ID
	PlaceID int64 `json:"place_id,omitempty"`
	// 课程ID
	ScheduleID int64 `json:"schedule_id,omitempty"`
	// 课程
	ProductID int64 `json:"product_id,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 日期
	Date time.Time `json:"date,omitempty"`
	// 开始时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime time.Time `json:"end_time,omitempty"`
	// 上课签到时间
	SignStartTime time.Time `json:"sign_start_time,omitempty"`
	// 下课签到时间
	SignEndTime time.Time `json:"sign_end_time,omitempty"`
	// 教练名称
	CoachName string `json:"coach_name,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleCoachQuery when eager-loading is set.
	Edges        ScheduleCoachEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduleCoachEdges holds the relations/edges for other nodes in the graph.
type ScheduleCoachEdges struct {
	// Schedule holds the value of the schedule edge.
	Schedule *Schedule `json:"schedule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleCoachEdges) ScheduleOrErr() (*Schedule, error) {
	if e.loadedTypes[0] {
		if e.Schedule == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: schedule.Label}
		}
		return e.Schedule, nil
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduleCoach) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedulecoach.FieldID, schedulecoach.FieldDelete, schedulecoach.FieldCreatedID, schedulecoach.FieldStatus, schedulecoach.FieldVenueID, schedulecoach.FieldCoachID, schedulecoach.FieldPlaceID, schedulecoach.FieldScheduleID, schedulecoach.FieldProductID:
			values[i] = new(sql.NullInt64)
		case schedulecoach.FieldType, schedulecoach.FieldCoachName, schedulecoach.FieldRemark:
			values[i] = new(sql.NullString)
		case schedulecoach.FieldCreatedAt, schedulecoach.FieldUpdatedAt, schedulecoach.FieldDate, schedulecoach.FieldStartTime, schedulecoach.FieldEndTime, schedulecoach.FieldSignStartTime, schedulecoach.FieldSignEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduleCoach fields.
func (sc *ScheduleCoach) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedulecoach.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int64(value.Int64)
		case schedulecoach.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case schedulecoach.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case schedulecoach.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				sc.Delete = value.Int64
			}
		case schedulecoach.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				sc.CreatedID = value.Int64
			}
		case schedulecoach.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sc.Status = value.Int64
			}
		case schedulecoach.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				sc.VenueID = value.Int64
			}
		case schedulecoach.FieldCoachID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coach_id", values[i])
			} else if value.Valid {
				sc.CoachID = value.Int64
			}
		case schedulecoach.FieldPlaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field place_id", values[i])
			} else if value.Valid {
				sc.PlaceID = value.Int64
			}
		case schedulecoach.FieldScheduleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_id", values[i])
			} else if value.Valid {
				sc.ScheduleID = value.Int64
			}
		case schedulecoach.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				sc.ProductID = value.Int64
			}
		case schedulecoach.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sc.Type = value.String
			}
		case schedulecoach.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				sc.Date = value.Time
			}
		case schedulecoach.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				sc.StartTime = value.Time
			}
		case schedulecoach.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				sc.EndTime = value.Time
			}
		case schedulecoach.FieldSignStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sign_start_time", values[i])
			} else if value.Valid {
				sc.SignStartTime = value.Time
			}
		case schedulecoach.FieldSignEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sign_end_time", values[i])
			} else if value.Valid {
				sc.SignEndTime = value.Time
			}
		case schedulecoach.FieldCoachName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coach_name", values[i])
			} else if value.Valid {
				sc.CoachName = value.String
			}
		case schedulecoach.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sc.Remark = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduleCoach.
// This includes values selected through modifiers, order, etc.
func (sc *ScheduleCoach) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QuerySchedule queries the "schedule" edge of the ScheduleCoach entity.
func (sc *ScheduleCoach) QuerySchedule() *ScheduleQuery {
	return NewScheduleCoachClient(sc.config).QuerySchedule(sc)
}

// Update returns a builder for updating this ScheduleCoach.
// Note that you need to call ScheduleCoach.Unwrap() before calling this method if this ScheduleCoach
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ScheduleCoach) Update() *ScheduleCoachUpdateOne {
	return NewScheduleCoachClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ScheduleCoach entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ScheduleCoach) Unwrap() *ScheduleCoach {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduleCoach is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ScheduleCoach) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduleCoach(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", sc.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sc.Status))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.VenueID))
	builder.WriteString(", ")
	builder.WriteString("coach_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.CoachID))
	builder.WriteString(", ")
	builder.WriteString("place_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.PlaceID))
	builder.WriteString(", ")
	builder.WriteString("schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ScheduleID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ProductID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sc.Type)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(sc.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(sc.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(sc.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sign_start_time=")
	builder.WriteString(sc.SignStartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sign_end_time=")
	builder.WriteString(sc.SignEndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("coach_name=")
	builder.WriteString(sc.CoachName)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sc.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// ScheduleCoaches is a parsable slice of ScheduleCoach.
type ScheduleCoaches []*ScheduleCoach

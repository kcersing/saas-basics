// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/community"
	"saas/biz/dal/db/ent/communityparticipant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CommunityParticipant is the model entity for the CommunityParticipant schema.
type CommunityParticipant struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 状态[1:正常,2:禁用]
	Status int64 `json:"status,omitempty"`
	// 社群id
	CommunityID int64 `json:"community_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 手机号
	Mobile string `json:"mobile,omitempty"`
	// 更多
	Fields string `json:"fields,omitempty"`
	// 订单ID
	OrderID int64 `json:"order_id,omitempty"`
	// 订单编号
	OrderSn string `json:"order_sn,omitempty"`
	// 费用
	Fee float64 `json:"fee,omitempty"`
	// 会员ID
	MemberID int64 `json:"member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommunityParticipantQuery when eager-loading is set.
	Edges        CommunityParticipantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommunityParticipantEdges holds the relations/edges for other nodes in the graph.
type CommunityParticipantEdges struct {
	// Community holds the value of the community edge.
	Community *Community `json:"community,omitempty"`
	// Members holds the value of the members edge.
	Members []*Member `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommunityOrErr returns the Community value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommunityParticipantEdges) CommunityOrErr() (*Community, error) {
	if e.loadedTypes[0] {
		if e.Community == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: community.Label}
		}
		return e.Community, nil
	}
	return nil, &NotLoadedError{edge: "community"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e CommunityParticipantEdges) MembersOrErr() ([]*Member, error) {
	if e.loadedTypes[1] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommunityParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case communityparticipant.FieldFee:
			values[i] = new(sql.NullFloat64)
		case communityparticipant.FieldID, communityparticipant.FieldDelete, communityparticipant.FieldCreatedID, communityparticipant.FieldStatus, communityparticipant.FieldCommunityID, communityparticipant.FieldOrderID, communityparticipant.FieldMemberID:
			values[i] = new(sql.NullInt64)
		case communityparticipant.FieldName, communityparticipant.FieldMobile, communityparticipant.FieldFields, communityparticipant.FieldOrderSn:
			values[i] = new(sql.NullString)
		case communityparticipant.FieldCreatedAt, communityparticipant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommunityParticipant fields.
func (cp *CommunityParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case communityparticipant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int64(value.Int64)
		case communityparticipant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case communityparticipant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case communityparticipant.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				cp.Delete = value.Int64
			}
		case communityparticipant.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				cp.CreatedID = value.Int64
			}
		case communityparticipant.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cp.Status = value.Int64
			}
		case communityparticipant.FieldCommunityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field community_id", values[i])
			} else if value.Valid {
				cp.CommunityID = value.Int64
			}
		case communityparticipant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case communityparticipant.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				cp.Mobile = value.String
			}
		case communityparticipant.FieldFields:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fields", values[i])
			} else if value.Valid {
				cp.Fields = value.String
			}
		case communityparticipant.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				cp.OrderID = value.Int64
			}
		case communityparticipant.FieldOrderSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_sn", values[i])
			} else if value.Valid {
				cp.OrderSn = value.String
			}
		case communityparticipant.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				cp.Fee = value.Float64
			}
		case communityparticipant.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				cp.MemberID = value.Int64
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommunityParticipant.
// This includes values selected through modifiers, order, etc.
func (cp *CommunityParticipant) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryCommunity queries the "community" edge of the CommunityParticipant entity.
func (cp *CommunityParticipant) QueryCommunity() *CommunityQuery {
	return NewCommunityParticipantClient(cp.config).QueryCommunity(cp)
}

// QueryMembers queries the "members" edge of the CommunityParticipant entity.
func (cp *CommunityParticipant) QueryMembers() *MemberQuery {
	return NewCommunityParticipantClient(cp.config).QueryMembers(cp)
}

// Update returns a builder for updating this CommunityParticipant.
// Note that you need to call CommunityParticipant.Unwrap() before calling this method if this CommunityParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CommunityParticipant) Update() *CommunityParticipantUpdateOne {
	return NewCommunityParticipantClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CommunityParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CommunityParticipant) Unwrap() *CommunityParticipant {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommunityParticipant is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CommunityParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("CommunityParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", cp.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cp.Status))
	builder.WriteString(", ")
	builder.WriteString("community_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.CommunityID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(cp.Mobile)
	builder.WriteString(", ")
	builder.WriteString("fields=")
	builder.WriteString(cp.Fields)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_sn=")
	builder.WriteString(cp.OrderSn)
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", cp.Fee))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.MemberID))
	builder.WriteByte(')')
	return builder.String()
}

// CommunityParticipants is a parsable slice of CommunityParticipant.
type CommunityParticipants []*CommunityParticipant

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/biz/dal/db/ent/member"
	"saas/biz/dal/db/ent/memberprofile"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MemberProfile is the model entity for the MemberProfile schema.
type MemberProfile struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// last delete  1:已删除
	Delete int64 `json:"delete,omitempty"`
	// created
	CreatedID int64 `json:"created_id,omitempty"`
	// 会员id
	MemberID int64 `json:"member_id,omitempty"`
	// 手机号归属
	MobileAscription int64 `json:"mobile_ascription,omitempty"`
	// 父亲名称
	FatherName string `json:"father_name,omitempty"`
	// 母亲名称
	MotherName string `json:"mother_name,omitempty"`
	// 年级
	Grade int64 `json:"grade,omitempty"`
	// 意向
	Intention int64 `json:"intention,omitempty"`
	// 来源
	Source int64 `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberProfileQuery when eager-loading is set.
	Edges        MemberProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberProfileEdges holds the relations/edges for other nodes in the graph.
type MemberProfileEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Member `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberProfileEdges) ProfileOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberprofile.FieldID, memberprofile.FieldDelete, memberprofile.FieldCreatedID, memberprofile.FieldMemberID, memberprofile.FieldMobileAscription, memberprofile.FieldGrade, memberprofile.FieldIntention, memberprofile.FieldSource:
			values[i] = new(sql.NullInt64)
		case memberprofile.FieldFatherName, memberprofile.FieldMotherName:
			values[i] = new(sql.NullString)
		case memberprofile.FieldCreatedAt, memberprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberProfile fields.
func (mp *MemberProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int64(value.Int64)
		case memberprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case memberprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mp.UpdatedAt = value.Time
			}
		case memberprofile.FieldDelete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete", values[i])
			} else if value.Valid {
				mp.Delete = value.Int64
			}
		case memberprofile.FieldCreatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_id", values[i])
			} else if value.Valid {
				mp.CreatedID = value.Int64
			}
		case memberprofile.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				mp.MemberID = value.Int64
			}
		case memberprofile.FieldMobileAscription:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_ascription", values[i])
			} else if value.Valid {
				mp.MobileAscription = value.Int64
			}
		case memberprofile.FieldFatherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field father_name", values[i])
			} else if value.Valid {
				mp.FatherName = value.String
			}
		case memberprofile.FieldMotherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mother_name", values[i])
			} else if value.Valid {
				mp.MotherName = value.String
			}
		case memberprofile.FieldGrade:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grade", values[i])
			} else if value.Valid {
				mp.Grade = value.Int64
			}
		case memberprofile.FieldIntention:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field intention", values[i])
			} else if value.Valid {
				mp.Intention = value.Int64
			}
		case memberprofile.FieldSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				mp.Source = value.Int64
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberProfile.
// This includes values selected through modifiers, order, etc.
func (mp *MemberProfile) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the MemberProfile entity.
func (mp *MemberProfile) QueryProfile() *MemberQuery {
	return NewMemberProfileClient(mp.config).QueryProfile(mp)
}

// Update returns a builder for updating this MemberProfile.
// Note that you need to call MemberProfile.Unwrap() before calling this method if this MemberProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MemberProfile) Update() *MemberProfileUpdateOne {
	return NewMemberProfileClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the MemberProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MemberProfile) Unwrap() *MemberProfile {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberProfile is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MemberProfile) String() string {
	var builder strings.Builder
	builder.WriteString("MemberProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete=")
	builder.WriteString(fmt.Sprintf("%v", mp.Delete))
	builder.WriteString(", ")
	builder.WriteString("created_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.CreatedID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.MemberID))
	builder.WriteString(", ")
	builder.WriteString("mobile_ascription=")
	builder.WriteString(fmt.Sprintf("%v", mp.MobileAscription))
	builder.WriteString(", ")
	builder.WriteString("father_name=")
	builder.WriteString(mp.FatherName)
	builder.WriteString(", ")
	builder.WriteString("mother_name=")
	builder.WriteString(mp.MotherName)
	builder.WriteString(", ")
	builder.WriteString("grade=")
	builder.WriteString(fmt.Sprintf("%v", mp.Grade))
	builder.WriteString(", ")
	builder.WriteString("intention=")
	builder.WriteString(fmt.Sprintf("%v", mp.Intention))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", mp.Source))
	builder.WriteByte(')')
	return builder.String()
}

// MemberProfiles is a parsable slice of MemberProfile.
type MemberProfiles []*MemberProfile

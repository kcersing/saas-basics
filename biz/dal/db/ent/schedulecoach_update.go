// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/predicate"
	"saas/biz/dal/db/ent/schedule"
	"saas/biz/dal/db/ent/schedulecoach"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleCoachUpdate is the builder for updating ScheduleCoach entities.
type ScheduleCoachUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleCoachMutation
}

// Where appends a list predicates to the ScheduleCoachUpdate builder.
func (scu *ScheduleCoachUpdate) Where(ps ...predicate.ScheduleCoach) *ScheduleCoachUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ScheduleCoachUpdate) SetUpdatedAt(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scu *ScheduleCoachUpdate) ClearUpdatedAt() *ScheduleCoachUpdate {
	scu.mutation.ClearUpdatedAt()
	return scu
}

// SetDelete sets the "delete" field.
func (scu *ScheduleCoachUpdate) SetDelete(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetDelete()
	scu.mutation.SetDelete(i)
	return scu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableDelete(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetDelete(*i)
	}
	return scu
}

// AddDelete adds i to the "delete" field.
func (scu *ScheduleCoachUpdate) AddDelete(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddDelete(i)
	return scu
}

// ClearDelete clears the value of the "delete" field.
func (scu *ScheduleCoachUpdate) ClearDelete() *ScheduleCoachUpdate {
	scu.mutation.ClearDelete()
	return scu
}

// SetCreatedID sets the "created_id" field.
func (scu *ScheduleCoachUpdate) SetCreatedID(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetCreatedID()
	scu.mutation.SetCreatedID(i)
	return scu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableCreatedID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetCreatedID(*i)
	}
	return scu
}

// AddCreatedID adds i to the "created_id" field.
func (scu *ScheduleCoachUpdate) AddCreatedID(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddCreatedID(i)
	return scu
}

// ClearCreatedID clears the value of the "created_id" field.
func (scu *ScheduleCoachUpdate) ClearCreatedID() *ScheduleCoachUpdate {
	scu.mutation.ClearCreatedID()
	return scu
}

// SetStatus sets the "status" field.
func (scu *ScheduleCoachUpdate) SetStatus(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetStatus()
	scu.mutation.SetStatus(i)
	return scu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableStatus(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetStatus(*i)
	}
	return scu
}

// AddStatus adds i to the "status" field.
func (scu *ScheduleCoachUpdate) AddStatus(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddStatus(i)
	return scu
}

// ClearStatus clears the value of the "status" field.
func (scu *ScheduleCoachUpdate) ClearStatus() *ScheduleCoachUpdate {
	scu.mutation.ClearStatus()
	return scu
}

// SetVenueID sets the "venue_id" field.
func (scu *ScheduleCoachUpdate) SetVenueID(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetVenueID()
	scu.mutation.SetVenueID(i)
	return scu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableVenueID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetVenueID(*i)
	}
	return scu
}

// AddVenueID adds i to the "venue_id" field.
func (scu *ScheduleCoachUpdate) AddVenueID(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddVenueID(i)
	return scu
}

// ClearVenueID clears the value of the "venue_id" field.
func (scu *ScheduleCoachUpdate) ClearVenueID() *ScheduleCoachUpdate {
	scu.mutation.ClearVenueID()
	return scu
}

// SetCoachID sets the "coach_id" field.
func (scu *ScheduleCoachUpdate) SetCoachID(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetCoachID()
	scu.mutation.SetCoachID(i)
	return scu
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableCoachID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetCoachID(*i)
	}
	return scu
}

// AddCoachID adds i to the "coach_id" field.
func (scu *ScheduleCoachUpdate) AddCoachID(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddCoachID(i)
	return scu
}

// ClearCoachID clears the value of the "coach_id" field.
func (scu *ScheduleCoachUpdate) ClearCoachID() *ScheduleCoachUpdate {
	scu.mutation.ClearCoachID()
	return scu
}

// SetPlaceID sets the "place_id" field.
func (scu *ScheduleCoachUpdate) SetPlaceID(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetPlaceID()
	scu.mutation.SetPlaceID(i)
	return scu
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillablePlaceID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetPlaceID(*i)
	}
	return scu
}

// AddPlaceID adds i to the "place_id" field.
func (scu *ScheduleCoachUpdate) AddPlaceID(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddPlaceID(i)
	return scu
}

// ClearPlaceID clears the value of the "place_id" field.
func (scu *ScheduleCoachUpdate) ClearPlaceID() *ScheduleCoachUpdate {
	scu.mutation.ClearPlaceID()
	return scu
}

// SetScheduleID sets the "schedule_id" field.
func (scu *ScheduleCoachUpdate) SetScheduleID(i int64) *ScheduleCoachUpdate {
	scu.mutation.SetScheduleID(i)
	return scu
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableScheduleID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetScheduleID(*i)
	}
	return scu
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (scu *ScheduleCoachUpdate) ClearScheduleID() *ScheduleCoachUpdate {
	scu.mutation.ClearScheduleID()
	return scu
}

// SetProductID sets the "product_id" field.
func (scu *ScheduleCoachUpdate) SetProductID(i int64) *ScheduleCoachUpdate {
	scu.mutation.ResetProductID()
	scu.mutation.SetProductID(i)
	return scu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableProductID(i *int64) *ScheduleCoachUpdate {
	if i != nil {
		scu.SetProductID(*i)
	}
	return scu
}

// AddProductID adds i to the "product_id" field.
func (scu *ScheduleCoachUpdate) AddProductID(i int64) *ScheduleCoachUpdate {
	scu.mutation.AddProductID(i)
	return scu
}

// ClearProductID clears the value of the "product_id" field.
func (scu *ScheduleCoachUpdate) ClearProductID() *ScheduleCoachUpdate {
	scu.mutation.ClearProductID()
	return scu
}

// SetType sets the "type" field.
func (scu *ScheduleCoachUpdate) SetType(s string) *ScheduleCoachUpdate {
	scu.mutation.SetType(s)
	return scu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableType(s *string) *ScheduleCoachUpdate {
	if s != nil {
		scu.SetType(*s)
	}
	return scu
}

// ClearType clears the value of the "type" field.
func (scu *ScheduleCoachUpdate) ClearType() *ScheduleCoachUpdate {
	scu.mutation.ClearType()
	return scu
}

// SetDate sets the "date" field.
func (scu *ScheduleCoachUpdate) SetDate(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetDate(t)
	return scu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableDate(t *time.Time) *ScheduleCoachUpdate {
	if t != nil {
		scu.SetDate(*t)
	}
	return scu
}

// ClearDate clears the value of the "date" field.
func (scu *ScheduleCoachUpdate) ClearDate() *ScheduleCoachUpdate {
	scu.mutation.ClearDate()
	return scu
}

// SetStartTime sets the "start_time" field.
func (scu *ScheduleCoachUpdate) SetStartTime(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetStartTime(t)
	return scu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableStartTime(t *time.Time) *ScheduleCoachUpdate {
	if t != nil {
		scu.SetStartTime(*t)
	}
	return scu
}

// ClearStartTime clears the value of the "start_time" field.
func (scu *ScheduleCoachUpdate) ClearStartTime() *ScheduleCoachUpdate {
	scu.mutation.ClearStartTime()
	return scu
}

// SetEndTime sets the "end_time" field.
func (scu *ScheduleCoachUpdate) SetEndTime(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetEndTime(t)
	return scu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableEndTime(t *time.Time) *ScheduleCoachUpdate {
	if t != nil {
		scu.SetEndTime(*t)
	}
	return scu
}

// ClearEndTime clears the value of the "end_time" field.
func (scu *ScheduleCoachUpdate) ClearEndTime() *ScheduleCoachUpdate {
	scu.mutation.ClearEndTime()
	return scu
}

// SetSignStartTime sets the "sign_start_time" field.
func (scu *ScheduleCoachUpdate) SetSignStartTime(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetSignStartTime(t)
	return scu
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableSignStartTime(t *time.Time) *ScheduleCoachUpdate {
	if t != nil {
		scu.SetSignStartTime(*t)
	}
	return scu
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (scu *ScheduleCoachUpdate) ClearSignStartTime() *ScheduleCoachUpdate {
	scu.mutation.ClearSignStartTime()
	return scu
}

// SetSignEndTime sets the "sign_end_time" field.
func (scu *ScheduleCoachUpdate) SetSignEndTime(t time.Time) *ScheduleCoachUpdate {
	scu.mutation.SetSignEndTime(t)
	return scu
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableSignEndTime(t *time.Time) *ScheduleCoachUpdate {
	if t != nil {
		scu.SetSignEndTime(*t)
	}
	return scu
}

// ClearSignEndTime clears the value of the "sign_end_time" field.
func (scu *ScheduleCoachUpdate) ClearSignEndTime() *ScheduleCoachUpdate {
	scu.mutation.ClearSignEndTime()
	return scu
}

// SetCoachName sets the "coach_name" field.
func (scu *ScheduleCoachUpdate) SetCoachName(s string) *ScheduleCoachUpdate {
	scu.mutation.SetCoachName(s)
	return scu
}

// SetNillableCoachName sets the "coach_name" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableCoachName(s *string) *ScheduleCoachUpdate {
	if s != nil {
		scu.SetCoachName(*s)
	}
	return scu
}

// ClearCoachName clears the value of the "coach_name" field.
func (scu *ScheduleCoachUpdate) ClearCoachName() *ScheduleCoachUpdate {
	scu.mutation.ClearCoachName()
	return scu
}

// SetRemark sets the "remark" field.
func (scu *ScheduleCoachUpdate) SetRemark(s string) *ScheduleCoachUpdate {
	scu.mutation.SetRemark(s)
	return scu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scu *ScheduleCoachUpdate) SetNillableRemark(s *string) *ScheduleCoachUpdate {
	if s != nil {
		scu.SetRemark(*s)
	}
	return scu
}

// ClearRemark clears the value of the "remark" field.
func (scu *ScheduleCoachUpdate) ClearRemark() *ScheduleCoachUpdate {
	scu.mutation.ClearRemark()
	return scu
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (scu *ScheduleCoachUpdate) SetSchedule(s *Schedule) *ScheduleCoachUpdate {
	return scu.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleCoachMutation object of the builder.
func (scu *ScheduleCoachUpdate) Mutation() *ScheduleCoachMutation {
	return scu.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (scu *ScheduleCoachUpdate) ClearSchedule() *ScheduleCoachUpdate {
	scu.mutation.ClearSchedule()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ScheduleCoachUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ScheduleCoachUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ScheduleCoachUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ScheduleCoachUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ScheduleCoachUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok && !scu.mutation.UpdatedAtCleared() {
		v := schedulecoach.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

func (scu *ScheduleCoachUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulecoach.Table, schedulecoach.Columns, sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scu.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulecoach.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulecoach.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulecoach.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.Delete(); ok {
		_spec.SetField(schedulecoach.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedDelete(); ok {
		_spec.AddField(schedulecoach.FieldDelete, field.TypeInt64, value)
	}
	if scu.mutation.DeleteCleared() {
		_spec.ClearField(schedulecoach.FieldDelete, field.TypeInt64)
	}
	if value, ok := scu.mutation.CreatedID(); ok {
		_spec.SetField(schedulecoach.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulecoach.FieldCreatedID, field.TypeInt64, value)
	}
	if scu.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulecoach.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.SetField(schedulecoach.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedStatus(); ok {
		_spec.AddField(schedulecoach.FieldStatus, field.TypeInt64, value)
	}
	if scu.mutation.StatusCleared() {
		_spec.ClearField(schedulecoach.FieldStatus, field.TypeInt64)
	}
	if value, ok := scu.mutation.VenueID(); ok {
		_spec.SetField(schedulecoach.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulecoach.FieldVenueID, field.TypeInt64, value)
	}
	if scu.mutation.VenueIDCleared() {
		_spec.ClearField(schedulecoach.FieldVenueID, field.TypeInt64)
	}
	if value, ok := scu.mutation.CoachID(); ok {
		_spec.SetField(schedulecoach.FieldCoachID, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedCoachID(); ok {
		_spec.AddField(schedulecoach.FieldCoachID, field.TypeInt64, value)
	}
	if scu.mutation.CoachIDCleared() {
		_spec.ClearField(schedulecoach.FieldCoachID, field.TypeInt64)
	}
	if value, ok := scu.mutation.PlaceID(); ok {
		_spec.SetField(schedulecoach.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedulecoach.FieldPlaceID, field.TypeInt64, value)
	}
	if scu.mutation.PlaceIDCleared() {
		_spec.ClearField(schedulecoach.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := scu.mutation.ProductID(); ok {
		_spec.SetField(schedulecoach.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedProductID(); ok {
		_spec.AddField(schedulecoach.FieldProductID, field.TypeInt64, value)
	}
	if scu.mutation.ProductIDCleared() {
		_spec.ClearField(schedulecoach.FieldProductID, field.TypeInt64)
	}
	if value, ok := scu.mutation.GetType(); ok {
		_spec.SetField(schedulecoach.FieldType, field.TypeString, value)
	}
	if scu.mutation.TypeCleared() {
		_spec.ClearField(schedulecoach.FieldType, field.TypeString)
	}
	if value, ok := scu.mutation.Date(); ok {
		_spec.SetField(schedulecoach.FieldDate, field.TypeTime, value)
	}
	if scu.mutation.DateCleared() {
		_spec.ClearField(schedulecoach.FieldDate, field.TypeTime)
	}
	if value, ok := scu.mutation.StartTime(); ok {
		_spec.SetField(schedulecoach.FieldStartTime, field.TypeTime, value)
	}
	if scu.mutation.StartTimeCleared() {
		_spec.ClearField(schedulecoach.FieldStartTime, field.TypeTime)
	}
	if value, ok := scu.mutation.EndTime(); ok {
		_spec.SetField(schedulecoach.FieldEndTime, field.TypeTime, value)
	}
	if scu.mutation.EndTimeCleared() {
		_spec.ClearField(schedulecoach.FieldEndTime, field.TypeTime)
	}
	if value, ok := scu.mutation.SignStartTime(); ok {
		_spec.SetField(schedulecoach.FieldSignStartTime, field.TypeTime, value)
	}
	if scu.mutation.SignStartTimeCleared() {
		_spec.ClearField(schedulecoach.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := scu.mutation.SignEndTime(); ok {
		_spec.SetField(schedulecoach.FieldSignEndTime, field.TypeTime, value)
	}
	if scu.mutation.SignEndTimeCleared() {
		_spec.ClearField(schedulecoach.FieldSignEndTime, field.TypeTime)
	}
	if value, ok := scu.mutation.CoachName(); ok {
		_spec.SetField(schedulecoach.FieldCoachName, field.TypeString, value)
	}
	if scu.mutation.CoachNameCleared() {
		_spec.ClearField(schedulecoach.FieldCoachName, field.TypeString)
	}
	if value, ok := scu.mutation.Remark(); ok {
		_spec.SetField(schedulecoach.FieldRemark, field.TypeString, value)
	}
	if scu.mutation.RemarkCleared() {
		_spec.ClearField(schedulecoach.FieldRemark, field.TypeString)
	}
	if scu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulecoach.ScheduleTable,
			Columns: []string{schedulecoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulecoach.ScheduleTable,
			Columns: []string{schedulecoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulecoach.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ScheduleCoachUpdateOne is the builder for updating a single ScheduleCoach entity.
type ScheduleCoachUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleCoachMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ScheduleCoachUpdateOne) SetUpdatedAt(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scuo *ScheduleCoachUpdateOne) ClearUpdatedAt() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearUpdatedAt()
	return scuo
}

// SetDelete sets the "delete" field.
func (scuo *ScheduleCoachUpdateOne) SetDelete(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetDelete()
	scuo.mutation.SetDelete(i)
	return scuo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableDelete(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetDelete(*i)
	}
	return scuo
}

// AddDelete adds i to the "delete" field.
func (scuo *ScheduleCoachUpdateOne) AddDelete(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddDelete(i)
	return scuo
}

// ClearDelete clears the value of the "delete" field.
func (scuo *ScheduleCoachUpdateOne) ClearDelete() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearDelete()
	return scuo
}

// SetCreatedID sets the "created_id" field.
func (scuo *ScheduleCoachUpdateOne) SetCreatedID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetCreatedID()
	scuo.mutation.SetCreatedID(i)
	return scuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableCreatedID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetCreatedID(*i)
	}
	return scuo
}

// AddCreatedID adds i to the "created_id" field.
func (scuo *ScheduleCoachUpdateOne) AddCreatedID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddCreatedID(i)
	return scuo
}

// ClearCreatedID clears the value of the "created_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearCreatedID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearCreatedID()
	return scuo
}

// SetStatus sets the "status" field.
func (scuo *ScheduleCoachUpdateOne) SetStatus(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetStatus()
	scuo.mutation.SetStatus(i)
	return scuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableStatus(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetStatus(*i)
	}
	return scuo
}

// AddStatus adds i to the "status" field.
func (scuo *ScheduleCoachUpdateOne) AddStatus(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddStatus(i)
	return scuo
}

// ClearStatus clears the value of the "status" field.
func (scuo *ScheduleCoachUpdateOne) ClearStatus() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearStatus()
	return scuo
}

// SetVenueID sets the "venue_id" field.
func (scuo *ScheduleCoachUpdateOne) SetVenueID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetVenueID()
	scuo.mutation.SetVenueID(i)
	return scuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableVenueID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetVenueID(*i)
	}
	return scuo
}

// AddVenueID adds i to the "venue_id" field.
func (scuo *ScheduleCoachUpdateOne) AddVenueID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddVenueID(i)
	return scuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearVenueID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearVenueID()
	return scuo
}

// SetCoachID sets the "coach_id" field.
func (scuo *ScheduleCoachUpdateOne) SetCoachID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetCoachID()
	scuo.mutation.SetCoachID(i)
	return scuo
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableCoachID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetCoachID(*i)
	}
	return scuo
}

// AddCoachID adds i to the "coach_id" field.
func (scuo *ScheduleCoachUpdateOne) AddCoachID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddCoachID(i)
	return scuo
}

// ClearCoachID clears the value of the "coach_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearCoachID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearCoachID()
	return scuo
}

// SetPlaceID sets the "place_id" field.
func (scuo *ScheduleCoachUpdateOne) SetPlaceID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetPlaceID()
	scuo.mutation.SetPlaceID(i)
	return scuo
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillablePlaceID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetPlaceID(*i)
	}
	return scuo
}

// AddPlaceID adds i to the "place_id" field.
func (scuo *ScheduleCoachUpdateOne) AddPlaceID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddPlaceID(i)
	return scuo
}

// ClearPlaceID clears the value of the "place_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearPlaceID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearPlaceID()
	return scuo
}

// SetScheduleID sets the "schedule_id" field.
func (scuo *ScheduleCoachUpdateOne) SetScheduleID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.SetScheduleID(i)
	return scuo
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableScheduleID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetScheduleID(*i)
	}
	return scuo
}

// ClearScheduleID clears the value of the "schedule_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearScheduleID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearScheduleID()
	return scuo
}

// SetProductID sets the "product_id" field.
func (scuo *ScheduleCoachUpdateOne) SetProductID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.ResetProductID()
	scuo.mutation.SetProductID(i)
	return scuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableProductID(i *int64) *ScheduleCoachUpdateOne {
	if i != nil {
		scuo.SetProductID(*i)
	}
	return scuo
}

// AddProductID adds i to the "product_id" field.
func (scuo *ScheduleCoachUpdateOne) AddProductID(i int64) *ScheduleCoachUpdateOne {
	scuo.mutation.AddProductID(i)
	return scuo
}

// ClearProductID clears the value of the "product_id" field.
func (scuo *ScheduleCoachUpdateOne) ClearProductID() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearProductID()
	return scuo
}

// SetType sets the "type" field.
func (scuo *ScheduleCoachUpdateOne) SetType(s string) *ScheduleCoachUpdateOne {
	scuo.mutation.SetType(s)
	return scuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableType(s *string) *ScheduleCoachUpdateOne {
	if s != nil {
		scuo.SetType(*s)
	}
	return scuo
}

// ClearType clears the value of the "type" field.
func (scuo *ScheduleCoachUpdateOne) ClearType() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearType()
	return scuo
}

// SetDate sets the "date" field.
func (scuo *ScheduleCoachUpdateOne) SetDate(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetDate(t)
	return scuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableDate(t *time.Time) *ScheduleCoachUpdateOne {
	if t != nil {
		scuo.SetDate(*t)
	}
	return scuo
}

// ClearDate clears the value of the "date" field.
func (scuo *ScheduleCoachUpdateOne) ClearDate() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearDate()
	return scuo
}

// SetStartTime sets the "start_time" field.
func (scuo *ScheduleCoachUpdateOne) SetStartTime(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetStartTime(t)
	return scuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableStartTime(t *time.Time) *ScheduleCoachUpdateOne {
	if t != nil {
		scuo.SetStartTime(*t)
	}
	return scuo
}

// ClearStartTime clears the value of the "start_time" field.
func (scuo *ScheduleCoachUpdateOne) ClearStartTime() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearStartTime()
	return scuo
}

// SetEndTime sets the "end_time" field.
func (scuo *ScheduleCoachUpdateOne) SetEndTime(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetEndTime(t)
	return scuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableEndTime(t *time.Time) *ScheduleCoachUpdateOne {
	if t != nil {
		scuo.SetEndTime(*t)
	}
	return scuo
}

// ClearEndTime clears the value of the "end_time" field.
func (scuo *ScheduleCoachUpdateOne) ClearEndTime() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearEndTime()
	return scuo
}

// SetSignStartTime sets the "sign_start_time" field.
func (scuo *ScheduleCoachUpdateOne) SetSignStartTime(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetSignStartTime(t)
	return scuo
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableSignStartTime(t *time.Time) *ScheduleCoachUpdateOne {
	if t != nil {
		scuo.SetSignStartTime(*t)
	}
	return scuo
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (scuo *ScheduleCoachUpdateOne) ClearSignStartTime() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearSignStartTime()
	return scuo
}

// SetSignEndTime sets the "sign_end_time" field.
func (scuo *ScheduleCoachUpdateOne) SetSignEndTime(t time.Time) *ScheduleCoachUpdateOne {
	scuo.mutation.SetSignEndTime(t)
	return scuo
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableSignEndTime(t *time.Time) *ScheduleCoachUpdateOne {
	if t != nil {
		scuo.SetSignEndTime(*t)
	}
	return scuo
}

// ClearSignEndTime clears the value of the "sign_end_time" field.
func (scuo *ScheduleCoachUpdateOne) ClearSignEndTime() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearSignEndTime()
	return scuo
}

// SetCoachName sets the "coach_name" field.
func (scuo *ScheduleCoachUpdateOne) SetCoachName(s string) *ScheduleCoachUpdateOne {
	scuo.mutation.SetCoachName(s)
	return scuo
}

// SetNillableCoachName sets the "coach_name" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableCoachName(s *string) *ScheduleCoachUpdateOne {
	if s != nil {
		scuo.SetCoachName(*s)
	}
	return scuo
}

// ClearCoachName clears the value of the "coach_name" field.
func (scuo *ScheduleCoachUpdateOne) ClearCoachName() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearCoachName()
	return scuo
}

// SetRemark sets the "remark" field.
func (scuo *ScheduleCoachUpdateOne) SetRemark(s string) *ScheduleCoachUpdateOne {
	scuo.mutation.SetRemark(s)
	return scuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scuo *ScheduleCoachUpdateOne) SetNillableRemark(s *string) *ScheduleCoachUpdateOne {
	if s != nil {
		scuo.SetRemark(*s)
	}
	return scuo
}

// ClearRemark clears the value of the "remark" field.
func (scuo *ScheduleCoachUpdateOne) ClearRemark() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearRemark()
	return scuo
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (scuo *ScheduleCoachUpdateOne) SetSchedule(s *Schedule) *ScheduleCoachUpdateOne {
	return scuo.SetScheduleID(s.ID)
}

// Mutation returns the ScheduleCoachMutation object of the builder.
func (scuo *ScheduleCoachUpdateOne) Mutation() *ScheduleCoachMutation {
	return scuo.mutation
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (scuo *ScheduleCoachUpdateOne) ClearSchedule() *ScheduleCoachUpdateOne {
	scuo.mutation.ClearSchedule()
	return scuo
}

// Where appends a list predicates to the ScheduleCoachUpdate builder.
func (scuo *ScheduleCoachUpdateOne) Where(ps ...predicate.ScheduleCoach) *ScheduleCoachUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ScheduleCoachUpdateOne) Select(field string, fields ...string) *ScheduleCoachUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ScheduleCoach entity.
func (scuo *ScheduleCoachUpdateOne) Save(ctx context.Context) (*ScheduleCoach, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ScheduleCoachUpdateOne) SaveX(ctx context.Context) *ScheduleCoach {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ScheduleCoachUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ScheduleCoachUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ScheduleCoachUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok && !scuo.mutation.UpdatedAtCleared() {
		v := schedulecoach.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

func (scuo *ScheduleCoachUpdateOne) sqlSave(ctx context.Context) (_node *ScheduleCoach, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedulecoach.Table, schedulecoach.Columns, sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduleCoach.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedulecoach.FieldID)
		for _, f := range fields {
			if !schedulecoach.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedulecoach.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scuo.mutation.CreatedAtCleared() {
		_spec.ClearField(schedulecoach.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(schedulecoach.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(schedulecoach.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.Delete(); ok {
		_spec.SetField(schedulecoach.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedDelete(); ok {
		_spec.AddField(schedulecoach.FieldDelete, field.TypeInt64, value)
	}
	if scuo.mutation.DeleteCleared() {
		_spec.ClearField(schedulecoach.FieldDelete, field.TypeInt64)
	}
	if value, ok := scuo.mutation.CreatedID(); ok {
		_spec.SetField(schedulecoach.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(schedulecoach.FieldCreatedID, field.TypeInt64, value)
	}
	if scuo.mutation.CreatedIDCleared() {
		_spec.ClearField(schedulecoach.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.SetField(schedulecoach.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedStatus(); ok {
		_spec.AddField(schedulecoach.FieldStatus, field.TypeInt64, value)
	}
	if scuo.mutation.StatusCleared() {
		_spec.ClearField(schedulecoach.FieldStatus, field.TypeInt64)
	}
	if value, ok := scuo.mutation.VenueID(); ok {
		_spec.SetField(schedulecoach.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedVenueID(); ok {
		_spec.AddField(schedulecoach.FieldVenueID, field.TypeInt64, value)
	}
	if scuo.mutation.VenueIDCleared() {
		_spec.ClearField(schedulecoach.FieldVenueID, field.TypeInt64)
	}
	if value, ok := scuo.mutation.CoachID(); ok {
		_spec.SetField(schedulecoach.FieldCoachID, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedCoachID(); ok {
		_spec.AddField(schedulecoach.FieldCoachID, field.TypeInt64, value)
	}
	if scuo.mutation.CoachIDCleared() {
		_spec.ClearField(schedulecoach.FieldCoachID, field.TypeInt64)
	}
	if value, ok := scuo.mutation.PlaceID(); ok {
		_spec.SetField(schedulecoach.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedulecoach.FieldPlaceID, field.TypeInt64, value)
	}
	if scuo.mutation.PlaceIDCleared() {
		_spec.ClearField(schedulecoach.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := scuo.mutation.ProductID(); ok {
		_spec.SetField(schedulecoach.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedProductID(); ok {
		_spec.AddField(schedulecoach.FieldProductID, field.TypeInt64, value)
	}
	if scuo.mutation.ProductIDCleared() {
		_spec.ClearField(schedulecoach.FieldProductID, field.TypeInt64)
	}
	if value, ok := scuo.mutation.GetType(); ok {
		_spec.SetField(schedulecoach.FieldType, field.TypeString, value)
	}
	if scuo.mutation.TypeCleared() {
		_spec.ClearField(schedulecoach.FieldType, field.TypeString)
	}
	if value, ok := scuo.mutation.Date(); ok {
		_spec.SetField(schedulecoach.FieldDate, field.TypeTime, value)
	}
	if scuo.mutation.DateCleared() {
		_spec.ClearField(schedulecoach.FieldDate, field.TypeTime)
	}
	if value, ok := scuo.mutation.StartTime(); ok {
		_spec.SetField(schedulecoach.FieldStartTime, field.TypeTime, value)
	}
	if scuo.mutation.StartTimeCleared() {
		_spec.ClearField(schedulecoach.FieldStartTime, field.TypeTime)
	}
	if value, ok := scuo.mutation.EndTime(); ok {
		_spec.SetField(schedulecoach.FieldEndTime, field.TypeTime, value)
	}
	if scuo.mutation.EndTimeCleared() {
		_spec.ClearField(schedulecoach.FieldEndTime, field.TypeTime)
	}
	if value, ok := scuo.mutation.SignStartTime(); ok {
		_spec.SetField(schedulecoach.FieldSignStartTime, field.TypeTime, value)
	}
	if scuo.mutation.SignStartTimeCleared() {
		_spec.ClearField(schedulecoach.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := scuo.mutation.SignEndTime(); ok {
		_spec.SetField(schedulecoach.FieldSignEndTime, field.TypeTime, value)
	}
	if scuo.mutation.SignEndTimeCleared() {
		_spec.ClearField(schedulecoach.FieldSignEndTime, field.TypeTime)
	}
	if value, ok := scuo.mutation.CoachName(); ok {
		_spec.SetField(schedulecoach.FieldCoachName, field.TypeString, value)
	}
	if scuo.mutation.CoachNameCleared() {
		_spec.ClearField(schedulecoach.FieldCoachName, field.TypeString)
	}
	if value, ok := scuo.mutation.Remark(); ok {
		_spec.SetField(schedulecoach.FieldRemark, field.TypeString, value)
	}
	if scuo.mutation.RemarkCleared() {
		_spec.ClearField(schedulecoach.FieldRemark, field.TypeString)
	}
	if scuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulecoach.ScheduleTable,
			Columns: []string{schedulecoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedulecoach.ScheduleTable,
			Columns: []string{schedulecoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduleCoach{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedulecoach.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package venue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the venue type in the database.
	Label = "venue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldClassify holds the string denoting the classify field in the database.
	FieldClassify = "classify"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldAddressDetail holds the string denoting the address_detail field in the database.
	FieldAddressDetail = "address_detail"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPic holds the string denoting the pic field in the database.
	FieldPic = "pic"
	// FieldSeal holds the string denoting the seal field in the database.
	FieldSeal = "seal"
	// FieldInformation holds the string denoting the information field in the database.
	FieldInformation = "information"
	// EdgePlaces holds the string denoting the places edge name in mutations.
	EdgePlaces = "places"
	// EdgeVenueOrders holds the string denoting the venue_orders edge name in mutations.
	EdgeVenueOrders = "venue_orders"
	// EdgeVenueEntry holds the string denoting the venue_entry edge name in mutations.
	EdgeVenueEntry = "venue_entry"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the venue in the database.
	Table = "venue"
	// PlacesTable is the table that holds the places relation/edge.
	PlacesTable = "venue_place"
	// PlacesInverseTable is the table name for the VenuePlace entity.
	// It exists in this package in order to avoid circular dependency with the "venueplace" package.
	PlacesInverseTable = "venue_place"
	// PlacesColumn is the table column denoting the places relation/edge.
	PlacesColumn = "venue_id"
	// VenueOrdersTable is the table that holds the venue_orders relation/edge.
	VenueOrdersTable = "order"
	// VenueOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	VenueOrdersInverseTable = "order"
	// VenueOrdersColumn is the table column denoting the venue_orders relation/edge.
	VenueOrdersColumn = "venue_id"
	// VenueEntryTable is the table that holds the venue_entry relation/edge.
	VenueEntryTable = "entry_logs"
	// VenueEntryInverseTable is the table name for the EntryLogs entity.
	// It exists in this package in order to avoid circular dependency with the "entrylogs" package.
	VenueEntryInverseTable = "entry_logs"
	// VenueEntryColumn is the table column denoting the venue_entry relation/edge.
	VenueEntryColumn = "venue_id"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_venues"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "sys_users"
)

// Columns holds all SQL columns for venue fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDelete,
	FieldCreatedID,
	FieldStatus,
	FieldName,
	FieldType,
	FieldClassify,
	FieldAddress,
	FieldAddressDetail,
	FieldLatitude,
	FieldLongitude,
	FieldMobile,
	FieldEmail,
	FieldPic,
	FieldSeal,
	FieldInformation,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "venue_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete int64
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
)

// OrderOption defines the ordering options for the Venue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByAddressDetail orders the results by the address_detail field.
func ByAddressDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressDetail, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPic orders the results by the pic field.
func ByPic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPic, opts...).ToFunc()
}

// BySeal orders the results by the seal field.
func BySeal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeal, opts...).ToFunc()
}

// ByInformation orders the results by the information field.
func ByInformation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInformation, opts...).ToFunc()
}

// ByPlacesCount orders the results by places count.
func ByPlacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlacesStep(), opts...)
	}
}

// ByPlaces orders the results by places terms.
func ByPlaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVenueOrdersCount orders the results by venue_orders count.
func ByVenueOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVenueOrdersStep(), opts...)
	}
}

// ByVenueOrders orders the results by venue_orders terms.
func ByVenueOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVenueOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVenueEntryCount orders the results by venue_entry count.
func ByVenueEntryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVenueEntryStep(), opts...)
	}
}

// ByVenueEntry orders the results by venue_entry terms.
func ByVenueEntry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVenueEntryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlacesTable, PlacesColumn),
	)
}
func newVenueOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VenueOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VenueOrdersTable, VenueOrdersColumn),
	)
}
func newVenueEntryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VenueEntryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VenueEntryTable, VenueEntryColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/biz/dal/db/ent/internal"
	"saas/biz/dal/db/ent/messages"
	"saas/biz/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessagesUpdate is the builder for updating Messages entities.
type MessagesUpdate struct {
	config
	hooks    []Hook
	mutation *MessagesMutation
}

// Where appends a list predicates to the MessagesUpdate builder.
func (mu *MessagesUpdate) Where(ps ...predicate.Messages) *MessagesUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessagesUpdate) SetUpdatedAt(t time.Time) *MessagesUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MessagesUpdate) ClearUpdatedAt() *MessagesUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetDelete sets the "delete" field.
func (mu *MessagesUpdate) SetDelete(i int64) *MessagesUpdate {
	mu.mutation.ResetDelete()
	mu.mutation.SetDelete(i)
	return mu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableDelete(i *int64) *MessagesUpdate {
	if i != nil {
		mu.SetDelete(*i)
	}
	return mu
}

// AddDelete adds i to the "delete" field.
func (mu *MessagesUpdate) AddDelete(i int64) *MessagesUpdate {
	mu.mutation.AddDelete(i)
	return mu
}

// ClearDelete clears the value of the "delete" field.
func (mu *MessagesUpdate) ClearDelete() *MessagesUpdate {
	mu.mutation.ClearDelete()
	return mu
}

// SetCreatedID sets the "created_id" field.
func (mu *MessagesUpdate) SetCreatedID(i int64) *MessagesUpdate {
	mu.mutation.ResetCreatedID()
	mu.mutation.SetCreatedID(i)
	return mu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableCreatedID(i *int64) *MessagesUpdate {
	if i != nil {
		mu.SetCreatedID(*i)
	}
	return mu
}

// AddCreatedID adds i to the "created_id" field.
func (mu *MessagesUpdate) AddCreatedID(i int64) *MessagesUpdate {
	mu.mutation.AddCreatedID(i)
	return mu
}

// ClearCreatedID clears the value of the "created_id" field.
func (mu *MessagesUpdate) ClearCreatedID() *MessagesUpdate {
	mu.mutation.ClearCreatedID()
	return mu
}

// SetType sets the "type" field.
func (mu *MessagesUpdate) SetType(s string) *MessagesUpdate {
	mu.mutation.SetType(s)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableType(s *string) *MessagesUpdate {
	if s != nil {
		mu.SetType(*s)
	}
	return mu
}

// SetToUserID sets the "to_user_id" field.
func (mu *MessagesUpdate) SetToUserID(s string) *MessagesUpdate {
	mu.mutation.SetToUserID(s)
	return mu
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableToUserID(s *string) *MessagesUpdate {
	if s != nil {
		mu.SetToUserID(*s)
	}
	return mu
}

// SetFromUserID sets the "from_user_id" field.
func (mu *MessagesUpdate) SetFromUserID(s string) *MessagesUpdate {
	mu.mutation.SetFromUserID(s)
	return mu
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableFromUserID(s *string) *MessagesUpdate {
	if s != nil {
		mu.SetFromUserID(*s)
	}
	return mu
}

// SetContent sets the "content" field.
func (mu *MessagesUpdate) SetContent(s string) *MessagesUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableContent(s *string) *MessagesUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// Mutation returns the MessagesMutation object of the builder.
func (mu *MessagesUpdate) Mutation() *MessagesMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessagesUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessagesUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessagesUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessagesUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessagesUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := messages.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MessagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(messages.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(messages.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(messages.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Delete(); ok {
		_spec.SetField(messages.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedDelete(); ok {
		_spec.AddField(messages.FieldDelete, field.TypeInt64, value)
	}
	if mu.mutation.DeleteCleared() {
		_spec.ClearField(messages.FieldDelete, field.TypeInt64)
	}
	if value, ok := mu.mutation.CreatedID(); ok {
		_spec.SetField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedID(); ok {
		_spec.AddField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if mu.mutation.CreatedIDCleared() {
		_spec.ClearField(messages.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(messages.FieldType, field.TypeString, value)
	}
	if value, ok := mu.mutation.ToUserID(); ok {
		_spec.SetField(messages.FieldToUserID, field.TypeString, value)
	}
	if value, ok := mu.mutation.FromUserID(); ok {
		_spec.SetField(messages.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(messages.FieldContent, field.TypeString, value)
	}
	_spec.Node.Schema = mu.schemaConfig.Messages
	ctx = internal.NewSchemaConfigContext(ctx, mu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessagesUpdateOne is the builder for updating a single Messages entity.
type MessagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessagesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessagesUpdateOne) SetUpdatedAt(t time.Time) *MessagesUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MessagesUpdateOne) ClearUpdatedAt() *MessagesUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetDelete sets the "delete" field.
func (muo *MessagesUpdateOne) SetDelete(i int64) *MessagesUpdateOne {
	muo.mutation.ResetDelete()
	muo.mutation.SetDelete(i)
	return muo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableDelete(i *int64) *MessagesUpdateOne {
	if i != nil {
		muo.SetDelete(*i)
	}
	return muo
}

// AddDelete adds i to the "delete" field.
func (muo *MessagesUpdateOne) AddDelete(i int64) *MessagesUpdateOne {
	muo.mutation.AddDelete(i)
	return muo
}

// ClearDelete clears the value of the "delete" field.
func (muo *MessagesUpdateOne) ClearDelete() *MessagesUpdateOne {
	muo.mutation.ClearDelete()
	return muo
}

// SetCreatedID sets the "created_id" field.
func (muo *MessagesUpdateOne) SetCreatedID(i int64) *MessagesUpdateOne {
	muo.mutation.ResetCreatedID()
	muo.mutation.SetCreatedID(i)
	return muo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableCreatedID(i *int64) *MessagesUpdateOne {
	if i != nil {
		muo.SetCreatedID(*i)
	}
	return muo
}

// AddCreatedID adds i to the "created_id" field.
func (muo *MessagesUpdateOne) AddCreatedID(i int64) *MessagesUpdateOne {
	muo.mutation.AddCreatedID(i)
	return muo
}

// ClearCreatedID clears the value of the "created_id" field.
func (muo *MessagesUpdateOne) ClearCreatedID() *MessagesUpdateOne {
	muo.mutation.ClearCreatedID()
	return muo
}

// SetType sets the "type" field.
func (muo *MessagesUpdateOne) SetType(s string) *MessagesUpdateOne {
	muo.mutation.SetType(s)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableType(s *string) *MessagesUpdateOne {
	if s != nil {
		muo.SetType(*s)
	}
	return muo
}

// SetToUserID sets the "to_user_id" field.
func (muo *MessagesUpdateOne) SetToUserID(s string) *MessagesUpdateOne {
	muo.mutation.SetToUserID(s)
	return muo
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableToUserID(s *string) *MessagesUpdateOne {
	if s != nil {
		muo.SetToUserID(*s)
	}
	return muo
}

// SetFromUserID sets the "from_user_id" field.
func (muo *MessagesUpdateOne) SetFromUserID(s string) *MessagesUpdateOne {
	muo.mutation.SetFromUserID(s)
	return muo
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableFromUserID(s *string) *MessagesUpdateOne {
	if s != nil {
		muo.SetFromUserID(*s)
	}
	return muo
}

// SetContent sets the "content" field.
func (muo *MessagesUpdateOne) SetContent(s string) *MessagesUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableContent(s *string) *MessagesUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// Mutation returns the MessagesMutation object of the builder.
func (muo *MessagesUpdateOne) Mutation() *MessagesMutation {
	return muo.mutation
}

// Where appends a list predicates to the MessagesUpdate builder.
func (muo *MessagesUpdateOne) Where(ps ...predicate.Messages) *MessagesUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessagesUpdateOne) Select(field string, fields ...string) *MessagesUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Messages entity.
func (muo *MessagesUpdateOne) Save(ctx context.Context) (*Messages, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessagesUpdateOne) SaveX(ctx context.Context) *Messages {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessagesUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessagesUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessagesUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := messages.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MessagesUpdateOne) sqlSave(ctx context.Context) (_node *Messages, err error) {
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Messages.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messages.FieldID)
		for _, f := range fields {
			if !messages.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messages.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(messages.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(messages.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(messages.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Delete(); ok {
		_spec.SetField(messages.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedDelete(); ok {
		_spec.AddField(messages.FieldDelete, field.TypeInt64, value)
	}
	if muo.mutation.DeleteCleared() {
		_spec.ClearField(messages.FieldDelete, field.TypeInt64)
	}
	if value, ok := muo.mutation.CreatedID(); ok {
		_spec.SetField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedID(); ok {
		_spec.AddField(messages.FieldCreatedID, field.TypeInt64, value)
	}
	if muo.mutation.CreatedIDCleared() {
		_spec.ClearField(messages.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(messages.FieldType, field.TypeString, value)
	}
	if value, ok := muo.mutation.ToUserID(); ok {
		_spec.SetField(messages.FieldToUserID, field.TypeString, value)
	}
	if value, ok := muo.mutation.FromUserID(); ok {
		_spec.SetField(messages.FieldFromUserID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(messages.FieldContent, field.TypeString, value)
	}
	_spec.Node.Schema = muo.schemaConfig.Messages
	ctx = internal.NewSchemaConfigContext(ctx, muo.schemaConfig)
	_node = &Messages{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

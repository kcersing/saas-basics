// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package community

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"saas/idl_gen/model/base"
)

type ParticipantFinishReq struct {
	CommunityId int64   `thrift:"communityId,1,optional" form:"communityId" json:"communityId" query:"communityId"`
	MemberId    []int64 `thrift:"memberId,2,optional" form:"memberId" json:"memberId" query:"memberId"`
}

func NewParticipantFinishReq() *ParticipantFinishReq {
	return &ParticipantFinishReq{

		CommunityId: 0,
	}
}

func (p *ParticipantFinishReq) InitDefault() {
	p.CommunityId = 0
}

var ParticipantFinishReq_CommunityId_DEFAULT int64 = 0

func (p *ParticipantFinishReq) GetCommunityId() (v int64) {
	if !p.IsSetCommunityId() {
		return ParticipantFinishReq_CommunityId_DEFAULT
	}
	return p.CommunityId
}

var ParticipantFinishReq_MemberId_DEFAULT []int64

func (p *ParticipantFinishReq) GetMemberId() (v []int64) {
	if !p.IsSetMemberId() {
		return ParticipantFinishReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var fieldIDToName_ParticipantFinishReq = map[int16]string{
	1: "communityId",
	2: "memberId",
}

func (p *ParticipantFinishReq) IsSetCommunityId() bool {
	return p.CommunityId != ParticipantFinishReq_CommunityId_DEFAULT
}

func (p *ParticipantFinishReq) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *ParticipantFinishReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParticipantFinishReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParticipantFinishReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CommunityId = _field
	return nil
}
func (p *ParticipantFinishReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberId = _field
	return nil
}

func (p *ParticipantFinishReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantFinishReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParticipantFinishReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommunityId() {
		if err = oprot.WriteFieldBegin("communityId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CommunityId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParticipantFinishReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberId)); err != nil {
			return err
		}
		for _, v := range p.MemberId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParticipantFinishReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParticipantFinishReq(%+v)", *p)

}

type CommunityListReq struct {
	Page        int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize    int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name        string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	SignStartAt string `thrift:"signStartAt,4,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt   string `thrift:"signEndAt,5,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	StartAt     string `thrift:"startAt,6,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt       string `thrift:"endAt,7,optional" form:"endAt" json:"endAt" query:"endAt"`
	Condition   int64  `thrift:"condition,8,optional" form:"condition" json:"condition" query:"condition"`
}

func NewCommunityListReq() *CommunityListReq {
	return &CommunityListReq{

		Page:        1,
		PageSize:    100,
		Name:        "",
		SignStartAt: "",
		SignEndAt:   "",
		StartAt:     "",
		EndAt:       "",
		Condition:   0,
	}
}

func (p *CommunityListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.StartAt = ""
	p.EndAt = ""
	p.Condition = 0
}

var CommunityListReq_Page_DEFAULT int64 = 1

func (p *CommunityListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return CommunityListReq_Page_DEFAULT
	}
	return p.Page
}

var CommunityListReq_PageSize_DEFAULT int64 = 100

func (p *CommunityListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return CommunityListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var CommunityListReq_Name_DEFAULT string = ""

func (p *CommunityListReq) GetName() (v string) {
	if !p.IsSetName() {
		return CommunityListReq_Name_DEFAULT
	}
	return p.Name
}

var CommunityListReq_SignStartAt_DEFAULT string = ""

func (p *CommunityListReq) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return CommunityListReq_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var CommunityListReq_SignEndAt_DEFAULT string = ""

func (p *CommunityListReq) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return CommunityListReq_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var CommunityListReq_StartAt_DEFAULT string = ""

func (p *CommunityListReq) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return CommunityListReq_StartAt_DEFAULT
	}
	return p.StartAt
}

var CommunityListReq_EndAt_DEFAULT string = ""

func (p *CommunityListReq) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return CommunityListReq_EndAt_DEFAULT
	}
	return p.EndAt
}

var CommunityListReq_Condition_DEFAULT int64 = 0

func (p *CommunityListReq) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return CommunityListReq_Condition_DEFAULT
	}
	return p.Condition
}

var fieldIDToName_CommunityListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "signStartAt",
	5: "signEndAt",
	6: "startAt",
	7: "endAt",
	8: "condition",
}

func (p *CommunityListReq) IsSetPage() bool {
	return p.Page != CommunityListReq_Page_DEFAULT
}

func (p *CommunityListReq) IsSetPageSize() bool {
	return p.PageSize != CommunityListReq_PageSize_DEFAULT
}

func (p *CommunityListReq) IsSetName() bool {
	return p.Name != CommunityListReq_Name_DEFAULT
}

func (p *CommunityListReq) IsSetSignStartAt() bool {
	return p.SignStartAt != CommunityListReq_SignStartAt_DEFAULT
}

func (p *CommunityListReq) IsSetSignEndAt() bool {
	return p.SignEndAt != CommunityListReq_SignEndAt_DEFAULT
}

func (p *CommunityListReq) IsSetStartAt() bool {
	return p.StartAt != CommunityListReq_StartAt_DEFAULT
}

func (p *CommunityListReq) IsSetEndAt() bool {
	return p.EndAt != CommunityListReq_EndAt_DEFAULT
}

func (p *CommunityListReq) IsSetCondition() bool {
	return p.Condition != CommunityListReq_Condition_DEFAULT
}

func (p *CommunityListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *CommunityListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *CommunityListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CommunityListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *CommunityListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *CommunityListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *CommunityListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *CommunityListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}

func (p *CommunityListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommunityListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CommunityListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CommunityListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CommunityListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CommunityListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CommunityListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CommunityListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityListReq(%+v)", *p)

}

type ParticipantListReq struct {
	Page        int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize    int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name        string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Mobile      string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Sn          string `thrift:"sn,5,optional" form:"sn" json:"sn" query:"sn"`
	CommunityId int64  `thrift:"communityId,6,optional" form:"communityId" json:"communityId" query:"communityId"`
}

func NewParticipantListReq() *ParticipantListReq {
	return &ParticipantListReq{

		Page:        1,
		PageSize:    100,
		Name:        "",
		Mobile:      "",
		Sn:          "",
		CommunityId: 0,
	}
}

func (p *ParticipantListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Mobile = ""
	p.Sn = ""
	p.CommunityId = 0
}

var ParticipantListReq_Page_DEFAULT int64 = 1

func (p *ParticipantListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ParticipantListReq_Page_DEFAULT
	}
	return p.Page
}

var ParticipantListReq_PageSize_DEFAULT int64 = 100

func (p *ParticipantListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ParticipantListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var ParticipantListReq_Name_DEFAULT string = ""

func (p *ParticipantListReq) GetName() (v string) {
	if !p.IsSetName() {
		return ParticipantListReq_Name_DEFAULT
	}
	return p.Name
}

var ParticipantListReq_Mobile_DEFAULT string = ""

func (p *ParticipantListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return ParticipantListReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var ParticipantListReq_Sn_DEFAULT string = ""

func (p *ParticipantListReq) GetSn() (v string) {
	if !p.IsSetSn() {
		return ParticipantListReq_Sn_DEFAULT
	}
	return p.Sn
}

var ParticipantListReq_CommunityId_DEFAULT int64 = 0

func (p *ParticipantListReq) GetCommunityId() (v int64) {
	if !p.IsSetCommunityId() {
		return ParticipantListReq_CommunityId_DEFAULT
	}
	return p.CommunityId
}

var fieldIDToName_ParticipantListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "mobile",
	5: "sn",
	6: "communityId",
}

func (p *ParticipantListReq) IsSetPage() bool {
	return p.Page != ParticipantListReq_Page_DEFAULT
}

func (p *ParticipantListReq) IsSetPageSize() bool {
	return p.PageSize != ParticipantListReq_PageSize_DEFAULT
}

func (p *ParticipantListReq) IsSetName() bool {
	return p.Name != ParticipantListReq_Name_DEFAULT
}

func (p *ParticipantListReq) IsSetMobile() bool {
	return p.Mobile != ParticipantListReq_Mobile_DEFAULT
}

func (p *ParticipantListReq) IsSetSn() bool {
	return p.Sn != ParticipantListReq_Sn_DEFAULT
}

func (p *ParticipantListReq) IsSetCommunityId() bool {
	return p.CommunityId != ParticipantListReq_CommunityId_DEFAULT
}

func (p *ParticipantListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParticipantListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParticipantListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ParticipantListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *ParticipantListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ParticipantListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ParticipantListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sn = _field
	return nil
}
func (p *ParticipantListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CommunityId = _field
	return nil
}

func (p *ParticipantListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParticipantListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParticipantListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParticipantListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ParticipantListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ParticipantListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSn() {
		if err = oprot.WriteFieldBegin("sn", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ParticipantListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommunityId() {
		if err = oprot.WriteFieldBegin("communityId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CommunityId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ParticipantListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParticipantListReq(%+v)", *p)

}

type ParticipantInfo struct {
	ID          int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	CommunityId int64  `thrift:"communityId,2,optional" form:"communityId" json:"communityId" query:"communityId"`
	Fields      string `thrift:"fields,3,optional" form:"fields" json:"fields" query:"fields"`
	Name        string `thrift:"name,4,optional" form:"name" json:"name" query:"name"`
	Mobile      string `thrift:"mobile,5,optional" form:"mobile" json:"mobile" query:"mobile"`
	CreatedAt   string `thrift:"createdAt,6,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	OrderSn     string `thrift:"orderSn,8,optional" form:"orderSn" json:"orderSn" query:"orderSn"`
	//    9:  optional double fee=0 (api.raw = "fee")
	Status int64  `thrift:"status,10,optional" form:"status" json:"status" query:"status"`
	Device string `thrift:"device,11,optional" form:"device" json:"device" query:"device"`
}

func NewParticipantInfo() *ParticipantInfo {
	return &ParticipantInfo{

		ID:          0,
		CommunityId: 0,
		Fields:      "",
		Name:        "",
		Mobile:      "",
		CreatedAt:   "",
		OrderSn:     "",
		Status:      1,
		Device:      "",
	}
}

func (p *ParticipantInfo) InitDefault() {
	p.ID = 0
	p.CommunityId = 0
	p.Fields = ""
	p.Name = ""
	p.Mobile = ""
	p.CreatedAt = ""
	p.OrderSn = ""
	p.Status = 1
	p.Device = ""
}

var ParticipantInfo_ID_DEFAULT int64 = 0

func (p *ParticipantInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ParticipantInfo_ID_DEFAULT
	}
	return p.ID
}

var ParticipantInfo_CommunityId_DEFAULT int64 = 0

func (p *ParticipantInfo) GetCommunityId() (v int64) {
	if !p.IsSetCommunityId() {
		return ParticipantInfo_CommunityId_DEFAULT
	}
	return p.CommunityId
}

var ParticipantInfo_Fields_DEFAULT string = ""

func (p *ParticipantInfo) GetFields() (v string) {
	if !p.IsSetFields() {
		return ParticipantInfo_Fields_DEFAULT
	}
	return p.Fields
}

var ParticipantInfo_Name_DEFAULT string = ""

func (p *ParticipantInfo) GetName() (v string) {
	if !p.IsSetName() {
		return ParticipantInfo_Name_DEFAULT
	}
	return p.Name
}

var ParticipantInfo_Mobile_DEFAULT string = ""

func (p *ParticipantInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return ParticipantInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var ParticipantInfo_CreatedAt_DEFAULT string = ""

func (p *ParticipantInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ParticipantInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var ParticipantInfo_OrderSn_DEFAULT string = ""

func (p *ParticipantInfo) GetOrderSn() (v string) {
	if !p.IsSetOrderSn() {
		return ParticipantInfo_OrderSn_DEFAULT
	}
	return p.OrderSn
}

var ParticipantInfo_Status_DEFAULT int64 = 1

func (p *ParticipantInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return ParticipantInfo_Status_DEFAULT
	}
	return p.Status
}

var ParticipantInfo_Device_DEFAULT string = ""

func (p *ParticipantInfo) GetDevice() (v string) {
	if !p.IsSetDevice() {
		return ParticipantInfo_Device_DEFAULT
	}
	return p.Device
}

var fieldIDToName_ParticipantInfo = map[int16]string{
	1:  "id",
	2:  "communityId",
	3:  "fields",
	4:  "name",
	5:  "mobile",
	6:  "createdAt",
	8:  "orderSn",
	10: "status",
	11: "device",
}

func (p *ParticipantInfo) IsSetID() bool {
	return p.ID != ParticipantInfo_ID_DEFAULT
}

func (p *ParticipantInfo) IsSetCommunityId() bool {
	return p.CommunityId != ParticipantInfo_CommunityId_DEFAULT
}

func (p *ParticipantInfo) IsSetFields() bool {
	return p.Fields != ParticipantInfo_Fields_DEFAULT
}

func (p *ParticipantInfo) IsSetName() bool {
	return p.Name != ParticipantInfo_Name_DEFAULT
}

func (p *ParticipantInfo) IsSetMobile() bool {
	return p.Mobile != ParticipantInfo_Mobile_DEFAULT
}

func (p *ParticipantInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != ParticipantInfo_CreatedAt_DEFAULT
}

func (p *ParticipantInfo) IsSetOrderSn() bool {
	return p.OrderSn != ParticipantInfo_OrderSn_DEFAULT
}

func (p *ParticipantInfo) IsSetStatus() bool {
	return p.Status != ParticipantInfo_Status_DEFAULT
}

func (p *ParticipantInfo) IsSetDevice() bool {
	return p.Device != ParticipantInfo_Device_DEFAULT
}

func (p *ParticipantInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParticipantInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParticipantInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ParticipantInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CommunityId = _field
	return nil
}
func (p *ParticipantInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Fields = _field
	return nil
}
func (p *ParticipantInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ParticipantInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ParticipantInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ParticipantInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderSn = _field
	return nil
}
func (p *ParticipantInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *ParticipantInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Device = _field
	return nil
}

func (p *ParticipantInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParticipantInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParticipantInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommunityId() {
		if err = oprot.WriteFieldBegin("communityId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CommunityId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParticipantInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Fields); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ParticipantInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ParticipantInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ParticipantInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ParticipantInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderSn() {
		if err = oprot.WriteFieldBegin("orderSn", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.OrderSn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ParticipantInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ParticipantInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDevice() {
		if err = oprot.WriteFieldBegin("device", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Device); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ParticipantInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParticipantInfo(%+v)", *p)

}

type CommunityInfo struct {
	ID          int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name        string `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	SignNumber  int64  `thrift:"signNumber,3,optional" form:"signNumber" json:"signNumber" query:"signNumber"`
	SignStartAt string `thrift:"signStartAt,4,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt   string `thrift:"signEndAt,5,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	Number      int64  `thrift:"number,6,optional" form:"number" json:"number" query:"number"`
	StartAt     string `thrift:"startAt,7,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt       string `thrift:"endAt,8,optional" form:"endAt" json:"endAt" query:"endAt"`
	Pic         string `thrift:"pic,9,optional" form:"pic" json:"pic" query:"pic"`
	Sponsor     string `thrift:"sponsor,10,optional" form:"sponsor" json:"sponsor" query:"sponsor"`
	//    11:  optional double fee=0 (api.raw = "fee")
	IsCancel   int64  `thrift:"isCancel,12,optional" form:"isCancel" json:"isCancel" query:"isCancel"`
	CancelTime int64  `thrift:"cancelTime,13,optional" form:"cancelTime" json:"cancelTime" query:"cancelTime"`
	Detail     string `thrift:"detail,14,optional" form:"detail" json:"detail" query:"detail"`
	SignFields string `thrift:"signFields,15,optional" form:"signFields" json:"signFields" query:"signFields"`
	CreatedAt  string `thrift:"createdAt,16,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt  string `thrift:"updatedAt,17,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Condition  int64  `thrift:"condition,18,optional" form:"condition" json:"condition" query:"condition"`
	//    19:  optional i64 isFee=0 (api.raw = "isFee")
	CreatedId   int64  `thrift:"createdId,20,optional" form:"createdId" json:"createdId" query:"createdId"`
	CreatedName string `thrift:"createdName,21,optional" form:"createdName" json:"createdName" query:"createdName"`
	IsShow      int64  `thrift:"isShow,22,optional" form:"isShow" json:"isShow" query:"isShow"`
}

func NewCommunityInfo() *CommunityInfo {
	return &CommunityInfo{

		ID:          0,
		Name:        "",
		SignNumber:  0,
		SignStartAt: "",
		SignEndAt:   "",
		Number:      0,
		StartAt:     "",
		EndAt:       "",
		Pic:         "",
		Sponsor:     "",
		IsCancel:    0,
		CancelTime:  0,
		Detail:      "",
		SignFields:  "",
		CreatedAt:   "",
		UpdatedAt:   "",
		Condition:   0,
		CreatedId:   0,
		CreatedName: "0",
		IsShow:      1,
	}
}

func (p *CommunityInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.SignNumber = 0
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.Number = 0
	p.StartAt = ""
	p.EndAt = ""
	p.Pic = ""
	p.Sponsor = ""
	p.IsCancel = 0
	p.CancelTime = 0
	p.Detail = ""
	p.SignFields = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Condition = 0
	p.CreatedId = 0
	p.CreatedName = "0"
	p.IsShow = 1
}

var CommunityInfo_ID_DEFAULT int64 = 0

func (p *CommunityInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return CommunityInfo_ID_DEFAULT
	}
	return p.ID
}

var CommunityInfo_Name_DEFAULT string = ""

func (p *CommunityInfo) GetName() (v string) {
	if !p.IsSetName() {
		return CommunityInfo_Name_DEFAULT
	}
	return p.Name
}

var CommunityInfo_SignNumber_DEFAULT int64 = 0

func (p *CommunityInfo) GetSignNumber() (v int64) {
	if !p.IsSetSignNumber() {
		return CommunityInfo_SignNumber_DEFAULT
	}
	return p.SignNumber
}

var CommunityInfo_SignStartAt_DEFAULT string = ""

func (p *CommunityInfo) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return CommunityInfo_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var CommunityInfo_SignEndAt_DEFAULT string = ""

func (p *CommunityInfo) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return CommunityInfo_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var CommunityInfo_Number_DEFAULT int64 = 0

func (p *CommunityInfo) GetNumber() (v int64) {
	if !p.IsSetNumber() {
		return CommunityInfo_Number_DEFAULT
	}
	return p.Number
}

var CommunityInfo_StartAt_DEFAULT string = ""

func (p *CommunityInfo) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return CommunityInfo_StartAt_DEFAULT
	}
	return p.StartAt
}

var CommunityInfo_EndAt_DEFAULT string = ""

func (p *CommunityInfo) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return CommunityInfo_EndAt_DEFAULT
	}
	return p.EndAt
}

var CommunityInfo_Pic_DEFAULT string = ""

func (p *CommunityInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return CommunityInfo_Pic_DEFAULT
	}
	return p.Pic
}

var CommunityInfo_Sponsor_DEFAULT string = ""

func (p *CommunityInfo) GetSponsor() (v string) {
	if !p.IsSetSponsor() {
		return CommunityInfo_Sponsor_DEFAULT
	}
	return p.Sponsor
}

var CommunityInfo_IsCancel_DEFAULT int64 = 0

func (p *CommunityInfo) GetIsCancel() (v int64) {
	if !p.IsSetIsCancel() {
		return CommunityInfo_IsCancel_DEFAULT
	}
	return p.IsCancel
}

var CommunityInfo_CancelTime_DEFAULT int64 = 0

func (p *CommunityInfo) GetCancelTime() (v int64) {
	if !p.IsSetCancelTime() {
		return CommunityInfo_CancelTime_DEFAULT
	}
	return p.CancelTime
}

var CommunityInfo_Detail_DEFAULT string = ""

func (p *CommunityInfo) GetDetail() (v string) {
	if !p.IsSetDetail() {
		return CommunityInfo_Detail_DEFAULT
	}
	return p.Detail
}

var CommunityInfo_SignFields_DEFAULT string = ""

func (p *CommunityInfo) GetSignFields() (v string) {
	if !p.IsSetSignFields() {
		return CommunityInfo_SignFields_DEFAULT
	}
	return p.SignFields
}

var CommunityInfo_CreatedAt_DEFAULT string = ""

func (p *CommunityInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return CommunityInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var CommunityInfo_UpdatedAt_DEFAULT string = ""

func (p *CommunityInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return CommunityInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var CommunityInfo_Condition_DEFAULT int64 = 0

func (p *CommunityInfo) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return CommunityInfo_Condition_DEFAULT
	}
	return p.Condition
}

var CommunityInfo_CreatedId_DEFAULT int64 = 0

func (p *CommunityInfo) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return CommunityInfo_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var CommunityInfo_CreatedName_DEFAULT string = "0"

func (p *CommunityInfo) GetCreatedName() (v string) {
	if !p.IsSetCreatedName() {
		return CommunityInfo_CreatedName_DEFAULT
	}
	return p.CreatedName
}

var CommunityInfo_IsShow_DEFAULT int64 = 1

func (p *CommunityInfo) GetIsShow() (v int64) {
	if !p.IsSetIsShow() {
		return CommunityInfo_IsShow_DEFAULT
	}
	return p.IsShow
}

var fieldIDToName_CommunityInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "signNumber",
	4:  "signStartAt",
	5:  "signEndAt",
	6:  "number",
	7:  "startAt",
	8:  "endAt",
	9:  "pic",
	10: "sponsor",
	12: "isCancel",
	13: "cancelTime",
	14: "detail",
	15: "signFields",
	16: "createdAt",
	17: "updatedAt",
	18: "condition",
	20: "createdId",
	21: "createdName",
	22: "isShow",
}

func (p *CommunityInfo) IsSetID() bool {
	return p.ID != CommunityInfo_ID_DEFAULT
}

func (p *CommunityInfo) IsSetName() bool {
	return p.Name != CommunityInfo_Name_DEFAULT
}

func (p *CommunityInfo) IsSetSignNumber() bool {
	return p.SignNumber != CommunityInfo_SignNumber_DEFAULT
}

func (p *CommunityInfo) IsSetSignStartAt() bool {
	return p.SignStartAt != CommunityInfo_SignStartAt_DEFAULT
}

func (p *CommunityInfo) IsSetSignEndAt() bool {
	return p.SignEndAt != CommunityInfo_SignEndAt_DEFAULT
}

func (p *CommunityInfo) IsSetNumber() bool {
	return p.Number != CommunityInfo_Number_DEFAULT
}

func (p *CommunityInfo) IsSetStartAt() bool {
	return p.StartAt != CommunityInfo_StartAt_DEFAULT
}

func (p *CommunityInfo) IsSetEndAt() bool {
	return p.EndAt != CommunityInfo_EndAt_DEFAULT
}

func (p *CommunityInfo) IsSetPic() bool {
	return p.Pic != CommunityInfo_Pic_DEFAULT
}

func (p *CommunityInfo) IsSetSponsor() bool {
	return p.Sponsor != CommunityInfo_Sponsor_DEFAULT
}

func (p *CommunityInfo) IsSetIsCancel() bool {
	return p.IsCancel != CommunityInfo_IsCancel_DEFAULT
}

func (p *CommunityInfo) IsSetCancelTime() bool {
	return p.CancelTime != CommunityInfo_CancelTime_DEFAULT
}

func (p *CommunityInfo) IsSetDetail() bool {
	return p.Detail != CommunityInfo_Detail_DEFAULT
}

func (p *CommunityInfo) IsSetSignFields() bool {
	return p.SignFields != CommunityInfo_SignFields_DEFAULT
}

func (p *CommunityInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != CommunityInfo_CreatedAt_DEFAULT
}

func (p *CommunityInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != CommunityInfo_UpdatedAt_DEFAULT
}

func (p *CommunityInfo) IsSetCondition() bool {
	return p.Condition != CommunityInfo_Condition_DEFAULT
}

func (p *CommunityInfo) IsSetCreatedId() bool {
	return p.CreatedId != CommunityInfo_CreatedId_DEFAULT
}

func (p *CommunityInfo) IsSetCreatedName() bool {
	return p.CreatedName != CommunityInfo_CreatedName_DEFAULT
}

func (p *CommunityInfo) IsSetIsShow() bool {
	return p.IsShow != CommunityInfo_IsShow_DEFAULT
}

func (p *CommunityInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *CommunityInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CommunityInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignNumber = _field
	return nil
}
func (p *CommunityInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *CommunityInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *CommunityInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Number = _field
	return nil
}
func (p *CommunityInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *CommunityInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *CommunityInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pic = _field
	return nil
}
func (p *CommunityInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sponsor = _field
	return nil
}
func (p *CommunityInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCancel = _field
	return nil
}
func (p *CommunityInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CancelTime = _field
	return nil
}
func (p *CommunityInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Detail = _field
	return nil
}
func (p *CommunityInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignFields = _field
	return nil
}
func (p *CommunityInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *CommunityInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *CommunityInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}
func (p *CommunityInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *CommunityInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedName = _field
	return nil
}
func (p *CommunityInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsShow = _field
	return nil
}

func (p *CommunityInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommunityInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignNumber() {
		if err = oprot.WriteFieldBegin("signNumber", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.SignNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CommunityInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CommunityInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CommunityInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err = oprot.WriteFieldBegin("number", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Number); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CommunityInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CommunityInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CommunityInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CommunityInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsor() {
		if err = oprot.WriteFieldBegin("sponsor", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sponsor); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CommunityInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCancel() {
		if err = oprot.WriteFieldBegin("isCancel", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsCancel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CommunityInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelTime() {
		if err = oprot.WriteFieldBegin("cancelTime", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CancelTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CommunityInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Detail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CommunityInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignFields() {
		if err = oprot.WriteFieldBegin("signFields", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignFields); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CommunityInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CommunityInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CommunityInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *CommunityInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *CommunityInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedName() {
		if err = oprot.WriteFieldBegin("createdName", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *CommunityInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsShow() {
		if err = oprot.WriteFieldBegin("isShow", thrift.I64, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsShow); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *CommunityInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityInfo(%+v)", *p)

}

type CommunityService interface {
	CreateCommunity(ctx context.Context, req *CommunityInfo) (r *base.NilResponse, err error)

	UpdateCommunity(ctx context.Context, req *CommunityInfo) (r *base.NilResponse, err error)

	CommunityInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	CommunityList(ctx context.Context, req *CommunityListReq) (r *base.NilResponse, err error)

	UpdateCommunityStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	UpdateCommunityShow(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	CreateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error)

	UpdateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error)

	CommunityParticipantInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	ParticipantListList(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error)

	UpdateParticipantStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	ParticipantListListExport(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error)

	PromotionalLinks(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	DelCommunity(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	ParticipantFinish(ctx context.Context, req *ParticipantFinishReq) (r *base.NilResponse, err error)
}

type CommunityServiceClient struct {
	c thrift.TClient
}

func NewCommunityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CommunityServiceClient {
	return &CommunityServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCommunityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CommunityServiceClient {
	return &CommunityServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCommunityServiceClient(c thrift.TClient) *CommunityServiceClient {
	return &CommunityServiceClient{
		c: c,
	}
}

func (p *CommunityServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CommunityServiceClient) CreateCommunity(ctx context.Context, req *CommunityInfo) (r *base.NilResponse, err error) {
	var _args CommunityServiceCreateCommunityArgs
	_args.Req = req
	var _result CommunityServiceCreateCommunityResult
	if err = p.Client_().Call(ctx, "CreateCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) UpdateCommunity(ctx context.Context, req *CommunityInfo) (r *base.NilResponse, err error) {
	var _args CommunityServiceUpdateCommunityArgs
	_args.Req = req
	var _result CommunityServiceUpdateCommunityResult
	if err = p.Client_().Call(ctx, "UpdateCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) CommunityInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceCommunityInfoArgs
	_args.Req = req
	var _result CommunityServiceCommunityInfoResult
	if err = p.Client_().Call(ctx, "CommunityInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) CommunityList(ctx context.Context, req *CommunityListReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceCommunityListArgs
	_args.Req = req
	var _result CommunityServiceCommunityListResult
	if err = p.Client_().Call(ctx, "CommunityList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) UpdateCommunityStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceUpdateCommunityStatusArgs
	_args.Req = req
	var _result CommunityServiceUpdateCommunityStatusResult
	if err = p.Client_().Call(ctx, "UpdateCommunityStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) UpdateCommunityShow(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceUpdateCommunityShowArgs
	_args.Req = req
	var _result CommunityServiceUpdateCommunityShowResult
	if err = p.Client_().Call(ctx, "UpdateCommunityShow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) CreateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error) {
	var _args CommunityServiceCreateParticipantArgs
	_args.Req = req
	var _result CommunityServiceCreateParticipantResult
	if err = p.Client_().Call(ctx, "CreateParticipant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) UpdateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error) {
	var _args CommunityServiceUpdateParticipantArgs
	_args.Req = req
	var _result CommunityServiceUpdateParticipantResult
	if err = p.Client_().Call(ctx, "UpdateParticipant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) CommunityParticipantInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceCommunityParticipantInfoArgs
	_args.Req = req
	var _result CommunityServiceCommunityParticipantInfoResult
	if err = p.Client_().Call(ctx, "CommunityParticipantInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) ParticipantListList(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceParticipantListListArgs
	_args.Req = req
	var _result CommunityServiceParticipantListListResult
	if err = p.Client_().Call(ctx, "ParticipantListList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) UpdateParticipantStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceUpdateParticipantStatusArgs
	_args.Req = req
	var _result CommunityServiceUpdateParticipantStatusResult
	if err = p.Client_().Call(ctx, "UpdateParticipantStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) ParticipantListListExport(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceParticipantListListExportArgs
	_args.Req = req
	var _result CommunityServiceParticipantListListExportResult
	if err = p.Client_().Call(ctx, "ParticipantListListExport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) PromotionalLinks(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args CommunityServicePromotionalLinksArgs
	_args.Req = req
	var _result CommunityServicePromotionalLinksResult
	if err = p.Client_().Call(ctx, "PromotionalLinks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) DelCommunity(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceDelCommunityArgs
	_args.Req = req
	var _result CommunityServiceDelCommunityResult
	if err = p.Client_().Call(ctx, "DelCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommunityServiceClient) ParticipantFinish(ctx context.Context, req *ParticipantFinishReq) (r *base.NilResponse, err error) {
	var _args CommunityServiceParticipantFinishArgs
	_args.Req = req
	var _result CommunityServiceParticipantFinishResult
	if err = p.Client_().Call(ctx, "ParticipantFinish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CommunityServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CommunityService
}

func (p *CommunityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CommunityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CommunityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCommunityServiceProcessor(handler CommunityService) *CommunityServiceProcessor {
	self := &CommunityServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCommunity", &communityServiceProcessorCreateCommunity{handler: handler})
	self.AddToProcessorMap("UpdateCommunity", &communityServiceProcessorUpdateCommunity{handler: handler})
	self.AddToProcessorMap("CommunityInfo", &communityServiceProcessorCommunityInfo{handler: handler})
	self.AddToProcessorMap("CommunityList", &communityServiceProcessorCommunityList{handler: handler})
	self.AddToProcessorMap("UpdateCommunityStatus", &communityServiceProcessorUpdateCommunityStatus{handler: handler})
	self.AddToProcessorMap("UpdateCommunityShow", &communityServiceProcessorUpdateCommunityShow{handler: handler})
	self.AddToProcessorMap("CreateParticipant", &communityServiceProcessorCreateParticipant{handler: handler})
	self.AddToProcessorMap("UpdateParticipant", &communityServiceProcessorUpdateParticipant{handler: handler})
	self.AddToProcessorMap("CommunityParticipantInfo", &communityServiceProcessorCommunityParticipantInfo{handler: handler})
	self.AddToProcessorMap("ParticipantListList", &communityServiceProcessorParticipantListList{handler: handler})
	self.AddToProcessorMap("UpdateParticipantStatus", &communityServiceProcessorUpdateParticipantStatus{handler: handler})
	self.AddToProcessorMap("ParticipantListListExport", &communityServiceProcessorParticipantListListExport{handler: handler})
	self.AddToProcessorMap("PromotionalLinks", &communityServiceProcessorPromotionalLinks{handler: handler})
	self.AddToProcessorMap("DelCommunity", &communityServiceProcessorDelCommunity{handler: handler})
	self.AddToProcessorMap("ParticipantFinish", &communityServiceProcessorParticipantFinish{handler: handler})
	return self
}
func (p *CommunityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type communityServiceProcessorCreateCommunity struct {
	handler CommunityService
}

func (p *communityServiceProcessorCreateCommunity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceCreateCommunityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceCreateCommunityResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateCommunity(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCommunity: "+err2.Error())
		oprot.WriteMessageBegin("CreateCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCommunity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorUpdateCommunity struct {
	handler CommunityService
}

func (p *communityServiceProcessorUpdateCommunity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceUpdateCommunityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceUpdateCommunityResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateCommunity(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCommunity: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCommunity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorCommunityInfo struct {
	handler CommunityService
}

func (p *communityServiceProcessorCommunityInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceCommunityInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommunityInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceCommunityInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CommunityInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommunityInfo: "+err2.Error())
		oprot.WriteMessageBegin("CommunityInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommunityInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorCommunityList struct {
	handler CommunityService
}

func (p *communityServiceProcessorCommunityList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceCommunityListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommunityList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceCommunityListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CommunityList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommunityList: "+err2.Error())
		oprot.WriteMessageBegin("CommunityList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommunityList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorUpdateCommunityStatus struct {
	handler CommunityService
}

func (p *communityServiceProcessorUpdateCommunityStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceUpdateCommunityStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCommunityStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceUpdateCommunityStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateCommunityStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCommunityStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCommunityStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCommunityStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorUpdateCommunityShow struct {
	handler CommunityService
}

func (p *communityServiceProcessorUpdateCommunityShow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceUpdateCommunityShowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCommunityShow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceUpdateCommunityShowResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateCommunityShow(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCommunityShow: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCommunityShow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCommunityShow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorCreateParticipant struct {
	handler CommunityService
}

func (p *communityServiceProcessorCreateParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceCreateParticipantArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceCreateParticipantResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateParticipant(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateParticipant: "+err2.Error())
		oprot.WriteMessageBegin("CreateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateParticipant", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorUpdateParticipant struct {
	handler CommunityService
}

func (p *communityServiceProcessorUpdateParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceUpdateParticipantArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceUpdateParticipantResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateParticipant(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateParticipant: "+err2.Error())
		oprot.WriteMessageBegin("UpdateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateParticipant", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorCommunityParticipantInfo struct {
	handler CommunityService
}

func (p *communityServiceProcessorCommunityParticipantInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceCommunityParticipantInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommunityParticipantInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceCommunityParticipantInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CommunityParticipantInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommunityParticipantInfo: "+err2.Error())
		oprot.WriteMessageBegin("CommunityParticipantInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommunityParticipantInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorParticipantListList struct {
	handler CommunityService
}

func (p *communityServiceProcessorParticipantListList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceParticipantListListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ParticipantListList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceParticipantListListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ParticipantListList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ParticipantListList: "+err2.Error())
		oprot.WriteMessageBegin("ParticipantListList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ParticipantListList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorUpdateParticipantStatus struct {
	handler CommunityService
}

func (p *communityServiceProcessorUpdateParticipantStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceUpdateParticipantStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceUpdateParticipantStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateParticipantStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateParticipantStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorParticipantListListExport struct {
	handler CommunityService
}

func (p *communityServiceProcessorParticipantListListExport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceParticipantListListExportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ParticipantListListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceParticipantListListExportResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ParticipantListListExport(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ParticipantListListExport: "+err2.Error())
		oprot.WriteMessageBegin("ParticipantListListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ParticipantListListExport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorPromotionalLinks struct {
	handler CommunityService
}

func (p *communityServiceProcessorPromotionalLinks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServicePromotionalLinksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PromotionalLinks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServicePromotionalLinksResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.PromotionalLinks(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PromotionalLinks: "+err2.Error())
		oprot.WriteMessageBegin("PromotionalLinks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PromotionalLinks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorDelCommunity struct {
	handler CommunityService
}

func (p *communityServiceProcessorDelCommunity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceDelCommunityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceDelCommunityResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DelCommunity(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelCommunity: "+err2.Error())
		oprot.WriteMessageBegin("DelCommunity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelCommunity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type communityServiceProcessorParticipantFinish struct {
	handler CommunityService
}

func (p *communityServiceProcessorParticipantFinish) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommunityServiceParticipantFinishArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ParticipantFinish", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommunityServiceParticipantFinishResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ParticipantFinish(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ParticipantFinish: "+err2.Error())
		oprot.WriteMessageBegin("ParticipantFinish", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ParticipantFinish", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CommunityServiceCreateCommunityArgs struct {
	Req *CommunityInfo `thrift:"req,1"`
}

func NewCommunityServiceCreateCommunityArgs() *CommunityServiceCreateCommunityArgs {
	return &CommunityServiceCreateCommunityArgs{}
}

func (p *CommunityServiceCreateCommunityArgs) InitDefault() {
}

var CommunityServiceCreateCommunityArgs_Req_DEFAULT *CommunityInfo

func (p *CommunityServiceCreateCommunityArgs) GetReq() (v *CommunityInfo) {
	if !p.IsSetReq() {
		return CommunityServiceCreateCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceCreateCommunityArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceCreateCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceCreateCommunityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCreateCommunityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommunityInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceCreateCommunityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCommunity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCreateCommunityArgs(%+v)", *p)

}

type CommunityServiceCreateCommunityResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceCreateCommunityResult() *CommunityServiceCreateCommunityResult {
	return &CommunityServiceCreateCommunityResult{}
}

func (p *CommunityServiceCreateCommunityResult) InitDefault() {
}

var CommunityServiceCreateCommunityResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceCreateCommunityResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceCreateCommunityResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceCreateCommunityResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceCreateCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceCreateCommunityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCreateCommunityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceCreateCommunityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCommunity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceCreateCommunityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCreateCommunityResult(%+v)", *p)

}

type CommunityServiceUpdateCommunityArgs struct {
	Req *CommunityInfo `thrift:"req,1"`
}

func NewCommunityServiceUpdateCommunityArgs() *CommunityServiceUpdateCommunityArgs {
	return &CommunityServiceUpdateCommunityArgs{}
}

func (p *CommunityServiceUpdateCommunityArgs) InitDefault() {
}

var CommunityServiceUpdateCommunityArgs_Req_DEFAULT *CommunityInfo

func (p *CommunityServiceUpdateCommunityArgs) GetReq() (v *CommunityInfo) {
	if !p.IsSetReq() {
		return CommunityServiceUpdateCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceUpdateCommunityArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceUpdateCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceUpdateCommunityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommunityInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityArgs(%+v)", *p)

}

type CommunityServiceUpdateCommunityResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceUpdateCommunityResult() *CommunityServiceUpdateCommunityResult {
	return &CommunityServiceUpdateCommunityResult{}
}

func (p *CommunityServiceUpdateCommunityResult) InitDefault() {
}

var CommunityServiceUpdateCommunityResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceUpdateCommunityResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceUpdateCommunityResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceUpdateCommunityResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceUpdateCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceUpdateCommunityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityResult(%+v)", *p)

}

type CommunityServiceCommunityInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewCommunityServiceCommunityInfoArgs() *CommunityServiceCommunityInfoArgs {
	return &CommunityServiceCommunityInfoArgs{}
}

func (p *CommunityServiceCommunityInfoArgs) InitDefault() {
}

var CommunityServiceCommunityInfoArgs_Req_DEFAULT *base.IDReq

func (p *CommunityServiceCommunityInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return CommunityServiceCommunityInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceCommunityInfoArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceCommunityInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceCommunityInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceCommunityInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityInfoArgs(%+v)", *p)

}

type CommunityServiceCommunityInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceCommunityInfoResult() *CommunityServiceCommunityInfoResult {
	return &CommunityServiceCommunityInfoResult{}
}

func (p *CommunityServiceCommunityInfoResult) InitDefault() {
}

var CommunityServiceCommunityInfoResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceCommunityInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceCommunityInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceCommunityInfoResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceCommunityInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceCommunityInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceCommunityInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceCommunityInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityInfoResult(%+v)", *p)

}

type CommunityServiceCommunityListArgs struct {
	Req *CommunityListReq `thrift:"req,1"`
}

func NewCommunityServiceCommunityListArgs() *CommunityServiceCommunityListArgs {
	return &CommunityServiceCommunityListArgs{}
}

func (p *CommunityServiceCommunityListArgs) InitDefault() {
}

var CommunityServiceCommunityListArgs_Req_DEFAULT *CommunityListReq

func (p *CommunityServiceCommunityListArgs) GetReq() (v *CommunityListReq) {
	if !p.IsSetReq() {
		return CommunityServiceCommunityListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceCommunityListArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceCommunityListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceCommunityListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommunityListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceCommunityListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceCommunityListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityListArgs(%+v)", *p)

}

type CommunityServiceCommunityListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceCommunityListResult() *CommunityServiceCommunityListResult {
	return &CommunityServiceCommunityListResult{}
}

func (p *CommunityServiceCommunityListResult) InitDefault() {
}

var CommunityServiceCommunityListResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceCommunityListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceCommunityListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceCommunityListResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceCommunityListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceCommunityListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceCommunityListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceCommunityListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityListResult(%+v)", *p)

}

type CommunityServiceUpdateCommunityStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewCommunityServiceUpdateCommunityStatusArgs() *CommunityServiceUpdateCommunityStatusArgs {
	return &CommunityServiceUpdateCommunityStatusArgs{}
}

func (p *CommunityServiceUpdateCommunityStatusArgs) InitDefault() {
}

var CommunityServiceUpdateCommunityStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *CommunityServiceUpdateCommunityStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return CommunityServiceUpdateCommunityStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceUpdateCommunityStatusArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceUpdateCommunityStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceUpdateCommunityStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunityStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityStatusArgs(%+v)", *p)

}

type CommunityServiceUpdateCommunityStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceUpdateCommunityStatusResult() *CommunityServiceUpdateCommunityStatusResult {
	return &CommunityServiceUpdateCommunityStatusResult{}
}

func (p *CommunityServiceUpdateCommunityStatusResult) InitDefault() {
}

var CommunityServiceUpdateCommunityStatusResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceUpdateCommunityStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceUpdateCommunityStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceUpdateCommunityStatusResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceUpdateCommunityStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceUpdateCommunityStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunityStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityStatusResult(%+v)", *p)

}

type CommunityServiceUpdateCommunityShowArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewCommunityServiceUpdateCommunityShowArgs() *CommunityServiceUpdateCommunityShowArgs {
	return &CommunityServiceUpdateCommunityShowArgs{}
}

func (p *CommunityServiceUpdateCommunityShowArgs) InitDefault() {
}

var CommunityServiceUpdateCommunityShowArgs_Req_DEFAULT *base.StatusCodeReq

func (p *CommunityServiceUpdateCommunityShowArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return CommunityServiceUpdateCommunityShowArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceUpdateCommunityShowArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceUpdateCommunityShowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceUpdateCommunityShowArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityShowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityShowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunityShow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityShowArgs(%+v)", *p)

}

type CommunityServiceUpdateCommunityShowResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceUpdateCommunityShowResult() *CommunityServiceUpdateCommunityShowResult {
	return &CommunityServiceUpdateCommunityShowResult{}
}

func (p *CommunityServiceUpdateCommunityShowResult) InitDefault() {
}

var CommunityServiceUpdateCommunityShowResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceUpdateCommunityShowResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceUpdateCommunityShowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceUpdateCommunityShowResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceUpdateCommunityShowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceUpdateCommunityShowResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateCommunityShowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceUpdateCommunityShowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommunityShow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceUpdateCommunityShowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateCommunityShowResult(%+v)", *p)

}

type CommunityServiceCreateParticipantArgs struct {
	Req *ParticipantInfo `thrift:"req,1"`
}

func NewCommunityServiceCreateParticipantArgs() *CommunityServiceCreateParticipantArgs {
	return &CommunityServiceCreateParticipantArgs{}
}

func (p *CommunityServiceCreateParticipantArgs) InitDefault() {
}

var CommunityServiceCreateParticipantArgs_Req_DEFAULT *ParticipantInfo

func (p *CommunityServiceCreateParticipantArgs) GetReq() (v *ParticipantInfo) {
	if !p.IsSetReq() {
		return CommunityServiceCreateParticipantArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceCreateParticipantArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceCreateParticipantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceCreateParticipantArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCreateParticipantArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceCreateParticipantArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParticipant_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCreateParticipantArgs(%+v)", *p)

}

type CommunityServiceCreateParticipantResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceCreateParticipantResult() *CommunityServiceCreateParticipantResult {
	return &CommunityServiceCreateParticipantResult{}
}

func (p *CommunityServiceCreateParticipantResult) InitDefault() {
}

var CommunityServiceCreateParticipantResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceCreateParticipantResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceCreateParticipantResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceCreateParticipantResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceCreateParticipantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceCreateParticipantResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCreateParticipantResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceCreateParticipantResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParticipant_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceCreateParticipantResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCreateParticipantResult(%+v)", *p)

}

type CommunityServiceUpdateParticipantArgs struct {
	Req *ParticipantInfo `thrift:"req,1"`
}

func NewCommunityServiceUpdateParticipantArgs() *CommunityServiceUpdateParticipantArgs {
	return &CommunityServiceUpdateParticipantArgs{}
}

func (p *CommunityServiceUpdateParticipantArgs) InitDefault() {
}

var CommunityServiceUpdateParticipantArgs_Req_DEFAULT *ParticipantInfo

func (p *CommunityServiceUpdateParticipantArgs) GetReq() (v *ParticipantInfo) {
	if !p.IsSetReq() {
		return CommunityServiceUpdateParticipantArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceUpdateParticipantArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceUpdateParticipantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceUpdateParticipantArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateParticipantArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceUpdateParticipantArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipant_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateParticipantArgs(%+v)", *p)

}

type CommunityServiceUpdateParticipantResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceUpdateParticipantResult() *CommunityServiceUpdateParticipantResult {
	return &CommunityServiceUpdateParticipantResult{}
}

func (p *CommunityServiceUpdateParticipantResult) InitDefault() {
}

var CommunityServiceUpdateParticipantResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceUpdateParticipantResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceUpdateParticipantResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceUpdateParticipantResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceUpdateParticipantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceUpdateParticipantResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateParticipantResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceUpdateParticipantResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipant_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateParticipantResult(%+v)", *p)

}

type CommunityServiceCommunityParticipantInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewCommunityServiceCommunityParticipantInfoArgs() *CommunityServiceCommunityParticipantInfoArgs {
	return &CommunityServiceCommunityParticipantInfoArgs{}
}

func (p *CommunityServiceCommunityParticipantInfoArgs) InitDefault() {
}

var CommunityServiceCommunityParticipantInfoArgs_Req_DEFAULT *base.IDReq

func (p *CommunityServiceCommunityParticipantInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return CommunityServiceCommunityParticipantInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceCommunityParticipantInfoArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceCommunityParticipantInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceCommunityParticipantInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityParticipantInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceCommunityParticipantInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityParticipantInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityParticipantInfoArgs(%+v)", *p)

}

type CommunityServiceCommunityParticipantInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceCommunityParticipantInfoResult() *CommunityServiceCommunityParticipantInfoResult {
	return &CommunityServiceCommunityParticipantInfoResult{}
}

func (p *CommunityServiceCommunityParticipantInfoResult) InitDefault() {
}

var CommunityServiceCommunityParticipantInfoResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceCommunityParticipantInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceCommunityParticipantInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceCommunityParticipantInfoResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceCommunityParticipantInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceCommunityParticipantInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceCommunityParticipantInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceCommunityParticipantInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommunityParticipantInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceCommunityParticipantInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceCommunityParticipantInfoResult(%+v)", *p)

}

type CommunityServiceParticipantListListArgs struct {
	Req *ParticipantListReq `thrift:"req,1"`
}

func NewCommunityServiceParticipantListListArgs() *CommunityServiceParticipantListListArgs {
	return &CommunityServiceParticipantListListArgs{}
}

func (p *CommunityServiceParticipantListListArgs) InitDefault() {
}

var CommunityServiceParticipantListListArgs_Req_DEFAULT *ParticipantListReq

func (p *CommunityServiceParticipantListListArgs) GetReq() (v *ParticipantListReq) {
	if !p.IsSetReq() {
		return CommunityServiceParticipantListListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceParticipantListListArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceParticipantListListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceParticipantListListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantListListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceParticipantListListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceParticipantListListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantListListArgs(%+v)", *p)

}

type CommunityServiceParticipantListListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceParticipantListListResult() *CommunityServiceParticipantListListResult {
	return &CommunityServiceParticipantListListResult{}
}

func (p *CommunityServiceParticipantListListResult) InitDefault() {
}

var CommunityServiceParticipantListListResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceParticipantListListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceParticipantListListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceParticipantListListResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceParticipantListListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceParticipantListListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantListListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceParticipantListListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceParticipantListListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantListListResult(%+v)", *p)

}

type CommunityServiceUpdateParticipantStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewCommunityServiceUpdateParticipantStatusArgs() *CommunityServiceUpdateParticipantStatusArgs {
	return &CommunityServiceUpdateParticipantStatusArgs{}
}

func (p *CommunityServiceUpdateParticipantStatusArgs) InitDefault() {
}

var CommunityServiceUpdateParticipantStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *CommunityServiceUpdateParticipantStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return CommunityServiceUpdateParticipantStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceUpdateParticipantStatusArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceUpdateParticipantStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceUpdateParticipantStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateParticipantStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceUpdateParticipantStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipantStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateParticipantStatusArgs(%+v)", *p)

}

type CommunityServiceUpdateParticipantStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceUpdateParticipantStatusResult() *CommunityServiceUpdateParticipantStatusResult {
	return &CommunityServiceUpdateParticipantStatusResult{}
}

func (p *CommunityServiceUpdateParticipantStatusResult) InitDefault() {
}

var CommunityServiceUpdateParticipantStatusResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceUpdateParticipantStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceUpdateParticipantStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceUpdateParticipantStatusResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceUpdateParticipantStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceUpdateParticipantStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceUpdateParticipantStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceUpdateParticipantStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipantStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceUpdateParticipantStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceUpdateParticipantStatusResult(%+v)", *p)

}

type CommunityServiceParticipantListListExportArgs struct {
	Req *ParticipantListReq `thrift:"req,1"`
}

func NewCommunityServiceParticipantListListExportArgs() *CommunityServiceParticipantListListExportArgs {
	return &CommunityServiceParticipantListListExportArgs{}
}

func (p *CommunityServiceParticipantListListExportArgs) InitDefault() {
}

var CommunityServiceParticipantListListExportArgs_Req_DEFAULT *ParticipantListReq

func (p *CommunityServiceParticipantListListExportArgs) GetReq() (v *ParticipantListReq) {
	if !p.IsSetReq() {
		return CommunityServiceParticipantListListExportArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceParticipantListListExportArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceParticipantListListExportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceParticipantListListExportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantListListExportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceParticipantListListExportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListListExport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantListListExportArgs(%+v)", *p)

}

type CommunityServiceParticipantListListExportResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceParticipantListListExportResult() *CommunityServiceParticipantListListExportResult {
	return &CommunityServiceParticipantListListExportResult{}
}

func (p *CommunityServiceParticipantListListExportResult) InitDefault() {
}

var CommunityServiceParticipantListListExportResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceParticipantListListExportResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceParticipantListListExportResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceParticipantListListExportResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceParticipantListListExportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceParticipantListListExportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantListListExportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceParticipantListListExportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListListExport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceParticipantListListExportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantListListExportResult(%+v)", *p)

}

type CommunityServicePromotionalLinksArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewCommunityServicePromotionalLinksArgs() *CommunityServicePromotionalLinksArgs {
	return &CommunityServicePromotionalLinksArgs{}
}

func (p *CommunityServicePromotionalLinksArgs) InitDefault() {
}

var CommunityServicePromotionalLinksArgs_Req_DEFAULT *base.IDReq

func (p *CommunityServicePromotionalLinksArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return CommunityServicePromotionalLinksArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServicePromotionalLinksArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServicePromotionalLinksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServicePromotionalLinksArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServicePromotionalLinksArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServicePromotionalLinksArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromotionalLinks_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServicePromotionalLinksArgs(%+v)", *p)

}

type CommunityServicePromotionalLinksResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServicePromotionalLinksResult() *CommunityServicePromotionalLinksResult {
	return &CommunityServicePromotionalLinksResult{}
}

func (p *CommunityServicePromotionalLinksResult) InitDefault() {
}

var CommunityServicePromotionalLinksResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServicePromotionalLinksResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServicePromotionalLinksResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServicePromotionalLinksResult = map[int16]string{
	0: "success",
}

func (p *CommunityServicePromotionalLinksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServicePromotionalLinksResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServicePromotionalLinksResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServicePromotionalLinksResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromotionalLinks_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServicePromotionalLinksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServicePromotionalLinksResult(%+v)", *p)

}

type CommunityServiceDelCommunityArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewCommunityServiceDelCommunityArgs() *CommunityServiceDelCommunityArgs {
	return &CommunityServiceDelCommunityArgs{}
}

func (p *CommunityServiceDelCommunityArgs) InitDefault() {
}

var CommunityServiceDelCommunityArgs_Req_DEFAULT *base.IDReq

func (p *CommunityServiceDelCommunityArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return CommunityServiceDelCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceDelCommunityArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceDelCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceDelCommunityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceDelCommunityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceDelCommunityArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceDelCommunityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelCommunity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceDelCommunityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceDelCommunityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceDelCommunityArgs(%+v)", *p)

}

type CommunityServiceDelCommunityResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceDelCommunityResult() *CommunityServiceDelCommunityResult {
	return &CommunityServiceDelCommunityResult{}
}

func (p *CommunityServiceDelCommunityResult) InitDefault() {
}

var CommunityServiceDelCommunityResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceDelCommunityResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceDelCommunityResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceDelCommunityResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceDelCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceDelCommunityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceDelCommunityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceDelCommunityResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceDelCommunityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelCommunity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceDelCommunityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceDelCommunityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceDelCommunityResult(%+v)", *p)

}

type CommunityServiceParticipantFinishArgs struct {
	Req *ParticipantFinishReq `thrift:"req,1"`
}

func NewCommunityServiceParticipantFinishArgs() *CommunityServiceParticipantFinishArgs {
	return &CommunityServiceParticipantFinishArgs{}
}

func (p *CommunityServiceParticipantFinishArgs) InitDefault() {
}

var CommunityServiceParticipantFinishArgs_Req_DEFAULT *ParticipantFinishReq

func (p *CommunityServiceParticipantFinishArgs) GetReq() (v *ParticipantFinishReq) {
	if !p.IsSetReq() {
		return CommunityServiceParticipantFinishArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CommunityServiceParticipantFinishArgs = map[int16]string{
	1: "req",
}

func (p *CommunityServiceParticipantFinishArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommunityServiceParticipantFinishArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantFinishArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantFinishReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CommunityServiceParticipantFinishArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantFinish_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantFinishArgs(%+v)", *p)

}

type CommunityServiceParticipantFinishResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewCommunityServiceParticipantFinishResult() *CommunityServiceParticipantFinishResult {
	return &CommunityServiceParticipantFinishResult{}
}

func (p *CommunityServiceParticipantFinishResult) InitDefault() {
}

var CommunityServiceParticipantFinishResult_Success_DEFAULT *base.NilResponse

func (p *CommunityServiceParticipantFinishResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return CommunityServiceParticipantFinishResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CommunityServiceParticipantFinishResult = map[int16]string{
	0: "success",
}

func (p *CommunityServiceParticipantFinishResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommunityServiceParticipantFinishResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommunityServiceParticipantFinishResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CommunityServiceParticipantFinishResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantFinish_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommunityServiceParticipantFinishResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommunityServiceParticipantFinishResult(%+v)", *p)

}

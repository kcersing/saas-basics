// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package memberproduct

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"saas/idl_gen/model/base"
)

type MemberProductInfo struct {
	ID            int64   `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name          string  `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Price         float64 `thrift:"price,3,optional" form:"price" json:"price" query:"price"`
	Fee           float64 `thrift:"fee,4,optional" form:"fee" json:"fee" query:"fee"`
	Status        int64   `thrift:"status,6,optional" form:"status" json:"status" query:"status"`
	Duration      int64   `thrift:"duration,7,optional" form:"duration" json:"duration" query:"duration"`
	Length        int64   `thrift:"length,8,optional" form:"length" json:"length" query:"length"`
	Type          string  `thrift:"type,9,optional" form:"type" json:"type" query:"type"`
	Deadline      int64   `thrift:"deadline,10,optional" form:"deadline" json:"deadline" query:"deadline"`
	Number        int64   `thrift:"number,12,optional" form:"number" json:"number" query:"number"`
	NumberSurplus int64   `thrift:"numberSurplus,13,optional" form:"numberSurplus" json:"numberSurplus" query:"numberSurplus"`
	ValidityAt    string  `thrift:"validityAt,14,optional" form:"validityAt" json:"validityAt" query:"validityAt"`
	CancelAt      string  `thrift:"cancelAt,15,optional" form:"cancelAt" json:"cancelAt" query:"cancelAt"`
	CreatedAt     string  `thrift:"createdAt,16,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt     string  `thrift:"updatedAt,17,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	OrderId       int64   `thrift:"orderId,18,optional" form:"orderId" json:"orderId" query:"orderId"`
	VenueId       int64   `thrift:"venueId,19,optional" form:"venueId" json:"venueId" query:"venueId"`
	ProductId     int64   `thrift:"productId,20,optional" form:"productId" json:"productId" query:"productId"`
	MemberId      int64   `thrift:"memberId,21,optional" form:"memberId" json:"memberId" query:"memberId"`
	SubType       string  `thrift:"subType,22,optional" form:"subType" json:"subType" query:"subType"`
	Sn            string  `thrift:"sn,23,optional" form:"sn" json:"sn" query:"sn"`
	/**课程-数组*/
	Courses []*MemberProductCourses `thrift:"courses,24,optional" form:"courses" json:"courses" query:"courses"`
	/**团课*/
	Lessons []*MemberProductCourses `thrift:"lessons,25,optional" form:"lessons" json:"lessons" query:"lessons"`
	/**课程 1不限2指定*/
	IsCourse int64 `thrift:"isCourse,27,optional" form:"isCourse" json:"isCourse" query:"isCourse"`
}

func NewMemberProductInfo() *MemberProductInfo {
	return &MemberProductInfo{

		ID:            0,
		Name:          "",
		Price:         0.0,
		Fee:           0.0,
		Status:        0,
		Duration:      0,
		Length:        0,
		Type:          "",
		Deadline:      0,
		Number:        0,
		NumberSurplus: 0,
		ValidityAt:    "",
		CancelAt:      "",
		CreatedAt:     "",
		UpdatedAt:     "",
		OrderId:       0,
		VenueId:       0,
		ProductId:     0,
		MemberId:      0,
		SubType:       "",
		Sn:            "",
		Courses:       []*MemberProductCourses{},
		Lessons:       []*MemberProductCourses{},
		IsCourse:      0,
	}
}

func (p *MemberProductInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Price = 0.0
	p.Fee = 0.0
	p.Status = 0
	p.Duration = 0
	p.Length = 0
	p.Type = ""
	p.Deadline = 0
	p.Number = 0
	p.NumberSurplus = 0
	p.ValidityAt = ""
	p.CancelAt = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.OrderId = 0
	p.VenueId = 0
	p.ProductId = 0
	p.MemberId = 0
	p.SubType = ""
	p.Sn = ""
	p.Courses = []*MemberProductCourses{}
	p.Lessons = []*MemberProductCourses{}
	p.IsCourse = 0
}

var MemberProductInfo_ID_DEFAULT int64 = 0

func (p *MemberProductInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberProductInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberProductInfo_Name_DEFAULT string = ""

func (p *MemberProductInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProductInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberProductInfo_Price_DEFAULT float64 = 0.0

func (p *MemberProductInfo) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return MemberProductInfo_Price_DEFAULT
	}
	return p.Price
}

var MemberProductInfo_Fee_DEFAULT float64 = 0.0

func (p *MemberProductInfo) GetFee() (v float64) {
	if !p.IsSetFee() {
		return MemberProductInfo_Fee_DEFAULT
	}
	return p.Fee
}

var MemberProductInfo_Status_DEFAULT int64 = 0

func (p *MemberProductInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberProductInfo_Status_DEFAULT
	}
	return p.Status
}

var MemberProductInfo_Duration_DEFAULT int64 = 0

func (p *MemberProductInfo) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return MemberProductInfo_Duration_DEFAULT
	}
	return p.Duration
}

var MemberProductInfo_Length_DEFAULT int64 = 0

func (p *MemberProductInfo) GetLength() (v int64) {
	if !p.IsSetLength() {
		return MemberProductInfo_Length_DEFAULT
	}
	return p.Length
}

var MemberProductInfo_Type_DEFAULT string = ""

func (p *MemberProductInfo) GetType() (v string) {
	if !p.IsSetType() {
		return MemberProductInfo_Type_DEFAULT
	}
	return p.Type
}

var MemberProductInfo_Deadline_DEFAULT int64 = 0

func (p *MemberProductInfo) GetDeadline() (v int64) {
	if !p.IsSetDeadline() {
		return MemberProductInfo_Deadline_DEFAULT
	}
	return p.Deadline
}

var MemberProductInfo_Number_DEFAULT int64 = 0

func (p *MemberProductInfo) GetNumber() (v int64) {
	if !p.IsSetNumber() {
		return MemberProductInfo_Number_DEFAULT
	}
	return p.Number
}

var MemberProductInfo_NumberSurplus_DEFAULT int64 = 0

func (p *MemberProductInfo) GetNumberSurplus() (v int64) {
	if !p.IsSetNumberSurplus() {
		return MemberProductInfo_NumberSurplus_DEFAULT
	}
	return p.NumberSurplus
}

var MemberProductInfo_ValidityAt_DEFAULT string = ""

func (p *MemberProductInfo) GetValidityAt() (v string) {
	if !p.IsSetValidityAt() {
		return MemberProductInfo_ValidityAt_DEFAULT
	}
	return p.ValidityAt
}

var MemberProductInfo_CancelAt_DEFAULT string = ""

func (p *MemberProductInfo) GetCancelAt() (v string) {
	if !p.IsSetCancelAt() {
		return MemberProductInfo_CancelAt_DEFAULT
	}
	return p.CancelAt
}

var MemberProductInfo_CreatedAt_DEFAULT string = ""

func (p *MemberProductInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberProductInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberProductInfo_UpdatedAt_DEFAULT string = ""

func (p *MemberProductInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return MemberProductInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var MemberProductInfo_OrderId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetOrderId() (v int64) {
	if !p.IsSetOrderId() {
		return MemberProductInfo_OrderId_DEFAULT
	}
	return p.OrderId
}

var MemberProductInfo_VenueId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberProductInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberProductInfo_ProductId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetProductId() (v int64) {
	if !p.IsSetProductId() {
		return MemberProductInfo_ProductId_DEFAULT
	}
	return p.ProductId
}

var MemberProductInfo_MemberId_DEFAULT int64 = 0

func (p *MemberProductInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberProductInfo_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberProductInfo_SubType_DEFAULT string = ""

func (p *MemberProductInfo) GetSubType() (v string) {
	if !p.IsSetSubType() {
		return MemberProductInfo_SubType_DEFAULT
	}
	return p.SubType
}

var MemberProductInfo_Sn_DEFAULT string = ""

func (p *MemberProductInfo) GetSn() (v string) {
	if !p.IsSetSn() {
		return MemberProductInfo_Sn_DEFAULT
	}
	return p.Sn
}

var MemberProductInfo_Courses_DEFAULT []*MemberProductCourses = []*MemberProductCourses{}

func (p *MemberProductInfo) GetCourses() (v []*MemberProductCourses) {
	if !p.IsSetCourses() {
		return MemberProductInfo_Courses_DEFAULT
	}
	return p.Courses
}

var MemberProductInfo_Lessons_DEFAULT []*MemberProductCourses = []*MemberProductCourses{}

func (p *MemberProductInfo) GetLessons() (v []*MemberProductCourses) {
	if !p.IsSetLessons() {
		return MemberProductInfo_Lessons_DEFAULT
	}
	return p.Lessons
}

var MemberProductInfo_IsCourse_DEFAULT int64 = 0

func (p *MemberProductInfo) GetIsCourse() (v int64) {
	if !p.IsSetIsCourse() {
		return MemberProductInfo_IsCourse_DEFAULT
	}
	return p.IsCourse
}

var fieldIDToName_MemberProductInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "price",
	4:  "fee",
	6:  "status",
	7:  "duration",
	8:  "length",
	9:  "type",
	10: "deadline",
	12: "number",
	13: "numberSurplus",
	14: "validityAt",
	15: "cancelAt",
	16: "createdAt",
	17: "updatedAt",
	18: "orderId",
	19: "venueId",
	20: "productId",
	21: "memberId",
	22: "subType",
	23: "sn",
	24: "courses",
	25: "lessons",
	27: "isCourse",
}

func (p *MemberProductInfo) IsSetID() bool {
	return p.ID != MemberProductInfo_ID_DEFAULT
}

func (p *MemberProductInfo) IsSetName() bool {
	return p.Name != MemberProductInfo_Name_DEFAULT
}

func (p *MemberProductInfo) IsSetPrice() bool {
	return p.Price != MemberProductInfo_Price_DEFAULT
}

func (p *MemberProductInfo) IsSetFee() bool {
	return p.Fee != MemberProductInfo_Fee_DEFAULT
}

func (p *MemberProductInfo) IsSetStatus() bool {
	return p.Status != MemberProductInfo_Status_DEFAULT
}

func (p *MemberProductInfo) IsSetDuration() bool {
	return p.Duration != MemberProductInfo_Duration_DEFAULT
}

func (p *MemberProductInfo) IsSetLength() bool {
	return p.Length != MemberProductInfo_Length_DEFAULT
}

func (p *MemberProductInfo) IsSetType() bool {
	return p.Type != MemberProductInfo_Type_DEFAULT
}

func (p *MemberProductInfo) IsSetDeadline() bool {
	return p.Deadline != MemberProductInfo_Deadline_DEFAULT
}

func (p *MemberProductInfo) IsSetNumber() bool {
	return p.Number != MemberProductInfo_Number_DEFAULT
}

func (p *MemberProductInfo) IsSetNumberSurplus() bool {
	return p.NumberSurplus != MemberProductInfo_NumberSurplus_DEFAULT
}

func (p *MemberProductInfo) IsSetValidityAt() bool {
	return p.ValidityAt != MemberProductInfo_ValidityAt_DEFAULT
}

func (p *MemberProductInfo) IsSetCancelAt() bool {
	return p.CancelAt != MemberProductInfo_CancelAt_DEFAULT
}

func (p *MemberProductInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberProductInfo_CreatedAt_DEFAULT
}

func (p *MemberProductInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != MemberProductInfo_UpdatedAt_DEFAULT
}

func (p *MemberProductInfo) IsSetOrderId() bool {
	return p.OrderId != MemberProductInfo_OrderId_DEFAULT
}

func (p *MemberProductInfo) IsSetVenueId() bool {
	return p.VenueId != MemberProductInfo_VenueId_DEFAULT
}

func (p *MemberProductInfo) IsSetProductId() bool {
	return p.ProductId != MemberProductInfo_ProductId_DEFAULT
}

func (p *MemberProductInfo) IsSetMemberId() bool {
	return p.MemberId != MemberProductInfo_MemberId_DEFAULT
}

func (p *MemberProductInfo) IsSetSubType() bool {
	return p.SubType != MemberProductInfo_SubType_DEFAULT
}

func (p *MemberProductInfo) IsSetSn() bool {
	return p.Sn != MemberProductInfo_Sn_DEFAULT
}

func (p *MemberProductInfo) IsSetCourses() bool {
	return p.Courses != nil
}

func (p *MemberProductInfo) IsSetLessons() bool {
	return p.Lessons != nil
}

func (p *MemberProductInfo) IsSetIsCourse() bool {
	return p.IsCourse != MemberProductInfo_IsCourse_DEFAULT
}

func (p *MemberProductInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberProductInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProductInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Price = _field
	return nil
}
func (p *MemberProductInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Fee = _field
	return nil
}
func (p *MemberProductInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberProductInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duration = _field
	return nil
}
func (p *MemberProductInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Length = _field
	return nil
}
func (p *MemberProductInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *MemberProductInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Deadline = _field
	return nil
}
func (p *MemberProductInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Number = _field
	return nil
}
func (p *MemberProductInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumberSurplus = _field
	return nil
}
func (p *MemberProductInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValidityAt = _field
	return nil
}
func (p *MemberProductInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CancelAt = _field
	return nil
}
func (p *MemberProductInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberProductInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *MemberProductInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderId = _field
	return nil
}
func (p *MemberProductInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberProductInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductId = _field
	return nil
}
func (p *MemberProductInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberProductInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SubType = _field
	return nil
}
func (p *MemberProductInfo) ReadField23(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sn = _field
	return nil
}
func (p *MemberProductInfo) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MemberProductCourses, 0, size)
	values := make([]MemberProductCourses, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Courses = _field
	return nil
}
func (p *MemberProductInfo) ReadField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MemberProductCourses, 0, size)
	values := make([]MemberProductCourses, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Lessons = _field
	return nil
}
func (p *MemberProductInfo) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCourse = _field
	return nil
}

func (p *MemberProductInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProductInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err = oprot.WriteFieldBegin("price", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Price); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProductInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFee() {
		if err = oprot.WriteFieldBegin("fee", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Fee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProductInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProductInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err = oprot.WriteFieldBegin("duration", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Duration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProductInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProductInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberProductInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeadline() {
		if err = oprot.WriteFieldBegin("deadline", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Deadline); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberProductInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err = oprot.WriteFieldBegin("number", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Number); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberProductInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumberSurplus() {
		if err = oprot.WriteFieldBegin("numberSurplus", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.NumberSurplus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberProductInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidityAt() {
		if err = oprot.WriteFieldBegin("validityAt", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ValidityAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberProductInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelAt() {
		if err = oprot.WriteFieldBegin("cancelAt", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CancelAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MemberProductInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MemberProductInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *MemberProductInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderId() {
		if err = oprot.WriteFieldBegin("orderId", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.OrderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *MemberProductInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *MemberProductInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductId() {
		if err = oprot.WriteFieldBegin("productId", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *MemberProductInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *MemberProductInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err = oprot.WriteFieldBegin("subType", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SubType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *MemberProductInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetSn() {
		if err = oprot.WriteFieldBegin("sn", thrift.STRING, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *MemberProductInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetCourses() {
		if err = oprot.WriteFieldBegin("courses", thrift.LIST, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Courses)); err != nil {
			return err
		}
		for _, v := range p.Courses {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *MemberProductInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetLessons() {
		if err = oprot.WriteFieldBegin("lessons", thrift.LIST, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lessons)); err != nil {
			return err
		}
		for _, v := range p.Lessons {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *MemberProductInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCourse() {
		if err = oprot.WriteFieldBegin("isCourse", thrift.I64, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsCourse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *MemberProductInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductInfo(%+v)", *p)

}

type MemberProductCourses struct {
	ID              int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Type            string `thrift:"type,2,optional" form:"type" json:"type" query:"type"`
	Name            string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	MemberProductId int64  `thrift:"memberProductId,5,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	CoursesId       int64  `thrift:"coursesId,6,optional" form:"coursesId" json:"coursesId" query:"coursesId"`
	Length          int64  `thrift:"length,7,optional" form:"length" json:"length" query:"length"`
	SubType         string `thrift:"subType,8,optional" form:"subType" json:"subType" query:"subType"`
}

func NewMemberProductCourses() *MemberProductCourses {
	return &MemberProductCourses{

		ID:              0,
		Type:            "",
		Name:            "",
		MemberProductId: 0,
		CoursesId:       0,
		Length:          0,
		SubType:         "",
	}
}

func (p *MemberProductCourses) InitDefault() {
	p.ID = 0
	p.Type = ""
	p.Name = ""
	p.MemberProductId = 0
	p.CoursesId = 0
	p.Length = 0
	p.SubType = ""
}

var MemberProductCourses_ID_DEFAULT int64 = 0

func (p *MemberProductCourses) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberProductCourses_ID_DEFAULT
	}
	return p.ID
}

var MemberProductCourses_Type_DEFAULT string = ""

func (p *MemberProductCourses) GetType() (v string) {
	if !p.IsSetType() {
		return MemberProductCourses_Type_DEFAULT
	}
	return p.Type
}

var MemberProductCourses_Name_DEFAULT string = ""

func (p *MemberProductCourses) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProductCourses_Name_DEFAULT
	}
	return p.Name
}

var MemberProductCourses_MemberProductId_DEFAULT int64 = 0

func (p *MemberProductCourses) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberProductCourses_MemberProductId_DEFAULT
	}
	return p.MemberProductId
}

var MemberProductCourses_CoursesId_DEFAULT int64 = 0

func (p *MemberProductCourses) GetCoursesId() (v int64) {
	if !p.IsSetCoursesId() {
		return MemberProductCourses_CoursesId_DEFAULT
	}
	return p.CoursesId
}

var MemberProductCourses_Length_DEFAULT int64 = 0

func (p *MemberProductCourses) GetLength() (v int64) {
	if !p.IsSetLength() {
		return MemberProductCourses_Length_DEFAULT
	}
	return p.Length
}

var MemberProductCourses_SubType_DEFAULT string = ""

func (p *MemberProductCourses) GetSubType() (v string) {
	if !p.IsSetSubType() {
		return MemberProductCourses_SubType_DEFAULT
	}
	return p.SubType
}

var fieldIDToName_MemberProductCourses = map[int16]string{
	1: "id",
	2: "type",
	3: "name",
	5: "memberProductId",
	6: "coursesId",
	7: "length",
	8: "subType",
}

func (p *MemberProductCourses) IsSetID() bool {
	return p.ID != MemberProductCourses_ID_DEFAULT
}

func (p *MemberProductCourses) IsSetType() bool {
	return p.Type != MemberProductCourses_Type_DEFAULT
}

func (p *MemberProductCourses) IsSetName() bool {
	return p.Name != MemberProductCourses_Name_DEFAULT
}

func (p *MemberProductCourses) IsSetMemberProductId() bool {
	return p.MemberProductId != MemberProductCourses_MemberProductId_DEFAULT
}

func (p *MemberProductCourses) IsSetCoursesId() bool {
	return p.CoursesId != MemberProductCourses_CoursesId_DEFAULT
}

func (p *MemberProductCourses) IsSetLength() bool {
	return p.Length != MemberProductCourses_Length_DEFAULT
}

func (p *MemberProductCourses) IsSetSubType() bool {
	return p.SubType != MemberProductCourses_SubType_DEFAULT
}

func (p *MemberProductCourses) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductCourses[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductCourses) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberProductCourses) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *MemberProductCourses) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProductCourses) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberProductId = _field
	return nil
}
func (p *MemberProductCourses) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CoursesId = _field
	return nil
}
func (p *MemberProductCourses) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Length = _field
	return nil
}
func (p *MemberProductCourses) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SubType = _field
	return nil
}

func (p *MemberProductCourses) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductCourses"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductCourses) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductCourses) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProductCourses) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProductCourses) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProductCourses) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoursesId() {
		if err = oprot.WriteFieldBegin("coursesId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CoursesId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProductCourses) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProductCourses) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err = oprot.WriteFieldBegin("subType", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SubType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProductCourses) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductCourses(%+v)", *p)

}

type MemberProductListReq struct {
	Page     int64   `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize int64   `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name     string  `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Status   []int64 `thrift:"status,4,optional" form:"status" json:"status" query:"status"`
	// 类型
	Type     string `thrift:"type,5,optional" form:"type" json:"type" query:"type"`
	VenueId  int64  `thrift:"venueId,6,optional" form:"venueId" json:"venueId" query:"venueId"`
	SubType  string `thrift:"subType,7,optional" form:"subType" json:"subType" query:"subType"`
	MemberId int64  `thrift:"memberId,8,optional" form:"memberId" json:"memberId" query:"memberId"`
}

func NewMemberProductListReq() *MemberProductListReq {
	return &MemberProductListReq{

		Page:     1,
		PageSize: 100,
		Name:     "",
		Status:   []int64{},
		Type:     "",
		VenueId:  0,
		SubType:  "",
		MemberId: 0,
	}
}

func (p *MemberProductListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Status = []int64{}
	p.Type = ""
	p.VenueId = 0
	p.SubType = ""
	p.MemberId = 0
}

var MemberProductListReq_Page_DEFAULT int64 = 1

func (p *MemberProductListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberProductListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberProductListReq_PageSize_DEFAULT int64 = 100

func (p *MemberProductListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberProductListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberProductListReq_Name_DEFAULT string = ""

func (p *MemberProductListReq) GetName() (v string) {
	if !p.IsSetName() {
		return MemberProductListReq_Name_DEFAULT
	}
	return p.Name
}

var MemberProductListReq_Status_DEFAULT []int64 = []int64{}

func (p *MemberProductListReq) GetStatus() (v []int64) {
	if !p.IsSetStatus() {
		return MemberProductListReq_Status_DEFAULT
	}
	return p.Status
}

var MemberProductListReq_Type_DEFAULT string = ""

func (p *MemberProductListReq) GetType() (v string) {
	if !p.IsSetType() {
		return MemberProductListReq_Type_DEFAULT
	}
	return p.Type
}

var MemberProductListReq_VenueId_DEFAULT int64 = 0

func (p *MemberProductListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberProductListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberProductListReq_SubType_DEFAULT string = ""

func (p *MemberProductListReq) GetSubType() (v string) {
	if !p.IsSetSubType() {
		return MemberProductListReq_SubType_DEFAULT
	}
	return p.SubType
}

var MemberProductListReq_MemberId_DEFAULT int64 = 0

func (p *MemberProductListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberProductListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var fieldIDToName_MemberProductListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "status",
	5: "type",
	6: "venueId",
	7: "subType",
	8: "memberId",
}

func (p *MemberProductListReq) IsSetPage() bool {
	return p.Page != MemberProductListReq_Page_DEFAULT
}

func (p *MemberProductListReq) IsSetPageSize() bool {
	return p.PageSize != MemberProductListReq_PageSize_DEFAULT
}

func (p *MemberProductListReq) IsSetName() bool {
	return p.Name != MemberProductListReq_Name_DEFAULT
}

func (p *MemberProductListReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *MemberProductListReq) IsSetType() bool {
	return p.Type != MemberProductListReq_Type_DEFAULT
}

func (p *MemberProductListReq) IsSetVenueId() bool {
	return p.VenueId != MemberProductListReq_VenueId_DEFAULT
}

func (p *MemberProductListReq) IsSetSubType() bool {
	return p.SubType != MemberProductListReq_SubType_DEFAULT
}

func (p *MemberProductListReq) IsSetMemberId() bool {
	return p.MemberId != MemberProductListReq_MemberId_DEFAULT
}

func (p *MemberProductListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberProductListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberProductListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberProductListReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *MemberProductListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *MemberProductListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberProductListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SubType = _field
	return nil
}
func (p *MemberProductListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}

func (p *MemberProductListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProductListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProductListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Status)); err != nil {
			return err
		}
		for _, v := range p.Status {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProductListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProductListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProductListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err = oprot.WriteFieldBegin("subType", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SubType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProductListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProductListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductListReq(%+v)", *p)

}

type MemberProductService interface {
	MemberProductInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	MemberProductList(ctx context.Context, req *MemberProductListReq) (r *base.NilResponse, err error)
}

type MemberProductServiceClient struct {
	c thrift.TClient
}

func NewMemberProductServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberProductServiceClient {
	return &MemberProductServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMemberProductServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberProductServiceClient {
	return &MemberProductServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMemberProductServiceClient(c thrift.TClient) *MemberProductServiceClient {
	return &MemberProductServiceClient{
		c: c,
	}
}

func (p *MemberProductServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MemberProductServiceClient) MemberProductInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args MemberProductServiceMemberProductInfoArgs
	_args.Req = req
	var _result MemberProductServiceMemberProductInfoResult
	if err = p.Client_().Call(ctx, "MemberProductInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberProductServiceClient) MemberProductList(ctx context.Context, req *MemberProductListReq) (r *base.NilResponse, err error) {
	var _args MemberProductServiceMemberProductListArgs
	_args.Req = req
	var _result MemberProductServiceMemberProductListResult
	if err = p.Client_().Call(ctx, "MemberProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MemberProductServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MemberProductService
}

func (p *MemberProductServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MemberProductServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MemberProductServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMemberProductServiceProcessor(handler MemberProductService) *MemberProductServiceProcessor {
	self := &MemberProductServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("MemberProductInfo", &memberProductServiceProcessorMemberProductInfo{handler: handler})
	self.AddToProcessorMap("MemberProductList", &memberProductServiceProcessorMemberProductList{handler: handler})
	return self
}
func (p *MemberProductServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type memberProductServiceProcessorMemberProductInfo struct {
	handler MemberProductService
}

func (p *memberProductServiceProcessorMemberProductInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberProductServiceMemberProductInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberProductInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberProductServiceMemberProductInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberProductInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberProductInfo: "+err2.Error())
		oprot.WriteMessageBegin("MemberProductInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberProductInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberProductServiceProcessorMemberProductList struct {
	handler MemberProductService
}

func (p *memberProductServiceProcessorMemberProductList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberProductServiceMemberProductListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberProductServiceMemberProductListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberProductList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberProductList: "+err2.Error())
		oprot.WriteMessageBegin("MemberProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberProductList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MemberProductServiceMemberProductInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewMemberProductServiceMemberProductInfoArgs() *MemberProductServiceMemberProductInfoArgs {
	return &MemberProductServiceMemberProductInfoArgs{}
}

func (p *MemberProductServiceMemberProductInfoArgs) InitDefault() {
}

var MemberProductServiceMemberProductInfoArgs_Req_DEFAULT *base.IDReq

func (p *MemberProductServiceMemberProductInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return MemberProductServiceMemberProductInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberProductServiceMemberProductInfoArgs = map[int16]string{
	1: "req",
}

func (p *MemberProductServiceMemberProductInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberProductServiceMemberProductInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductServiceMemberProductInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberProductServiceMemberProductInfoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductServiceMemberProductInfoArgs(%+v)", *p)

}

type MemberProductServiceMemberProductInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberProductServiceMemberProductInfoResult() *MemberProductServiceMemberProductInfoResult {
	return &MemberProductServiceMemberProductInfoResult{}
}

func (p *MemberProductServiceMemberProductInfoResult) InitDefault() {
}

var MemberProductServiceMemberProductInfoResult_Success_DEFAULT *base.NilResponse

func (p *MemberProductServiceMemberProductInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberProductServiceMemberProductInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberProductServiceMemberProductInfoResult = map[int16]string{
	0: "success",
}

func (p *MemberProductServiceMemberProductInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberProductServiceMemberProductInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductServiceMemberProductInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberProductServiceMemberProductInfoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberProductServiceMemberProductInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductServiceMemberProductInfoResult(%+v)", *p)

}

type MemberProductServiceMemberProductListArgs struct {
	Req *MemberProductListReq `thrift:"req,1"`
}

func NewMemberProductServiceMemberProductListArgs() *MemberProductServiceMemberProductListArgs {
	return &MemberProductServiceMemberProductListArgs{}
}

func (p *MemberProductServiceMemberProductListArgs) InitDefault() {
}

var MemberProductServiceMemberProductListArgs_Req_DEFAULT *MemberProductListReq

func (p *MemberProductServiceMemberProductListArgs) GetReq() (v *MemberProductListReq) {
	if !p.IsSetReq() {
		return MemberProductServiceMemberProductListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberProductServiceMemberProductListArgs = map[int16]string{
	1: "req",
}

func (p *MemberProductServiceMemberProductListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberProductServiceMemberProductListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductServiceMemberProductListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberProductListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberProductServiceMemberProductListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductServiceMemberProductListArgs(%+v)", *p)

}

type MemberProductServiceMemberProductListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberProductServiceMemberProductListResult() *MemberProductServiceMemberProductListResult {
	return &MemberProductServiceMemberProductListResult{}
}

func (p *MemberProductServiceMemberProductListResult) InitDefault() {
}

var MemberProductServiceMemberProductListResult_Success_DEFAULT *base.NilResponse

func (p *MemberProductServiceMemberProductListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberProductServiceMemberProductListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberProductServiceMemberProductListResult = map[int16]string{
	0: "success",
}

func (p *MemberProductServiceMemberProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberProductServiceMemberProductListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProductServiceMemberProductListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberProductServiceMemberProductListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProductList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberProductServiceMemberProductListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProductServiceMemberProductListResult(%+v)", *p)

}

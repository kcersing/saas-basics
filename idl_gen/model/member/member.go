// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package member

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"saas/idl_gen/model/base"
)

// Create or update user information request | 创建或更新用户信息
type CreateOrUpdateMemberReq struct {
	ID               int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name             string `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	MobileAscription int64  `thrift:"mobileAscription,3,optional" form:"mobileAscription" json:"mobileAscription" query:"mobileAscription"`
	Mobile           string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Gender           string `thrift:"gender,5,optional" form:"gender" json:"gender" query:"gender"`
	Birthday         string `thrift:"birthday,6,optional" form:"birthday" json:"birthday" query:"birthday"`
	Source           int64  `thrift:"source,7,optional" form:"source" json:"source" query:"source"`
	Grade            int64  `thrift:"grade,8,optional" form:"grade" json:"grade" query:"grade"`
	Intention        int64  `thrift:"intention,9,optional" form:"intention" json:"intention" query:"intention"`
	VenueId          int64  `thrift:"venueId,10,optional" form:"venueId" json:"venueId" query:"venueId"`
}

func NewCreateOrUpdateMemberReq() *CreateOrUpdateMemberReq {
	return &CreateOrUpdateMemberReq{

		ID:               0,
		Name:             "",
		MobileAscription: 0,
		Mobile:           "",
		Gender:           "未知",
		Birthday:         "",
		Source:           0,
		Grade:            0,
		Intention:        0,
		VenueId:          0,
	}
}

func (p *CreateOrUpdateMemberReq) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.MobileAscription = 0
	p.Mobile = ""
	p.Gender = "未知"
	p.Birthday = ""
	p.Source = 0
	p.Grade = 0
	p.Intention = 0
	p.VenueId = 0
}

var CreateOrUpdateMemberReq_ID_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetID() (v int64) {
	if !p.IsSetID() {
		return CreateOrUpdateMemberReq_ID_DEFAULT
	}
	return p.ID
}

var CreateOrUpdateMemberReq_Name_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetName() (v string) {
	if !p.IsSetName() {
		return CreateOrUpdateMemberReq_Name_DEFAULT
	}
	return p.Name
}

var CreateOrUpdateMemberReq_MobileAscription_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetMobileAscription() (v int64) {
	if !p.IsSetMobileAscription() {
		return CreateOrUpdateMemberReq_MobileAscription_DEFAULT
	}
	return p.MobileAscription
}

var CreateOrUpdateMemberReq_Mobile_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return CreateOrUpdateMemberReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var CreateOrUpdateMemberReq_Gender_DEFAULT string = "未知"

func (p *CreateOrUpdateMemberReq) GetGender() (v string) {
	if !p.IsSetGender() {
		return CreateOrUpdateMemberReq_Gender_DEFAULT
	}
	return p.Gender
}

var CreateOrUpdateMemberReq_Birthday_DEFAULT string = ""

func (p *CreateOrUpdateMemberReq) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return CreateOrUpdateMemberReq_Birthday_DEFAULT
	}
	return p.Birthday
}

var CreateOrUpdateMemberReq_Source_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetSource() (v int64) {
	if !p.IsSetSource() {
		return CreateOrUpdateMemberReq_Source_DEFAULT
	}
	return p.Source
}

var CreateOrUpdateMemberReq_Grade_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetGrade() (v int64) {
	if !p.IsSetGrade() {
		return CreateOrUpdateMemberReq_Grade_DEFAULT
	}
	return p.Grade
}

var CreateOrUpdateMemberReq_Intention_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return CreateOrUpdateMemberReq_Intention_DEFAULT
	}
	return p.Intention
}

var CreateOrUpdateMemberReq_VenueId_DEFAULT int64 = 0

func (p *CreateOrUpdateMemberReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return CreateOrUpdateMemberReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var fieldIDToName_CreateOrUpdateMemberReq = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "mobileAscription",
	4:  "mobile",
	5:  "gender",
	6:  "birthday",
	7:  "source",
	8:  "grade",
	9:  "intention",
	10: "venueId",
}

func (p *CreateOrUpdateMemberReq) IsSetID() bool {
	return p.ID != CreateOrUpdateMemberReq_ID_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetName() bool {
	return p.Name != CreateOrUpdateMemberReq_Name_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetMobileAscription() bool {
	return p.MobileAscription != CreateOrUpdateMemberReq_MobileAscription_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetMobile() bool {
	return p.Mobile != CreateOrUpdateMemberReq_Mobile_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetGender() bool {
	return p.Gender != CreateOrUpdateMemberReq_Gender_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetBirthday() bool {
	return p.Birthday != CreateOrUpdateMemberReq_Birthday_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetSource() bool {
	return p.Source != CreateOrUpdateMemberReq_Source_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetGrade() bool {
	return p.Grade != CreateOrUpdateMemberReq_Grade_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetIntention() bool {
	return p.Intention != CreateOrUpdateMemberReq_Intention_DEFAULT
}

func (p *CreateOrUpdateMemberReq) IsSetVenueId() bool {
	return p.VenueId != CreateOrUpdateMemberReq_VenueId_DEFAULT
}

func (p *CreateOrUpdateMemberReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateOrUpdateMemberReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MobileAscription = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Grade = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *CreateOrUpdateMemberReq) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}

func (p *CreateOrUpdateMemberReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateOrUpdateMemberReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobileAscription() {
		if err = oprot.WriteFieldBegin("mobileAscription", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MobileAscription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err = oprot.WriteFieldBegin("birthday", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Birthday); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrade() {
		if err = oprot.WriteFieldBegin("grade", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Grade); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateOrUpdateMemberReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateMemberReq(%+v)", *p)

}

type MemberInfo struct {
	ID        int64          `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name      string         `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Status    int64          `thrift:"status,4,optional" form:"status" json:"status" query:"status"`
	Username  string         `thrift:"username,5,optional" form:"username" json:"username" query:"username"`
	Mobile    string         `thrift:"mobile,6,optional" form:"mobile" json:"mobile" query:"mobile"`
	Avatar    string         `thrift:"avatar,7,optional" form:"avatar" json:"avatar" query:"avatar"`
	CreatedAt string         `thrift:"createdAt,8,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt string         `thrift:"updatedAt,9,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Profile   *MemberProfile `thrift:"profile,250,optional" form:"profile" json:"profile" query:"profile"`
	Details   *MemberDetails `thrift:"details,251,optional" form:"details" json:"details" query:"details"`
	Privacy   *MemberPrivacy `thrift:"privacy,252,optional" form:"privacy" json:"privacy" query:"privacy"`
}

func NewMemberInfo() *MemberInfo {
	return &MemberInfo{

		ID:        0,
		Name:      "",
		Status:    0,
		Username:  "",
		Mobile:    "",
		Avatar:    "",
		CreatedAt: "",
		UpdatedAt: "",
		Profile:   &MemberProfile{},
		Details:   &MemberDetails{},
		Privacy:   &MemberPrivacy{},
	}
}

func (p *MemberInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Status = 0
	p.Username = ""
	p.Mobile = ""
	p.Avatar = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Profile = &MemberProfile{}
	p.Details = &MemberDetails{}
	p.Privacy = &MemberPrivacy{}
}

var MemberInfo_ID_DEFAULT int64 = 0

func (p *MemberInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberInfo_ID_DEFAULT
	}
	return p.ID
}

var MemberInfo_Name_DEFAULT string = ""

func (p *MemberInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberInfo_Name_DEFAULT
	}
	return p.Name
}

var MemberInfo_Status_DEFAULT int64 = 0

func (p *MemberInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return MemberInfo_Status_DEFAULT
	}
	return p.Status
}

var MemberInfo_Username_DEFAULT string = ""

func (p *MemberInfo) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return MemberInfo_Username_DEFAULT
	}
	return p.Username
}

var MemberInfo_Mobile_DEFAULT string = ""

func (p *MemberInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return MemberInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var MemberInfo_Avatar_DEFAULT string = ""

func (p *MemberInfo) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return MemberInfo_Avatar_DEFAULT
	}
	return p.Avatar
}

var MemberInfo_CreatedAt_DEFAULT string = ""

func (p *MemberInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return MemberInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var MemberInfo_UpdatedAt_DEFAULT string = ""

func (p *MemberInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return MemberInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var MemberInfo_Profile_DEFAULT *MemberProfile = &MemberProfile{}

func (p *MemberInfo) GetProfile() (v *MemberProfile) {
	if !p.IsSetProfile() {
		return MemberInfo_Profile_DEFAULT
	}
	return p.Profile
}

var MemberInfo_Details_DEFAULT *MemberDetails = &MemberDetails{}

func (p *MemberInfo) GetDetails() (v *MemberDetails) {
	if !p.IsSetDetails() {
		return MemberInfo_Details_DEFAULT
	}
	return p.Details
}

var MemberInfo_Privacy_DEFAULT *MemberPrivacy = &MemberPrivacy{}

func (p *MemberInfo) GetPrivacy() (v *MemberPrivacy) {
	if !p.IsSetPrivacy() {
		return MemberInfo_Privacy_DEFAULT
	}
	return p.Privacy
}

var fieldIDToName_MemberInfo = map[int16]string{
	1:   "id",
	2:   "name",
	4:   "status",
	5:   "username",
	6:   "mobile",
	7:   "avatar",
	8:   "createdAt",
	9:   "updatedAt",
	250: "profile",
	251: "details",
	252: "privacy",
}

func (p *MemberInfo) IsSetID() bool {
	return p.ID != MemberInfo_ID_DEFAULT
}

func (p *MemberInfo) IsSetName() bool {
	return p.Name != MemberInfo_Name_DEFAULT
}

func (p *MemberInfo) IsSetStatus() bool {
	return p.Status != MemberInfo_Status_DEFAULT
}

func (p *MemberInfo) IsSetUsername() bool {
	return p.Username != MemberInfo_Username_DEFAULT
}

func (p *MemberInfo) IsSetMobile() bool {
	return p.Mobile != MemberInfo_Mobile_DEFAULT
}

func (p *MemberInfo) IsSetAvatar() bool {
	return p.Avatar != MemberInfo_Avatar_DEFAULT
}

func (p *MemberInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != MemberInfo_CreatedAt_DEFAULT
}

func (p *MemberInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != MemberInfo_UpdatedAt_DEFAULT
}

func (p *MemberInfo) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *MemberInfo) IsSetDetails() bool {
	return p.Details != nil
}

func (p *MemberInfo) IsSetPrivacy() bool {
	return p.Privacy != nil
}

func (p *MemberInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 250:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField250(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 251:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField251(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 252:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField252(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *MemberInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Username = _field
	return nil
}
func (p *MemberInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *MemberInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *MemberInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *MemberInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *MemberInfo) ReadField250(iprot thrift.TProtocol) error {
	_field := NewMemberProfile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Profile = _field
	return nil
}
func (p *MemberInfo) ReadField251(iprot thrift.TProtocol) error {
	_field := NewMemberDetails()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Details = _field
	return nil
}
func (p *MemberInfo) ReadField252(iprot thrift.TProtocol) error {
	_field := NewMemberPrivacy()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Privacy = _field
	return nil
}

func (p *MemberInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField250(oprot); err != nil {
			fieldId = 250
			goto WriteFieldError
		}
		if err = p.writeField251(oprot); err != nil {
			fieldId = 251
			goto WriteFieldError
		}
		if err = p.writeField252(oprot); err != nil {
			fieldId = 252
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberInfo) writeField250(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfile() {
		if err = oprot.WriteFieldBegin("profile", thrift.STRUCT, 250); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Profile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 end error: ", p), err)
}

func (p *MemberInfo) writeField251(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err = oprot.WriteFieldBegin("details", thrift.STRUCT, 251); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Details.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 251 end error: ", p), err)
}

func (p *MemberInfo) writeField252(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivacy() {
		if err = oprot.WriteFieldBegin("privacy", thrift.STRUCT, 252); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Privacy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 252 end error: ", p), err)
}

func (p *MemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberInfo(%+v)", *p)

}

type MemberProfile struct {
	MobileAscription int64  `thrift:"mobileAscription,1,optional" form:"mobileAscription" json:"mobileAscription" query:"mobileAscription"`
	FatherName       string `thrift:"fatherName,2,optional" form:"fatherName" json:"fatherName" query:"fatherName"`
	MotherName       string `thrift:"motherName,3,optional" form:"motherName" json:"motherName" query:"motherName"`
	Grade            int64  `thrift:"grade,4,optional" form:"grade" json:"grade" query:"grade"`
	Intention        int64  `thrift:"intention,5,optional" form:"intention" json:"intention" query:"intention"`
	Source           int64  `thrift:"source,6,optional" form:"source" json:"source" query:"source"`
	GradeName        string `thrift:"gradeName,7,optional" form:"gradeName" json:"gradeName" query:"gradeName"`
	IntentionName    string `thrift:"intentionName,8,optional" form:"intentionName" json:"intentionName" query:"intentionName"`
	SourceName       string `thrift:"sourceName,9,optional" form:"sourceName" json:"sourceName" query:"sourceName"`
	Email            string `thrift:"email,10,optional" form:"email" json:"email" query:"email"`
	Gender           string `thrift:"gender,11,optional" form:"gender" json:"gender" query:"gender"`
	Age              int64  `thrift:"age,12,optional" form:"age" json:"age" query:"age"`
	Wecom            string `thrift:"wecom,13,optional" form:"wecom" json:"wecom" query:"wecom"`
	Birthday         string `thrift:"birthday,14,optional" form:"birthday" json:"birthday" query:"birthday"`
	ID               int64  `thrift:"id,250,optional" form:"id" json:"id" query:"id"`
	Condition        int64  `thrift:"condition,15,optional" form:"condition" json:"condition" query:"condition"`
	ConditionName    string `thrift:"conditionName,16,optional" form:"conditionName" json:"conditionName" query:"conditionName"`
}

func NewMemberProfile() *MemberProfile {
	return &MemberProfile{

		MobileAscription: 0,
		FatherName:       "",
		MotherName:       "",
		Grade:            0,
		Intention:        0,
		Source:           0,
		GradeName:        "",
		IntentionName:    "",
		SourceName:       "",
		Email:            "",
		Gender:           "",
		Age:              0,
		Wecom:            "",
		Birthday:         "",
		ID:               0,
		Condition:        0,
		ConditionName:    "",
	}
}

func (p *MemberProfile) InitDefault() {
	p.MobileAscription = 0
	p.FatherName = ""
	p.MotherName = ""
	p.Grade = 0
	p.Intention = 0
	p.Source = 0
	p.GradeName = ""
	p.IntentionName = ""
	p.SourceName = ""
	p.Email = ""
	p.Gender = ""
	p.Age = 0
	p.Wecom = ""
	p.Birthday = ""
	p.ID = 0
	p.Condition = 0
	p.ConditionName = ""
}

var MemberProfile_MobileAscription_DEFAULT int64 = 0

func (p *MemberProfile) GetMobileAscription() (v int64) {
	if !p.IsSetMobileAscription() {
		return MemberProfile_MobileAscription_DEFAULT
	}
	return p.MobileAscription
}

var MemberProfile_FatherName_DEFAULT string = ""

func (p *MemberProfile) GetFatherName() (v string) {
	if !p.IsSetFatherName() {
		return MemberProfile_FatherName_DEFAULT
	}
	return p.FatherName
}

var MemberProfile_MotherName_DEFAULT string = ""

func (p *MemberProfile) GetMotherName() (v string) {
	if !p.IsSetMotherName() {
		return MemberProfile_MotherName_DEFAULT
	}
	return p.MotherName
}

var MemberProfile_Grade_DEFAULT int64 = 0

func (p *MemberProfile) GetGrade() (v int64) {
	if !p.IsSetGrade() {
		return MemberProfile_Grade_DEFAULT
	}
	return p.Grade
}

var MemberProfile_Intention_DEFAULT int64 = 0

func (p *MemberProfile) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return MemberProfile_Intention_DEFAULT
	}
	return p.Intention
}

var MemberProfile_Source_DEFAULT int64 = 0

func (p *MemberProfile) GetSource() (v int64) {
	if !p.IsSetSource() {
		return MemberProfile_Source_DEFAULT
	}
	return p.Source
}

var MemberProfile_GradeName_DEFAULT string = ""

func (p *MemberProfile) GetGradeName() (v string) {
	if !p.IsSetGradeName() {
		return MemberProfile_GradeName_DEFAULT
	}
	return p.GradeName
}

var MemberProfile_IntentionName_DEFAULT string = ""

func (p *MemberProfile) GetIntentionName() (v string) {
	if !p.IsSetIntentionName() {
		return MemberProfile_IntentionName_DEFAULT
	}
	return p.IntentionName
}

var MemberProfile_SourceName_DEFAULT string = ""

func (p *MemberProfile) GetSourceName() (v string) {
	if !p.IsSetSourceName() {
		return MemberProfile_SourceName_DEFAULT
	}
	return p.SourceName
}

var MemberProfile_Email_DEFAULT string = ""

func (p *MemberProfile) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return MemberProfile_Email_DEFAULT
	}
	return p.Email
}

var MemberProfile_Gender_DEFAULT string = ""

func (p *MemberProfile) GetGender() (v string) {
	if !p.IsSetGender() {
		return MemberProfile_Gender_DEFAULT
	}
	return p.Gender
}

var MemberProfile_Age_DEFAULT int64 = 0

func (p *MemberProfile) GetAge() (v int64) {
	if !p.IsSetAge() {
		return MemberProfile_Age_DEFAULT
	}
	return p.Age
}

var MemberProfile_Wecom_DEFAULT string = ""

func (p *MemberProfile) GetWecom() (v string) {
	if !p.IsSetWecom() {
		return MemberProfile_Wecom_DEFAULT
	}
	return p.Wecom
}

var MemberProfile_Birthday_DEFAULT string = ""

func (p *MemberProfile) GetBirthday() (v string) {
	if !p.IsSetBirthday() {
		return MemberProfile_Birthday_DEFAULT
	}
	return p.Birthday
}

var MemberProfile_ID_DEFAULT int64 = 0

func (p *MemberProfile) GetID() (v int64) {
	if !p.IsSetID() {
		return MemberProfile_ID_DEFAULT
	}
	return p.ID
}

var MemberProfile_Condition_DEFAULT int64 = 0

func (p *MemberProfile) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return MemberProfile_Condition_DEFAULT
	}
	return p.Condition
}

var MemberProfile_ConditionName_DEFAULT string = ""

func (p *MemberProfile) GetConditionName() (v string) {
	if !p.IsSetConditionName() {
		return MemberProfile_ConditionName_DEFAULT
	}
	return p.ConditionName
}

var fieldIDToName_MemberProfile = map[int16]string{
	1:   "mobileAscription",
	2:   "fatherName",
	3:   "motherName",
	4:   "grade",
	5:   "intention",
	6:   "source",
	7:   "gradeName",
	8:   "intentionName",
	9:   "sourceName",
	10:  "email",
	11:  "gender",
	12:  "age",
	13:  "wecom",
	14:  "birthday",
	250: "id",
	15:  "condition",
	16:  "conditionName",
}

func (p *MemberProfile) IsSetMobileAscription() bool {
	return p.MobileAscription != MemberProfile_MobileAscription_DEFAULT
}

func (p *MemberProfile) IsSetFatherName() bool {
	return p.FatherName != MemberProfile_FatherName_DEFAULT
}

func (p *MemberProfile) IsSetMotherName() bool {
	return p.MotherName != MemberProfile_MotherName_DEFAULT
}

func (p *MemberProfile) IsSetGrade() bool {
	return p.Grade != MemberProfile_Grade_DEFAULT
}

func (p *MemberProfile) IsSetIntention() bool {
	return p.Intention != MemberProfile_Intention_DEFAULT
}

func (p *MemberProfile) IsSetSource() bool {
	return p.Source != MemberProfile_Source_DEFAULT
}

func (p *MemberProfile) IsSetGradeName() bool {
	return p.GradeName != MemberProfile_GradeName_DEFAULT
}

func (p *MemberProfile) IsSetIntentionName() bool {
	return p.IntentionName != MemberProfile_IntentionName_DEFAULT
}

func (p *MemberProfile) IsSetSourceName() bool {
	return p.SourceName != MemberProfile_SourceName_DEFAULT
}

func (p *MemberProfile) IsSetEmail() bool {
	return p.Email != MemberProfile_Email_DEFAULT
}

func (p *MemberProfile) IsSetGender() bool {
	return p.Gender != MemberProfile_Gender_DEFAULT
}

func (p *MemberProfile) IsSetAge() bool {
	return p.Age != MemberProfile_Age_DEFAULT
}

func (p *MemberProfile) IsSetWecom() bool {
	return p.Wecom != MemberProfile_Wecom_DEFAULT
}

func (p *MemberProfile) IsSetBirthday() bool {
	return p.Birthday != MemberProfile_Birthday_DEFAULT
}

func (p *MemberProfile) IsSetID() bool {
	return p.ID != MemberProfile_ID_DEFAULT
}

func (p *MemberProfile) IsSetCondition() bool {
	return p.Condition != MemberProfile_Condition_DEFAULT
}

func (p *MemberProfile) IsSetConditionName() bool {
	return p.ConditionName != MemberProfile_ConditionName_DEFAULT
}

func (p *MemberProfile) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 250:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField250(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberProfile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberProfile) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MobileAscription = _field
	return nil
}
func (p *MemberProfile) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FatherName = _field
	return nil
}
func (p *MemberProfile) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MotherName = _field
	return nil
}
func (p *MemberProfile) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Grade = _field
	return nil
}
func (p *MemberProfile) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *MemberProfile) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *MemberProfile) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GradeName = _field
	return nil
}
func (p *MemberProfile) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntentionName = _field
	return nil
}
func (p *MemberProfile) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SourceName = _field
	return nil
}
func (p *MemberProfile) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *MemberProfile) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Gender = _field
	return nil
}
func (p *MemberProfile) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *MemberProfile) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Wecom = _field
	return nil
}
func (p *MemberProfile) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Birthday = _field
	return nil
}
func (p *MemberProfile) ReadField250(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *MemberProfile) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}
func (p *MemberProfile) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConditionName = _field
	return nil
}

func (p *MemberProfile) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberProfile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField250(oprot); err != nil {
			fieldId = 250
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobileAscription() {
		if err = oprot.WriteFieldBegin("mobileAscription", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MobileAscription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFatherName() {
		if err = oprot.WriteFieldBegin("fatherName", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.FatherName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMotherName() {
		if err = oprot.WriteFieldBegin("motherName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MotherName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrade() {
		if err = oprot.WriteFieldBegin("grade", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Grade); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberProfile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberProfile) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberProfile) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGradeName() {
		if err = oprot.WriteFieldBegin("gradeName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.GradeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberProfile) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntentionName() {
		if err = oprot.WriteFieldBegin("intentionName", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.IntentionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberProfile) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceName() {
		if err = oprot.WriteFieldBegin("sourceName", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberProfile) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberProfile) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Gender); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberProfile) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err = oprot.WriteFieldBegin("age", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Age); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberProfile) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWecom() {
		if err = oprot.WriteFieldBegin("wecom", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Wecom); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberProfile) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err = oprot.WriteFieldBegin("birthday", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Birthday); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberProfile) writeField250(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 250); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 250 end error: ", p), err)
}

func (p *MemberProfile) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MemberProfile) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetConditionName() {
		if err = oprot.WriteFieldBegin("conditionName", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ConditionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MemberProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberProfile(%+v)", *p)

}

type MemberDetails struct {
	/**消费总金额*/
	MoneySum float64 `thrift:"moneySum,2,optional" form:"moneySum" json:"moneySum" query:"moneySum"`
	/**首次的产品*/
	ProductId   int64  `thrift:"productId,3,optional" form:"productId" json:"productId" query:"productId"`
	ProductName string `thrift:"productName,4,optional" form:"productName" json:"productName" query:"productName"`
	/**首次消费场馆*/
	ProductVenue     int64  `thrift:"productVenue,5,optional" form:"productVenue" json:"productVenue" query:"productVenue"`
	ProductVenueName string `thrift:"productVenueName,6,optional" form:"productVenueName" json:"productVenueName" query:"productVenueName"`
	/**进馆总次数*/
	EntrySum int64 `thrift:"entrySum,7,optional" form:"entrySum" json:"entrySum" query:"entrySum"`
	/**最后一次进馆时间*/
	EntryLastTime string `thrift:"entryLastTime,8,optional" form:"entryLastTime" json:"entryLastTime" query:"entryLastTime"`
	/**进馆最后期限时间*/
	EntryDeadlineTime string `thrift:"entryDeadlineTime,9,optional" form:"entryDeadlineTime" json:"entryDeadlineTime" query:"entryDeadlineTime"`
	/**最后一次上课时间*/
	ClassLastTime string `thrift:"classLastTime,10,optional" form:"classLastTime" json:"classLastTime" query:"classLastTime"`
	/**关联员工*/
	RelationUid   int64  `thrift:"relationUid,11,optional" form:"relationUid" json:"relationUid" query:"relationUid"`
	RelationUname string `thrift:"relationUname,12,optional" form:"relationUname" json:"relationUname" query:"relationUname"`
	/**关联会员*/
	RelationMid   int64  `thrift:"relationMid,13,optional" form:"relationMid" json:"relationMid" query:"relationMid"`
	RelationMname string `thrift:"relationMname,14,optional" form:"relationMname" json:"relationMname" query:"relationMname"`
	/**创建人*/
	CreatedId   int64  `thrift:"createdId,15,optional" form:"createdId" json:"createdId" query:"createdId"`
	CreatedName string `thrift:"createdName,16,optional" form:"createdName" json:"createdName" query:"createdName"`
	/**成为会员时间*/
	FirstAt string `thrift:"firstAt,19,optional" form:"firstAt" json:"firstAt" query:"firstAt"`
}

func NewMemberDetails() *MemberDetails {
	return &MemberDetails{

		MoneySum:          0.0,
		ProductId:         0,
		ProductName:       "",
		ProductVenue:      0,
		ProductVenueName:  "",
		EntrySum:          0,
		EntryLastTime:     "",
		EntryDeadlineTime: "",
		ClassLastTime:     "",
		RelationUid:       0,
		RelationUname:     "",
		RelationMid:       0,
		RelationMname:     "",
		CreatedId:         0,
		CreatedName:       "",
		FirstAt:           "",
	}
}

func (p *MemberDetails) InitDefault() {
	p.MoneySum = 0.0
	p.ProductId = 0
	p.ProductName = ""
	p.ProductVenue = 0
	p.ProductVenueName = ""
	p.EntrySum = 0
	p.EntryLastTime = ""
	p.EntryDeadlineTime = ""
	p.ClassLastTime = ""
	p.RelationUid = 0
	p.RelationUname = ""
	p.RelationMid = 0
	p.RelationMname = ""
	p.CreatedId = 0
	p.CreatedName = ""
	p.FirstAt = ""
}

var MemberDetails_MoneySum_DEFAULT float64 = 0.0

func (p *MemberDetails) GetMoneySum() (v float64) {
	if !p.IsSetMoneySum() {
		return MemberDetails_MoneySum_DEFAULT
	}
	return p.MoneySum
}

var MemberDetails_ProductId_DEFAULT int64 = 0

func (p *MemberDetails) GetProductId() (v int64) {
	if !p.IsSetProductId() {
		return MemberDetails_ProductId_DEFAULT
	}
	return p.ProductId
}

var MemberDetails_ProductName_DEFAULT string = ""

func (p *MemberDetails) GetProductName() (v string) {
	if !p.IsSetProductName() {
		return MemberDetails_ProductName_DEFAULT
	}
	return p.ProductName
}

var MemberDetails_ProductVenue_DEFAULT int64 = 0

func (p *MemberDetails) GetProductVenue() (v int64) {
	if !p.IsSetProductVenue() {
		return MemberDetails_ProductVenue_DEFAULT
	}
	return p.ProductVenue
}

var MemberDetails_ProductVenueName_DEFAULT string = ""

func (p *MemberDetails) GetProductVenueName() (v string) {
	if !p.IsSetProductVenueName() {
		return MemberDetails_ProductVenueName_DEFAULT
	}
	return p.ProductVenueName
}

var MemberDetails_EntrySum_DEFAULT int64 = 0

func (p *MemberDetails) GetEntrySum() (v int64) {
	if !p.IsSetEntrySum() {
		return MemberDetails_EntrySum_DEFAULT
	}
	return p.EntrySum
}

var MemberDetails_EntryLastTime_DEFAULT string = ""

func (p *MemberDetails) GetEntryLastTime() (v string) {
	if !p.IsSetEntryLastTime() {
		return MemberDetails_EntryLastTime_DEFAULT
	}
	return p.EntryLastTime
}

var MemberDetails_EntryDeadlineTime_DEFAULT string = ""

func (p *MemberDetails) GetEntryDeadlineTime() (v string) {
	if !p.IsSetEntryDeadlineTime() {
		return MemberDetails_EntryDeadlineTime_DEFAULT
	}
	return p.EntryDeadlineTime
}

var MemberDetails_ClassLastTime_DEFAULT string = ""

func (p *MemberDetails) GetClassLastTime() (v string) {
	if !p.IsSetClassLastTime() {
		return MemberDetails_ClassLastTime_DEFAULT
	}
	return p.ClassLastTime
}

var MemberDetails_RelationUid_DEFAULT int64 = 0

func (p *MemberDetails) GetRelationUid() (v int64) {
	if !p.IsSetRelationUid() {
		return MemberDetails_RelationUid_DEFAULT
	}
	return p.RelationUid
}

var MemberDetails_RelationUname_DEFAULT string = ""

func (p *MemberDetails) GetRelationUname() (v string) {
	if !p.IsSetRelationUname() {
		return MemberDetails_RelationUname_DEFAULT
	}
	return p.RelationUname
}

var MemberDetails_RelationMid_DEFAULT int64 = 0

func (p *MemberDetails) GetRelationMid() (v int64) {
	if !p.IsSetRelationMid() {
		return MemberDetails_RelationMid_DEFAULT
	}
	return p.RelationMid
}

var MemberDetails_RelationMname_DEFAULT string = ""

func (p *MemberDetails) GetRelationMname() (v string) {
	if !p.IsSetRelationMname() {
		return MemberDetails_RelationMname_DEFAULT
	}
	return p.RelationMname
}

var MemberDetails_CreatedId_DEFAULT int64 = 0

func (p *MemberDetails) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return MemberDetails_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var MemberDetails_CreatedName_DEFAULT string = ""

func (p *MemberDetails) GetCreatedName() (v string) {
	if !p.IsSetCreatedName() {
		return MemberDetails_CreatedName_DEFAULT
	}
	return p.CreatedName
}

var MemberDetails_FirstAt_DEFAULT string = ""

func (p *MemberDetails) GetFirstAt() (v string) {
	if !p.IsSetFirstAt() {
		return MemberDetails_FirstAt_DEFAULT
	}
	return p.FirstAt
}

var fieldIDToName_MemberDetails = map[int16]string{
	2:  "moneySum",
	3:  "productId",
	4:  "productName",
	5:  "productVenue",
	6:  "productVenueName",
	7:  "entrySum",
	8:  "entryLastTime",
	9:  "entryDeadlineTime",
	10: "classLastTime",
	11: "relationUid",
	12: "relationUname",
	13: "relationMid",
	14: "relationMname",
	15: "createdId",
	16: "createdName",
	19: "firstAt",
}

func (p *MemberDetails) IsSetMoneySum() bool {
	return p.MoneySum != MemberDetails_MoneySum_DEFAULT
}

func (p *MemberDetails) IsSetProductId() bool {
	return p.ProductId != MemberDetails_ProductId_DEFAULT
}

func (p *MemberDetails) IsSetProductName() bool {
	return p.ProductName != MemberDetails_ProductName_DEFAULT
}

func (p *MemberDetails) IsSetProductVenue() bool {
	return p.ProductVenue != MemberDetails_ProductVenue_DEFAULT
}

func (p *MemberDetails) IsSetProductVenueName() bool {
	return p.ProductVenueName != MemberDetails_ProductVenueName_DEFAULT
}

func (p *MemberDetails) IsSetEntrySum() bool {
	return p.EntrySum != MemberDetails_EntrySum_DEFAULT
}

func (p *MemberDetails) IsSetEntryLastTime() bool {
	return p.EntryLastTime != MemberDetails_EntryLastTime_DEFAULT
}

func (p *MemberDetails) IsSetEntryDeadlineTime() bool {
	return p.EntryDeadlineTime != MemberDetails_EntryDeadlineTime_DEFAULT
}

func (p *MemberDetails) IsSetClassLastTime() bool {
	return p.ClassLastTime != MemberDetails_ClassLastTime_DEFAULT
}

func (p *MemberDetails) IsSetRelationUid() bool {
	return p.RelationUid != MemberDetails_RelationUid_DEFAULT
}

func (p *MemberDetails) IsSetRelationUname() bool {
	return p.RelationUname != MemberDetails_RelationUname_DEFAULT
}

func (p *MemberDetails) IsSetRelationMid() bool {
	return p.RelationMid != MemberDetails_RelationMid_DEFAULT
}

func (p *MemberDetails) IsSetRelationMname() bool {
	return p.RelationMname != MemberDetails_RelationMname_DEFAULT
}

func (p *MemberDetails) IsSetCreatedId() bool {
	return p.CreatedId != MemberDetails_CreatedId_DEFAULT
}

func (p *MemberDetails) IsSetCreatedName() bool {
	return p.CreatedName != MemberDetails_CreatedName_DEFAULT
}

func (p *MemberDetails) IsSetFirstAt() bool {
	return p.FirstAt != MemberDetails_FirstAt_DEFAULT
}

func (p *MemberDetails) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberDetails[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberDetails) ReadField2(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MoneySum = _field
	return nil
}
func (p *MemberDetails) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductId = _field
	return nil
}
func (p *MemberDetails) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductName = _field
	return nil
}
func (p *MemberDetails) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductVenue = _field
	return nil
}
func (p *MemberDetails) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProductVenueName = _field
	return nil
}
func (p *MemberDetails) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntrySum = _field
	return nil
}
func (p *MemberDetails) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryLastTime = _field
	return nil
}
func (p *MemberDetails) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EntryDeadlineTime = _field
	return nil
}
func (p *MemberDetails) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClassLastTime = _field
	return nil
}
func (p *MemberDetails) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationUid = _field
	return nil
}
func (p *MemberDetails) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationUname = _field
	return nil
}
func (p *MemberDetails) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationMid = _field
	return nil
}
func (p *MemberDetails) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RelationMname = _field
	return nil
}
func (p *MemberDetails) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *MemberDetails) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedName = _field
	return nil
}
func (p *MemberDetails) ReadField19(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FirstAt = _field
	return nil
}

func (p *MemberDetails) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberDetails"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberDetails) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMoneySum() {
		if err = oprot.WriteFieldBegin("moneySum", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.MoneySum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberDetails) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductId() {
		if err = oprot.WriteFieldBegin("productId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberDetails) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductName() {
		if err = oprot.WriteFieldBegin("productName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberDetails) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductVenue() {
		if err = oprot.WriteFieldBegin("productVenue", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ProductVenue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberDetails) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductVenueName() {
		if err = oprot.WriteFieldBegin("productVenueName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ProductVenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberDetails) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntrySum() {
		if err = oprot.WriteFieldBegin("entrySum", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.EntrySum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberDetails) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryLastTime() {
		if err = oprot.WriteFieldBegin("entryLastTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EntryLastTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberDetails) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryDeadlineTime() {
		if err = oprot.WriteFieldBegin("entryDeadlineTime", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EntryDeadlineTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberDetails) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassLastTime() {
		if err = oprot.WriteFieldBegin("classLastTime", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ClassLastTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberDetails) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationUid() {
		if err = oprot.WriteFieldBegin("relationUid", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.RelationUid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberDetails) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationUname() {
		if err = oprot.WriteFieldBegin("relationUname", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.RelationUname); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberDetails) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationMid() {
		if err = oprot.WriteFieldBegin("relationMid", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.RelationMid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MemberDetails) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelationMname() {
		if err = oprot.WriteFieldBegin("relationMname", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.RelationMname); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *MemberDetails) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *MemberDetails) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedName() {
		if err = oprot.WriteFieldBegin("createdName", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *MemberDetails) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstAt() {
		if err = oprot.WriteFieldBegin("firstAt", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.FirstAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *MemberDetails) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberDetails(%+v)", *p)

}

type MemberPrivacy struct {
	//身份证号
	IdentityCard string `thrift:"identityCard,1" form:"identityCard" json:"identityCard" query:"identityCard"`
	//正面
	FaceIdentityCard string `thrift:"faceIdentityCard,2" form:"faceIdentityCard" json:"faceIdentityCard" query:"faceIdentityCard"`
	//反面
	BackIdentityCard string `thrift:"backIdentityCard,3" form:"backIdentityCard" json:"backIdentityCard" query:"backIdentityCard"`
	//人脸照片
	FacePic string `thrift:"facePic,4" form:"facePic" json:"facePic" query:"facePic"`
	//特征值
	FaceEigenvalue string `thrift:"faceEigenvalue,5" form:"faceEigenvalue" json:"faceEigenvalue" query:"faceEigenvalue"`
	//人脸更新时间
	FaceUpdateTime     string `thrift:"faceUpdateTime,6" form:"faceUpdateTime" json:"faceUpdateTime" query:"faceUpdateTime"`
	FacePicUpdatedTime string `thrift:"facePicUpdatedTime,7" form:"facePicUpdatedTime" json:"facePicUpdatedTime" query:"facePicUpdatedTime"`
}

func NewMemberPrivacy() *MemberPrivacy {
	return &MemberPrivacy{}
}

func (p *MemberPrivacy) InitDefault() {
}

func (p *MemberPrivacy) GetIdentityCard() (v string) {
	return p.IdentityCard
}

func (p *MemberPrivacy) GetFaceIdentityCard() (v string) {
	return p.FaceIdentityCard
}

func (p *MemberPrivacy) GetBackIdentityCard() (v string) {
	return p.BackIdentityCard
}

func (p *MemberPrivacy) GetFacePic() (v string) {
	return p.FacePic
}

func (p *MemberPrivacy) GetFaceEigenvalue() (v string) {
	return p.FaceEigenvalue
}

func (p *MemberPrivacy) GetFaceUpdateTime() (v string) {
	return p.FaceUpdateTime
}

func (p *MemberPrivacy) GetFacePicUpdatedTime() (v string) {
	return p.FacePicUpdatedTime
}

var fieldIDToName_MemberPrivacy = map[int16]string{
	1: "identityCard",
	2: "faceIdentityCard",
	3: "backIdentityCard",
	4: "facePic",
	5: "faceEigenvalue",
	6: "faceUpdateTime",
	7: "facePicUpdatedTime",
}

func (p *MemberPrivacy) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberPrivacy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberPrivacy) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceIdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BackIdentityCard = _field
	return nil
}
func (p *MemberPrivacy) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FacePic = _field
	return nil
}
func (p *MemberPrivacy) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceEigenvalue = _field
	return nil
}
func (p *MemberPrivacy) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FaceUpdateTime = _field
	return nil
}
func (p *MemberPrivacy) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FacePicUpdatedTime = _field
	return nil
}

func (p *MemberPrivacy) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPrivacy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberPrivacy) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identityCard", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberPrivacy) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceIdentityCard", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceIdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberPrivacy) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backIdentityCard", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BackIdentityCard); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberPrivacy) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("facePic", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FacePic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberPrivacy) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceEigenvalue", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceEigenvalue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberPrivacy) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("faceUpdateTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FaceUpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberPrivacy) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("facePicUpdatedTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FacePicUpdatedTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberPrivacy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberPrivacy(%+v)", *p)

}

// Get user list request | 获取用户列表请求参数
type MemberListReq struct {
	Page           int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize       int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name           string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Mobile         string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Source         int64  `thrift:"source,5,optional" form:"source" json:"source" query:"source"`
	Intention      int64  `thrift:"intention,6,optional" form:"intention" json:"intention" query:"intention"`
	CreatedId      int64  `thrift:"createdId,7,optional" form:"createdId" json:"createdId" query:"createdId"`
	StartCreatedAt string `thrift:"startCreatedAt,8,optional" form:"startCreatedAt" json:"startCreatedAt" query:"startCreatedAt"`
	EndCreatedAt   string `thrift:"endCreatedAt,9,optional" form:"endCreatedAt" json:"endCreatedAt" query:"endCreatedAt"`
}

func NewMemberListReq() *MemberListReq {
	return &MemberListReq{

		Page:           1,
		PageSize:       100,
		Name:           "",
		Mobile:         "",
		Source:         0,
		Intention:      0,
		CreatedId:      0,
		StartCreatedAt: "",
		EndCreatedAt:   "",
	}
}

func (p *MemberListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Mobile = ""
	p.Source = 0
	p.Intention = 0
	p.CreatedId = 0
	p.StartCreatedAt = ""
	p.EndCreatedAt = ""
}

var MemberListReq_Page_DEFAULT int64 = 1

func (p *MemberListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberListReq_PageSize_DEFAULT int64 = 100

func (p *MemberListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberListReq_Name_DEFAULT string = ""

func (p *MemberListReq) GetName() (v string) {
	if !p.IsSetName() {
		return MemberListReq_Name_DEFAULT
	}
	return p.Name
}

var MemberListReq_Mobile_DEFAULT string = ""

func (p *MemberListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return MemberListReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var MemberListReq_Source_DEFAULT int64 = 0

func (p *MemberListReq) GetSource() (v int64) {
	if !p.IsSetSource() {
		return MemberListReq_Source_DEFAULT
	}
	return p.Source
}

var MemberListReq_Intention_DEFAULT int64 = 0

func (p *MemberListReq) GetIntention() (v int64) {
	if !p.IsSetIntention() {
		return MemberListReq_Intention_DEFAULT
	}
	return p.Intention
}

var MemberListReq_CreatedId_DEFAULT int64 = 0

func (p *MemberListReq) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return MemberListReq_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var MemberListReq_StartCreatedAt_DEFAULT string = ""

func (p *MemberListReq) GetStartCreatedAt() (v string) {
	if !p.IsSetStartCreatedAt() {
		return MemberListReq_StartCreatedAt_DEFAULT
	}
	return p.StartCreatedAt
}

var MemberListReq_EndCreatedAt_DEFAULT string = ""

func (p *MemberListReq) GetEndCreatedAt() (v string) {
	if !p.IsSetEndCreatedAt() {
		return MemberListReq_EndCreatedAt_DEFAULT
	}
	return p.EndCreatedAt
}

var fieldIDToName_MemberListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "mobile",
	5: "source",
	6: "intention",
	7: "createdId",
	8: "startCreatedAt",
	9: "endCreatedAt",
}

func (p *MemberListReq) IsSetPage() bool {
	return p.Page != MemberListReq_Page_DEFAULT
}

func (p *MemberListReq) IsSetPageSize() bool {
	return p.PageSize != MemberListReq_PageSize_DEFAULT
}

func (p *MemberListReq) IsSetName() bool {
	return p.Name != MemberListReq_Name_DEFAULT
}

func (p *MemberListReq) IsSetMobile() bool {
	return p.Mobile != MemberListReq_Mobile_DEFAULT
}

func (p *MemberListReq) IsSetSource() bool {
	return p.Source != MemberListReq_Source_DEFAULT
}

func (p *MemberListReq) IsSetIntention() bool {
	return p.Intention != MemberListReq_Intention_DEFAULT
}

func (p *MemberListReq) IsSetCreatedId() bool {
	return p.CreatedId != MemberListReq_CreatedId_DEFAULT
}

func (p *MemberListReq) IsSetStartCreatedAt() bool {
	return p.StartCreatedAt != MemberListReq_StartCreatedAt_DEFAULT
}

func (p *MemberListReq) IsSetEndCreatedAt() bool {
	return p.EndCreatedAt != MemberListReq_EndCreatedAt_DEFAULT
}

func (p *MemberListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MemberListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *MemberListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *MemberListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Intention = _field
	return nil
}
func (p *MemberListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *MemberListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartCreatedAt = _field
	return nil
}
func (p *MemberListReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndCreatedAt = _field
	return nil
}

func (p *MemberListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntention() {
		if err = oprot.WriteFieldBegin("intention", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Intention); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartCreatedAt() {
		if err = oprot.WriteFieldBegin("startCreatedAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartCreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberListReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndCreatedAt() {
		if err = oprot.WriteFieldBegin("endCreatedAt", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndCreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MemberListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberListReq(%+v)", *p)

}

type MemberSearchReq struct {
	Value  string `thrift:"value,1" form:"value" json:"value" query:"value"`
	Option string `thrift:"option,2" form:"option" json:"option" query:"option"`
}

func NewMemberSearchReq() *MemberSearchReq {
	return &MemberSearchReq{

		Value:  "",
		Option: "",
	}
}

func (p *MemberSearchReq) InitDefault() {
	p.Value = ""
	p.Option = ""
}

func (p *MemberSearchReq) GetValue() (v string) {
	return p.Value
}

func (p *MemberSearchReq) GetOption() (v string) {
	return p.Option
}

var fieldIDToName_MemberSearchReq = map[int16]string{
	1: "value",
	2: "option",
}

func (p *MemberSearchReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberSearchReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberSearchReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *MemberSearchReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Option = _field
	return nil
}

func (p *MemberSearchReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberSearchReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberSearchReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberSearchReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("option", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Option); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberSearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberSearchReq(%+v)", *p)

}

type MemberContractListReq struct {
	Page       int64 `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize   int64 `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	MemberId   int64 `thrift:"memberId,3,optional" form:"memberId" json:"memberId" query:"memberId"`
	VenueId    int64 `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	ContractId int64 `thrift:"contractId,5,optional" form:"contractId" json:"contractId" query:"contractId"`
}

func NewMemberContractListReq() *MemberContractListReq {
	return &MemberContractListReq{

		Page:       1,
		PageSize:   100,
		MemberId:   0,
		VenueId:    0,
		ContractId: 0,
	}
}

func (p *MemberContractListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.MemberId = 0
	p.VenueId = 0
	p.ContractId = 0
}

var MemberContractListReq_Page_DEFAULT int64 = 1

func (p *MemberContractListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return MemberContractListReq_Page_DEFAULT
	}
	return p.Page
}

var MemberContractListReq_PageSize_DEFAULT int64 = 100

func (p *MemberContractListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return MemberContractListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var MemberContractListReq_MemberId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberContractListReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var MemberContractListReq_VenueId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberContractListReq_VenueId_DEFAULT
	}
	return p.VenueId
}

var MemberContractListReq_ContractId_DEFAULT int64 = 0

func (p *MemberContractListReq) GetContractId() (v int64) {
	if !p.IsSetContractId() {
		return MemberContractListReq_ContractId_DEFAULT
	}
	return p.ContractId
}

var fieldIDToName_MemberContractListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "memberId",
	4: "venueId",
	5: "contractId",
}

func (p *MemberContractListReq) IsSetPage() bool {
	return p.Page != MemberContractListReq_Page_DEFAULT
}

func (p *MemberContractListReq) IsSetPageSize() bool {
	return p.PageSize != MemberContractListReq_PageSize_DEFAULT
}

func (p *MemberContractListReq) IsSetMemberId() bool {
	return p.MemberId != MemberContractListReq_MemberId_DEFAULT
}

func (p *MemberContractListReq) IsSetVenueId() bool {
	return p.VenueId != MemberContractListReq_VenueId_DEFAULT
}

func (p *MemberContractListReq) IsSetContractId() bool {
	return p.ContractId != MemberContractListReq_ContractId_DEFAULT
}

func (p *MemberContractListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberContractListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberContractListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *MemberContractListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *MemberContractListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberContractListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberContractListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContractId = _field
	return nil
}

func (p *MemberContractListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberContractListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberContractListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberContractListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberContractListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberContractListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContractId() {
		if err = oprot.WriteFieldBegin("contractId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ContractId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberContractListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberContractListReq(%+v)", *p)

}

type MemberContractInfo struct {
	Name              *string `thrift:"name,1,optional" form:"name" json:"name" query:"name"`
	MemberId          *int64  `thrift:"memberId,2,optional" form:"memberId" json:"memberId" query:"memberId"`
	MemberName        *string `thrift:"memberName,3,optional" form:"memberName" json:"memberName" query:"memberName"`
	VenueId           *int64  `thrift:"venueId,4,optional" form:"venueId" json:"venueId" query:"venueId"`
	VenueName         *string `thrift:"venueName,5,optional" form:"venueName" json:"venueName" query:"venueName"`
	MemberProductId   *int64  `thrift:"memberProductId,6,optional" form:"memberProductId" json:"memberProductId" query:"memberProductId"`
	MemberProductName *string `thrift:"memberProductName,7,optional" form:"memberProductName" json:"memberProductName" query:"memberProductName"`
	ContractId        *int64  `thrift:"contractId,8,optional" form:"contractId" json:"contractId" query:"contractId"`
	Sign              *string `thrift:"sign,10,optional" form:"sign" json:"sign" query:"sign"`
	SignImg           *string `thrift:"signImg,11,optional" form:"signImg" json:"signImg" query:"signImg"`
	Content           *string `thrift:"content,12,optional" form:"content" json:"content" query:"content"`
}

func NewMemberContractInfo() *MemberContractInfo {
	return &MemberContractInfo{}
}

func (p *MemberContractInfo) InitDefault() {
}

var MemberContractInfo_Name_DEFAULT string

func (p *MemberContractInfo) GetName() (v string) {
	if !p.IsSetName() {
		return MemberContractInfo_Name_DEFAULT
	}
	return *p.Name
}

var MemberContractInfo_MemberId_DEFAULT int64

func (p *MemberContractInfo) GetMemberId() (v int64) {
	if !p.IsSetMemberId() {
		return MemberContractInfo_MemberId_DEFAULT
	}
	return *p.MemberId
}

var MemberContractInfo_MemberName_DEFAULT string

func (p *MemberContractInfo) GetMemberName() (v string) {
	if !p.IsSetMemberName() {
		return MemberContractInfo_MemberName_DEFAULT
	}
	return *p.MemberName
}

var MemberContractInfo_VenueId_DEFAULT int64

func (p *MemberContractInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return MemberContractInfo_VenueId_DEFAULT
	}
	return *p.VenueId
}

var MemberContractInfo_VenueName_DEFAULT string

func (p *MemberContractInfo) GetVenueName() (v string) {
	if !p.IsSetVenueName() {
		return MemberContractInfo_VenueName_DEFAULT
	}
	return *p.VenueName
}

var MemberContractInfo_MemberProductId_DEFAULT int64

func (p *MemberContractInfo) GetMemberProductId() (v int64) {
	if !p.IsSetMemberProductId() {
		return MemberContractInfo_MemberProductId_DEFAULT
	}
	return *p.MemberProductId
}

var MemberContractInfo_MemberProductName_DEFAULT string

func (p *MemberContractInfo) GetMemberProductName() (v string) {
	if !p.IsSetMemberProductName() {
		return MemberContractInfo_MemberProductName_DEFAULT
	}
	return *p.MemberProductName
}

var MemberContractInfo_ContractId_DEFAULT int64

func (p *MemberContractInfo) GetContractId() (v int64) {
	if !p.IsSetContractId() {
		return MemberContractInfo_ContractId_DEFAULT
	}
	return *p.ContractId
}

var MemberContractInfo_Sign_DEFAULT string

func (p *MemberContractInfo) GetSign() (v string) {
	if !p.IsSetSign() {
		return MemberContractInfo_Sign_DEFAULT
	}
	return *p.Sign
}

var MemberContractInfo_SignImg_DEFAULT string

func (p *MemberContractInfo) GetSignImg() (v string) {
	if !p.IsSetSignImg() {
		return MemberContractInfo_SignImg_DEFAULT
	}
	return *p.SignImg
}

var MemberContractInfo_Content_DEFAULT string

func (p *MemberContractInfo) GetContent() (v string) {
	if !p.IsSetContent() {
		return MemberContractInfo_Content_DEFAULT
	}
	return *p.Content
}

var fieldIDToName_MemberContractInfo = map[int16]string{
	1:  "name",
	2:  "memberId",
	3:  "memberName",
	4:  "venueId",
	5:  "venueName",
	6:  "memberProductId",
	7:  "memberProductName",
	8:  "contractId",
	10: "sign",
	11: "signImg",
	12: "content",
}

func (p *MemberContractInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *MemberContractInfo) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *MemberContractInfo) IsSetMemberName() bool {
	return p.MemberName != nil
}

func (p *MemberContractInfo) IsSetVenueId() bool {
	return p.VenueId != nil
}

func (p *MemberContractInfo) IsSetVenueName() bool {
	return p.VenueName != nil
}

func (p *MemberContractInfo) IsSetMemberProductId() bool {
	return p.MemberProductId != nil
}

func (p *MemberContractInfo) IsSetMemberProductName() bool {
	return p.MemberProductName != nil
}

func (p *MemberContractInfo) IsSetContractId() bool {
	return p.ContractId != nil
}

func (p *MemberContractInfo) IsSetSign() bool {
	return p.Sign != nil
}

func (p *MemberContractInfo) IsSetSignImg() bool {
	return p.SignImg != nil
}

func (p *MemberContractInfo) IsSetContent() bool {
	return p.Content != nil
}

func (p *MemberContractInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberContractInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberContractInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *MemberContractInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberId = _field
	return nil
}
func (p *MemberContractInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberName = _field
	return nil
}
func (p *MemberContractInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueId = _field
	return nil
}
func (p *MemberContractInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VenueName = _field
	return nil
}
func (p *MemberContractInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberProductId = _field
	return nil
}
func (p *MemberContractInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemberProductName = _field
	return nil
}
func (p *MemberContractInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContractId = _field
	return nil
}
func (p *MemberContractInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Sign = _field
	return nil
}
func (p *MemberContractInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SignImg = _field
	return nil
}
func (p *MemberContractInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}

func (p *MemberContractInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberContractInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberContractInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MemberContractInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberName() {
		if err = oprot.WriteFieldBegin("memberName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemberName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MemberContractInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MemberContractInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueName() {
		if err = oprot.WriteFieldBegin("venueName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VenueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MemberContractInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductId() {
		if err = oprot.WriteFieldBegin("memberProductId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemberProductId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MemberContractInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberProductName() {
		if err = oprot.WriteFieldBegin("memberProductName", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemberProductName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MemberContractInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetContractId() {
		if err = oprot.WriteFieldBegin("contractId", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ContractId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MemberContractInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err = oprot.WriteFieldBegin("sign", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Sign); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MemberContractInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignImg() {
		if err = oprot.WriteFieldBegin("signImg", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SignImg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MemberContractInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MemberContractInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberContractInfo(%+v)", *p)

}

type UpdateMemberFollowReq struct {
	MemberId []int64 `thrift:"memberId,1,optional" form:"memberId" json:"memberId" query:"memberId"`
	FollowId int64   `thrift:"followId,2,optional" form:"followId" json:"followId" query:"followId"`
}

func NewUpdateMemberFollowReq() *UpdateMemberFollowReq {
	return &UpdateMemberFollowReq{

		MemberId: []int64{},
		FollowId: 0,
	}
}

func (p *UpdateMemberFollowReq) InitDefault() {
	p.MemberId = []int64{}
	p.FollowId = 0
}

var UpdateMemberFollowReq_MemberId_DEFAULT []int64 = []int64{}

func (p *UpdateMemberFollowReq) GetMemberId() (v []int64) {
	if !p.IsSetMemberId() {
		return UpdateMemberFollowReq_MemberId_DEFAULT
	}
	return p.MemberId
}

var UpdateMemberFollowReq_FollowId_DEFAULT int64 = 0

func (p *UpdateMemberFollowReq) GetFollowId() (v int64) {
	if !p.IsSetFollowId() {
		return UpdateMemberFollowReq_FollowId_DEFAULT
	}
	return p.FollowId
}

var fieldIDToName_UpdateMemberFollowReq = map[int16]string{
	1: "memberId",
	2: "followId",
}

func (p *UpdateMemberFollowReq) IsSetMemberId() bool {
	return p.MemberId != nil
}

func (p *UpdateMemberFollowReq) IsSetFollowId() bool {
	return p.FollowId != UpdateMemberFollowReq_FollowId_DEFAULT
}

func (p *UpdateMemberFollowReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateMemberFollowReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateMemberFollowReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemberId = _field
	return nil
}
func (p *UpdateMemberFollowReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FollowId = _field
	return nil
}

func (p *UpdateMemberFollowReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollowReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateMemberFollowReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemberId() {
		if err = oprot.WriteFieldBegin("memberId", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MemberId)); err != nil {
			return err
		}
		for _, v := range p.MemberId {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateMemberFollowReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFollowId() {
		if err = oprot.WriteFieldBegin("followId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.FollowId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateMemberFollowReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMemberFollowReq(%+v)", *p)

}

type MemberService interface {
	// 新增用户
	CreateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error)
	// 更新用户
	UpdateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error)
	// 获取用户基本信息
	MemberInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)
	// 获取用户列表
	MemberFullList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)
	// 获取用户列表
	MemberPotentialList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)

	MemberFullListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)

	MemberPotentialListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error)

	DelMember(ctx context.Context, req *base.Ids) (r *base.NilResponse, err error)
	// 更新用户状态
	UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	UpdateMemberFollow(ctx context.Context, req *UpdateMemberFollowReq) (r *base.NilResponse, err error)

	MemberContractList(ctx context.Context, req *MemberContractListReq) (r *base.NilResponse, err error)
}

type MemberServiceClient struct {
	c thrift.TClient
}

func NewMemberServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberServiceClient {
	return &MemberServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMemberServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberServiceClient {
	return &MemberServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMemberServiceClient(c thrift.TClient) *MemberServiceClient {
	return &MemberServiceClient{
		c: c,
	}
}

func (p *MemberServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MemberServiceClient) CreateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args MemberServiceCreateMemberArgs
	_args.Req = req
	var _result MemberServiceCreateMemberResult
	if err = p.Client_().Call(ctx, "CreateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMember(ctx context.Context, req *CreateOrUpdateMemberReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberResult
	if err = p.Client_().Call(ctx, "UpdateMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberInfoArgs
	_args.Req = req
	var _result MemberServiceMemberInfoResult
	if err = p.Client_().Call(ctx, "MemberInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberFullList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberFullListArgs
	_args.Req = req
	var _result MemberServiceMemberFullListResult
	if err = p.Client_().Call(ctx, "MemberFullList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPotentialList(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPotentialListArgs
	_args.Req = req
	var _result MemberServiceMemberPotentialListResult
	if err = p.Client_().Call(ctx, "MemberPotentialList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberFullListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberFullListExportArgs
	_args.Req = req
	var _result MemberServiceMemberFullListExportResult
	if err = p.Client_().Call(ctx, "MemberFullListExport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberPotentialListExport(ctx context.Context, req *MemberListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberPotentialListExportArgs
	_args.Req = req
	var _result MemberServiceMemberPotentialListExportResult
	if err = p.Client_().Call(ctx, "MemberPotentialListExport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) DelMember(ctx context.Context, req *base.Ids) (r *base.NilResponse, err error) {
	var _args MemberServiceDelMemberArgs
	_args.Req = req
	var _result MemberServiceDelMemberResult
	if err = p.Client_().Call(ctx, "DelMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMemberStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberStatusArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberStatusResult
	if err = p.Client_().Call(ctx, "UpdateMemberStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) UpdateMemberFollow(ctx context.Context, req *UpdateMemberFollowReq) (r *base.NilResponse, err error) {
	var _args MemberServiceUpdateMemberFollowArgs
	_args.Req = req
	var _result MemberServiceUpdateMemberFollowResult
	if err = p.Client_().Call(ctx, "UpdateMemberFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MemberServiceClient) MemberContractList(ctx context.Context, req *MemberContractListReq) (r *base.NilResponse, err error) {
	var _args MemberServiceMemberContractListArgs
	_args.Req = req
	var _result MemberServiceMemberContractListResult
	if err = p.Client_().Call(ctx, "MemberContractList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MemberServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MemberService
}

func (p *MemberServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MemberServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MemberServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMemberServiceProcessor(handler MemberService) *MemberServiceProcessor {
	self := &MemberServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateMember", &memberServiceProcessorCreateMember{handler: handler})
	self.AddToProcessorMap("UpdateMember", &memberServiceProcessorUpdateMember{handler: handler})
	self.AddToProcessorMap("MemberInfo", &memberServiceProcessorMemberInfo{handler: handler})
	self.AddToProcessorMap("MemberFullList", &memberServiceProcessorMemberFullList{handler: handler})
	self.AddToProcessorMap("MemberPotentialList", &memberServiceProcessorMemberPotentialList{handler: handler})
	self.AddToProcessorMap("MemberFullListExport", &memberServiceProcessorMemberFullListExport{handler: handler})
	self.AddToProcessorMap("MemberPotentialListExport", &memberServiceProcessorMemberPotentialListExport{handler: handler})
	self.AddToProcessorMap("DelMember", &memberServiceProcessorDelMember{handler: handler})
	self.AddToProcessorMap("UpdateMemberStatus", &memberServiceProcessorUpdateMemberStatus{handler: handler})
	self.AddToProcessorMap("UpdateMemberFollow", &memberServiceProcessorUpdateMemberFollow{handler: handler})
	self.AddToProcessorMap("MemberContractList", &memberServiceProcessorMemberContractList{handler: handler})
	return self
}
func (p *MemberServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type memberServiceProcessorCreateMember struct {
	handler MemberService
}

func (p *memberServiceProcessorCreateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceCreateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceCreateMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMember: "+err2.Error())
		oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMember struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMember: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberInfo struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberInfo: "+err2.Error())
		oprot.WriteMessageBegin("MemberInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberFullList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberFullList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberFullListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberFullList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberFullListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberFullList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberFullList: "+err2.Error())
		oprot.WriteMessageBegin("MemberFullList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberFullList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPotentialList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPotentialList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPotentialListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPotentialList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPotentialListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPotentialList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPotentialList: "+err2.Error())
		oprot.WriteMessageBegin("MemberPotentialList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPotentialList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberFullListExport struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberFullListExport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberFullListExportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberFullListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberFullListExportResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberFullListExport(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberFullListExport: "+err2.Error())
		oprot.WriteMessageBegin("MemberFullListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberFullListExport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberPotentialListExport struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberPotentialListExport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberPotentialListExportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberPotentialListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberPotentialListExportResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberPotentialListExport(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberPotentialListExport: "+err2.Error())
		oprot.WriteMessageBegin("MemberPotentialListExport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberPotentialListExport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorDelMember struct {
	handler MemberService
}

func (p *memberServiceProcessorDelMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceDelMemberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceDelMemberResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DelMember(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelMember: "+err2.Error())
		oprot.WriteMessageBegin("DelMember", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelMember", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMemberStatus struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMemberStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorUpdateMemberFollow struct {
	handler MemberService
}

func (p *memberServiceProcessorUpdateMemberFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceUpdateMemberFollowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateMemberFollow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceUpdateMemberFollowResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateMemberFollow(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateMemberFollow: "+err2.Error())
		oprot.WriteMessageBegin("UpdateMemberFollow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateMemberFollow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type memberServiceProcessorMemberContractList struct {
	handler MemberService
}

func (p *memberServiceProcessorMemberContractList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberServiceMemberContractListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MemberContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MemberServiceMemberContractListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.MemberContractList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MemberContractList: "+err2.Error())
		oprot.WriteMessageBegin("MemberContractList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MemberContractList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MemberServiceCreateMemberArgs struct {
	Req *CreateOrUpdateMemberReq `thrift:"req,1"`
}

func NewMemberServiceCreateMemberArgs() *MemberServiceCreateMemberArgs {
	return &MemberServiceCreateMemberArgs{}
}

func (p *MemberServiceCreateMemberArgs) InitDefault() {
}

var MemberServiceCreateMemberArgs_Req_DEFAULT *CreateOrUpdateMemberReq

func (p *MemberServiceCreateMemberArgs) GetReq() (v *CreateOrUpdateMemberReq) {
	if !p.IsSetReq() {
		return MemberServiceCreateMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceCreateMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceCreateMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceCreateMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceCreateMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceCreateMemberArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceCreateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCreateMemberArgs(%+v)", *p)

}

type MemberServiceCreateMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceCreateMemberResult() *MemberServiceCreateMemberResult {
	return &MemberServiceCreateMemberResult{}
}

func (p *MemberServiceCreateMemberResult) InitDefault() {
}

var MemberServiceCreateMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceCreateMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceCreateMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceCreateMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceCreateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceCreateMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceCreateMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceCreateMemberResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceCreateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceCreateMemberResult(%+v)", *p)

}

type MemberServiceUpdateMemberArgs struct {
	Req *CreateOrUpdateMemberReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberArgs() *MemberServiceUpdateMemberArgs {
	return &MemberServiceUpdateMemberArgs{}
}

func (p *MemberServiceUpdateMemberArgs) InitDefault() {
}

var MemberServiceUpdateMemberArgs_Req_DEFAULT *CreateOrUpdateMemberReq

func (p *MemberServiceUpdateMemberArgs) GetReq() (v *CreateOrUpdateMemberReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateOrUpdateMemberReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberArgs(%+v)", *p)

}

type MemberServiceUpdateMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberResult() *MemberServiceUpdateMemberResult {
	return &MemberServiceUpdateMemberResult{}
}

func (p *MemberServiceUpdateMemberResult) InitDefault() {
}

var MemberServiceUpdateMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberResult(%+v)", *p)

}

type MemberServiceMemberInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewMemberServiceMemberInfoArgs() *MemberServiceMemberInfoArgs {
	return &MemberServiceMemberInfoArgs{}
}

func (p *MemberServiceMemberInfoArgs) InitDefault() {
}

var MemberServiceMemberInfoArgs_Req_DEFAULT *base.IDReq

func (p *MemberServiceMemberInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberInfoArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberInfoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberInfoArgs(%+v)", *p)

}

type MemberServiceMemberInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberInfoResult() *MemberServiceMemberInfoResult {
	return &MemberServiceMemberInfoResult{}
}

func (p *MemberServiceMemberInfoResult) InitDefault() {
}

var MemberServiceMemberInfoResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberInfoResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberInfoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberInfoResult(%+v)", *p)

}

type MemberServiceMemberFullListArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberFullListArgs() *MemberServiceMemberFullListArgs {
	return &MemberServiceMemberFullListArgs{}
}

func (p *MemberServiceMemberFullListArgs) InitDefault() {
}

var MemberServiceMemberFullListArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberFullListArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberFullListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberFullListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberFullListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberFullListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberFullListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberFullListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberFullList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberFullListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberFullListArgs(%+v)", *p)

}

type MemberServiceMemberFullListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberFullListResult() *MemberServiceMemberFullListResult {
	return &MemberServiceMemberFullListResult{}
}

func (p *MemberServiceMemberFullListResult) InitDefault() {
}

var MemberServiceMemberFullListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberFullListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberFullListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberFullListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberFullListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberFullListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberFullListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberFullListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberFullList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberFullListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberFullListResult(%+v)", *p)

}

type MemberServiceMemberPotentialListArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberPotentialListArgs() *MemberServiceMemberPotentialListArgs {
	return &MemberServiceMemberPotentialListArgs{}
}

func (p *MemberServiceMemberPotentialListArgs) InitDefault() {
}

var MemberServiceMemberPotentialListArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberPotentialListArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPotentialListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPotentialListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPotentialListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPotentialListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPotentialListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPotentialListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPotentialList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPotentialListArgs(%+v)", *p)

}

type MemberServiceMemberPotentialListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPotentialListResult() *MemberServiceMemberPotentialListResult {
	return &MemberServiceMemberPotentialListResult{}
}

func (p *MemberServiceMemberPotentialListResult) InitDefault() {
}

var MemberServiceMemberPotentialListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPotentialListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPotentialListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPotentialListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPotentialListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPotentialListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPotentialListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPotentialListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPotentialList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPotentialListResult(%+v)", *p)

}

type MemberServiceMemberFullListExportArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberFullListExportArgs() *MemberServiceMemberFullListExportArgs {
	return &MemberServiceMemberFullListExportArgs{}
}

func (p *MemberServiceMemberFullListExportArgs) InitDefault() {
}

var MemberServiceMemberFullListExportArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberFullListExportArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberFullListExportArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberFullListExportArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberFullListExportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberFullListExportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberFullListExportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberFullListExportArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberFullListExport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberFullListExportArgs(%+v)", *p)

}

type MemberServiceMemberFullListExportResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberFullListExportResult() *MemberServiceMemberFullListExportResult {
	return &MemberServiceMemberFullListExportResult{}
}

func (p *MemberServiceMemberFullListExportResult) InitDefault() {
}

var MemberServiceMemberFullListExportResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberFullListExportResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberFullListExportResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberFullListExportResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberFullListExportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberFullListExportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberFullListExportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberFullListExportResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberFullListExport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberFullListExportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberFullListExportResult(%+v)", *p)

}

type MemberServiceMemberPotentialListExportArgs struct {
	Req *MemberListReq `thrift:"req,1"`
}

func NewMemberServiceMemberPotentialListExportArgs() *MemberServiceMemberPotentialListExportArgs {
	return &MemberServiceMemberPotentialListExportArgs{}
}

func (p *MemberServiceMemberPotentialListExportArgs) InitDefault() {
}

var MemberServiceMemberPotentialListExportArgs_Req_DEFAULT *MemberListReq

func (p *MemberServiceMemberPotentialListExportArgs) GetReq() (v *MemberListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberPotentialListExportArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberPotentialListExportArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberPotentialListExportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberPotentialListExportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPotentialListExportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberPotentialListExportArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPotentialListExport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPotentialListExportArgs(%+v)", *p)

}

type MemberServiceMemberPotentialListExportResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberPotentialListExportResult() *MemberServiceMemberPotentialListExportResult {
	return &MemberServiceMemberPotentialListExportResult{}
}

func (p *MemberServiceMemberPotentialListExportResult) InitDefault() {
}

var MemberServiceMemberPotentialListExportResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberPotentialListExportResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberPotentialListExportResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberPotentialListExportResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberPotentialListExportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberPotentialListExportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberPotentialListExportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberPotentialListExportResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberPotentialListExport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberPotentialListExportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberPotentialListExportResult(%+v)", *p)

}

type MemberServiceDelMemberArgs struct {
	Req *base.Ids `thrift:"req,1"`
}

func NewMemberServiceDelMemberArgs() *MemberServiceDelMemberArgs {
	return &MemberServiceDelMemberArgs{}
}

func (p *MemberServiceDelMemberArgs) InitDefault() {
}

var MemberServiceDelMemberArgs_Req_DEFAULT *base.Ids

func (p *MemberServiceDelMemberArgs) GetReq() (v *base.Ids) {
	if !p.IsSetReq() {
		return MemberServiceDelMemberArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceDelMemberArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceDelMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceDelMemberArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceDelMemberArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIds()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceDelMemberArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DelMember_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceDelMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDelMemberArgs(%+v)", *p)

}

type MemberServiceDelMemberResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceDelMemberResult() *MemberServiceDelMemberResult {
	return &MemberServiceDelMemberResult{}
}

func (p *MemberServiceDelMemberResult) InitDefault() {
}

var MemberServiceDelMemberResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceDelMemberResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceDelMemberResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceDelMemberResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceDelMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceDelMemberResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceDelMemberResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceDelMemberResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DelMember_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceDelMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceDelMemberResult(%+v)", *p)

}

type MemberServiceUpdateMemberStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberStatusArgs() *MemberServiceUpdateMemberStatusArgs {
	return &MemberServiceUpdateMemberStatusArgs{}
}

func (p *MemberServiceUpdateMemberStatusArgs) InitDefault() {
}

var MemberServiceUpdateMemberStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *MemberServiceUpdateMemberStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberStatusArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberStatusArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberStatusArgs(%+v)", *p)

}

type MemberServiceUpdateMemberStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberStatusResult() *MemberServiceUpdateMemberStatusResult {
	return &MemberServiceUpdateMemberStatusResult{}
}

func (p *MemberServiceUpdateMemberStatusResult) InitDefault() {
}

var MemberServiceUpdateMemberStatusResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberStatusResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberStatusResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberStatusResult(%+v)", *p)

}

type MemberServiceUpdateMemberFollowArgs struct {
	Req *UpdateMemberFollowReq `thrift:"req,1"`
}

func NewMemberServiceUpdateMemberFollowArgs() *MemberServiceUpdateMemberFollowArgs {
	return &MemberServiceUpdateMemberFollowArgs{}
}

func (p *MemberServiceUpdateMemberFollowArgs) InitDefault() {
}

var MemberServiceUpdateMemberFollowArgs_Req_DEFAULT *UpdateMemberFollowReq

func (p *MemberServiceUpdateMemberFollowArgs) GetReq() (v *UpdateMemberFollowReq) {
	if !p.IsSetReq() {
		return MemberServiceUpdateMemberFollowArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceUpdateMemberFollowArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceUpdateMemberFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceUpdateMemberFollowArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberFollowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateMemberFollowReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceUpdateMemberFollowArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberFollowArgs(%+v)", *p)

}

type MemberServiceUpdateMemberFollowResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceUpdateMemberFollowResult() *MemberServiceUpdateMemberFollowResult {
	return &MemberServiceUpdateMemberFollowResult{}
}

func (p *MemberServiceUpdateMemberFollowResult) InitDefault() {
}

var MemberServiceUpdateMemberFollowResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceUpdateMemberFollowResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceUpdateMemberFollowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceUpdateMemberFollowResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceUpdateMemberFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceUpdateMemberFollowResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceUpdateMemberFollowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceUpdateMemberFollowResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateMemberFollow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceUpdateMemberFollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceUpdateMemberFollowResult(%+v)", *p)

}

type MemberServiceMemberContractListArgs struct {
	Req *MemberContractListReq `thrift:"req,1"`
}

func NewMemberServiceMemberContractListArgs() *MemberServiceMemberContractListArgs {
	return &MemberServiceMemberContractListArgs{}
}

func (p *MemberServiceMemberContractListArgs) InitDefault() {
}

var MemberServiceMemberContractListArgs_Req_DEFAULT *MemberContractListReq

func (p *MemberServiceMemberContractListArgs) GetReq() (v *MemberContractListReq) {
	if !p.IsSetReq() {
		return MemberServiceMemberContractListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_MemberServiceMemberContractListArgs = map[int16]string{
	1: "req",
}

func (p *MemberServiceMemberContractListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MemberServiceMemberContractListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberContractListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMemberContractListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MemberServiceMemberContractListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MemberServiceMemberContractListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberContractListArgs(%+v)", *p)

}

type MemberServiceMemberContractListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewMemberServiceMemberContractListResult() *MemberServiceMemberContractListResult {
	return &MemberServiceMemberContractListResult{}
}

func (p *MemberServiceMemberContractListResult) InitDefault() {
}

var MemberServiceMemberContractListResult_Success_DEFAULT *base.NilResponse

func (p *MemberServiceMemberContractListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return MemberServiceMemberContractListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MemberServiceMemberContractListResult = map[int16]string{
	0: "success",
}

func (p *MemberServiceMemberContractListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberServiceMemberContractListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MemberServiceMemberContractListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MemberServiceMemberContractListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MemberContractList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MemberServiceMemberContractListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberServiceMemberContractListResult(%+v)", *p)

}

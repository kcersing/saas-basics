// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package contest

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"saas/idl_gen/model/base"
)

type ResultsUploadReq struct {
	Pic string `thrift:"pic,1,optional" form:"pic" json:"pic" query:"pic"`
}

func NewResultsUploadReq() *ResultsUploadReq {
	return &ResultsUploadReq{

		Pic: "",
	}
}

func (p *ResultsUploadReq) InitDefault() {
	p.Pic = ""
}

var ResultsUploadReq_Pic_DEFAULT string = ""

func (p *ResultsUploadReq) GetPic() (v string) {
	if !p.IsSetPic() {
		return ResultsUploadReq_Pic_DEFAULT
	}
	return p.Pic
}

var fieldIDToName_ResultsUploadReq = map[int16]string{
	1: "pic",
}

func (p *ResultsUploadReq) IsSetPic() bool {
	return p.Pic != ResultsUploadReq_Pic_DEFAULT
}

func (p *ResultsUploadReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResultsUploadReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResultsUploadReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pic = _field
	return nil
}

func (p *ResultsUploadReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResultsUploadReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResultsUploadReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResultsUploadReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultsUploadReq(%+v)", *p)

}

type ContestListReq struct {
	Page        int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize    int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name        string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	SignStartAt string `thrift:"signStartAt,4,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt   string `thrift:"signEndAt,5,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	StartAt     string `thrift:"startAt,6,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt       string `thrift:"endAt,7,optional" form:"endAt" json:"endAt" query:"endAt"`
	Condition   int64  `thrift:"condition,8,optional" form:"condition" json:"condition" query:"condition"`
}

func NewContestListReq() *ContestListReq {
	return &ContestListReq{

		Page:        1,
		PageSize:    100,
		Name:        "",
		SignStartAt: "",
		SignEndAt:   "",
		StartAt:     "",
		EndAt:       "",
		Condition:   0,
	}
}

func (p *ContestListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.StartAt = ""
	p.EndAt = ""
	p.Condition = 0
}

var ContestListReq_Page_DEFAULT int64 = 1

func (p *ContestListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ContestListReq_Page_DEFAULT
	}
	return p.Page
}

var ContestListReq_PageSize_DEFAULT int64 = 100

func (p *ContestListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ContestListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var ContestListReq_Name_DEFAULT string = ""

func (p *ContestListReq) GetName() (v string) {
	if !p.IsSetName() {
		return ContestListReq_Name_DEFAULT
	}
	return p.Name
}

var ContestListReq_SignStartAt_DEFAULT string = ""

func (p *ContestListReq) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return ContestListReq_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var ContestListReq_SignEndAt_DEFAULT string = ""

func (p *ContestListReq) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return ContestListReq_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var ContestListReq_StartAt_DEFAULT string = ""

func (p *ContestListReq) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ContestListReq_StartAt_DEFAULT
	}
	return p.StartAt
}

var ContestListReq_EndAt_DEFAULT string = ""

func (p *ContestListReq) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return ContestListReq_EndAt_DEFAULT
	}
	return p.EndAt
}

var ContestListReq_Condition_DEFAULT int64 = 0

func (p *ContestListReq) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return ContestListReq_Condition_DEFAULT
	}
	return p.Condition
}

var fieldIDToName_ContestListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "signStartAt",
	5: "signEndAt",
	6: "startAt",
	7: "endAt",
	8: "condition",
}

func (p *ContestListReq) IsSetPage() bool {
	return p.Page != ContestListReq_Page_DEFAULT
}

func (p *ContestListReq) IsSetPageSize() bool {
	return p.PageSize != ContestListReq_PageSize_DEFAULT
}

func (p *ContestListReq) IsSetName() bool {
	return p.Name != ContestListReq_Name_DEFAULT
}

func (p *ContestListReq) IsSetSignStartAt() bool {
	return p.SignStartAt != ContestListReq_SignStartAt_DEFAULT
}

func (p *ContestListReq) IsSetSignEndAt() bool {
	return p.SignEndAt != ContestListReq_SignEndAt_DEFAULT
}

func (p *ContestListReq) IsSetStartAt() bool {
	return p.StartAt != ContestListReq_StartAt_DEFAULT
}

func (p *ContestListReq) IsSetEndAt() bool {
	return p.EndAt != ContestListReq_EndAt_DEFAULT
}

func (p *ContestListReq) IsSetCondition() bool {
	return p.Condition != ContestListReq_Condition_DEFAULT
}

func (p *ContestListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ContestListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *ContestListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ContestListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *ContestListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *ContestListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ContestListReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ContestListReq) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}

func (p *ContestListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContestListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContestListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContestListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContestListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContestListReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ContestListReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ContestListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestListReq(%+v)", *p)

}

type ParticipantListReq struct {
	Page      int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize  int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name      string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Mobile    string `thrift:"mobile,4,optional" form:"mobile" json:"mobile" query:"mobile"`
	Sn        string `thrift:"sn,5,optional" form:"sn" json:"sn" query:"sn"`
	ContestId int64  `thrift:"contestId,6,optional" form:"contestId" json:"contestId" query:"contestId"`
}

func NewParticipantListReq() *ParticipantListReq {
	return &ParticipantListReq{

		Page:      1,
		PageSize:  100,
		Name:      "",
		Mobile:    "",
		Sn:        "",
		ContestId: 0,
	}
}

func (p *ParticipantListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Mobile = ""
	p.Sn = ""
	p.ContestId = 0
}

var ParticipantListReq_Page_DEFAULT int64 = 1

func (p *ParticipantListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return ParticipantListReq_Page_DEFAULT
	}
	return p.Page
}

var ParticipantListReq_PageSize_DEFAULT int64 = 100

func (p *ParticipantListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ParticipantListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var ParticipantListReq_Name_DEFAULT string = ""

func (p *ParticipantListReq) GetName() (v string) {
	if !p.IsSetName() {
		return ParticipantListReq_Name_DEFAULT
	}
	return p.Name
}

var ParticipantListReq_Mobile_DEFAULT string = ""

func (p *ParticipantListReq) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return ParticipantListReq_Mobile_DEFAULT
	}
	return p.Mobile
}

var ParticipantListReq_Sn_DEFAULT string = ""

func (p *ParticipantListReq) GetSn() (v string) {
	if !p.IsSetSn() {
		return ParticipantListReq_Sn_DEFAULT
	}
	return p.Sn
}

var ParticipantListReq_ContestId_DEFAULT int64 = 0

func (p *ParticipantListReq) GetContestId() (v int64) {
	if !p.IsSetContestId() {
		return ParticipantListReq_ContestId_DEFAULT
	}
	return p.ContestId
}

var fieldIDToName_ParticipantListReq = map[int16]string{
	1: "page",
	2: "pageSize",
	3: "name",
	4: "mobile",
	5: "sn",
	6: "contestId",
}

func (p *ParticipantListReq) IsSetPage() bool {
	return p.Page != ParticipantListReq_Page_DEFAULT
}

func (p *ParticipantListReq) IsSetPageSize() bool {
	return p.PageSize != ParticipantListReq_PageSize_DEFAULT
}

func (p *ParticipantListReq) IsSetName() bool {
	return p.Name != ParticipantListReq_Name_DEFAULT
}

func (p *ParticipantListReq) IsSetMobile() bool {
	return p.Mobile != ParticipantListReq_Mobile_DEFAULT
}

func (p *ParticipantListReq) IsSetSn() bool {
	return p.Sn != ParticipantListReq_Sn_DEFAULT
}

func (p *ParticipantListReq) IsSetContestId() bool {
	return p.ContestId != ParticipantListReq_ContestId_DEFAULT
}

func (p *ParticipantListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParticipantListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParticipantListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ParticipantListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *ParticipantListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ParticipantListReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *ParticipantListReq) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sn = _field
	return nil
}
func (p *ParticipantListReq) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContestId = _field
	return nil
}

func (p *ParticipantListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParticipantListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParticipantListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParticipantListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ParticipantListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ParticipantListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSn() {
		if err = oprot.WriteFieldBegin("sn", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ParticipantListReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetContestId() {
		if err = oprot.WriteFieldBegin("contestId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ContestId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ParticipantListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParticipantListReq(%+v)", *p)

}

type ParticipantInfo struct {
	ID        int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	ContestId int64  `thrift:"contestId,2,optional" form:"contestId" json:"contestId" query:"contestId"`
	Fields    string `thrift:"fields,3,optional" form:"fields" json:"fields" query:"fields"`
	Name      string `thrift:"name,4,optional" form:"name" json:"name" query:"name"`
	Mobile    string `thrift:"mobile,5,optional" form:"mobile" json:"mobile" query:"mobile"`
}

func NewParticipantInfo() *ParticipantInfo {
	return &ParticipantInfo{

		ID:        0,
		ContestId: 0,
		Fields:    "",
		Name:      "",
		Mobile:    "",
	}
}

func (p *ParticipantInfo) InitDefault() {
	p.ID = 0
	p.ContestId = 0
	p.Fields = ""
	p.Name = ""
	p.Mobile = ""
}

var ParticipantInfo_ID_DEFAULT int64 = 0

func (p *ParticipantInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ParticipantInfo_ID_DEFAULT
	}
	return p.ID
}

var ParticipantInfo_ContestId_DEFAULT int64 = 0

func (p *ParticipantInfo) GetContestId() (v int64) {
	if !p.IsSetContestId() {
		return ParticipantInfo_ContestId_DEFAULT
	}
	return p.ContestId
}

var ParticipantInfo_Fields_DEFAULT string = ""

func (p *ParticipantInfo) GetFields() (v string) {
	if !p.IsSetFields() {
		return ParticipantInfo_Fields_DEFAULT
	}
	return p.Fields
}

var ParticipantInfo_Name_DEFAULT string = ""

func (p *ParticipantInfo) GetName() (v string) {
	if !p.IsSetName() {
		return ParticipantInfo_Name_DEFAULT
	}
	return p.Name
}

var ParticipantInfo_Mobile_DEFAULT string = ""

func (p *ParticipantInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return ParticipantInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var fieldIDToName_ParticipantInfo = map[int16]string{
	1: "id",
	2: "contestId",
	3: "fields",
	4: "name",
	5: "mobile",
}

func (p *ParticipantInfo) IsSetID() bool {
	return p.ID != ParticipantInfo_ID_DEFAULT
}

func (p *ParticipantInfo) IsSetContestId() bool {
	return p.ContestId != ParticipantInfo_ContestId_DEFAULT
}

func (p *ParticipantInfo) IsSetFields() bool {
	return p.Fields != ParticipantInfo_Fields_DEFAULT
}

func (p *ParticipantInfo) IsSetName() bool {
	return p.Name != ParticipantInfo_Name_DEFAULT
}

func (p *ParticipantInfo) IsSetMobile() bool {
	return p.Mobile != ParticipantInfo_Mobile_DEFAULT
}

func (p *ParticipantInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParticipantInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParticipantInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ParticipantInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContestId = _field
	return nil
}
func (p *ParticipantInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Fields = _field
	return nil
}
func (p *ParticipantInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ParticipantInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}

func (p *ParticipantInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParticipantInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParticipantInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContestId() {
		if err = oprot.WriteFieldBegin("contestId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ContestId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParticipantInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Fields); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ParticipantInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ParticipantInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ParticipantInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParticipantInfo(%+v)", *p)

}

type ContestInfo struct {
	ID          int64   `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name        string  `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	SignNumber  int64   `thrift:"signNumber,3,optional" form:"signNumber" json:"signNumber" query:"signNumber"`
	SignStartAt string  `thrift:"signStartAt,4,optional" form:"signStartAt" json:"signStartAt" query:"signStartAt"`
	SignEndAt   string  `thrift:"signEndAt,5,optional" form:"signEndAt" json:"signEndAt" query:"signEndAt"`
	Number      int64   `thrift:"number,6,optional" form:"number" json:"number" query:"number"`
	StartAt     string  `thrift:"startAt,7,optional" form:"startAt" json:"startAt" query:"startAt"`
	EndAt       string  `thrift:"endAt,8,optional" form:"endAt" json:"endAt" query:"endAt"`
	Pic         string  `thrift:"pic,9,optional" form:"pic" json:"pic" query:"pic"`
	Sponsor     string  `thrift:"sponsor,10,optional" form:"sponsor" json:"sponsor" query:"sponsor"`
	Fee         float64 `thrift:"fee,11,optional" form:"fee" json:"fee" query:"fee"`
	IsCancel    int64   `thrift:"isCancel,12,optional" form:"isCancel" json:"isCancel" query:"isCancel"`
	CancelTime  int64   `thrift:"cancelTime,13,optional" form:"cancelTime" json:"cancelTime" query:"cancelTime"`
	Detail      string  `thrift:"detail,14,optional" form:"detail" json:"detail" query:"detail"`
	SignFields  string  `thrift:"signFields,15,optional" form:"signFields" json:"signFields" query:"signFields"`
	CreatedAt   string  `thrift:"createdAt,16,optional" form:"createdAt" json:"createdAt" query:"createdAt"`
	UpdatedAt   string  `thrift:"updatedAt,17,optional" form:"updatedAt" json:"updatedAt" query:"updatedAt"`
	Condition   int64   `thrift:"condition,18,optional" form:"condition" json:"condition" query:"condition"`
	IsFee       int64   `thrift:"isFee,19,optional" form:"isFee" json:"isFee" query:"isFee"`
	CreatedId   int64   `thrift:"createdId,20,optional" form:"createdId" json:"createdId" query:"createdId"`
	CreatedName string  `thrift:"createdName,21,optional" form:"createdName" json:"createdName" query:"createdName"`
	IsShow      int64   `thrift:"isShow,22,optional" form:"isShow" json:"isShow" query:"isShow"`
}

func NewContestInfo() *ContestInfo {
	return &ContestInfo{

		ID:          0,
		Name:        "",
		SignNumber:  0,
		SignStartAt: "",
		SignEndAt:   "",
		Number:      0,
		StartAt:     "",
		EndAt:       "",
		Pic:         "",
		Sponsor:     "",
		Fee:         0.0,
		IsCancel:    0,
		CancelTime:  0,
		Detail:      "",
		SignFields:  "",
		CreatedAt:   "",
		UpdatedAt:   "",
		Condition:   0,
		IsFee:       0,
		CreatedId:   0,
		CreatedName: "0",
		IsShow:      1,
	}
}

func (p *ContestInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.SignNumber = 0
	p.SignStartAt = ""
	p.SignEndAt = ""
	p.Number = 0
	p.StartAt = ""
	p.EndAt = ""
	p.Pic = ""
	p.Sponsor = ""
	p.Fee = 0.0
	p.IsCancel = 0
	p.CancelTime = 0
	p.Detail = ""
	p.SignFields = ""
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Condition = 0
	p.IsFee = 0
	p.CreatedId = 0
	p.CreatedName = "0"
	p.IsShow = 1
}

var ContestInfo_ID_DEFAULT int64 = 0

func (p *ContestInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return ContestInfo_ID_DEFAULT
	}
	return p.ID
}

var ContestInfo_Name_DEFAULT string = ""

func (p *ContestInfo) GetName() (v string) {
	if !p.IsSetName() {
		return ContestInfo_Name_DEFAULT
	}
	return p.Name
}

var ContestInfo_SignNumber_DEFAULT int64 = 0

func (p *ContestInfo) GetSignNumber() (v int64) {
	if !p.IsSetSignNumber() {
		return ContestInfo_SignNumber_DEFAULT
	}
	return p.SignNumber
}

var ContestInfo_SignStartAt_DEFAULT string = ""

func (p *ContestInfo) GetSignStartAt() (v string) {
	if !p.IsSetSignStartAt() {
		return ContestInfo_SignStartAt_DEFAULT
	}
	return p.SignStartAt
}

var ContestInfo_SignEndAt_DEFAULT string = ""

func (p *ContestInfo) GetSignEndAt() (v string) {
	if !p.IsSetSignEndAt() {
		return ContestInfo_SignEndAt_DEFAULT
	}
	return p.SignEndAt
}

var ContestInfo_Number_DEFAULT int64 = 0

func (p *ContestInfo) GetNumber() (v int64) {
	if !p.IsSetNumber() {
		return ContestInfo_Number_DEFAULT
	}
	return p.Number
}

var ContestInfo_StartAt_DEFAULT string = ""

func (p *ContestInfo) GetStartAt() (v string) {
	if !p.IsSetStartAt() {
		return ContestInfo_StartAt_DEFAULT
	}
	return p.StartAt
}

var ContestInfo_EndAt_DEFAULT string = ""

func (p *ContestInfo) GetEndAt() (v string) {
	if !p.IsSetEndAt() {
		return ContestInfo_EndAt_DEFAULT
	}
	return p.EndAt
}

var ContestInfo_Pic_DEFAULT string = ""

func (p *ContestInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return ContestInfo_Pic_DEFAULT
	}
	return p.Pic
}

var ContestInfo_Sponsor_DEFAULT string = ""

func (p *ContestInfo) GetSponsor() (v string) {
	if !p.IsSetSponsor() {
		return ContestInfo_Sponsor_DEFAULT
	}
	return p.Sponsor
}

var ContestInfo_Fee_DEFAULT float64 = 0.0

func (p *ContestInfo) GetFee() (v float64) {
	if !p.IsSetFee() {
		return ContestInfo_Fee_DEFAULT
	}
	return p.Fee
}

var ContestInfo_IsCancel_DEFAULT int64 = 0

func (p *ContestInfo) GetIsCancel() (v int64) {
	if !p.IsSetIsCancel() {
		return ContestInfo_IsCancel_DEFAULT
	}
	return p.IsCancel
}

var ContestInfo_CancelTime_DEFAULT int64 = 0

func (p *ContestInfo) GetCancelTime() (v int64) {
	if !p.IsSetCancelTime() {
		return ContestInfo_CancelTime_DEFAULT
	}
	return p.CancelTime
}

var ContestInfo_Detail_DEFAULT string = ""

func (p *ContestInfo) GetDetail() (v string) {
	if !p.IsSetDetail() {
		return ContestInfo_Detail_DEFAULT
	}
	return p.Detail
}

var ContestInfo_SignFields_DEFAULT string = ""

func (p *ContestInfo) GetSignFields() (v string) {
	if !p.IsSetSignFields() {
		return ContestInfo_SignFields_DEFAULT
	}
	return p.SignFields
}

var ContestInfo_CreatedAt_DEFAULT string = ""

func (p *ContestInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ContestInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var ContestInfo_UpdatedAt_DEFAULT string = ""

func (p *ContestInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return ContestInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var ContestInfo_Condition_DEFAULT int64 = 0

func (p *ContestInfo) GetCondition() (v int64) {
	if !p.IsSetCondition() {
		return ContestInfo_Condition_DEFAULT
	}
	return p.Condition
}

var ContestInfo_IsFee_DEFAULT int64 = 0

func (p *ContestInfo) GetIsFee() (v int64) {
	if !p.IsSetIsFee() {
		return ContestInfo_IsFee_DEFAULT
	}
	return p.IsFee
}

var ContestInfo_CreatedId_DEFAULT int64 = 0

func (p *ContestInfo) GetCreatedId() (v int64) {
	if !p.IsSetCreatedId() {
		return ContestInfo_CreatedId_DEFAULT
	}
	return p.CreatedId
}

var ContestInfo_CreatedName_DEFAULT string = "0"

func (p *ContestInfo) GetCreatedName() (v string) {
	if !p.IsSetCreatedName() {
		return ContestInfo_CreatedName_DEFAULT
	}
	return p.CreatedName
}

var ContestInfo_IsShow_DEFAULT int64 = 1

func (p *ContestInfo) GetIsShow() (v int64) {
	if !p.IsSetIsShow() {
		return ContestInfo_IsShow_DEFAULT
	}
	return p.IsShow
}

var fieldIDToName_ContestInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "signNumber",
	4:  "signStartAt",
	5:  "signEndAt",
	6:  "number",
	7:  "startAt",
	8:  "endAt",
	9:  "pic",
	10: "sponsor",
	11: "fee",
	12: "isCancel",
	13: "cancelTime",
	14: "detail",
	15: "signFields",
	16: "createdAt",
	17: "updatedAt",
	18: "condition",
	19: "isFee",
	20: "createdId",
	21: "createdName",
	22: "isShow",
}

func (p *ContestInfo) IsSetID() bool {
	return p.ID != ContestInfo_ID_DEFAULT
}

func (p *ContestInfo) IsSetName() bool {
	return p.Name != ContestInfo_Name_DEFAULT
}

func (p *ContestInfo) IsSetSignNumber() bool {
	return p.SignNumber != ContestInfo_SignNumber_DEFAULT
}

func (p *ContestInfo) IsSetSignStartAt() bool {
	return p.SignStartAt != ContestInfo_SignStartAt_DEFAULT
}

func (p *ContestInfo) IsSetSignEndAt() bool {
	return p.SignEndAt != ContestInfo_SignEndAt_DEFAULT
}

func (p *ContestInfo) IsSetNumber() bool {
	return p.Number != ContestInfo_Number_DEFAULT
}

func (p *ContestInfo) IsSetStartAt() bool {
	return p.StartAt != ContestInfo_StartAt_DEFAULT
}

func (p *ContestInfo) IsSetEndAt() bool {
	return p.EndAt != ContestInfo_EndAt_DEFAULT
}

func (p *ContestInfo) IsSetPic() bool {
	return p.Pic != ContestInfo_Pic_DEFAULT
}

func (p *ContestInfo) IsSetSponsor() bool {
	return p.Sponsor != ContestInfo_Sponsor_DEFAULT
}

func (p *ContestInfo) IsSetFee() bool {
	return p.Fee != ContestInfo_Fee_DEFAULT
}

func (p *ContestInfo) IsSetIsCancel() bool {
	return p.IsCancel != ContestInfo_IsCancel_DEFAULT
}

func (p *ContestInfo) IsSetCancelTime() bool {
	return p.CancelTime != ContestInfo_CancelTime_DEFAULT
}

func (p *ContestInfo) IsSetDetail() bool {
	return p.Detail != ContestInfo_Detail_DEFAULT
}

func (p *ContestInfo) IsSetSignFields() bool {
	return p.SignFields != ContestInfo_SignFields_DEFAULT
}

func (p *ContestInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != ContestInfo_CreatedAt_DEFAULT
}

func (p *ContestInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != ContestInfo_UpdatedAt_DEFAULT
}

func (p *ContestInfo) IsSetCondition() bool {
	return p.Condition != ContestInfo_Condition_DEFAULT
}

func (p *ContestInfo) IsSetIsFee() bool {
	return p.IsFee != ContestInfo_IsFee_DEFAULT
}

func (p *ContestInfo) IsSetCreatedId() bool {
	return p.CreatedId != ContestInfo_CreatedId_DEFAULT
}

func (p *ContestInfo) IsSetCreatedName() bool {
	return p.CreatedName != ContestInfo_CreatedName_DEFAULT
}

func (p *ContestInfo) IsSetIsShow() bool {
	return p.IsShow != ContestInfo_IsShow_DEFAULT
}

func (p *ContestInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *ContestInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ContestInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignNumber = _field
	return nil
}
func (p *ContestInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignStartAt = _field
	return nil
}
func (p *ContestInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignEndAt = _field
	return nil
}
func (p *ContestInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Number = _field
	return nil
}
func (p *ContestInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartAt = _field
	return nil
}
func (p *ContestInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndAt = _field
	return nil
}
func (p *ContestInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pic = _field
	return nil
}
func (p *ContestInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sponsor = _field
	return nil
}
func (p *ContestInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Fee = _field
	return nil
}
func (p *ContestInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCancel = _field
	return nil
}
func (p *ContestInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CancelTime = _field
	return nil
}
func (p *ContestInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Detail = _field
	return nil
}
func (p *ContestInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SignFields = _field
	return nil
}
func (p *ContestInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *ContestInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *ContestInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Condition = _field
	return nil
}
func (p *ContestInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsFee = _field
	return nil
}
func (p *ContestInfo) ReadField20(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedId = _field
	return nil
}
func (p *ContestInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedName = _field
	return nil
}
func (p *ContestInfo) ReadField22(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsShow = _field
	return nil
}

func (p *ContestInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContestInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignNumber() {
		if err = oprot.WriteFieldBegin("signNumber", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.SignNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContestInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignStartAt() {
		if err = oprot.WriteFieldBegin("signStartAt", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignStartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContestInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignEndAt() {
		if err = oprot.WriteFieldBegin("signEndAt", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignEndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContestInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err = oprot.WriteFieldBegin("number", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Number); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContestInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("startAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ContestInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("endAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ContestInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ContestInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsor() {
		if err = oprot.WriteFieldBegin("sponsor", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Sponsor); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ContestInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFee() {
		if err = oprot.WriteFieldBegin("fee", thrift.DOUBLE, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.Fee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ContestInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCancel() {
		if err = oprot.WriteFieldBegin("isCancel", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsCancel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ContestInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelTime() {
		if err = oprot.WriteFieldBegin("cancelTime", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CancelTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ContestInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Detail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ContestInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignFields() {
		if err = oprot.WriteFieldBegin("signFields", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SignFields); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ContestInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ContestInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ContestInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCondition() {
		if err = oprot.WriteFieldBegin("condition", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Condition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ContestInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFee() {
		if err = oprot.WriteFieldBegin("isFee", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsFee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ContestInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedId() {
		if err = oprot.WriteFieldBegin("createdId", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.CreatedId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ContestInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedName() {
		if err = oprot.WriteFieldBegin("createdName", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ContestInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsShow() {
		if err = oprot.WriteFieldBegin("isShow", thrift.I64, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsShow); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ContestInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestInfo(%+v)", *p)

}

type ContestService interface {
	CreateContest(ctx context.Context, req *ContestInfo) (r *base.NilResponse, err error)

	UpdateContest(ctx context.Context, req *ContestInfo) (r *base.NilResponse, err error)

	ContestInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	ContestList(ctx context.Context, req *ContestListReq) (r *base.NilResponse, err error)

	UpdateContestStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	UpdateContestShow(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	CreateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error)

	UpdateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error)

	ContestParticipantInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	ParticipantListList(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error)

	UpdateParticipantStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)

	ResultsUpload(ctx context.Context, req *ResultsUploadReq) (r *base.NilResponse, err error)

	PromotionalLinks(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)

	DelContest(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error)
}

type ContestServiceClient struct {
	c thrift.TClient
}

func NewContestServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ContestServiceClient {
	return &ContestServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewContestServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ContestServiceClient {
	return &ContestServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewContestServiceClient(c thrift.TClient) *ContestServiceClient {
	return &ContestServiceClient{
		c: c,
	}
}

func (p *ContestServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ContestServiceClient) CreateContest(ctx context.Context, req *ContestInfo) (r *base.NilResponse, err error) {
	var _args ContestServiceCreateContestArgs
	_args.Req = req
	var _result ContestServiceCreateContestResult
	if err = p.Client_().Call(ctx, "CreateContest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) UpdateContest(ctx context.Context, req *ContestInfo) (r *base.NilResponse, err error) {
	var _args ContestServiceUpdateContestArgs
	_args.Req = req
	var _result ContestServiceUpdateContestResult
	if err = p.Client_().Call(ctx, "UpdateContest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) ContestInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args ContestServiceContestInfoArgs
	_args.Req = req
	var _result ContestServiceContestInfoResult
	if err = p.Client_().Call(ctx, "ContestInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) ContestList(ctx context.Context, req *ContestListReq) (r *base.NilResponse, err error) {
	var _args ContestServiceContestListArgs
	_args.Req = req
	var _result ContestServiceContestListResult
	if err = p.Client_().Call(ctx, "ContestList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) UpdateContestStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ContestServiceUpdateContestStatusArgs
	_args.Req = req
	var _result ContestServiceUpdateContestStatusResult
	if err = p.Client_().Call(ctx, "UpdateContestStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) UpdateContestShow(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ContestServiceUpdateContestShowArgs
	_args.Req = req
	var _result ContestServiceUpdateContestShowResult
	if err = p.Client_().Call(ctx, "UpdateContestShow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) CreateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error) {
	var _args ContestServiceCreateParticipantArgs
	_args.Req = req
	var _result ContestServiceCreateParticipantResult
	if err = p.Client_().Call(ctx, "CreateParticipant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) UpdateParticipant(ctx context.Context, req *ParticipantInfo) (r *base.NilResponse, err error) {
	var _args ContestServiceUpdateParticipantArgs
	_args.Req = req
	var _result ContestServiceUpdateParticipantResult
	if err = p.Client_().Call(ctx, "UpdateParticipant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) ContestParticipantInfo(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args ContestServiceContestParticipantInfoArgs
	_args.Req = req
	var _result ContestServiceContestParticipantInfoResult
	if err = p.Client_().Call(ctx, "ContestParticipantInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) ParticipantListList(ctx context.Context, req *ParticipantListReq) (r *base.NilResponse, err error) {
	var _args ContestServiceParticipantListListArgs
	_args.Req = req
	var _result ContestServiceParticipantListListResult
	if err = p.Client_().Call(ctx, "ParticipantListList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) UpdateParticipantStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args ContestServiceUpdateParticipantStatusArgs
	_args.Req = req
	var _result ContestServiceUpdateParticipantStatusResult
	if err = p.Client_().Call(ctx, "UpdateParticipantStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) ResultsUpload(ctx context.Context, req *ResultsUploadReq) (r *base.NilResponse, err error) {
	var _args ContestServiceResultsUploadArgs
	_args.Req = req
	var _result ContestServiceResultsUploadResult
	if err = p.Client_().Call(ctx, "ResultsUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) PromotionalLinks(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args ContestServicePromotionalLinksArgs
	_args.Req = req
	var _result ContestServicePromotionalLinksResult
	if err = p.Client_().Call(ctx, "PromotionalLinks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ContestServiceClient) DelContest(ctx context.Context, req *base.IDReq) (r *base.NilResponse, err error) {
	var _args ContestServiceDelContestArgs
	_args.Req = req
	var _result ContestServiceDelContestResult
	if err = p.Client_().Call(ctx, "DelContest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ContestServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ContestService
}

func (p *ContestServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ContestServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ContestServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewContestServiceProcessor(handler ContestService) *ContestServiceProcessor {
	self := &ContestServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateContest", &contestServiceProcessorCreateContest{handler: handler})
	self.AddToProcessorMap("UpdateContest", &contestServiceProcessorUpdateContest{handler: handler})
	self.AddToProcessorMap("ContestInfo", &contestServiceProcessorContestInfo{handler: handler})
	self.AddToProcessorMap("ContestList", &contestServiceProcessorContestList{handler: handler})
	self.AddToProcessorMap("UpdateContestStatus", &contestServiceProcessorUpdateContestStatus{handler: handler})
	self.AddToProcessorMap("UpdateContestShow", &contestServiceProcessorUpdateContestShow{handler: handler})
	self.AddToProcessorMap("CreateParticipant", &contestServiceProcessorCreateParticipant{handler: handler})
	self.AddToProcessorMap("UpdateParticipant", &contestServiceProcessorUpdateParticipant{handler: handler})
	self.AddToProcessorMap("ContestParticipantInfo", &contestServiceProcessorContestParticipantInfo{handler: handler})
	self.AddToProcessorMap("ParticipantListList", &contestServiceProcessorParticipantListList{handler: handler})
	self.AddToProcessorMap("UpdateParticipantStatus", &contestServiceProcessorUpdateParticipantStatus{handler: handler})
	self.AddToProcessorMap("ResultsUpload", &contestServiceProcessorResultsUpload{handler: handler})
	self.AddToProcessorMap("PromotionalLinks", &contestServiceProcessorPromotionalLinks{handler: handler})
	self.AddToProcessorMap("DelContest", &contestServiceProcessorDelContest{handler: handler})
	return self
}
func (p *ContestServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type contestServiceProcessorCreateContest struct {
	handler ContestService
}

func (p *contestServiceProcessorCreateContest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceCreateContestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceCreateContestResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateContest(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateContest: "+err2.Error())
		oprot.WriteMessageBegin("CreateContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateContest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorUpdateContest struct {
	handler ContestService
}

func (p *contestServiceProcessorUpdateContest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceUpdateContestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceUpdateContestResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateContest(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateContest: "+err2.Error())
		oprot.WriteMessageBegin("UpdateContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateContest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorContestInfo struct {
	handler ContestService
}

func (p *contestServiceProcessorContestInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceContestInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContestInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceContestInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContestInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContestInfo: "+err2.Error())
		oprot.WriteMessageBegin("ContestInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContestInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorContestList struct {
	handler ContestService
}

func (p *contestServiceProcessorContestList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceContestListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContestList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceContestListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContestList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContestList: "+err2.Error())
		oprot.WriteMessageBegin("ContestList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContestList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorUpdateContestStatus struct {
	handler ContestService
}

func (p *contestServiceProcessorUpdateContestStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceUpdateContestStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateContestStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceUpdateContestStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateContestStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateContestStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateContestStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateContestStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorUpdateContestShow struct {
	handler ContestService
}

func (p *contestServiceProcessorUpdateContestShow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceUpdateContestShowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateContestShow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceUpdateContestShowResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateContestShow(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateContestShow: "+err2.Error())
		oprot.WriteMessageBegin("UpdateContestShow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateContestShow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorCreateParticipant struct {
	handler ContestService
}

func (p *contestServiceProcessorCreateParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceCreateParticipantArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceCreateParticipantResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateParticipant(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateParticipant: "+err2.Error())
		oprot.WriteMessageBegin("CreateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateParticipant", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorUpdateParticipant struct {
	handler ContestService
}

func (p *contestServiceProcessorUpdateParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceUpdateParticipantArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceUpdateParticipantResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateParticipant(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateParticipant: "+err2.Error())
		oprot.WriteMessageBegin("UpdateParticipant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateParticipant", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorContestParticipantInfo struct {
	handler ContestService
}

func (p *contestServiceProcessorContestParticipantInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceContestParticipantInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ContestParticipantInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceContestParticipantInfoResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ContestParticipantInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContestParticipantInfo: "+err2.Error())
		oprot.WriteMessageBegin("ContestParticipantInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ContestParticipantInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorParticipantListList struct {
	handler ContestService
}

func (p *contestServiceProcessorParticipantListList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceParticipantListListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ParticipantListList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceParticipantListListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ParticipantListList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ParticipantListList: "+err2.Error())
		oprot.WriteMessageBegin("ParticipantListList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ParticipantListList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorUpdateParticipantStatus struct {
	handler ContestService
}

func (p *contestServiceProcessorUpdateParticipantStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceUpdateParticipantStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceUpdateParticipantStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateParticipantStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateParticipantStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateParticipantStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorResultsUpload struct {
	handler ContestService
}

func (p *contestServiceProcessorResultsUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceResultsUploadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResultsUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceResultsUploadResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.ResultsUpload(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResultsUpload: "+err2.Error())
		oprot.WriteMessageBegin("ResultsUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ResultsUpload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorPromotionalLinks struct {
	handler ContestService
}

func (p *contestServiceProcessorPromotionalLinks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServicePromotionalLinksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PromotionalLinks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServicePromotionalLinksResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.PromotionalLinks(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PromotionalLinks: "+err2.Error())
		oprot.WriteMessageBegin("PromotionalLinks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PromotionalLinks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type contestServiceProcessorDelContest struct {
	handler ContestService
}

func (p *contestServiceProcessorDelContest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContestServiceDelContestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ContestServiceDelContestResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.DelContest(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelContest: "+err2.Error())
		oprot.WriteMessageBegin("DelContest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelContest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ContestServiceCreateContestArgs struct {
	Req *ContestInfo `thrift:"req,1"`
}

func NewContestServiceCreateContestArgs() *ContestServiceCreateContestArgs {
	return &ContestServiceCreateContestArgs{}
}

func (p *ContestServiceCreateContestArgs) InitDefault() {
}

var ContestServiceCreateContestArgs_Req_DEFAULT *ContestInfo

func (p *ContestServiceCreateContestArgs) GetReq() (v *ContestInfo) {
	if !p.IsSetReq() {
		return ContestServiceCreateContestArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceCreateContestArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceCreateContestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceCreateContestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceCreateContestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceCreateContestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContestInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceCreateContestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceCreateContestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceCreateContestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceCreateContestArgs(%+v)", *p)

}

type ContestServiceCreateContestResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceCreateContestResult() *ContestServiceCreateContestResult {
	return &ContestServiceCreateContestResult{}
}

func (p *ContestServiceCreateContestResult) InitDefault() {
}

var ContestServiceCreateContestResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceCreateContestResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceCreateContestResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceCreateContestResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceCreateContestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceCreateContestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceCreateContestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceCreateContestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceCreateContestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateContest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceCreateContestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceCreateContestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceCreateContestResult(%+v)", *p)

}

type ContestServiceUpdateContestArgs struct {
	Req *ContestInfo `thrift:"req,1"`
}

func NewContestServiceUpdateContestArgs() *ContestServiceUpdateContestArgs {
	return &ContestServiceUpdateContestArgs{}
}

func (p *ContestServiceUpdateContestArgs) InitDefault() {
}

var ContestServiceUpdateContestArgs_Req_DEFAULT *ContestInfo

func (p *ContestServiceUpdateContestArgs) GetReq() (v *ContestInfo) {
	if !p.IsSetReq() {
		return ContestServiceUpdateContestArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceUpdateContestArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceUpdateContestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceUpdateContestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContestInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceUpdateContestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceUpdateContestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestArgs(%+v)", *p)

}

type ContestServiceUpdateContestResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceUpdateContestResult() *ContestServiceUpdateContestResult {
	return &ContestServiceUpdateContestResult{}
}

func (p *ContestServiceUpdateContestResult) InitDefault() {
}

var ContestServiceUpdateContestResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceUpdateContestResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceUpdateContestResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceUpdateContestResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceUpdateContestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceUpdateContestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceUpdateContestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceUpdateContestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestResult(%+v)", *p)

}

type ContestServiceContestInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewContestServiceContestInfoArgs() *ContestServiceContestInfoArgs {
	return &ContestServiceContestInfoArgs{}
}

func (p *ContestServiceContestInfoArgs) InitDefault() {
}

var ContestServiceContestInfoArgs_Req_DEFAULT *base.IDReq

func (p *ContestServiceContestInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ContestServiceContestInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceContestInfoArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceContestInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceContestInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceContestInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceContestInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestInfoArgs(%+v)", *p)

}

type ContestServiceContestInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceContestInfoResult() *ContestServiceContestInfoResult {
	return &ContestServiceContestInfoResult{}
}

func (p *ContestServiceContestInfoResult) InitDefault() {
}

var ContestServiceContestInfoResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceContestInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceContestInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceContestInfoResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceContestInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceContestInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceContestInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceContestInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestInfoResult(%+v)", *p)

}

type ContestServiceContestListArgs struct {
	Req *ContestListReq `thrift:"req,1"`
}

func NewContestServiceContestListArgs() *ContestServiceContestListArgs {
	return &ContestServiceContestListArgs{}
}

func (p *ContestServiceContestListArgs) InitDefault() {
}

var ContestServiceContestListArgs_Req_DEFAULT *ContestListReq

func (p *ContestServiceContestListArgs) GetReq() (v *ContestListReq) {
	if !p.IsSetReq() {
		return ContestServiceContestListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceContestListArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceContestListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceContestListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContestListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceContestListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceContestListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestListArgs(%+v)", *p)

}

type ContestServiceContestListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceContestListResult() *ContestServiceContestListResult {
	return &ContestServiceContestListResult{}
}

func (p *ContestServiceContestListResult) InitDefault() {
}

var ContestServiceContestListResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceContestListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceContestListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceContestListResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceContestListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceContestListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceContestListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceContestListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestListResult(%+v)", *p)

}

type ContestServiceUpdateContestStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewContestServiceUpdateContestStatusArgs() *ContestServiceUpdateContestStatusArgs {
	return &ContestServiceUpdateContestStatusArgs{}
}

func (p *ContestServiceUpdateContestStatusArgs) InitDefault() {
}

var ContestServiceUpdateContestStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ContestServiceUpdateContestStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ContestServiceUpdateContestStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceUpdateContestStatusArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceUpdateContestStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceUpdateContestStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceUpdateContestStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContestStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestStatusArgs(%+v)", *p)

}

type ContestServiceUpdateContestStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceUpdateContestStatusResult() *ContestServiceUpdateContestStatusResult {
	return &ContestServiceUpdateContestStatusResult{}
}

func (p *ContestServiceUpdateContestStatusResult) InitDefault() {
}

var ContestServiceUpdateContestStatusResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceUpdateContestStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceUpdateContestStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceUpdateContestStatusResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceUpdateContestStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceUpdateContestStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceUpdateContestStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContestStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceUpdateContestStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestStatusResult(%+v)", *p)

}

type ContestServiceUpdateContestShowArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewContestServiceUpdateContestShowArgs() *ContestServiceUpdateContestShowArgs {
	return &ContestServiceUpdateContestShowArgs{}
}

func (p *ContestServiceUpdateContestShowArgs) InitDefault() {
}

var ContestServiceUpdateContestShowArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ContestServiceUpdateContestShowArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ContestServiceUpdateContestShowArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceUpdateContestShowArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceUpdateContestShowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceUpdateContestShowArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestShowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceUpdateContestShowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContestShow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestShowArgs(%+v)", *p)

}

type ContestServiceUpdateContestShowResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceUpdateContestShowResult() *ContestServiceUpdateContestShowResult {
	return &ContestServiceUpdateContestShowResult{}
}

func (p *ContestServiceUpdateContestShowResult) InitDefault() {
}

var ContestServiceUpdateContestShowResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceUpdateContestShowResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceUpdateContestShowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceUpdateContestShowResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceUpdateContestShowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceUpdateContestShowResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateContestShowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceUpdateContestShowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateContestShow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceUpdateContestShowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateContestShowResult(%+v)", *p)

}

type ContestServiceCreateParticipantArgs struct {
	Req *ParticipantInfo `thrift:"req,1"`
}

func NewContestServiceCreateParticipantArgs() *ContestServiceCreateParticipantArgs {
	return &ContestServiceCreateParticipantArgs{}
}

func (p *ContestServiceCreateParticipantArgs) InitDefault() {
}

var ContestServiceCreateParticipantArgs_Req_DEFAULT *ParticipantInfo

func (p *ContestServiceCreateParticipantArgs) GetReq() (v *ParticipantInfo) {
	if !p.IsSetReq() {
		return ContestServiceCreateParticipantArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceCreateParticipantArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceCreateParticipantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceCreateParticipantArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceCreateParticipantArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceCreateParticipantArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceCreateParticipantArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParticipant_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceCreateParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceCreateParticipantArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceCreateParticipantArgs(%+v)", *p)

}

type ContestServiceCreateParticipantResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceCreateParticipantResult() *ContestServiceCreateParticipantResult {
	return &ContestServiceCreateParticipantResult{}
}

func (p *ContestServiceCreateParticipantResult) InitDefault() {
}

var ContestServiceCreateParticipantResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceCreateParticipantResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceCreateParticipantResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceCreateParticipantResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceCreateParticipantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceCreateParticipantResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceCreateParticipantResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceCreateParticipantResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceCreateParticipantResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateParticipant_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceCreateParticipantResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceCreateParticipantResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceCreateParticipantResult(%+v)", *p)

}

type ContestServiceUpdateParticipantArgs struct {
	Req *ParticipantInfo `thrift:"req,1"`
}

func NewContestServiceUpdateParticipantArgs() *ContestServiceUpdateParticipantArgs {
	return &ContestServiceUpdateParticipantArgs{}
}

func (p *ContestServiceUpdateParticipantArgs) InitDefault() {
}

var ContestServiceUpdateParticipantArgs_Req_DEFAULT *ParticipantInfo

func (p *ContestServiceUpdateParticipantArgs) GetReq() (v *ParticipantInfo) {
	if !p.IsSetReq() {
		return ContestServiceUpdateParticipantArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceUpdateParticipantArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceUpdateParticipantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceUpdateParticipantArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateParticipantArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceUpdateParticipantArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipant_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateParticipantArgs(%+v)", *p)

}

type ContestServiceUpdateParticipantResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceUpdateParticipantResult() *ContestServiceUpdateParticipantResult {
	return &ContestServiceUpdateParticipantResult{}
}

func (p *ContestServiceUpdateParticipantResult) InitDefault() {
}

var ContestServiceUpdateParticipantResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceUpdateParticipantResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceUpdateParticipantResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceUpdateParticipantResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceUpdateParticipantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceUpdateParticipantResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateParticipantResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceUpdateParticipantResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipant_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateParticipantResult(%+v)", *p)

}

type ContestServiceContestParticipantInfoArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewContestServiceContestParticipantInfoArgs() *ContestServiceContestParticipantInfoArgs {
	return &ContestServiceContestParticipantInfoArgs{}
}

func (p *ContestServiceContestParticipantInfoArgs) InitDefault() {
}

var ContestServiceContestParticipantInfoArgs_Req_DEFAULT *base.IDReq

func (p *ContestServiceContestParticipantInfoArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ContestServiceContestParticipantInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceContestParticipantInfoArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceContestParticipantInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceContestParticipantInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestParticipantInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceContestParticipantInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestParticipantInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestParticipantInfoArgs(%+v)", *p)

}

type ContestServiceContestParticipantInfoResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceContestParticipantInfoResult() *ContestServiceContestParticipantInfoResult {
	return &ContestServiceContestParticipantInfoResult{}
}

func (p *ContestServiceContestParticipantInfoResult) InitDefault() {
}

var ContestServiceContestParticipantInfoResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceContestParticipantInfoResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceContestParticipantInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceContestParticipantInfoResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceContestParticipantInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceContestParticipantInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceContestParticipantInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceContestParticipantInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContestParticipantInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceContestParticipantInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceContestParticipantInfoResult(%+v)", *p)

}

type ContestServiceParticipantListListArgs struct {
	Req *ParticipantListReq `thrift:"req,1"`
}

func NewContestServiceParticipantListListArgs() *ContestServiceParticipantListListArgs {
	return &ContestServiceParticipantListListArgs{}
}

func (p *ContestServiceParticipantListListArgs) InitDefault() {
}

var ContestServiceParticipantListListArgs_Req_DEFAULT *ParticipantListReq

func (p *ContestServiceParticipantListListArgs) GetReq() (v *ParticipantListReq) {
	if !p.IsSetReq() {
		return ContestServiceParticipantListListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceParticipantListListArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceParticipantListListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceParticipantListListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceParticipantListListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceParticipantListListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewParticipantListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceParticipantListListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceParticipantListListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceParticipantListListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceParticipantListListArgs(%+v)", *p)

}

type ContestServiceParticipantListListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceParticipantListListResult() *ContestServiceParticipantListListResult {
	return &ContestServiceParticipantListListResult{}
}

func (p *ContestServiceParticipantListListResult) InitDefault() {
}

var ContestServiceParticipantListListResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceParticipantListListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceParticipantListListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceParticipantListListResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceParticipantListListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceParticipantListListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceParticipantListListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceParticipantListListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceParticipantListListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParticipantListList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceParticipantListListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceParticipantListListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceParticipantListListResult(%+v)", *p)

}

type ContestServiceUpdateParticipantStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewContestServiceUpdateParticipantStatusArgs() *ContestServiceUpdateParticipantStatusArgs {
	return &ContestServiceUpdateParticipantStatusArgs{}
}

func (p *ContestServiceUpdateParticipantStatusArgs) InitDefault() {
}

var ContestServiceUpdateParticipantStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *ContestServiceUpdateParticipantStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return ContestServiceUpdateParticipantStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceUpdateParticipantStatusArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceUpdateParticipantStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceUpdateParticipantStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateParticipantStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceUpdateParticipantStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipantStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateParticipantStatusArgs(%+v)", *p)

}

type ContestServiceUpdateParticipantStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceUpdateParticipantStatusResult() *ContestServiceUpdateParticipantStatusResult {
	return &ContestServiceUpdateParticipantStatusResult{}
}

func (p *ContestServiceUpdateParticipantStatusResult) InitDefault() {
}

var ContestServiceUpdateParticipantStatusResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceUpdateParticipantStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceUpdateParticipantStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceUpdateParticipantStatusResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceUpdateParticipantStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceUpdateParticipantStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceUpdateParticipantStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceUpdateParticipantStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateParticipantStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceUpdateParticipantStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceUpdateParticipantStatusResult(%+v)", *p)

}

type ContestServiceResultsUploadArgs struct {
	Req *ResultsUploadReq `thrift:"req,1"`
}

func NewContestServiceResultsUploadArgs() *ContestServiceResultsUploadArgs {
	return &ContestServiceResultsUploadArgs{}
}

func (p *ContestServiceResultsUploadArgs) InitDefault() {
}

var ContestServiceResultsUploadArgs_Req_DEFAULT *ResultsUploadReq

func (p *ContestServiceResultsUploadArgs) GetReq() (v *ResultsUploadReq) {
	if !p.IsSetReq() {
		return ContestServiceResultsUploadArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceResultsUploadArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceResultsUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceResultsUploadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceResultsUploadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceResultsUploadArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewResultsUploadReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceResultsUploadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResultsUpload_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceResultsUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceResultsUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceResultsUploadArgs(%+v)", *p)

}

type ContestServiceResultsUploadResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceResultsUploadResult() *ContestServiceResultsUploadResult {
	return &ContestServiceResultsUploadResult{}
}

func (p *ContestServiceResultsUploadResult) InitDefault() {
}

var ContestServiceResultsUploadResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceResultsUploadResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceResultsUploadResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceResultsUploadResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceResultsUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceResultsUploadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceResultsUploadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceResultsUploadResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceResultsUploadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResultsUpload_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceResultsUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceResultsUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceResultsUploadResult(%+v)", *p)

}

type ContestServicePromotionalLinksArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewContestServicePromotionalLinksArgs() *ContestServicePromotionalLinksArgs {
	return &ContestServicePromotionalLinksArgs{}
}

func (p *ContestServicePromotionalLinksArgs) InitDefault() {
}

var ContestServicePromotionalLinksArgs_Req_DEFAULT *base.IDReq

func (p *ContestServicePromotionalLinksArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ContestServicePromotionalLinksArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServicePromotionalLinksArgs = map[int16]string{
	1: "req",
}

func (p *ContestServicePromotionalLinksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServicePromotionalLinksArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServicePromotionalLinksArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServicePromotionalLinksArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServicePromotionalLinksArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromotionalLinks_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServicePromotionalLinksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServicePromotionalLinksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServicePromotionalLinksArgs(%+v)", *p)

}

type ContestServicePromotionalLinksResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServicePromotionalLinksResult() *ContestServicePromotionalLinksResult {
	return &ContestServicePromotionalLinksResult{}
}

func (p *ContestServicePromotionalLinksResult) InitDefault() {
}

var ContestServicePromotionalLinksResult_Success_DEFAULT *base.NilResponse

func (p *ContestServicePromotionalLinksResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServicePromotionalLinksResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServicePromotionalLinksResult = map[int16]string{
	0: "success",
}

func (p *ContestServicePromotionalLinksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServicePromotionalLinksResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServicePromotionalLinksResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServicePromotionalLinksResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServicePromotionalLinksResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromotionalLinks_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServicePromotionalLinksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServicePromotionalLinksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServicePromotionalLinksResult(%+v)", *p)

}

type ContestServiceDelContestArgs struct {
	Req *base.IDReq `thrift:"req,1"`
}

func NewContestServiceDelContestArgs() *ContestServiceDelContestArgs {
	return &ContestServiceDelContestArgs{}
}

func (p *ContestServiceDelContestArgs) InitDefault() {
}

var ContestServiceDelContestArgs_Req_DEFAULT *base.IDReq

func (p *ContestServiceDelContestArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return ContestServiceDelContestArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_ContestServiceDelContestArgs = map[int16]string{
	1: "req",
}

func (p *ContestServiceDelContestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContestServiceDelContestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceDelContestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceDelContestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ContestServiceDelContestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelContest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceDelContestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContestServiceDelContestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceDelContestArgs(%+v)", *p)

}

type ContestServiceDelContestResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewContestServiceDelContestResult() *ContestServiceDelContestResult {
	return &ContestServiceDelContestResult{}
}

func (p *ContestServiceDelContestResult) InitDefault() {
}

var ContestServiceDelContestResult_Success_DEFAULT *base.NilResponse

func (p *ContestServiceDelContestResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return ContestServiceDelContestResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ContestServiceDelContestResult = map[int16]string{
	0: "success",
}

func (p *ContestServiceDelContestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContestServiceDelContestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContestServiceDelContestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContestServiceDelContestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ContestServiceDelContestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelContest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContestServiceDelContestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ContestServiceDelContestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContestServiceDelContestResult(%+v)", *p)

}

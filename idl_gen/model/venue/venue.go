// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package venue

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"saas/idl_gen/model/base"
)

type VenuePlaceListReq struct {
	Page     int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name     string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Status   int64  `thrift:"status,11,optional" form:"status" json:"status" query:"status"`
}

func NewVenuePlaceListReq() *VenuePlaceListReq {
	return &VenuePlaceListReq{

		Page:     1,
		PageSize: 100,
		Name:     "",
		Status:   0,
	}
}

func (p *VenuePlaceListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Status = 0
}

var VenuePlaceListReq_Page_DEFAULT int64 = 1

func (p *VenuePlaceListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return VenuePlaceListReq_Page_DEFAULT
	}
	return p.Page
}

var VenuePlaceListReq_PageSize_DEFAULT int64 = 100

func (p *VenuePlaceListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return VenuePlaceListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var VenuePlaceListReq_Name_DEFAULT string = ""

func (p *VenuePlaceListReq) GetName() (v string) {
	if !p.IsSetName() {
		return VenuePlaceListReq_Name_DEFAULT
	}
	return p.Name
}

var VenuePlaceListReq_Status_DEFAULT int64 = 0

func (p *VenuePlaceListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenuePlaceListReq_Status_DEFAULT
	}
	return p.Status
}

var fieldIDToName_VenuePlaceListReq = map[int16]string{
	1:  "page",
	2:  "pageSize",
	3:  "name",
	11: "status",
}

func (p *VenuePlaceListReq) IsSetPage() bool {
	return p.Page != VenuePlaceListReq_Page_DEFAULT
}

func (p *VenuePlaceListReq) IsSetPageSize() bool {
	return p.PageSize != VenuePlaceListReq_PageSize_DEFAULT
}

func (p *VenuePlaceListReq) IsSetName() bool {
	return p.Name != VenuePlaceListReq_Name_DEFAULT
}

func (p *VenuePlaceListReq) IsSetStatus() bool {
	return p.Status != VenuePlaceListReq_Status_DEFAULT
}

func (p *VenuePlaceListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenuePlaceListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenuePlaceListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *VenuePlaceListReq) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *VenuePlaceListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenuePlaceListReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenuePlaceListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenuePlaceListReq(%+v)", *p)

}

type VenueListReq struct {
	Page     int64  `thrift:"page,1,optional" form:"page" json:"page" query:"page"`
	PageSize int64  `thrift:"pageSize,2,optional" form:"pageSize" json:"pageSize" query:"pageSize"`
	Name     string `thrift:"name,3,optional" form:"name" json:"name" query:"name"`
	Status   int64  `thrift:"status,11,optional" form:"status" json:"status" query:"status"`
}

func NewVenueListReq() *VenueListReq {
	return &VenueListReq{

		Page:     1,
		PageSize: 100,
		Name:     "",
		Status:   0,
	}
}

func (p *VenueListReq) InitDefault() {
	p.Page = 1
	p.PageSize = 100
	p.Name = ""
	p.Status = 0
}

var VenueListReq_Page_DEFAULT int64 = 1

func (p *VenueListReq) GetPage() (v int64) {
	if !p.IsSetPage() {
		return VenueListReq_Page_DEFAULT
	}
	return p.Page
}

var VenueListReq_PageSize_DEFAULT int64 = 100

func (p *VenueListReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return VenueListReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var VenueListReq_Name_DEFAULT string = ""

func (p *VenueListReq) GetName() (v string) {
	if !p.IsSetName() {
		return VenueListReq_Name_DEFAULT
	}
	return p.Name
}

var VenueListReq_Status_DEFAULT int64 = 0

func (p *VenueListReq) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenueListReq_Status_DEFAULT
	}
	return p.Status
}

var fieldIDToName_VenueListReq = map[int16]string{
	1:  "page",
	2:  "pageSize",
	3:  "name",
	11: "status",
}

func (p *VenueListReq) IsSetPage() bool {
	return p.Page != VenueListReq_Page_DEFAULT
}

func (p *VenueListReq) IsSetPageSize() bool {
	return p.PageSize != VenueListReq_PageSize_DEFAULT
}

func (p *VenueListReq) IsSetName() bool {
	return p.Name != VenueListReq_Name_DEFAULT
}

func (p *VenueListReq) IsSetStatus() bool {
	return p.Status != VenueListReq_Status_DEFAULT
}

func (p *VenueListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueListReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *VenueListReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *VenueListReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *VenueListReq) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}

func (p *VenueListReq) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenueListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenueListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenueListReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenueListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueListReq(%+v)", *p)

}

type VenueInfo struct {
	ID            int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name          string `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	Address       string `thrift:"address,3,optional" form:"address" json:"address" query:"address"`
	AddressDetail string `thrift:"addressDetail,4,optional" form:"addressDetail" json:"addressDetail" query:"addressDetail"`
	Latitude      string `thrift:"latitude,5,optional" form:"latitude" json:"latitude" query:"latitude"`
	Longitude     string `thrift:"longitude,6,optional" form:"longitude" json:"longitude" query:"longitude"`
	Mobile        string `thrift:"mobile,7,optional" form:"mobile" json:"mobile" query:"mobile"`
	Pic           string `thrift:"pic,8,optional" form:"pic" json:"pic" query:"pic"`
	Information   string `thrift:"information,9,optional" form:"information" json:"information" query:"information"`
	Status        int64  `thrift:"status,10,optional" form:"status" json:"status" query:"status"`
	CreatedAt     string `thrift:"CreatedAt,11,optional" form:"CreatedAt" json:"CreatedAt" query:"CreatedAt"`
	UpdatedAt     string `thrift:"UpdatedAt,12,optional" form:"UpdatedAt" json:"UpdatedAt" query:"UpdatedAt"`
	Email         string `thrift:"email,13,optional" form:"email" json:"email" query:"email"`
	Type          string `thrift:"type,14,optional" form:"type" json:"type" query:"type"`
	Classify      int64  `thrift:"classify,15,optional" form:"classify" json:"classify" query:"classify"`
	Seal          string `thrift:"seal,16,optional" form:"seal" json:"seal" query:"seal"`
}

func NewVenueInfo() *VenueInfo {
	return &VenueInfo{

		ID:            0,
		Name:          "",
		Address:       "",
		AddressDetail: "",
		Latitude:      "",
		Longitude:     "",
		Mobile:        "",
		Pic:           "",
		Information:   "",
		Status:        1,
		CreatedAt:     "",
		UpdatedAt:     "",
		Email:         "",
		Type:          "",
		Classify:      0,
		Seal:          "",
	}
}

func (p *VenueInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.Address = ""
	p.AddressDetail = ""
	p.Latitude = ""
	p.Longitude = ""
	p.Mobile = ""
	p.Pic = ""
	p.Information = ""
	p.Status = 1
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Email = ""
	p.Type = ""
	p.Classify = 0
	p.Seal = ""
}

var VenueInfo_ID_DEFAULT int64 = 0

func (p *VenueInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return VenueInfo_ID_DEFAULT
	}
	return p.ID
}

var VenueInfo_Name_DEFAULT string = ""

func (p *VenueInfo) GetName() (v string) {
	if !p.IsSetName() {
		return VenueInfo_Name_DEFAULT
	}
	return p.Name
}

var VenueInfo_Address_DEFAULT string = ""

func (p *VenueInfo) GetAddress() (v string) {
	if !p.IsSetAddress() {
		return VenueInfo_Address_DEFAULT
	}
	return p.Address
}

var VenueInfo_AddressDetail_DEFAULT string = ""

func (p *VenueInfo) GetAddressDetail() (v string) {
	if !p.IsSetAddressDetail() {
		return VenueInfo_AddressDetail_DEFAULT
	}
	return p.AddressDetail
}

var VenueInfo_Latitude_DEFAULT string = ""

func (p *VenueInfo) GetLatitude() (v string) {
	if !p.IsSetLatitude() {
		return VenueInfo_Latitude_DEFAULT
	}
	return p.Latitude
}

var VenueInfo_Longitude_DEFAULT string = ""

func (p *VenueInfo) GetLongitude() (v string) {
	if !p.IsSetLongitude() {
		return VenueInfo_Longitude_DEFAULT
	}
	return p.Longitude
}

var VenueInfo_Mobile_DEFAULT string = ""

func (p *VenueInfo) GetMobile() (v string) {
	if !p.IsSetMobile() {
		return VenueInfo_Mobile_DEFAULT
	}
	return p.Mobile
}

var VenueInfo_Pic_DEFAULT string = ""

func (p *VenueInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return VenueInfo_Pic_DEFAULT
	}
	return p.Pic
}

var VenueInfo_Information_DEFAULT string = ""

func (p *VenueInfo) GetInformation() (v string) {
	if !p.IsSetInformation() {
		return VenueInfo_Information_DEFAULT
	}
	return p.Information
}

var VenueInfo_Status_DEFAULT int64 = 1

func (p *VenueInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenueInfo_Status_DEFAULT
	}
	return p.Status
}

var VenueInfo_CreatedAt_DEFAULT string = ""

func (p *VenueInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return VenueInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var VenueInfo_UpdatedAt_DEFAULT string = ""

func (p *VenueInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return VenueInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var VenueInfo_Email_DEFAULT string = ""

func (p *VenueInfo) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return VenueInfo_Email_DEFAULT
	}
	return p.Email
}

var VenueInfo_Type_DEFAULT string = ""

func (p *VenueInfo) GetType() (v string) {
	if !p.IsSetType() {
		return VenueInfo_Type_DEFAULT
	}
	return p.Type
}

var VenueInfo_Classify_DEFAULT int64 = 0

func (p *VenueInfo) GetClassify() (v int64) {
	if !p.IsSetClassify() {
		return VenueInfo_Classify_DEFAULT
	}
	return p.Classify
}

var VenueInfo_Seal_DEFAULT string = ""

func (p *VenueInfo) GetSeal() (v string) {
	if !p.IsSetSeal() {
		return VenueInfo_Seal_DEFAULT
	}
	return p.Seal
}

var fieldIDToName_VenueInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "address",
	4:  "addressDetail",
	5:  "latitude",
	6:  "longitude",
	7:  "mobile",
	8:  "pic",
	9:  "information",
	10: "status",
	11: "CreatedAt",
	12: "UpdatedAt",
	13: "email",
	14: "type",
	15: "classify",
	16: "seal",
}

func (p *VenueInfo) IsSetID() bool {
	return p.ID != VenueInfo_ID_DEFAULT
}

func (p *VenueInfo) IsSetName() bool {
	return p.Name != VenueInfo_Name_DEFAULT
}

func (p *VenueInfo) IsSetAddress() bool {
	return p.Address != VenueInfo_Address_DEFAULT
}

func (p *VenueInfo) IsSetAddressDetail() bool {
	return p.AddressDetail != VenueInfo_AddressDetail_DEFAULT
}

func (p *VenueInfo) IsSetLatitude() bool {
	return p.Latitude != VenueInfo_Latitude_DEFAULT
}

func (p *VenueInfo) IsSetLongitude() bool {
	return p.Longitude != VenueInfo_Longitude_DEFAULT
}

func (p *VenueInfo) IsSetMobile() bool {
	return p.Mobile != VenueInfo_Mobile_DEFAULT
}

func (p *VenueInfo) IsSetPic() bool {
	return p.Pic != VenueInfo_Pic_DEFAULT
}

func (p *VenueInfo) IsSetInformation() bool {
	return p.Information != VenueInfo_Information_DEFAULT
}

func (p *VenueInfo) IsSetStatus() bool {
	return p.Status != VenueInfo_Status_DEFAULT
}

func (p *VenueInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != VenueInfo_CreatedAt_DEFAULT
}

func (p *VenueInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != VenueInfo_UpdatedAt_DEFAULT
}

func (p *VenueInfo) IsSetEmail() bool {
	return p.Email != VenueInfo_Email_DEFAULT
}

func (p *VenueInfo) IsSetType() bool {
	return p.Type != VenueInfo_Type_DEFAULT
}

func (p *VenueInfo) IsSetClassify() bool {
	return p.Classify != VenueInfo_Classify_DEFAULT
}

func (p *VenueInfo) IsSetSeal() bool {
	return p.Seal != VenueInfo_Seal_DEFAULT
}

func (p *VenueInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *VenueInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *VenueInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Address = _field
	return nil
}
func (p *VenueInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AddressDetail = _field
	return nil
}
func (p *VenueInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Latitude = _field
	return nil
}
func (p *VenueInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Longitude = _field
	return nil
}
func (p *VenueInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *VenueInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pic = _field
	return nil
}
func (p *VenueInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Information = _field
	return nil
}
func (p *VenueInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *VenueInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *VenueInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *VenueInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Email = _field
	return nil
}
func (p *VenueInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *VenueInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Classify = _field
	return nil
}
func (p *VenueInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Seal = _field
	return nil
}

func (p *VenueInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenueInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenueInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err = oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Address); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenueInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddressDetail() {
		if err = oprot.WriteFieldBegin("addressDetail", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.AddressDetail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VenueInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err = oprot.WriteFieldBegin("latitude", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Latitude); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VenueInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err = oprot.WriteFieldBegin("longitude", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Longitude); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VenueInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMobile() {
		if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Mobile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VenueInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *VenueInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInformation() {
		if err = oprot.WriteFieldBegin("information", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Information); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *VenueInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *VenueInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenueInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *VenueInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *VenueInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *VenueInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassify() {
		if err = oprot.WriteFieldBegin("classify", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Classify); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *VenueInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeal() {
		if err = oprot.WriteFieldBegin("seal", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Seal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *VenueInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueInfo(%+v)", *p)

}

type VenuePlaceInfo struct {
	ID           int64  `thrift:"id,1,optional" form:"id" json:"id" query:"id"`
	Name         string `thrift:"name,2,optional" form:"name" json:"name" query:"name"`
	VenueId      int64  `thrift:"venueId,3,optional" form:"venueId" json:"venueId" query:"venueId"`
	Pic          string `thrift:"pic,4,optional" form:"pic" json:"pic" query:"pic"`
	Status       int64  `thrift:"status,5,optional" form:"status" json:"status" query:"status"`
	CreatedAt    string `thrift:"CreatedAt,6,optional" form:"CreatedAt" json:"CreatedAt" query:"CreatedAt"`
	UpdatedAt    string `thrift:"UpdatedAt,7,optional" form:"UpdatedAt" json:"UpdatedAt" query:"UpdatedAt"`
	Number       int64  `thrift:"number,8,optional" form:"number" json:"number" query:"number"`
	Information  string `thrift:"information,9,optional" form:"information" json:"information" query:"information"`
	Classify     int64  `thrift:"classify,10,optional" form:"classify" json:"classify" query:"classify"`
	IsShow       int64  `thrift:"is_show,11,optional" form:"is_show" json:"is_show" query:"is_show"`
	IsAccessible int64  `thrift:"is_accessible,12,optional" form:"is_accessible" json:"is_accessible" query:"is_accessible"`
}

func NewVenuePlaceInfo() *VenuePlaceInfo {
	return &VenuePlaceInfo{

		ID:           0,
		Name:         "",
		VenueId:      0,
		Pic:          "",
		Status:       1,
		CreatedAt:    "",
		UpdatedAt:    "",
		Number:       0,
		Information:  "",
		Classify:     0,
		IsShow:       1,
		IsAccessible: 1,
	}
}

func (p *VenuePlaceInfo) InitDefault() {
	p.ID = 0
	p.Name = ""
	p.VenueId = 0
	p.Pic = ""
	p.Status = 1
	p.CreatedAt = ""
	p.UpdatedAt = ""
	p.Number = 0
	p.Information = ""
	p.Classify = 0
	p.IsShow = 1
	p.IsAccessible = 1
}

var VenuePlaceInfo_ID_DEFAULT int64 = 0

func (p *VenuePlaceInfo) GetID() (v int64) {
	if !p.IsSetID() {
		return VenuePlaceInfo_ID_DEFAULT
	}
	return p.ID
}

var VenuePlaceInfo_Name_DEFAULT string = ""

func (p *VenuePlaceInfo) GetName() (v string) {
	if !p.IsSetName() {
		return VenuePlaceInfo_Name_DEFAULT
	}
	return p.Name
}

var VenuePlaceInfo_VenueId_DEFAULT int64 = 0

func (p *VenuePlaceInfo) GetVenueId() (v int64) {
	if !p.IsSetVenueId() {
		return VenuePlaceInfo_VenueId_DEFAULT
	}
	return p.VenueId
}

var VenuePlaceInfo_Pic_DEFAULT string = ""

func (p *VenuePlaceInfo) GetPic() (v string) {
	if !p.IsSetPic() {
		return VenuePlaceInfo_Pic_DEFAULT
	}
	return p.Pic
}

var VenuePlaceInfo_Status_DEFAULT int64 = 1

func (p *VenuePlaceInfo) GetStatus() (v int64) {
	if !p.IsSetStatus() {
		return VenuePlaceInfo_Status_DEFAULT
	}
	return p.Status
}

var VenuePlaceInfo_CreatedAt_DEFAULT string = ""

func (p *VenuePlaceInfo) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return VenuePlaceInfo_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var VenuePlaceInfo_UpdatedAt_DEFAULT string = ""

func (p *VenuePlaceInfo) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return VenuePlaceInfo_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var VenuePlaceInfo_Number_DEFAULT int64 = 0

func (p *VenuePlaceInfo) GetNumber() (v int64) {
	if !p.IsSetNumber() {
		return VenuePlaceInfo_Number_DEFAULT
	}
	return p.Number
}

var VenuePlaceInfo_Information_DEFAULT string = ""

func (p *VenuePlaceInfo) GetInformation() (v string) {
	if !p.IsSetInformation() {
		return VenuePlaceInfo_Information_DEFAULT
	}
	return p.Information
}

var VenuePlaceInfo_Classify_DEFAULT int64 = 0

func (p *VenuePlaceInfo) GetClassify() (v int64) {
	if !p.IsSetClassify() {
		return VenuePlaceInfo_Classify_DEFAULT
	}
	return p.Classify
}

var VenuePlaceInfo_IsShow_DEFAULT int64 = 1

func (p *VenuePlaceInfo) GetIsShow() (v int64) {
	if !p.IsSetIsShow() {
		return VenuePlaceInfo_IsShow_DEFAULT
	}
	return p.IsShow
}

var VenuePlaceInfo_IsAccessible_DEFAULT int64 = 1

func (p *VenuePlaceInfo) GetIsAccessible() (v int64) {
	if !p.IsSetIsAccessible() {
		return VenuePlaceInfo_IsAccessible_DEFAULT
	}
	return p.IsAccessible
}

var fieldIDToName_VenuePlaceInfo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "venueId",
	4:  "pic",
	5:  "status",
	6:  "CreatedAt",
	7:  "UpdatedAt",
	8:  "number",
	9:  "information",
	10: "classify",
	11: "is_show",
	12: "is_accessible",
}

func (p *VenuePlaceInfo) IsSetID() bool {
	return p.ID != VenuePlaceInfo_ID_DEFAULT
}

func (p *VenuePlaceInfo) IsSetName() bool {
	return p.Name != VenuePlaceInfo_Name_DEFAULT
}

func (p *VenuePlaceInfo) IsSetVenueId() bool {
	return p.VenueId != VenuePlaceInfo_VenueId_DEFAULT
}

func (p *VenuePlaceInfo) IsSetPic() bool {
	return p.Pic != VenuePlaceInfo_Pic_DEFAULT
}

func (p *VenuePlaceInfo) IsSetStatus() bool {
	return p.Status != VenuePlaceInfo_Status_DEFAULT
}

func (p *VenuePlaceInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != VenuePlaceInfo_CreatedAt_DEFAULT
}

func (p *VenuePlaceInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != VenuePlaceInfo_UpdatedAt_DEFAULT
}

func (p *VenuePlaceInfo) IsSetNumber() bool {
	return p.Number != VenuePlaceInfo_Number_DEFAULT
}

func (p *VenuePlaceInfo) IsSetInformation() bool {
	return p.Information != VenuePlaceInfo_Information_DEFAULT
}

func (p *VenuePlaceInfo) IsSetClassify() bool {
	return p.Classify != VenuePlaceInfo_Classify_DEFAULT
}

func (p *VenuePlaceInfo) IsSetIsShow() bool {
	return p.IsShow != VenuePlaceInfo_IsShow_DEFAULT
}

func (p *VenuePlaceInfo) IsSetIsAccessible() bool {
	return p.IsAccessible != VenuePlaceInfo_IsAccessible_DEFAULT
}

func (p *VenuePlaceInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenuePlaceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenuePlaceInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VenueId = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Pic = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Number = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Information = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Classify = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsShow = _field
	return nil
}
func (p *VenuePlaceInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAccessible = _field
	return nil
}

func (p *VenuePlaceInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenueId() {
		if err = oprot.WriteFieldBegin("venueId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.VenueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPic() {
		if err = oprot.WriteFieldBegin("pic", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Pic); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("UpdatedAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err = oprot.WriteFieldBegin("number", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Number); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInformation() {
		if err = oprot.WriteFieldBegin("information", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Information); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassify() {
		if err = oprot.WriteFieldBegin("classify", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.Classify); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsShow() {
		if err = oprot.WriteFieldBegin("is_show", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsShow); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *VenuePlaceInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAccessible() {
		if err = oprot.WriteFieldBegin("is_accessible", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.IsAccessible); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *VenuePlaceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenuePlaceInfo(%+v)", *p)

}

type VenueService interface {
	// 添加
	CreateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error)
	// 编辑
	UpdateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error)
	// 删除
	UpdateVenuePlaceStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)
	// 列表
	VenuePlaceList(ctx context.Context, req *VenuePlaceListReq) (r *base.NilResponse, err error)
	// 添加
	CreateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error)
	// 编辑
	UpdateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error)

	UpdateVenueStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error)
	// 列表
	VenueList(ctx context.Context, req *VenueListReq) (r *base.NilResponse, err error)
}

type VenueServiceClient struct {
	c thrift.TClient
}

func NewVenueServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VenueServiceClient {
	return &VenueServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewVenueServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VenueServiceClient {
	return &VenueServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewVenueServiceClient(c thrift.TClient) *VenueServiceClient {
	return &VenueServiceClient{
		c: c,
	}
}

func (p *VenueServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *VenueServiceClient) CreateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceCreateVenuePlaceArgs
	_args.Req = req
	var _result VenueServiceCreateVenuePlaceResult
	if err = p.Client_().Call(ctx, "CreateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenuePlace(ctx context.Context, req *VenuePlaceInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenuePlaceArgs
	_args.Req = req
	var _result VenueServiceUpdateVenuePlaceResult
	if err = p.Client_().Call(ctx, "UpdateVenuePlace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenuePlaceStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenuePlaceStatusArgs
	_args.Req = req
	var _result VenueServiceUpdateVenuePlaceStatusResult
	if err = p.Client_().Call(ctx, "UpdateVenuePlaceStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) VenuePlaceList(ctx context.Context, req *VenuePlaceListReq) (r *base.NilResponse, err error) {
	var _args VenueServiceVenuePlaceListArgs
	_args.Req = req
	var _result VenueServiceVenuePlaceListResult
	if err = p.Client_().Call(ctx, "VenuePlaceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) CreateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceCreateVenueArgs
	_args.Req = req
	var _result VenueServiceCreateVenueResult
	if err = p.Client_().Call(ctx, "CreateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenue(ctx context.Context, req *VenueInfo) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenueArgs
	_args.Req = req
	var _result VenueServiceUpdateVenueResult
	if err = p.Client_().Call(ctx, "UpdateVenue", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) UpdateVenueStatus(ctx context.Context, req *base.StatusCodeReq) (r *base.NilResponse, err error) {
	var _args VenueServiceUpdateVenueStatusArgs
	_args.Req = req
	var _result VenueServiceUpdateVenueStatusResult
	if err = p.Client_().Call(ctx, "UpdateVenueStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VenueServiceClient) VenueList(ctx context.Context, req *VenueListReq) (r *base.NilResponse, err error) {
	var _args VenueServiceVenueListArgs
	_args.Req = req
	var _result VenueServiceVenueListResult
	if err = p.Client_().Call(ctx, "VenueList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type VenueServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VenueService
}

func (p *VenueServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VenueServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VenueServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVenueServiceProcessor(handler VenueService) *VenueServiceProcessor {
	self := &VenueServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateVenuePlace", &venueServiceProcessorCreateVenuePlace{handler: handler})
	self.AddToProcessorMap("UpdateVenuePlace", &venueServiceProcessorUpdateVenuePlace{handler: handler})
	self.AddToProcessorMap("UpdateVenuePlaceStatus", &venueServiceProcessorUpdateVenuePlaceStatus{handler: handler})
	self.AddToProcessorMap("VenuePlaceList", &venueServiceProcessorVenuePlaceList{handler: handler})
	self.AddToProcessorMap("CreateVenue", &venueServiceProcessorCreateVenue{handler: handler})
	self.AddToProcessorMap("UpdateVenue", &venueServiceProcessorUpdateVenue{handler: handler})
	self.AddToProcessorMap("UpdateVenueStatus", &venueServiceProcessorUpdateVenueStatus{handler: handler})
	self.AddToProcessorMap("VenueList", &venueServiceProcessorVenueList{handler: handler})
	return self
}
func (p *VenueServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type venueServiceProcessorCreateVenuePlace struct {
	handler VenueService
}

func (p *venueServiceProcessorCreateVenuePlace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceCreateVenuePlaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceCreateVenuePlaceResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateVenuePlace(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVenuePlace: "+err2.Error())
		oprot.WriteMessageBegin("CreateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVenuePlace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenuePlace struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenuePlace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenuePlaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenuePlaceResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenuePlace(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenuePlace: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenuePlace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenuePlace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenuePlaceStatus struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenuePlaceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenuePlaceStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenuePlaceStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenuePlaceStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenuePlaceStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenuePlaceStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorVenuePlaceList struct {
	handler VenueService
}

func (p *venueServiceProcessorVenuePlaceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceVenuePlaceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VenuePlaceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceVenuePlaceListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.VenuePlaceList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VenuePlaceList: "+err2.Error())
		oprot.WriteMessageBegin("VenuePlaceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VenuePlaceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorCreateVenue struct {
	handler VenueService
}

func (p *venueServiceProcessorCreateVenue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceCreateVenueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceCreateVenueResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.CreateVenue(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateVenue: "+err2.Error())
		oprot.WriteMessageBegin("CreateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateVenue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenue struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenueResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenue(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenue: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorUpdateVenueStatus struct {
	handler VenueService
}

func (p *venueServiceProcessorUpdateVenueStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceUpdateVenueStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVenueStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceUpdateVenueStatusResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.UpdateVenueStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVenueStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVenueStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVenueStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type venueServiceProcessorVenueList struct {
	handler VenueService
}

func (p *venueServiceProcessorVenueList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VenueServiceVenueListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VenueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VenueServiceVenueListResult{}
	var retval *base.NilResponse
	if retval, err2 = p.handler.VenueList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VenueList: "+err2.Error())
		oprot.WriteMessageBegin("VenueList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VenueList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type VenueServiceCreateVenuePlaceArgs struct {
	Req *VenuePlaceInfo `thrift:"req,1"`
}

func NewVenueServiceCreateVenuePlaceArgs() *VenueServiceCreateVenuePlaceArgs {
	return &VenueServiceCreateVenuePlaceArgs{}
}

func (p *VenueServiceCreateVenuePlaceArgs) InitDefault() {
}

var VenueServiceCreateVenuePlaceArgs_Req_DEFAULT *VenuePlaceInfo

func (p *VenueServiceCreateVenuePlaceArgs) GetReq() (v *VenuePlaceInfo) {
	if !p.IsSetReq() {
		return VenueServiceCreateVenuePlaceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceCreateVenuePlaceArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceCreateVenuePlaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceCreateVenuePlaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenuePlaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceCreateVenuePlaceArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenuePlace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenuePlaceArgs(%+v)", *p)

}

type VenueServiceCreateVenuePlaceResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceCreateVenuePlaceResult() *VenueServiceCreateVenuePlaceResult {
	return &VenueServiceCreateVenuePlaceResult{}
}

func (p *VenueServiceCreateVenuePlaceResult) InitDefault() {
}

var VenueServiceCreateVenuePlaceResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceCreateVenuePlaceResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceCreateVenuePlaceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceCreateVenuePlaceResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceCreateVenuePlaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceCreateVenuePlaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenuePlaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceCreateVenuePlaceResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenuePlace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceCreateVenuePlaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenuePlaceResult(%+v)", *p)

}

type VenueServiceUpdateVenuePlaceArgs struct {
	Req *VenuePlaceInfo `thrift:"req,1"`
}

func NewVenueServiceUpdateVenuePlaceArgs() *VenueServiceUpdateVenuePlaceArgs {
	return &VenueServiceUpdateVenuePlaceArgs{}
}

func (p *VenueServiceUpdateVenuePlaceArgs) InitDefault() {
}

var VenueServiceUpdateVenuePlaceArgs_Req_DEFAULT *VenuePlaceInfo

func (p *VenueServiceUpdateVenuePlaceArgs) GetReq() (v *VenuePlaceInfo) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenuePlaceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceUpdateVenuePlaceArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenuePlaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenuePlaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceArgs(%+v)", *p)

}

type VenueServiceUpdateVenuePlaceResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceUpdateVenuePlaceResult() *VenueServiceUpdateVenuePlaceResult {
	return &VenueServiceUpdateVenuePlaceResult{}
}

func (p *VenueServiceUpdateVenuePlaceResult) InitDefault() {
}

var VenueServiceUpdateVenuePlaceResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenuePlaceResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenuePlaceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceUpdateVenuePlaceResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenuePlaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenuePlaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceResult(%+v)", *p)

}

type VenueServiceUpdateVenuePlaceStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewVenueServiceUpdateVenuePlaceStatusArgs() *VenueServiceUpdateVenuePlaceStatusArgs {
	return &VenueServiceUpdateVenuePlaceStatusArgs{}
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) InitDefault() {
}

var VenueServiceUpdateVenuePlaceStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *VenueServiceUpdateVenuePlaceStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenuePlaceStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceUpdateVenuePlaceStatusArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlaceStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceStatusArgs(%+v)", *p)

}

type VenueServiceUpdateVenuePlaceStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceUpdateVenuePlaceStatusResult() *VenueServiceUpdateVenuePlaceStatusResult {
	return &VenueServiceUpdateVenuePlaceStatusResult{}
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) InitDefault() {
}

var VenueServiceUpdateVenuePlaceStatusResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenuePlaceStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenuePlaceStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceUpdateVenuePlaceStatusResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenuePlaceStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenuePlaceStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenuePlaceStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenuePlaceStatusResult(%+v)", *p)

}

type VenueServiceVenuePlaceListArgs struct {
	Req *VenuePlaceListReq `thrift:"req,1"`
}

func NewVenueServiceVenuePlaceListArgs() *VenueServiceVenuePlaceListArgs {
	return &VenueServiceVenuePlaceListArgs{}
}

func (p *VenueServiceVenuePlaceListArgs) InitDefault() {
}

var VenueServiceVenuePlaceListArgs_Req_DEFAULT *VenuePlaceListReq

func (p *VenueServiceVenuePlaceListArgs) GetReq() (v *VenuePlaceListReq) {
	if !p.IsSetReq() {
		return VenueServiceVenuePlaceListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceVenuePlaceListArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceVenuePlaceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceVenuePlaceListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenuePlaceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenuePlaceListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceVenuePlaceListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenuePlaceListArgs(%+v)", *p)

}

type VenueServiceVenuePlaceListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceVenuePlaceListResult() *VenueServiceVenuePlaceListResult {
	return &VenueServiceVenuePlaceListResult{}
}

func (p *VenueServiceVenuePlaceListResult) InitDefault() {
}

var VenueServiceVenuePlaceListResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceVenuePlaceListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceVenuePlaceListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceVenuePlaceListResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceVenuePlaceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceVenuePlaceListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenuePlaceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceVenuePlaceListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenuePlaceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceVenuePlaceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenuePlaceListResult(%+v)", *p)

}

type VenueServiceCreateVenueArgs struct {
	Req *VenueInfo `thrift:"req,1"`
}

func NewVenueServiceCreateVenueArgs() *VenueServiceCreateVenueArgs {
	return &VenueServiceCreateVenueArgs{}
}

func (p *VenueServiceCreateVenueArgs) InitDefault() {
}

var VenueServiceCreateVenueArgs_Req_DEFAULT *VenueInfo

func (p *VenueServiceCreateVenueArgs) GetReq() (v *VenueInfo) {
	if !p.IsSetReq() {
		return VenueServiceCreateVenueArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceCreateVenueArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceCreateVenueArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceCreateVenueArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenueArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceCreateVenueArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenue_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceCreateVenueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenueArgs(%+v)", *p)

}

type VenueServiceCreateVenueResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceCreateVenueResult() *VenueServiceCreateVenueResult {
	return &VenueServiceCreateVenueResult{}
}

func (p *VenueServiceCreateVenueResult) InitDefault() {
}

var VenueServiceCreateVenueResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceCreateVenueResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceCreateVenueResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceCreateVenueResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceCreateVenueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceCreateVenueResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceCreateVenueResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceCreateVenueResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVenue_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceCreateVenueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceCreateVenueResult(%+v)", *p)

}

type VenueServiceUpdateVenueArgs struct {
	Req *VenueInfo `thrift:"req,1"`
}

func NewVenueServiceUpdateVenueArgs() *VenueServiceUpdateVenueArgs {
	return &VenueServiceUpdateVenueArgs{}
}

func (p *VenueServiceUpdateVenueArgs) InitDefault() {
}

var VenueServiceUpdateVenueArgs_Req_DEFAULT *VenueInfo

func (p *VenueServiceUpdateVenueArgs) GetReq() (v *VenueInfo) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenueArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceUpdateVenueArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenueArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenueArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenueArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenue_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueArgs(%+v)", *p)

}

type VenueServiceUpdateVenueResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceUpdateVenueResult() *VenueServiceUpdateVenueResult {
	return &VenueServiceUpdateVenueResult{}
}

func (p *VenueServiceUpdateVenueResult) InitDefault() {
}

var VenueServiceUpdateVenueResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenueResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenueResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceUpdateVenueResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenueResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenueResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenue_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueResult(%+v)", *p)

}

type VenueServiceUpdateVenueStatusArgs struct {
	Req *base.StatusCodeReq `thrift:"req,1"`
}

func NewVenueServiceUpdateVenueStatusArgs() *VenueServiceUpdateVenueStatusArgs {
	return &VenueServiceUpdateVenueStatusArgs{}
}

func (p *VenueServiceUpdateVenueStatusArgs) InitDefault() {
}

var VenueServiceUpdateVenueStatusArgs_Req_DEFAULT *base.StatusCodeReq

func (p *VenueServiceUpdateVenueStatusArgs) GetReq() (v *base.StatusCodeReq) {
	if !p.IsSetReq() {
		return VenueServiceUpdateVenueStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceUpdateVenueStatusArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceUpdateVenueStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceUpdateVenueStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewStatusCodeReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceUpdateVenueStatusArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenueStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueStatusArgs(%+v)", *p)

}

type VenueServiceUpdateVenueStatusResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceUpdateVenueStatusResult() *VenueServiceUpdateVenueStatusResult {
	return &VenueServiceUpdateVenueStatusResult{}
}

func (p *VenueServiceUpdateVenueStatusResult) InitDefault() {
}

var VenueServiceUpdateVenueStatusResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceUpdateVenueStatusResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceUpdateVenueStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceUpdateVenueStatusResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceUpdateVenueStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceUpdateVenueStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceUpdateVenueStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceUpdateVenueStatusResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVenueStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceUpdateVenueStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceUpdateVenueStatusResult(%+v)", *p)

}

type VenueServiceVenueListArgs struct {
	Req *VenueListReq `thrift:"req,1"`
}

func NewVenueServiceVenueListArgs() *VenueServiceVenueListArgs {
	return &VenueServiceVenueListArgs{}
}

func (p *VenueServiceVenueListArgs) InitDefault() {
}

var VenueServiceVenueListArgs_Req_DEFAULT *VenueListReq

func (p *VenueServiceVenueListArgs) GetReq() (v *VenueListReq) {
	if !p.IsSetReq() {
		return VenueServiceVenueListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_VenueServiceVenueListArgs = map[int16]string{
	1: "req",
}

func (p *VenueServiceVenueListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VenueServiceVenueListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenueListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVenueListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *VenueServiceVenueListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenueList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VenueServiceVenueListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenueListArgs(%+v)", *p)

}

type VenueServiceVenueListResult struct {
	Success *base.NilResponse `thrift:"success,0,optional"`
}

func NewVenueServiceVenueListResult() *VenueServiceVenueListResult {
	return &VenueServiceVenueListResult{}
}

func (p *VenueServiceVenueListResult) InitDefault() {
}

var VenueServiceVenueListResult_Success_DEFAULT *base.NilResponse

func (p *VenueServiceVenueListResult) GetSuccess() (v *base.NilResponse) {
	if !p.IsSetSuccess() {
		return VenueServiceVenueListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_VenueServiceVenueListResult = map[int16]string{
	0: "success",
}

func (p *VenueServiceVenueListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VenueServiceVenueListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VenueServiceVenueListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VenueServiceVenueListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewNilResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *VenueServiceVenueListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("VenueList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VenueServiceVenueListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VenueServiceVenueListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VenueServiceVenueListResult(%+v)", *p)

}

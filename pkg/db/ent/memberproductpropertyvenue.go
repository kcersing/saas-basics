// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/memberproductpropertyvenue"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MemberProductPropertyVenue is the model entity for the MemberProductPropertyVenue schema.
type MemberProductPropertyVenue struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// MemberProductPropertyID holds the value of the "member_product_property_id" field.
	MemberProductPropertyID int64 `json:"member_product_property_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberProductPropertyVenueQuery when eager-loading is set.
	Edges        MemberProductPropertyVenueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberProductPropertyVenueEdges holds the relations/edges for other nodes in the graph.
type MemberProductPropertyVenueEdges struct {
	// Owner holds the value of the owner edge.
	Owner *MemberProductProperty `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberProductPropertyVenueEdges) OwnerOrErr() (*MemberProductProperty, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: memberproductproperty.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberProductPropertyVenue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberproductpropertyvenue.FieldID, memberproductpropertyvenue.FieldVenueID, memberproductpropertyvenue.FieldMemberProductPropertyID:
			values[i] = new(sql.NullInt64)
		case memberproductpropertyvenue.FieldCreatedAt, memberproductpropertyvenue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberProductPropertyVenue fields.
func (mppv *MemberProductPropertyVenue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberproductpropertyvenue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mppv.ID = int64(value.Int64)
		case memberproductpropertyvenue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mppv.CreatedAt = value.Time
			}
		case memberproductpropertyvenue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mppv.UpdatedAt = value.Time
			}
		case memberproductpropertyvenue.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				mppv.VenueID = value.Int64
			}
		case memberproductpropertyvenue.FieldMemberProductPropertyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_product_property_id", values[i])
			} else if value.Valid {
				mppv.MemberProductPropertyID = value.Int64
			}
		default:
			mppv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberProductPropertyVenue.
// This includes values selected through modifiers, order, etc.
func (mppv *MemberProductPropertyVenue) Value(name string) (ent.Value, error) {
	return mppv.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the MemberProductPropertyVenue entity.
func (mppv *MemberProductPropertyVenue) QueryOwner() *MemberProductPropertyQuery {
	return NewMemberProductPropertyVenueClient(mppv.config).QueryOwner(mppv)
}

// Update returns a builder for updating this MemberProductPropertyVenue.
// Note that you need to call MemberProductPropertyVenue.Unwrap() before calling this method if this MemberProductPropertyVenue
// was returned from a transaction, and the transaction was committed or rolled back.
func (mppv *MemberProductPropertyVenue) Update() *MemberProductPropertyVenueUpdateOne {
	return NewMemberProductPropertyVenueClient(mppv.config).UpdateOne(mppv)
}

// Unwrap unwraps the MemberProductPropertyVenue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mppv *MemberProductPropertyVenue) Unwrap() *MemberProductPropertyVenue {
	_tx, ok := mppv.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberProductPropertyVenue is not a transactional entity")
	}
	mppv.config.driver = _tx.drv
	return mppv
}

// String implements the fmt.Stringer.
func (mppv *MemberProductPropertyVenue) String() string {
	var builder strings.Builder
	builder.WriteString("MemberProductPropertyVenue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mppv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mppv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mppv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", mppv.VenueID))
	builder.WriteString(", ")
	builder.WriteString("member_product_property_id=")
	builder.WriteString(fmt.Sprintf("%v", mppv.MemberProductPropertyID))
	builder.WriteByte(')')
	return builder.String()
}

// MemberProductPropertyVenues is a parsable slice of MemberProductPropertyVenue.
type MemberProductPropertyVenues []*MemberProductPropertyVenue

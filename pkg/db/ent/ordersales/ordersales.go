// Code generated by ent, DO NOT EDIT.

package ordersales

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ordersales type in the database.
	Label = "order_sales"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldSalesID holds the string denoting the sales_id field in the database.
	FieldSalesID = "sales_id"
	// FieldRatio holds the string denoting the ratio field in the database.
	FieldRatio = "ratio"
	// EdgeAufk holds the string denoting the aufk edge name in mutations.
	EdgeAufk = "aufk"
	// Table holds the table name of the ordersales in the database.
	Table = "order_sales"
	// AufkTable is the table that holds the aufk relation/edge.
	AufkTable = "order_sales"
	// AufkInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	AufkInverseTable = "order"
	// AufkColumn is the table column denoting the aufk relation/edge.
	AufkColumn = "order_id"
)

// Columns holds all SQL columns for ordersales fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldOrderID,
	FieldMemberID,
	FieldSalesID,
	FieldRatio,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
)

// OrderOption defines the ordering options for the OrderSales queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// BySalesID orders the results by the sales_id field.
func BySalesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesID, opts...).ToFunc()
}

// ByRatio orders the results by the ratio field.
func ByRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRatio, opts...).ToFunc()
}

// ByAufkField orders the results by aufk field.
func ByAufkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAufkStep(), sql.OrderByField(field, opts...))
	}
}
func newAufkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AufkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AufkTable, AufkColumn),
	)
}

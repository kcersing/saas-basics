// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/pkg/db/ent/productpropertyvenue"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductPropertyVenue is the model entity for the ProductPropertyVenue schema.
type ProductPropertyVenue struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 场馆id
	VenueID int64 `json:"venue_id,omitempty"`
	// ProductPropertyID holds the value of the "product_property_id" field.
	ProductPropertyID int64 `json:"product_property_id,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPropertyVenue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productpropertyvenue.FieldID, productpropertyvenue.FieldVenueID, productpropertyvenue.FieldProductPropertyID:
			values[i] = new(sql.NullInt64)
		case productpropertyvenue.FieldCreatedAt, productpropertyvenue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPropertyVenue fields.
func (ppv *ProductPropertyVenue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productpropertyvenue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ppv.ID = int64(value.Int64)
		case productpropertyvenue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ppv.CreatedAt = value.Time
			}
		case productpropertyvenue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ppv.UpdatedAt = value.Time
			}
		case productpropertyvenue.FieldVenueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field venue_id", values[i])
			} else if value.Valid {
				ppv.VenueID = value.Int64
			}
		case productpropertyvenue.FieldProductPropertyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_property_id", values[i])
			} else if value.Valid {
				ppv.ProductPropertyID = value.Int64
			}
		default:
			ppv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductPropertyVenue.
// This includes values selected through modifiers, order, etc.
func (ppv *ProductPropertyVenue) Value(name string) (ent.Value, error) {
	return ppv.selectValues.Get(name)
}

// Update returns a builder for updating this ProductPropertyVenue.
// Note that you need to call ProductPropertyVenue.Unwrap() before calling this method if this ProductPropertyVenue
// was returned from a transaction, and the transaction was committed or rolled back.
func (ppv *ProductPropertyVenue) Update() *ProductPropertyVenueUpdateOne {
	return NewProductPropertyVenueClient(ppv.config).UpdateOne(ppv)
}

// Unwrap unwraps the ProductPropertyVenue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ppv *ProductPropertyVenue) Unwrap() *ProductPropertyVenue {
	_tx, ok := ppv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPropertyVenue is not a transactional entity")
	}
	ppv.config.driver = _tx.drv
	return ppv
}

// String implements the fmt.Stringer.
func (ppv *ProductPropertyVenue) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPropertyVenue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ppv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ppv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ppv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("venue_id=")
	builder.WriteString(fmt.Sprintf("%v", ppv.VenueID))
	builder.WriteString(", ")
	builder.WriteString("product_property_id=")
	builder.WriteString(fmt.Sprintf("%v", ppv.ProductPropertyID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductPropertyVenues is a parsable slice of ProductPropertyVenue.
type ProductPropertyVenues []*ProductPropertyVenue

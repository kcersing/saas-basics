// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/pkg/db/ent/memberproduct"
	"saas/pkg/db/ent/memberproductproperty"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MemberProductProperty is the model entity for the MemberProductProperty schema.
type MemberProductProperty struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 状态[0:禁用;1:正常]
	Status int64 `json:"status,omitempty"`
	// 会员id
	MemberID int64 `json:"member_id,omitempty"`
	// 会员产品ID
	MemberProductID int64 `json:"member_product_id,omitempty"`
	// 属性ID
	PropertyID int64 `json:"property_id,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 总时长
	Duration int64 `json:"duration,omitempty"`
	// 单次时长
	Length int64 `json:"length,omitempty"`
	// 总次数
	Count int64 `json:"count,omitempty"`
	// 剩余次数
	CountSurplus int64 `json:"count_surplus,omitempty"`
	// 定价
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberProductPropertyQuery when eager-loading is set.
	Edges        MemberProductPropertyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberProductPropertyEdges holds the relations/edges for other nodes in the graph.
type MemberProductPropertyEdges struct {
	// Owner holds the value of the owner edge.
	Owner *MemberProduct `json:"owner,omitempty"`
	// Venues holds the value of the venues edge.
	Venues []*Venue `json:"venues,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemberProductPropertyEdges) OwnerOrErr() (*MemberProduct, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: memberproduct.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// VenuesOrErr returns the Venues value or an error if the edge
// was not loaded in eager-loading.
func (e MemberProductPropertyEdges) VenuesOrErr() ([]*Venue, error) {
	if e.loadedTypes[1] {
		return e.Venues, nil
	}
	return nil, &NotLoadedError{edge: "venues"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberProductProperty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberproductproperty.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case memberproductproperty.FieldID, memberproductproperty.FieldStatus, memberproductproperty.FieldMemberID, memberproductproperty.FieldMemberProductID, memberproductproperty.FieldPropertyID, memberproductproperty.FieldDuration, memberproductproperty.FieldLength, memberproductproperty.FieldCount, memberproductproperty.FieldCountSurplus:
			values[i] = new(sql.NullInt64)
		case memberproductproperty.FieldType, memberproductproperty.FieldName:
			values[i] = new(sql.NullString)
		case memberproductproperty.FieldCreatedAt, memberproductproperty.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberProductProperty fields.
func (mpp *MemberProductProperty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberproductproperty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mpp.ID = int64(value.Int64)
		case memberproductproperty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mpp.CreatedAt = value.Time
			}
		case memberproductproperty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mpp.UpdatedAt = value.Time
			}
		case memberproductproperty.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mpp.Status = value.Int64
			}
		case memberproductproperty.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				mpp.MemberID = value.Int64
			}
		case memberproductproperty.FieldMemberProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_product_id", values[i])
			} else if value.Valid {
				mpp.MemberProductID = value.Int64
			}
		case memberproductproperty.FieldPropertyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field property_id", values[i])
			} else if value.Valid {
				mpp.PropertyID = value.Int64
			}
		case memberproductproperty.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mpp.Type = value.String
			}
		case memberproductproperty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mpp.Name = value.String
			}
		case memberproductproperty.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				mpp.Duration = value.Int64
			}
		case memberproductproperty.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				mpp.Length = value.Int64
			}
		case memberproductproperty.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				mpp.Count = value.Int64
			}
		case memberproductproperty.FieldCountSurplus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count_surplus", values[i])
			} else if value.Valid {
				mpp.CountSurplus = value.Int64
			}
		case memberproductproperty.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mpp.Price = value.Float64
			}
		default:
			mpp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberProductProperty.
// This includes values selected through modifiers, order, etc.
func (mpp *MemberProductProperty) Value(name string) (ent.Value, error) {
	return mpp.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the MemberProductProperty entity.
func (mpp *MemberProductProperty) QueryOwner() *MemberProductQuery {
	return NewMemberProductPropertyClient(mpp.config).QueryOwner(mpp)
}

// QueryVenues queries the "venues" edge of the MemberProductProperty entity.
func (mpp *MemberProductProperty) QueryVenues() *VenueQuery {
	return NewMemberProductPropertyClient(mpp.config).QueryVenues(mpp)
}

// Update returns a builder for updating this MemberProductProperty.
// Note that you need to call MemberProductProperty.Unwrap() before calling this method if this MemberProductProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (mpp *MemberProductProperty) Update() *MemberProductPropertyUpdateOne {
	return NewMemberProductPropertyClient(mpp.config).UpdateOne(mpp)
}

// Unwrap unwraps the MemberProductProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mpp *MemberProductProperty) Unwrap() *MemberProductProperty {
	_tx, ok := mpp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberProductProperty is not a transactional entity")
	}
	mpp.config.driver = _tx.drv
	return mpp
}

// String implements the fmt.Stringer.
func (mpp *MemberProductProperty) String() string {
	var builder strings.Builder
	builder.WriteString("MemberProductProperty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mpp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mpp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mpp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mpp.Status))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", mpp.MemberID))
	builder.WriteString(", ")
	builder.WriteString("member_product_id=")
	builder.WriteString(fmt.Sprintf("%v", mpp.MemberProductID))
	builder.WriteString(", ")
	builder.WriteString("property_id=")
	builder.WriteString(fmt.Sprintf("%v", mpp.PropertyID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(mpp.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mpp.Name)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", mpp.Duration))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", mpp.Length))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", mpp.Count))
	builder.WriteString(", ")
	builder.WriteString("count_surplus=")
	builder.WriteString(fmt.Sprintf("%v", mpp.CountSurplus))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mpp.Price))
	builder.WriteByte(')')
	return builder.String()
}

// MemberProductProperties is a parsable slice of MemberProductProperty.
type MemberProductProperties []*MemberProductProperty

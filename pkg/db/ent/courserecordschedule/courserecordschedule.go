// Code generated by ent, DO NOT EDIT.

package courserecordschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the courserecordschedule type in the database.
	Label = "course_record_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVenueID holds the string denoting the venue_id field in the database.
	FieldVenueID = "venue_id"
	// FieldPlaceID holds the string denoting the place_id field in the database.
	FieldPlaceID = "place_id"
	// FieldCoachID holds the string denoting the coach_id field in the database.
	FieldCoachID = "coach_id"
	// FieldNum holds the string denoting the num field in the database.
	FieldNum = "num"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeCoach holds the string denoting the coach edge name in mutations.
	EdgeCoach = "coach"
	// Table holds the table name of the courserecordschedule in the database.
	Table = "course_record_schedule"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "course_record_user"
	// UsersInverseTable is the table name for the CourseRecordUser entity.
	// It exists in this package in order to avoid circular dependency with the "courserecorduser" package.
	UsersInverseTable = "course_record_user"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "course_record_schedule_id"
	// CoachTable is the table that holds the coach relation/edge.
	CoachTable = "course_record_coach"
	// CoachInverseTable is the table name for the CourseRecordCoach entity.
	// It exists in this package in order to avoid circular dependency with the "courserecordcoach" package.
	CoachInverseTable = "course_record_coach"
	// CoachColumn is the table column denoting the coach relation/edge.
	CoachColumn = "course_record_schedule_id"
)

// Columns holds all SQL columns for courserecordschedule fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldVenueID,
	FieldPlaceID,
	FieldCoachID,
	FieldNum,
	FieldStartTime,
	FieldEndTime,
	FieldPrice,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultEndTime holds the default value on creation for the "end_time" field.
	DefaultEndTime func() time.Time
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
)

// OrderOption defines the ordering options for the CourseRecordSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVenueID orders the results by the venue_id field.
func ByVenueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVenueID, opts...).ToFunc()
}

// ByPlaceID orders the results by the place_id field.
func ByPlaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlaceID, opts...).ToFunc()
}

// ByCoachID orders the results by the coach_id field.
func ByCoachID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoachID, opts...).ToFunc()
}

// ByNum orders the results by the num field.
func ByNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNum, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoachCount orders the results by coach count.
func ByCoachCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoachStep(), opts...)
	}
}

// ByCoach orders the results by coach terms.
func ByCoach(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoachStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newCoachStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoachInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CoachTable, CoachColumn),
	)
}

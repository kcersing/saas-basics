// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/memberproductpropertyvenue"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyVenueCreate is the builder for creating a MemberProductPropertyVenue entity.
type MemberProductPropertyVenueCreate struct {
	config
	mutation *MemberProductPropertyVenueMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mppvc *MemberProductPropertyVenueCreate) SetCreatedAt(t time.Time) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetCreatedAt(t)
	return mppvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mppvc *MemberProductPropertyVenueCreate) SetNillableCreatedAt(t *time.Time) *MemberProductPropertyVenueCreate {
	if t != nil {
		mppvc.SetCreatedAt(*t)
	}
	return mppvc
}

// SetUpdatedAt sets the "updated_at" field.
func (mppvc *MemberProductPropertyVenueCreate) SetUpdatedAt(t time.Time) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetUpdatedAt(t)
	return mppvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mppvc *MemberProductPropertyVenueCreate) SetNillableUpdatedAt(t *time.Time) *MemberProductPropertyVenueCreate {
	if t != nil {
		mppvc.SetUpdatedAt(*t)
	}
	return mppvc
}

// SetVenueID sets the "venue_id" field.
func (mppvc *MemberProductPropertyVenueCreate) SetVenueID(i int64) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetVenueID(i)
	return mppvc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (mppvc *MemberProductPropertyVenueCreate) SetNillableVenueID(i *int64) *MemberProductPropertyVenueCreate {
	if i != nil {
		mppvc.SetVenueID(*i)
	}
	return mppvc
}

// SetMemberProductPropertyID sets the "member_product_property_id" field.
func (mppvc *MemberProductPropertyVenueCreate) SetMemberProductPropertyID(i int64) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetMemberProductPropertyID(i)
	return mppvc
}

// SetNillableMemberProductPropertyID sets the "member_product_property_id" field if the given value is not nil.
func (mppvc *MemberProductPropertyVenueCreate) SetNillableMemberProductPropertyID(i *int64) *MemberProductPropertyVenueCreate {
	if i != nil {
		mppvc.SetMemberProductPropertyID(*i)
	}
	return mppvc
}

// SetID sets the "id" field.
func (mppvc *MemberProductPropertyVenueCreate) SetID(i int64) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetID(i)
	return mppvc
}

// SetOwnerID sets the "owner" edge to the MemberProductProperty entity by ID.
func (mppvc *MemberProductPropertyVenueCreate) SetOwnerID(id int64) *MemberProductPropertyVenueCreate {
	mppvc.mutation.SetOwnerID(id)
	return mppvc
}

// SetNillableOwnerID sets the "owner" edge to the MemberProductProperty entity by ID if the given value is not nil.
func (mppvc *MemberProductPropertyVenueCreate) SetNillableOwnerID(id *int64) *MemberProductPropertyVenueCreate {
	if id != nil {
		mppvc = mppvc.SetOwnerID(*id)
	}
	return mppvc
}

// SetOwner sets the "owner" edge to the MemberProductProperty entity.
func (mppvc *MemberProductPropertyVenueCreate) SetOwner(m *MemberProductProperty) *MemberProductPropertyVenueCreate {
	return mppvc.SetOwnerID(m.ID)
}

// Mutation returns the MemberProductPropertyVenueMutation object of the builder.
func (mppvc *MemberProductPropertyVenueCreate) Mutation() *MemberProductPropertyVenueMutation {
	return mppvc.mutation
}

// Save creates the MemberProductPropertyVenue in the database.
func (mppvc *MemberProductPropertyVenueCreate) Save(ctx context.Context) (*MemberProductPropertyVenue, error) {
	mppvc.defaults()
	return withHooks(ctx, mppvc.sqlSave, mppvc.mutation, mppvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mppvc *MemberProductPropertyVenueCreate) SaveX(ctx context.Context) *MemberProductPropertyVenue {
	v, err := mppvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mppvc *MemberProductPropertyVenueCreate) Exec(ctx context.Context) error {
	_, err := mppvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mppvc *MemberProductPropertyVenueCreate) ExecX(ctx context.Context) {
	if err := mppvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mppvc *MemberProductPropertyVenueCreate) defaults() {
	if _, ok := mppvc.mutation.CreatedAt(); !ok {
		v := memberproductpropertyvenue.DefaultCreatedAt()
		mppvc.mutation.SetCreatedAt(v)
	}
	if _, ok := mppvc.mutation.UpdatedAt(); !ok {
		v := memberproductpropertyvenue.DefaultUpdatedAt()
		mppvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mppvc *MemberProductPropertyVenueCreate) check() error {
	if _, ok := mppvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MemberProductPropertyVenue.created_at"`)}
	}
	if _, ok := mppvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MemberProductPropertyVenue.updated_at"`)}
	}
	return nil
}

func (mppvc *MemberProductPropertyVenueCreate) sqlSave(ctx context.Context) (*MemberProductPropertyVenue, error) {
	if err := mppvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mppvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mppvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mppvc.mutation.id = &_node.ID
	mppvc.mutation.done = true
	return _node, nil
}

func (mppvc *MemberProductPropertyVenueCreate) createSpec() (*MemberProductPropertyVenue, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberProductPropertyVenue{config: mppvc.config}
		_spec = sqlgraph.NewCreateSpec(memberproductpropertyvenue.Table, sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64))
	)
	if id, ok := mppvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mppvc.mutation.CreatedAt(); ok {
		_spec.SetField(memberproductpropertyvenue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mppvc.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductpropertyvenue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mppvc.mutation.VenueID(); ok {
		_spec.SetField(memberproductpropertyvenue.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if nodes := mppvc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductpropertyvenue.OwnerTable,
			Columns: []string{memberproductpropertyvenue.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberProductPropertyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberProductPropertyVenueCreateBulk is the builder for creating many MemberProductPropertyVenue entities in bulk.
type MemberProductPropertyVenueCreateBulk struct {
	config
	err      error
	builders []*MemberProductPropertyVenueCreate
}

// Save creates the MemberProductPropertyVenue entities in the database.
func (mppvcb *MemberProductPropertyVenueCreateBulk) Save(ctx context.Context) ([]*MemberProductPropertyVenue, error) {
	if mppvcb.err != nil {
		return nil, mppvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mppvcb.builders))
	nodes := make([]*MemberProductPropertyVenue, len(mppvcb.builders))
	mutators := make([]Mutator, len(mppvcb.builders))
	for i := range mppvcb.builders {
		func(i int, root context.Context) {
			builder := mppvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberProductPropertyVenueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mppvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mppvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mppvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mppvcb *MemberProductPropertyVenueCreateBulk) SaveX(ctx context.Context) []*MemberProductPropertyVenue {
	v, err := mppvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mppvcb *MemberProductPropertyVenueCreateBulk) Exec(ctx context.Context) error {
	_, err := mppvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mppvcb *MemberProductPropertyVenueCreateBulk) ExecX(ctx context.Context) {
	if err := mppvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

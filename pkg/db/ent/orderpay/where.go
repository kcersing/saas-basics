// Code generated by ent, DO NOT EDIT.

package orderpay

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldOrderID, v))
}

// PaySn applies equality check predicate on the "pay_sn" field. It's identical to PaySnEQ.
func PaySn(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldPaySn, v))
}

// Remission applies equality check predicate on the "remission" field. It's identical to RemissionEQ.
func Remission(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldRemission, v))
}

// Pay applies equality check predicate on the "pay" field. It's identical to PayEQ.
func Pay(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldPay, v))
}

// CreateID applies equality check predicate on the "create_id" field. It's identical to CreateIDEQ.
func CreateID(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldCreateID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldUpdatedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotNull(FieldOrderID))
}

// PaySnEQ applies the EQ predicate on the "pay_sn" field.
func PaySnEQ(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldPaySn, v))
}

// PaySnNEQ applies the NEQ predicate on the "pay_sn" field.
func PaySnNEQ(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldPaySn, v))
}

// PaySnIn applies the In predicate on the "pay_sn" field.
func PaySnIn(vs ...string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldPaySn, vs...))
}

// PaySnNotIn applies the NotIn predicate on the "pay_sn" field.
func PaySnNotIn(vs ...string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldPaySn, vs...))
}

// PaySnGT applies the GT predicate on the "pay_sn" field.
func PaySnGT(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldPaySn, v))
}

// PaySnGTE applies the GTE predicate on the "pay_sn" field.
func PaySnGTE(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldPaySn, v))
}

// PaySnLT applies the LT predicate on the "pay_sn" field.
func PaySnLT(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldPaySn, v))
}

// PaySnLTE applies the LTE predicate on the "pay_sn" field.
func PaySnLTE(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldPaySn, v))
}

// PaySnContains applies the Contains predicate on the "pay_sn" field.
func PaySnContains(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldContains(FieldPaySn, v))
}

// PaySnHasPrefix applies the HasPrefix predicate on the "pay_sn" field.
func PaySnHasPrefix(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldHasPrefix(FieldPaySn, v))
}

// PaySnHasSuffix applies the HasSuffix predicate on the "pay_sn" field.
func PaySnHasSuffix(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldHasSuffix(FieldPaySn, v))
}

// PaySnIsNil applies the IsNil predicate on the "pay_sn" field.
func PaySnIsNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIsNull(FieldPaySn))
}

// PaySnNotNil applies the NotNil predicate on the "pay_sn" field.
func PaySnNotNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotNull(FieldPaySn))
}

// PaySnEqualFold applies the EqualFold predicate on the "pay_sn" field.
func PaySnEqualFold(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEqualFold(FieldPaySn, v))
}

// PaySnContainsFold applies the ContainsFold predicate on the "pay_sn" field.
func PaySnContainsFold(v string) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldContainsFold(FieldPaySn, v))
}

// RemissionEQ applies the EQ predicate on the "remission" field.
func RemissionEQ(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldRemission, v))
}

// RemissionNEQ applies the NEQ predicate on the "remission" field.
func RemissionNEQ(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldRemission, v))
}

// RemissionIn applies the In predicate on the "remission" field.
func RemissionIn(vs ...float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldRemission, vs...))
}

// RemissionNotIn applies the NotIn predicate on the "remission" field.
func RemissionNotIn(vs ...float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldRemission, vs...))
}

// RemissionGT applies the GT predicate on the "remission" field.
func RemissionGT(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldRemission, v))
}

// RemissionGTE applies the GTE predicate on the "remission" field.
func RemissionGTE(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldRemission, v))
}

// RemissionLT applies the LT predicate on the "remission" field.
func RemissionLT(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldRemission, v))
}

// RemissionLTE applies the LTE predicate on the "remission" field.
func RemissionLTE(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldRemission, v))
}

// RemissionIsNil applies the IsNil predicate on the "remission" field.
func RemissionIsNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIsNull(FieldRemission))
}

// RemissionNotNil applies the NotNil predicate on the "remission" field.
func RemissionNotNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotNull(FieldRemission))
}

// PayEQ applies the EQ predicate on the "pay" field.
func PayEQ(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldPay, v))
}

// PayNEQ applies the NEQ predicate on the "pay" field.
func PayNEQ(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldPay, v))
}

// PayIn applies the In predicate on the "pay" field.
func PayIn(vs ...float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldPay, vs...))
}

// PayNotIn applies the NotIn predicate on the "pay" field.
func PayNotIn(vs ...float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldPay, vs...))
}

// PayGT applies the GT predicate on the "pay" field.
func PayGT(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldPay, v))
}

// PayGTE applies the GTE predicate on the "pay" field.
func PayGTE(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldPay, v))
}

// PayLT applies the LT predicate on the "pay" field.
func PayLT(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldPay, v))
}

// PayLTE applies the LTE predicate on the "pay" field.
func PayLTE(v float64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldPay, v))
}

// PayIsNil applies the IsNil predicate on the "pay" field.
func PayIsNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIsNull(FieldPay))
}

// PayNotNil applies the NotNil predicate on the "pay" field.
func PayNotNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotNull(FieldPay))
}

// CreateIDEQ applies the EQ predicate on the "create_id" field.
func CreateIDEQ(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldEQ(FieldCreateID, v))
}

// CreateIDNEQ applies the NEQ predicate on the "create_id" field.
func CreateIDNEQ(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNEQ(FieldCreateID, v))
}

// CreateIDIn applies the In predicate on the "create_id" field.
func CreateIDIn(vs ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIn(FieldCreateID, vs...))
}

// CreateIDNotIn applies the NotIn predicate on the "create_id" field.
func CreateIDNotIn(vs ...int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotIn(FieldCreateID, vs...))
}

// CreateIDGT applies the GT predicate on the "create_id" field.
func CreateIDGT(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGT(FieldCreateID, v))
}

// CreateIDGTE applies the GTE predicate on the "create_id" field.
func CreateIDGTE(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldGTE(FieldCreateID, v))
}

// CreateIDLT applies the LT predicate on the "create_id" field.
func CreateIDLT(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLT(FieldCreateID, v))
}

// CreateIDLTE applies the LTE predicate on the "create_id" field.
func CreateIDLTE(v int64) predicate.OrderPay {
	return predicate.OrderPay(sql.FieldLTE(FieldCreateID, v))
}

// CreateIDIsNil applies the IsNil predicate on the "create_id" field.
func CreateIDIsNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldIsNull(FieldCreateID))
}

// CreateIDNotNil applies the NotNil predicate on the "create_id" field.
func CreateIDNotNil() predicate.OrderPay {
	return predicate.OrderPay(sql.FieldNotNull(FieldCreateID))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.OrderPay {
	return predicate.OrderPay(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Order) predicate.OrderPay {
	return predicate.OrderPay(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderPay) predicate.OrderPay {
	return predicate.OrderPay(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderPay) predicate.OrderPay {
	return predicate.OrderPay(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderPay) predicate.OrderPay {
	return predicate.OrderPay(sql.NotPredicates(p))
}

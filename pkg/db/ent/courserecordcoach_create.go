// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/courserecordcoach"
	"saas/pkg/db/ent/courserecordschedule"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordCoachCreate is the builder for creating a CourseRecordCoach entity.
type CourseRecordCoachCreate struct {
	config
	mutation *CourseRecordCoachMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (crcc *CourseRecordCoachCreate) SetCreatedAt(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetCreatedAt(t)
	return crcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableCreatedAt(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetCreatedAt(*t)
	}
	return crcc
}

// SetUpdatedAt sets the "updated_at" field.
func (crcc *CourseRecordCoachCreate) SetUpdatedAt(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetUpdatedAt(t)
	return crcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableUpdatedAt(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetUpdatedAt(*t)
	}
	return crcc
}

// SetStatus sets the "status" field.
func (crcc *CourseRecordCoachCreate) SetStatus(i int64) *CourseRecordCoachCreate {
	crcc.mutation.SetStatus(i)
	return crcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableStatus(i *int64) *CourseRecordCoachCreate {
	if i != nil {
		crcc.SetStatus(*i)
	}
	return crcc
}

// SetVenueID sets the "venue_id" field.
func (crcc *CourseRecordCoachCreate) SetVenueID(i int64) *CourseRecordCoachCreate {
	crcc.mutation.SetVenueID(i)
	return crcc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableVenueID(i *int64) *CourseRecordCoachCreate {
	if i != nil {
		crcc.SetVenueID(*i)
	}
	return crcc
}

// SetCoachID sets the "coach_id" field.
func (crcc *CourseRecordCoachCreate) SetCoachID(i int64) *CourseRecordCoachCreate {
	crcc.mutation.SetCoachID(i)
	return crcc
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableCoachID(i *int64) *CourseRecordCoachCreate {
	if i != nil {
		crcc.SetCoachID(*i)
	}
	return crcc
}

// SetCourseRecordScheduleID sets the "course_record_schedule_id" field.
func (crcc *CourseRecordCoachCreate) SetCourseRecordScheduleID(i int64) *CourseRecordCoachCreate {
	crcc.mutation.SetCourseRecordScheduleID(i)
	return crcc
}

// SetNillableCourseRecordScheduleID sets the "course_record_schedule_id" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableCourseRecordScheduleID(i *int64) *CourseRecordCoachCreate {
	if i != nil {
		crcc.SetCourseRecordScheduleID(*i)
	}
	return crcc
}

// SetType sets the "type" field.
func (crcc *CourseRecordCoachCreate) SetType(s string) *CourseRecordCoachCreate {
	crcc.mutation.SetType(s)
	return crcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableType(s *string) *CourseRecordCoachCreate {
	if s != nil {
		crcc.SetType(*s)
	}
	return crcc
}

// SetStartTime sets the "start_time" field.
func (crcc *CourseRecordCoachCreate) SetStartTime(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetStartTime(t)
	return crcc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableStartTime(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetStartTime(*t)
	}
	return crcc
}

// SetEndTime sets the "end_time" field.
func (crcc *CourseRecordCoachCreate) SetEndTime(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetEndTime(t)
	return crcc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableEndTime(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetEndTime(*t)
	}
	return crcc
}

// SetSignStartTime sets the "sign_start_time" field.
func (crcc *CourseRecordCoachCreate) SetSignStartTime(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetSignStartTime(t)
	return crcc
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableSignStartTime(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetSignStartTime(*t)
	}
	return crcc
}

// SetSignEndTime sets the "sign_end_time" field.
func (crcc *CourseRecordCoachCreate) SetSignEndTime(t time.Time) *CourseRecordCoachCreate {
	crcc.mutation.SetSignEndTime(t)
	return crcc
}

// SetNillableSignEndTime sets the "sign_end_time" field if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableSignEndTime(t *time.Time) *CourseRecordCoachCreate {
	if t != nil {
		crcc.SetSignEndTime(*t)
	}
	return crcc
}

// SetID sets the "id" field.
func (crcc *CourseRecordCoachCreate) SetID(i int64) *CourseRecordCoachCreate {
	crcc.mutation.SetID(i)
	return crcc
}

// SetScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID.
func (crcc *CourseRecordCoachCreate) SetScheduleID(id int64) *CourseRecordCoachCreate {
	crcc.mutation.SetScheduleID(id)
	return crcc
}

// SetNillableScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID if the given value is not nil.
func (crcc *CourseRecordCoachCreate) SetNillableScheduleID(id *int64) *CourseRecordCoachCreate {
	if id != nil {
		crcc = crcc.SetScheduleID(*id)
	}
	return crcc
}

// SetSchedule sets the "schedule" edge to the CourseRecordSchedule entity.
func (crcc *CourseRecordCoachCreate) SetSchedule(c *CourseRecordSchedule) *CourseRecordCoachCreate {
	return crcc.SetScheduleID(c.ID)
}

// Mutation returns the CourseRecordCoachMutation object of the builder.
func (crcc *CourseRecordCoachCreate) Mutation() *CourseRecordCoachMutation {
	return crcc.mutation
}

// Save creates the CourseRecordCoach in the database.
func (crcc *CourseRecordCoachCreate) Save(ctx context.Context) (*CourseRecordCoach, error) {
	crcc.defaults()
	return withHooks(ctx, crcc.sqlSave, crcc.mutation, crcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crcc *CourseRecordCoachCreate) SaveX(ctx context.Context) *CourseRecordCoach {
	v, err := crcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcc *CourseRecordCoachCreate) Exec(ctx context.Context) error {
	_, err := crcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcc *CourseRecordCoachCreate) ExecX(ctx context.Context) {
	if err := crcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crcc *CourseRecordCoachCreate) defaults() {
	if _, ok := crcc.mutation.CreatedAt(); !ok {
		v := courserecordcoach.DefaultCreatedAt()
		crcc.mutation.SetCreatedAt(v)
	}
	if _, ok := crcc.mutation.UpdatedAt(); !ok {
		v := courserecordcoach.DefaultUpdatedAt()
		crcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crcc.mutation.Status(); !ok {
		v := courserecordcoach.DefaultStatus
		crcc.mutation.SetStatus(v)
	}
	if _, ok := crcc.mutation.StartTime(); !ok {
		v := courserecordcoach.DefaultStartTime()
		crcc.mutation.SetStartTime(v)
	}
	if _, ok := crcc.mutation.EndTime(); !ok {
		v := courserecordcoach.DefaultEndTime()
		crcc.mutation.SetEndTime(v)
	}
	if _, ok := crcc.mutation.SignStartTime(); !ok {
		v := courserecordcoach.DefaultSignStartTime()
		crcc.mutation.SetSignStartTime(v)
	}
	if _, ok := crcc.mutation.SignEndTime(); !ok {
		v := courserecordcoach.DefaultSignEndTime()
		crcc.mutation.SetSignEndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crcc *CourseRecordCoachCreate) check() error {
	if _, ok := crcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseRecordCoach.created_at"`)}
	}
	if _, ok := crcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseRecordCoach.updated_at"`)}
	}
	return nil
}

func (crcc *CourseRecordCoachCreate) sqlSave(ctx context.Context) (*CourseRecordCoach, error) {
	if err := crcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	crcc.mutation.id = &_node.ID
	crcc.mutation.done = true
	return _node, nil
}

func (crcc *CourseRecordCoachCreate) createSpec() (*CourseRecordCoach, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseRecordCoach{config: crcc.config}
		_spec = sqlgraph.NewCreateSpec(courserecordcoach.Table, sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64))
	)
	if id, ok := crcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crcc.mutation.CreatedAt(); ok {
		_spec.SetField(courserecordcoach.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crcc.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecordcoach.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crcc.mutation.Status(); ok {
		_spec.SetField(courserecordcoach.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := crcc.mutation.VenueID(); ok {
		_spec.SetField(courserecordcoach.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if value, ok := crcc.mutation.CoachID(); ok {
		_spec.SetField(courserecordcoach.FieldCoachID, field.TypeInt64, value)
		_node.CoachID = value
	}
	if value, ok := crcc.mutation.GetType(); ok {
		_spec.SetField(courserecordcoach.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := crcc.mutation.StartTime(); ok {
		_spec.SetField(courserecordcoach.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := crcc.mutation.EndTime(); ok {
		_spec.SetField(courserecordcoach.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := crcc.mutation.SignStartTime(); ok {
		_spec.SetField(courserecordcoach.FieldSignStartTime, field.TypeTime, value)
		_node.SignStartTime = value
	}
	if value, ok := crcc.mutation.SignEndTime(); ok {
		_spec.SetField(courserecordcoach.FieldSignEndTime, field.TypeTime, value)
		_node.SignEndTime = value
	}
	if nodes := crcc.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courserecordcoach.ScheduleTable,
			Columns: []string{courserecordcoach.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseRecordScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseRecordCoachCreateBulk is the builder for creating many CourseRecordCoach entities in bulk.
type CourseRecordCoachCreateBulk struct {
	config
	err      error
	builders []*CourseRecordCoachCreate
}

// Save creates the CourseRecordCoach entities in the database.
func (crccb *CourseRecordCoachCreateBulk) Save(ctx context.Context) ([]*CourseRecordCoach, error) {
	if crccb.err != nil {
		return nil, crccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crccb.builders))
	nodes := make([]*CourseRecordCoach, len(crccb.builders))
	mutators := make([]Mutator, len(crccb.builders))
	for i := range crccb.builders {
		func(i int, root context.Context) {
			builder := crccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseRecordCoachMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crccb *CourseRecordCoachCreateBulk) SaveX(ctx context.Context) []*CourseRecordCoach {
	v, err := crccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crccb *CourseRecordCoachCreateBulk) Exec(ctx context.Context) error {
	_, err := crccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crccb *CourseRecordCoachCreateBulk) ExecX(ctx context.Context) {
	if err := crccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/bootcamp"
	"saas/pkg/db/ent/bootcampparticipant"
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BootcampUpdate is the builder for updating Bootcamp entities.
type BootcampUpdate struct {
	config
	hooks    []Hook
	mutation *BootcampMutation
}

// Where appends a list predicates to the BootcampUpdate builder.
func (bu *BootcampUpdate) Where(ps ...predicate.Bootcamp) *BootcampUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BootcampUpdate) SetUpdatedAt(t time.Time) *BootcampUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BootcampUpdate) ClearUpdatedAt() *BootcampUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// SetDelete sets the "delete" field.
func (bu *BootcampUpdate) SetDelete(i int64) *BootcampUpdate {
	bu.mutation.ResetDelete()
	bu.mutation.SetDelete(i)
	return bu
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableDelete(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetDelete(*i)
	}
	return bu
}

// AddDelete adds i to the "delete" field.
func (bu *BootcampUpdate) AddDelete(i int64) *BootcampUpdate {
	bu.mutation.AddDelete(i)
	return bu
}

// ClearDelete clears the value of the "delete" field.
func (bu *BootcampUpdate) ClearDelete() *BootcampUpdate {
	bu.mutation.ClearDelete()
	return bu
}

// SetCreatedID sets the "created_id" field.
func (bu *BootcampUpdate) SetCreatedID(i int64) *BootcampUpdate {
	bu.mutation.ResetCreatedID()
	bu.mutation.SetCreatedID(i)
	return bu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableCreatedID(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetCreatedID(*i)
	}
	return bu
}

// AddCreatedID adds i to the "created_id" field.
func (bu *BootcampUpdate) AddCreatedID(i int64) *BootcampUpdate {
	bu.mutation.AddCreatedID(i)
	return bu
}

// ClearCreatedID clears the value of the "created_id" field.
func (bu *BootcampUpdate) ClearCreatedID() *BootcampUpdate {
	bu.mutation.ClearCreatedID()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BootcampUpdate) SetStatus(i int64) *BootcampUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableStatus(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BootcampUpdate) AddStatus(i int64) *BootcampUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BootcampUpdate) ClearStatus() *BootcampUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetName sets the "name" field.
func (bu *BootcampUpdate) SetName(s string) *BootcampUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableName(s *string) *BootcampUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// ClearName clears the value of the "name" field.
func (bu *BootcampUpdate) ClearName() *BootcampUpdate {
	bu.mutation.ClearName()
	return bu
}

// SetSignNumber sets the "sign_number" field.
func (bu *BootcampUpdate) SetSignNumber(i int64) *BootcampUpdate {
	bu.mutation.ResetSignNumber()
	bu.mutation.SetSignNumber(i)
	return bu
}

// SetNillableSignNumber sets the "sign_number" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableSignNumber(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetSignNumber(*i)
	}
	return bu
}

// AddSignNumber adds i to the "sign_number" field.
func (bu *BootcampUpdate) AddSignNumber(i int64) *BootcampUpdate {
	bu.mutation.AddSignNumber(i)
	return bu
}

// ClearSignNumber clears the value of the "sign_number" field.
func (bu *BootcampUpdate) ClearSignNumber() *BootcampUpdate {
	bu.mutation.ClearSignNumber()
	return bu
}

// SetSignStartAt sets the "sign_start_at" field.
func (bu *BootcampUpdate) SetSignStartAt(t time.Time) *BootcampUpdate {
	bu.mutation.SetSignStartAt(t)
	return bu
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableSignStartAt(t *time.Time) *BootcampUpdate {
	if t != nil {
		bu.SetSignStartAt(*t)
	}
	return bu
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (bu *BootcampUpdate) ClearSignStartAt() *BootcampUpdate {
	bu.mutation.ClearSignStartAt()
	return bu
}

// SetSignEndAt sets the "sign_end_at" field.
func (bu *BootcampUpdate) SetSignEndAt(t time.Time) *BootcampUpdate {
	bu.mutation.SetSignEndAt(t)
	return bu
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableSignEndAt(t *time.Time) *BootcampUpdate {
	if t != nil {
		bu.SetSignEndAt(*t)
	}
	return bu
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (bu *BootcampUpdate) ClearSignEndAt() *BootcampUpdate {
	bu.mutation.ClearSignEndAt()
	return bu
}

// SetNumber sets the "number" field.
func (bu *BootcampUpdate) SetNumber(i int64) *BootcampUpdate {
	bu.mutation.ResetNumber()
	bu.mutation.SetNumber(i)
	return bu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableNumber(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetNumber(*i)
	}
	return bu
}

// AddNumber adds i to the "number" field.
func (bu *BootcampUpdate) AddNumber(i int64) *BootcampUpdate {
	bu.mutation.AddNumber(i)
	return bu
}

// ClearNumber clears the value of the "number" field.
func (bu *BootcampUpdate) ClearNumber() *BootcampUpdate {
	bu.mutation.ClearNumber()
	return bu
}

// SetStartAt sets the "start_at" field.
func (bu *BootcampUpdate) SetStartAt(t time.Time) *BootcampUpdate {
	bu.mutation.SetStartAt(t)
	return bu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableStartAt(t *time.Time) *BootcampUpdate {
	if t != nil {
		bu.SetStartAt(*t)
	}
	return bu
}

// ClearStartAt clears the value of the "start_at" field.
func (bu *BootcampUpdate) ClearStartAt() *BootcampUpdate {
	bu.mutation.ClearStartAt()
	return bu
}

// SetEndAt sets the "end_at" field.
func (bu *BootcampUpdate) SetEndAt(t time.Time) *BootcampUpdate {
	bu.mutation.SetEndAt(t)
	return bu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableEndAt(t *time.Time) *BootcampUpdate {
	if t != nil {
		bu.SetEndAt(*t)
	}
	return bu
}

// ClearEndAt clears the value of the "end_at" field.
func (bu *BootcampUpdate) ClearEndAt() *BootcampUpdate {
	bu.mutation.ClearEndAt()
	return bu
}

// SetPic sets the "pic" field.
func (bu *BootcampUpdate) SetPic(s string) *BootcampUpdate {
	bu.mutation.SetPic(s)
	return bu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillablePic(s *string) *BootcampUpdate {
	if s != nil {
		bu.SetPic(*s)
	}
	return bu
}

// ClearPic clears the value of the "pic" field.
func (bu *BootcampUpdate) ClearPic() *BootcampUpdate {
	bu.mutation.ClearPic()
	return bu
}

// SetSponsor sets the "sponsor" field.
func (bu *BootcampUpdate) SetSponsor(s string) *BootcampUpdate {
	bu.mutation.SetSponsor(s)
	return bu
}

// SetNillableSponsor sets the "sponsor" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableSponsor(s *string) *BootcampUpdate {
	if s != nil {
		bu.SetSponsor(*s)
	}
	return bu
}

// ClearSponsor clears the value of the "sponsor" field.
func (bu *BootcampUpdate) ClearSponsor() *BootcampUpdate {
	bu.mutation.ClearSponsor()
	return bu
}

// SetFee sets the "fee" field.
func (bu *BootcampUpdate) SetFee(f float64) *BootcampUpdate {
	bu.mutation.ResetFee()
	bu.mutation.SetFee(f)
	return bu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableFee(f *float64) *BootcampUpdate {
	if f != nil {
		bu.SetFee(*f)
	}
	return bu
}

// AddFee adds f to the "fee" field.
func (bu *BootcampUpdate) AddFee(f float64) *BootcampUpdate {
	bu.mutation.AddFee(f)
	return bu
}

// ClearFee clears the value of the "fee" field.
func (bu *BootcampUpdate) ClearFee() *BootcampUpdate {
	bu.mutation.ClearFee()
	return bu
}

// SetIsFee sets the "is_fee" field.
func (bu *BootcampUpdate) SetIsFee(i int64) *BootcampUpdate {
	bu.mutation.ResetIsFee()
	bu.mutation.SetIsFee(i)
	return bu
}

// SetNillableIsFee sets the "is_fee" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableIsFee(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetIsFee(*i)
	}
	return bu
}

// AddIsFee adds i to the "is_fee" field.
func (bu *BootcampUpdate) AddIsFee(i int64) *BootcampUpdate {
	bu.mutation.AddIsFee(i)
	return bu
}

// ClearIsFee clears the value of the "is_fee" field.
func (bu *BootcampUpdate) ClearIsFee() *BootcampUpdate {
	bu.mutation.ClearIsFee()
	return bu
}

// SetIsCancel sets the "is_cancel" field.
func (bu *BootcampUpdate) SetIsCancel(i int64) *BootcampUpdate {
	bu.mutation.ResetIsCancel()
	bu.mutation.SetIsCancel(i)
	return bu
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableIsCancel(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetIsCancel(*i)
	}
	return bu
}

// AddIsCancel adds i to the "is_cancel" field.
func (bu *BootcampUpdate) AddIsCancel(i int64) *BootcampUpdate {
	bu.mutation.AddIsCancel(i)
	return bu
}

// ClearIsCancel clears the value of the "is_cancel" field.
func (bu *BootcampUpdate) ClearIsCancel() *BootcampUpdate {
	bu.mutation.ClearIsCancel()
	return bu
}

// SetCancelTime sets the "cancel_time" field.
func (bu *BootcampUpdate) SetCancelTime(i int64) *BootcampUpdate {
	bu.mutation.ResetCancelTime()
	bu.mutation.SetCancelTime(i)
	return bu
}

// SetNillableCancelTime sets the "cancel_time" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableCancelTime(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetCancelTime(*i)
	}
	return bu
}

// AddCancelTime adds i to the "cancel_time" field.
func (bu *BootcampUpdate) AddCancelTime(i int64) *BootcampUpdate {
	bu.mutation.AddCancelTime(i)
	return bu
}

// ClearCancelTime clears the value of the "cancel_time" field.
func (bu *BootcampUpdate) ClearCancelTime() *BootcampUpdate {
	bu.mutation.ClearCancelTime()
	return bu
}

// SetDetail sets the "detail" field.
func (bu *BootcampUpdate) SetDetail(s string) *BootcampUpdate {
	bu.mutation.SetDetail(s)
	return bu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableDetail(s *string) *BootcampUpdate {
	if s != nil {
		bu.SetDetail(*s)
	}
	return bu
}

// ClearDetail clears the value of the "detail" field.
func (bu *BootcampUpdate) ClearDetail() *BootcampUpdate {
	bu.mutation.ClearDetail()
	return bu
}

// SetSignFields sets the "sign_fields" field.
func (bu *BootcampUpdate) SetSignFields(s string) *BootcampUpdate {
	bu.mutation.SetSignFields(s)
	return bu
}

// SetNillableSignFields sets the "sign_fields" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableSignFields(s *string) *BootcampUpdate {
	if s != nil {
		bu.SetSignFields(*s)
	}
	return bu
}

// ClearSignFields clears the value of the "sign_fields" field.
func (bu *BootcampUpdate) ClearSignFields() *BootcampUpdate {
	bu.mutation.ClearSignFields()
	return bu
}

// SetCondition sets the "condition" field.
func (bu *BootcampUpdate) SetCondition(i int64) *BootcampUpdate {
	bu.mutation.ResetCondition()
	bu.mutation.SetCondition(i)
	return bu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (bu *BootcampUpdate) SetNillableCondition(i *int64) *BootcampUpdate {
	if i != nil {
		bu.SetCondition(*i)
	}
	return bu
}

// AddCondition adds i to the "condition" field.
func (bu *BootcampUpdate) AddCondition(i int64) *BootcampUpdate {
	bu.mutation.AddCondition(i)
	return bu
}

// ClearCondition clears the value of the "condition" field.
func (bu *BootcampUpdate) ClearCondition() *BootcampUpdate {
	bu.mutation.ClearCondition()
	return bu
}

// AddBootcampParticipantIDs adds the "bootcamp_participants" edge to the BootcampParticipant entity by IDs.
func (bu *BootcampUpdate) AddBootcampParticipantIDs(ids ...int64) *BootcampUpdate {
	bu.mutation.AddBootcampParticipantIDs(ids...)
	return bu
}

// AddBootcampParticipants adds the "bootcamp_participants" edges to the BootcampParticipant entity.
func (bu *BootcampUpdate) AddBootcampParticipants(b ...*BootcampParticipant) *BootcampUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBootcampParticipantIDs(ids...)
}

// Mutation returns the BootcampMutation object of the builder.
func (bu *BootcampUpdate) Mutation() *BootcampMutation {
	return bu.mutation
}

// ClearBootcampParticipants clears all "bootcamp_participants" edges to the BootcampParticipant entity.
func (bu *BootcampUpdate) ClearBootcampParticipants() *BootcampUpdate {
	bu.mutation.ClearBootcampParticipants()
	return bu
}

// RemoveBootcampParticipantIDs removes the "bootcamp_participants" edge to BootcampParticipant entities by IDs.
func (bu *BootcampUpdate) RemoveBootcampParticipantIDs(ids ...int64) *BootcampUpdate {
	bu.mutation.RemoveBootcampParticipantIDs(ids...)
	return bu
}

// RemoveBootcampParticipants removes "bootcamp_participants" edges to BootcampParticipant entities.
func (bu *BootcampUpdate) RemoveBootcampParticipants(b ...*BootcampParticipant) *BootcampUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBootcampParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BootcampUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BootcampUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BootcampUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BootcampUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BootcampUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok && !bu.mutation.UpdatedAtCleared() {
		v := bootcamp.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BootcampUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bootcamp.Table, bootcamp.Columns, sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bu.mutation.CreatedAtCleared() {
		_spec.ClearField(bootcamp.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcamp.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(bootcamp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Delete(); ok {
		_spec.SetField(bootcamp.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedDelete(); ok {
		_spec.AddField(bootcamp.FieldDelete, field.TypeInt64, value)
	}
	if bu.mutation.DeleteCleared() {
		_spec.ClearField(bootcamp.FieldDelete, field.TypeInt64)
	}
	if value, ok := bu.mutation.CreatedID(); ok {
		_spec.SetField(bootcamp.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCreatedID(); ok {
		_spec.AddField(bootcamp.FieldCreatedID, field.TypeInt64, value)
	}
	if bu.mutation.CreatedIDCleared() {
		_spec.ClearField(bootcamp.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bootcamp.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(bootcamp.FieldStatus, field.TypeInt64, value)
	}
	if bu.mutation.StatusCleared() {
		_spec.ClearField(bootcamp.FieldStatus, field.TypeInt64)
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bootcamp.FieldName, field.TypeString, value)
	}
	if bu.mutation.NameCleared() {
		_spec.ClearField(bootcamp.FieldName, field.TypeString)
	}
	if value, ok := bu.mutation.SignNumber(); ok {
		_spec.SetField(bootcamp.FieldSignNumber, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedSignNumber(); ok {
		_spec.AddField(bootcamp.FieldSignNumber, field.TypeInt64, value)
	}
	if bu.mutation.SignNumberCleared() {
		_spec.ClearField(bootcamp.FieldSignNumber, field.TypeInt64)
	}
	if value, ok := bu.mutation.SignStartAt(); ok {
		_spec.SetField(bootcamp.FieldSignStartAt, field.TypeTime, value)
	}
	if bu.mutation.SignStartAtCleared() {
		_spec.ClearField(bootcamp.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := bu.mutation.SignEndAt(); ok {
		_spec.SetField(bootcamp.FieldSignEndAt, field.TypeTime, value)
	}
	if bu.mutation.SignEndAtCleared() {
		_spec.ClearField(bootcamp.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Number(); ok {
		_spec.SetField(bootcamp.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedNumber(); ok {
		_spec.AddField(bootcamp.FieldNumber, field.TypeInt64, value)
	}
	if bu.mutation.NumberCleared() {
		_spec.ClearField(bootcamp.FieldNumber, field.TypeInt64)
	}
	if value, ok := bu.mutation.StartAt(); ok {
		_spec.SetField(bootcamp.FieldStartAt, field.TypeTime, value)
	}
	if bu.mutation.StartAtCleared() {
		_spec.ClearField(bootcamp.FieldStartAt, field.TypeTime)
	}
	if value, ok := bu.mutation.EndAt(); ok {
		_spec.SetField(bootcamp.FieldEndAt, field.TypeTime, value)
	}
	if bu.mutation.EndAtCleared() {
		_spec.ClearField(bootcamp.FieldEndAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Pic(); ok {
		_spec.SetField(bootcamp.FieldPic, field.TypeString, value)
	}
	if bu.mutation.PicCleared() {
		_spec.ClearField(bootcamp.FieldPic, field.TypeString)
	}
	if value, ok := bu.mutation.Sponsor(); ok {
		_spec.SetField(bootcamp.FieldSponsor, field.TypeString, value)
	}
	if bu.mutation.SponsorCleared() {
		_spec.ClearField(bootcamp.FieldSponsor, field.TypeString)
	}
	if value, ok := bu.mutation.Fee(); ok {
		_spec.SetField(bootcamp.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedFee(); ok {
		_spec.AddField(bootcamp.FieldFee, field.TypeFloat64, value)
	}
	if bu.mutation.FeeCleared() {
		_spec.ClearField(bootcamp.FieldFee, field.TypeFloat64)
	}
	if value, ok := bu.mutation.IsFee(); ok {
		_spec.SetField(bootcamp.FieldIsFee, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedIsFee(); ok {
		_spec.AddField(bootcamp.FieldIsFee, field.TypeInt64, value)
	}
	if bu.mutation.IsFeeCleared() {
		_spec.ClearField(bootcamp.FieldIsFee, field.TypeInt64)
	}
	if value, ok := bu.mutation.IsCancel(); ok {
		_spec.SetField(bootcamp.FieldIsCancel, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedIsCancel(); ok {
		_spec.AddField(bootcamp.FieldIsCancel, field.TypeInt64, value)
	}
	if bu.mutation.IsCancelCleared() {
		_spec.ClearField(bootcamp.FieldIsCancel, field.TypeInt64)
	}
	if value, ok := bu.mutation.CancelTime(); ok {
		_spec.SetField(bootcamp.FieldCancelTime, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCancelTime(); ok {
		_spec.AddField(bootcamp.FieldCancelTime, field.TypeInt64, value)
	}
	if bu.mutation.CancelTimeCleared() {
		_spec.ClearField(bootcamp.FieldCancelTime, field.TypeInt64)
	}
	if value, ok := bu.mutation.Detail(); ok {
		_spec.SetField(bootcamp.FieldDetail, field.TypeString, value)
	}
	if bu.mutation.DetailCleared() {
		_spec.ClearField(bootcamp.FieldDetail, field.TypeString)
	}
	if value, ok := bu.mutation.SignFields(); ok {
		_spec.SetField(bootcamp.FieldSignFields, field.TypeString, value)
	}
	if bu.mutation.SignFieldsCleared() {
		_spec.ClearField(bootcamp.FieldSignFields, field.TypeString)
	}
	if value, ok := bu.mutation.Condition(); ok {
		_spec.SetField(bootcamp.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedCondition(); ok {
		_spec.AddField(bootcamp.FieldCondition, field.TypeInt64, value)
	}
	if bu.mutation.ConditionCleared() {
		_spec.ClearField(bootcamp.FieldCondition, field.TypeInt64)
	}
	if bu.mutation.BootcampParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBootcampParticipantsIDs(); len(nodes) > 0 && !bu.mutation.BootcampParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BootcampParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bootcamp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BootcampUpdateOne is the builder for updating a single Bootcamp entity.
type BootcampUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BootcampMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BootcampUpdateOne) SetUpdatedAt(t time.Time) *BootcampUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BootcampUpdateOne) ClearUpdatedAt() *BootcampUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// SetDelete sets the "delete" field.
func (buo *BootcampUpdateOne) SetDelete(i int64) *BootcampUpdateOne {
	buo.mutation.ResetDelete()
	buo.mutation.SetDelete(i)
	return buo
}

// SetNillableDelete sets the "delete" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableDelete(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetDelete(*i)
	}
	return buo
}

// AddDelete adds i to the "delete" field.
func (buo *BootcampUpdateOne) AddDelete(i int64) *BootcampUpdateOne {
	buo.mutation.AddDelete(i)
	return buo
}

// ClearDelete clears the value of the "delete" field.
func (buo *BootcampUpdateOne) ClearDelete() *BootcampUpdateOne {
	buo.mutation.ClearDelete()
	return buo
}

// SetCreatedID sets the "created_id" field.
func (buo *BootcampUpdateOne) SetCreatedID(i int64) *BootcampUpdateOne {
	buo.mutation.ResetCreatedID()
	buo.mutation.SetCreatedID(i)
	return buo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableCreatedID(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetCreatedID(*i)
	}
	return buo
}

// AddCreatedID adds i to the "created_id" field.
func (buo *BootcampUpdateOne) AddCreatedID(i int64) *BootcampUpdateOne {
	buo.mutation.AddCreatedID(i)
	return buo
}

// ClearCreatedID clears the value of the "created_id" field.
func (buo *BootcampUpdateOne) ClearCreatedID() *BootcampUpdateOne {
	buo.mutation.ClearCreatedID()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BootcampUpdateOne) SetStatus(i int64) *BootcampUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableStatus(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BootcampUpdateOne) AddStatus(i int64) *BootcampUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BootcampUpdateOne) ClearStatus() *BootcampUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetName sets the "name" field.
func (buo *BootcampUpdateOne) SetName(s string) *BootcampUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableName(s *string) *BootcampUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// ClearName clears the value of the "name" field.
func (buo *BootcampUpdateOne) ClearName() *BootcampUpdateOne {
	buo.mutation.ClearName()
	return buo
}

// SetSignNumber sets the "sign_number" field.
func (buo *BootcampUpdateOne) SetSignNumber(i int64) *BootcampUpdateOne {
	buo.mutation.ResetSignNumber()
	buo.mutation.SetSignNumber(i)
	return buo
}

// SetNillableSignNumber sets the "sign_number" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableSignNumber(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetSignNumber(*i)
	}
	return buo
}

// AddSignNumber adds i to the "sign_number" field.
func (buo *BootcampUpdateOne) AddSignNumber(i int64) *BootcampUpdateOne {
	buo.mutation.AddSignNumber(i)
	return buo
}

// ClearSignNumber clears the value of the "sign_number" field.
func (buo *BootcampUpdateOne) ClearSignNumber() *BootcampUpdateOne {
	buo.mutation.ClearSignNumber()
	return buo
}

// SetSignStartAt sets the "sign_start_at" field.
func (buo *BootcampUpdateOne) SetSignStartAt(t time.Time) *BootcampUpdateOne {
	buo.mutation.SetSignStartAt(t)
	return buo
}

// SetNillableSignStartAt sets the "sign_start_at" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableSignStartAt(t *time.Time) *BootcampUpdateOne {
	if t != nil {
		buo.SetSignStartAt(*t)
	}
	return buo
}

// ClearSignStartAt clears the value of the "sign_start_at" field.
func (buo *BootcampUpdateOne) ClearSignStartAt() *BootcampUpdateOne {
	buo.mutation.ClearSignStartAt()
	return buo
}

// SetSignEndAt sets the "sign_end_at" field.
func (buo *BootcampUpdateOne) SetSignEndAt(t time.Time) *BootcampUpdateOne {
	buo.mutation.SetSignEndAt(t)
	return buo
}

// SetNillableSignEndAt sets the "sign_end_at" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableSignEndAt(t *time.Time) *BootcampUpdateOne {
	if t != nil {
		buo.SetSignEndAt(*t)
	}
	return buo
}

// ClearSignEndAt clears the value of the "sign_end_at" field.
func (buo *BootcampUpdateOne) ClearSignEndAt() *BootcampUpdateOne {
	buo.mutation.ClearSignEndAt()
	return buo
}

// SetNumber sets the "number" field.
func (buo *BootcampUpdateOne) SetNumber(i int64) *BootcampUpdateOne {
	buo.mutation.ResetNumber()
	buo.mutation.SetNumber(i)
	return buo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableNumber(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetNumber(*i)
	}
	return buo
}

// AddNumber adds i to the "number" field.
func (buo *BootcampUpdateOne) AddNumber(i int64) *BootcampUpdateOne {
	buo.mutation.AddNumber(i)
	return buo
}

// ClearNumber clears the value of the "number" field.
func (buo *BootcampUpdateOne) ClearNumber() *BootcampUpdateOne {
	buo.mutation.ClearNumber()
	return buo
}

// SetStartAt sets the "start_at" field.
func (buo *BootcampUpdateOne) SetStartAt(t time.Time) *BootcampUpdateOne {
	buo.mutation.SetStartAt(t)
	return buo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableStartAt(t *time.Time) *BootcampUpdateOne {
	if t != nil {
		buo.SetStartAt(*t)
	}
	return buo
}

// ClearStartAt clears the value of the "start_at" field.
func (buo *BootcampUpdateOne) ClearStartAt() *BootcampUpdateOne {
	buo.mutation.ClearStartAt()
	return buo
}

// SetEndAt sets the "end_at" field.
func (buo *BootcampUpdateOne) SetEndAt(t time.Time) *BootcampUpdateOne {
	buo.mutation.SetEndAt(t)
	return buo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableEndAt(t *time.Time) *BootcampUpdateOne {
	if t != nil {
		buo.SetEndAt(*t)
	}
	return buo
}

// ClearEndAt clears the value of the "end_at" field.
func (buo *BootcampUpdateOne) ClearEndAt() *BootcampUpdateOne {
	buo.mutation.ClearEndAt()
	return buo
}

// SetPic sets the "pic" field.
func (buo *BootcampUpdateOne) SetPic(s string) *BootcampUpdateOne {
	buo.mutation.SetPic(s)
	return buo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillablePic(s *string) *BootcampUpdateOne {
	if s != nil {
		buo.SetPic(*s)
	}
	return buo
}

// ClearPic clears the value of the "pic" field.
func (buo *BootcampUpdateOne) ClearPic() *BootcampUpdateOne {
	buo.mutation.ClearPic()
	return buo
}

// SetSponsor sets the "sponsor" field.
func (buo *BootcampUpdateOne) SetSponsor(s string) *BootcampUpdateOne {
	buo.mutation.SetSponsor(s)
	return buo
}

// SetNillableSponsor sets the "sponsor" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableSponsor(s *string) *BootcampUpdateOne {
	if s != nil {
		buo.SetSponsor(*s)
	}
	return buo
}

// ClearSponsor clears the value of the "sponsor" field.
func (buo *BootcampUpdateOne) ClearSponsor() *BootcampUpdateOne {
	buo.mutation.ClearSponsor()
	return buo
}

// SetFee sets the "fee" field.
func (buo *BootcampUpdateOne) SetFee(f float64) *BootcampUpdateOne {
	buo.mutation.ResetFee()
	buo.mutation.SetFee(f)
	return buo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableFee(f *float64) *BootcampUpdateOne {
	if f != nil {
		buo.SetFee(*f)
	}
	return buo
}

// AddFee adds f to the "fee" field.
func (buo *BootcampUpdateOne) AddFee(f float64) *BootcampUpdateOne {
	buo.mutation.AddFee(f)
	return buo
}

// ClearFee clears the value of the "fee" field.
func (buo *BootcampUpdateOne) ClearFee() *BootcampUpdateOne {
	buo.mutation.ClearFee()
	return buo
}

// SetIsFee sets the "is_fee" field.
func (buo *BootcampUpdateOne) SetIsFee(i int64) *BootcampUpdateOne {
	buo.mutation.ResetIsFee()
	buo.mutation.SetIsFee(i)
	return buo
}

// SetNillableIsFee sets the "is_fee" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableIsFee(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetIsFee(*i)
	}
	return buo
}

// AddIsFee adds i to the "is_fee" field.
func (buo *BootcampUpdateOne) AddIsFee(i int64) *BootcampUpdateOne {
	buo.mutation.AddIsFee(i)
	return buo
}

// ClearIsFee clears the value of the "is_fee" field.
func (buo *BootcampUpdateOne) ClearIsFee() *BootcampUpdateOne {
	buo.mutation.ClearIsFee()
	return buo
}

// SetIsCancel sets the "is_cancel" field.
func (buo *BootcampUpdateOne) SetIsCancel(i int64) *BootcampUpdateOne {
	buo.mutation.ResetIsCancel()
	buo.mutation.SetIsCancel(i)
	return buo
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableIsCancel(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetIsCancel(*i)
	}
	return buo
}

// AddIsCancel adds i to the "is_cancel" field.
func (buo *BootcampUpdateOne) AddIsCancel(i int64) *BootcampUpdateOne {
	buo.mutation.AddIsCancel(i)
	return buo
}

// ClearIsCancel clears the value of the "is_cancel" field.
func (buo *BootcampUpdateOne) ClearIsCancel() *BootcampUpdateOne {
	buo.mutation.ClearIsCancel()
	return buo
}

// SetCancelTime sets the "cancel_time" field.
func (buo *BootcampUpdateOne) SetCancelTime(i int64) *BootcampUpdateOne {
	buo.mutation.ResetCancelTime()
	buo.mutation.SetCancelTime(i)
	return buo
}

// SetNillableCancelTime sets the "cancel_time" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableCancelTime(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetCancelTime(*i)
	}
	return buo
}

// AddCancelTime adds i to the "cancel_time" field.
func (buo *BootcampUpdateOne) AddCancelTime(i int64) *BootcampUpdateOne {
	buo.mutation.AddCancelTime(i)
	return buo
}

// ClearCancelTime clears the value of the "cancel_time" field.
func (buo *BootcampUpdateOne) ClearCancelTime() *BootcampUpdateOne {
	buo.mutation.ClearCancelTime()
	return buo
}

// SetDetail sets the "detail" field.
func (buo *BootcampUpdateOne) SetDetail(s string) *BootcampUpdateOne {
	buo.mutation.SetDetail(s)
	return buo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableDetail(s *string) *BootcampUpdateOne {
	if s != nil {
		buo.SetDetail(*s)
	}
	return buo
}

// ClearDetail clears the value of the "detail" field.
func (buo *BootcampUpdateOne) ClearDetail() *BootcampUpdateOne {
	buo.mutation.ClearDetail()
	return buo
}

// SetSignFields sets the "sign_fields" field.
func (buo *BootcampUpdateOne) SetSignFields(s string) *BootcampUpdateOne {
	buo.mutation.SetSignFields(s)
	return buo
}

// SetNillableSignFields sets the "sign_fields" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableSignFields(s *string) *BootcampUpdateOne {
	if s != nil {
		buo.SetSignFields(*s)
	}
	return buo
}

// ClearSignFields clears the value of the "sign_fields" field.
func (buo *BootcampUpdateOne) ClearSignFields() *BootcampUpdateOne {
	buo.mutation.ClearSignFields()
	return buo
}

// SetCondition sets the "condition" field.
func (buo *BootcampUpdateOne) SetCondition(i int64) *BootcampUpdateOne {
	buo.mutation.ResetCondition()
	buo.mutation.SetCondition(i)
	return buo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (buo *BootcampUpdateOne) SetNillableCondition(i *int64) *BootcampUpdateOne {
	if i != nil {
		buo.SetCondition(*i)
	}
	return buo
}

// AddCondition adds i to the "condition" field.
func (buo *BootcampUpdateOne) AddCondition(i int64) *BootcampUpdateOne {
	buo.mutation.AddCondition(i)
	return buo
}

// ClearCondition clears the value of the "condition" field.
func (buo *BootcampUpdateOne) ClearCondition() *BootcampUpdateOne {
	buo.mutation.ClearCondition()
	return buo
}

// AddBootcampParticipantIDs adds the "bootcamp_participants" edge to the BootcampParticipant entity by IDs.
func (buo *BootcampUpdateOne) AddBootcampParticipantIDs(ids ...int64) *BootcampUpdateOne {
	buo.mutation.AddBootcampParticipantIDs(ids...)
	return buo
}

// AddBootcampParticipants adds the "bootcamp_participants" edges to the BootcampParticipant entity.
func (buo *BootcampUpdateOne) AddBootcampParticipants(b ...*BootcampParticipant) *BootcampUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBootcampParticipantIDs(ids...)
}

// Mutation returns the BootcampMutation object of the builder.
func (buo *BootcampUpdateOne) Mutation() *BootcampMutation {
	return buo.mutation
}

// ClearBootcampParticipants clears all "bootcamp_participants" edges to the BootcampParticipant entity.
func (buo *BootcampUpdateOne) ClearBootcampParticipants() *BootcampUpdateOne {
	buo.mutation.ClearBootcampParticipants()
	return buo
}

// RemoveBootcampParticipantIDs removes the "bootcamp_participants" edge to BootcampParticipant entities by IDs.
func (buo *BootcampUpdateOne) RemoveBootcampParticipantIDs(ids ...int64) *BootcampUpdateOne {
	buo.mutation.RemoveBootcampParticipantIDs(ids...)
	return buo
}

// RemoveBootcampParticipants removes "bootcamp_participants" edges to BootcampParticipant entities.
func (buo *BootcampUpdateOne) RemoveBootcampParticipants(b ...*BootcampParticipant) *BootcampUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBootcampParticipantIDs(ids...)
}

// Where appends a list predicates to the BootcampUpdate builder.
func (buo *BootcampUpdateOne) Where(ps ...predicate.Bootcamp) *BootcampUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BootcampUpdateOne) Select(field string, fields ...string) *BootcampUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bootcamp entity.
func (buo *BootcampUpdateOne) Save(ctx context.Context) (*Bootcamp, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BootcampUpdateOne) SaveX(ctx context.Context) *Bootcamp {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BootcampUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BootcampUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BootcampUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok && !buo.mutation.UpdatedAtCleared() {
		v := bootcamp.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BootcampUpdateOne) sqlSave(ctx context.Context) (_node *Bootcamp, err error) {
	_spec := sqlgraph.NewUpdateSpec(bootcamp.Table, bootcamp.Columns, sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bootcamp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bootcamp.FieldID)
		for _, f := range fields {
			if !bootcamp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bootcamp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if buo.mutation.CreatedAtCleared() {
		_spec.ClearField(bootcamp.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcamp.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(bootcamp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Delete(); ok {
		_spec.SetField(bootcamp.FieldDelete, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedDelete(); ok {
		_spec.AddField(bootcamp.FieldDelete, field.TypeInt64, value)
	}
	if buo.mutation.DeleteCleared() {
		_spec.ClearField(bootcamp.FieldDelete, field.TypeInt64)
	}
	if value, ok := buo.mutation.CreatedID(); ok {
		_spec.SetField(bootcamp.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCreatedID(); ok {
		_spec.AddField(bootcamp.FieldCreatedID, field.TypeInt64, value)
	}
	if buo.mutation.CreatedIDCleared() {
		_spec.ClearField(bootcamp.FieldCreatedID, field.TypeInt64)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bootcamp.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(bootcamp.FieldStatus, field.TypeInt64, value)
	}
	if buo.mutation.StatusCleared() {
		_spec.ClearField(bootcamp.FieldStatus, field.TypeInt64)
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bootcamp.FieldName, field.TypeString, value)
	}
	if buo.mutation.NameCleared() {
		_spec.ClearField(bootcamp.FieldName, field.TypeString)
	}
	if value, ok := buo.mutation.SignNumber(); ok {
		_spec.SetField(bootcamp.FieldSignNumber, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedSignNumber(); ok {
		_spec.AddField(bootcamp.FieldSignNumber, field.TypeInt64, value)
	}
	if buo.mutation.SignNumberCleared() {
		_spec.ClearField(bootcamp.FieldSignNumber, field.TypeInt64)
	}
	if value, ok := buo.mutation.SignStartAt(); ok {
		_spec.SetField(bootcamp.FieldSignStartAt, field.TypeTime, value)
	}
	if buo.mutation.SignStartAtCleared() {
		_spec.ClearField(bootcamp.FieldSignStartAt, field.TypeTime)
	}
	if value, ok := buo.mutation.SignEndAt(); ok {
		_spec.SetField(bootcamp.FieldSignEndAt, field.TypeTime, value)
	}
	if buo.mutation.SignEndAtCleared() {
		_spec.ClearField(bootcamp.FieldSignEndAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Number(); ok {
		_spec.SetField(bootcamp.FieldNumber, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedNumber(); ok {
		_spec.AddField(bootcamp.FieldNumber, field.TypeInt64, value)
	}
	if buo.mutation.NumberCleared() {
		_spec.ClearField(bootcamp.FieldNumber, field.TypeInt64)
	}
	if value, ok := buo.mutation.StartAt(); ok {
		_spec.SetField(bootcamp.FieldStartAt, field.TypeTime, value)
	}
	if buo.mutation.StartAtCleared() {
		_spec.ClearField(bootcamp.FieldStartAt, field.TypeTime)
	}
	if value, ok := buo.mutation.EndAt(); ok {
		_spec.SetField(bootcamp.FieldEndAt, field.TypeTime, value)
	}
	if buo.mutation.EndAtCleared() {
		_spec.ClearField(bootcamp.FieldEndAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Pic(); ok {
		_spec.SetField(bootcamp.FieldPic, field.TypeString, value)
	}
	if buo.mutation.PicCleared() {
		_spec.ClearField(bootcamp.FieldPic, field.TypeString)
	}
	if value, ok := buo.mutation.Sponsor(); ok {
		_spec.SetField(bootcamp.FieldSponsor, field.TypeString, value)
	}
	if buo.mutation.SponsorCleared() {
		_spec.ClearField(bootcamp.FieldSponsor, field.TypeString)
	}
	if value, ok := buo.mutation.Fee(); ok {
		_spec.SetField(bootcamp.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedFee(); ok {
		_spec.AddField(bootcamp.FieldFee, field.TypeFloat64, value)
	}
	if buo.mutation.FeeCleared() {
		_spec.ClearField(bootcamp.FieldFee, field.TypeFloat64)
	}
	if value, ok := buo.mutation.IsFee(); ok {
		_spec.SetField(bootcamp.FieldIsFee, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedIsFee(); ok {
		_spec.AddField(bootcamp.FieldIsFee, field.TypeInt64, value)
	}
	if buo.mutation.IsFeeCleared() {
		_spec.ClearField(bootcamp.FieldIsFee, field.TypeInt64)
	}
	if value, ok := buo.mutation.IsCancel(); ok {
		_spec.SetField(bootcamp.FieldIsCancel, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedIsCancel(); ok {
		_spec.AddField(bootcamp.FieldIsCancel, field.TypeInt64, value)
	}
	if buo.mutation.IsCancelCleared() {
		_spec.ClearField(bootcamp.FieldIsCancel, field.TypeInt64)
	}
	if value, ok := buo.mutation.CancelTime(); ok {
		_spec.SetField(bootcamp.FieldCancelTime, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCancelTime(); ok {
		_spec.AddField(bootcamp.FieldCancelTime, field.TypeInt64, value)
	}
	if buo.mutation.CancelTimeCleared() {
		_spec.ClearField(bootcamp.FieldCancelTime, field.TypeInt64)
	}
	if value, ok := buo.mutation.Detail(); ok {
		_spec.SetField(bootcamp.FieldDetail, field.TypeString, value)
	}
	if buo.mutation.DetailCleared() {
		_spec.ClearField(bootcamp.FieldDetail, field.TypeString)
	}
	if value, ok := buo.mutation.SignFields(); ok {
		_spec.SetField(bootcamp.FieldSignFields, field.TypeString, value)
	}
	if buo.mutation.SignFieldsCleared() {
		_spec.ClearField(bootcamp.FieldSignFields, field.TypeString)
	}
	if value, ok := buo.mutation.Condition(); ok {
		_spec.SetField(bootcamp.FieldCondition, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedCondition(); ok {
		_spec.AddField(bootcamp.FieldCondition, field.TypeInt64, value)
	}
	if buo.mutation.ConditionCleared() {
		_spec.ClearField(bootcamp.FieldCondition, field.TypeInt64)
	}
	if buo.mutation.BootcampParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBootcampParticipantsIDs(); len(nodes) > 0 && !buo.mutation.BootcampParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BootcampParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bootcamp.BootcampParticipantsTable,
			Columns: []string{bootcamp.BootcampParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bootcamp{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bootcamp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

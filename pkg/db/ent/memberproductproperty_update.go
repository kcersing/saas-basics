// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/memberproduct"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/memberproductpropertyvenue"
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyUpdate is the builder for updating MemberProductProperty entities.
type MemberProductPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProductPropertyMutation
}

// Where appends a list predicates to the MemberProductPropertyUpdate builder.
func (mppu *MemberProductPropertyUpdate) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyUpdate {
	mppu.mutation.Where(ps...)
	return mppu
}

// SetUpdatedAt sets the "updated_at" field.
func (mppu *MemberProductPropertyUpdate) SetUpdatedAt(t time.Time) *MemberProductPropertyUpdate {
	mppu.mutation.SetUpdatedAt(t)
	return mppu
}

// SetStatus sets the "status" field.
func (mppu *MemberProductPropertyUpdate) SetStatus(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetStatus()
	mppu.mutation.SetStatus(i)
	return mppu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableStatus(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetStatus(*i)
	}
	return mppu
}

// AddStatus adds i to the "status" field.
func (mppu *MemberProductPropertyUpdate) AddStatus(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddStatus(i)
	return mppu
}

// ClearStatus clears the value of the "status" field.
func (mppu *MemberProductPropertyUpdate) ClearStatus() *MemberProductPropertyUpdate {
	mppu.mutation.ClearStatus()
	return mppu
}

// SetMemberID sets the "member_id" field.
func (mppu *MemberProductPropertyUpdate) SetMemberID(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetMemberID()
	mppu.mutation.SetMemberID(i)
	return mppu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableMemberID(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetMemberID(*i)
	}
	return mppu
}

// AddMemberID adds i to the "member_id" field.
func (mppu *MemberProductPropertyUpdate) AddMemberID(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddMemberID(i)
	return mppu
}

// ClearMemberID clears the value of the "member_id" field.
func (mppu *MemberProductPropertyUpdate) ClearMemberID() *MemberProductPropertyUpdate {
	mppu.mutation.ClearMemberID()
	return mppu
}

// SetMemberProductID sets the "member_product_id" field.
func (mppu *MemberProductPropertyUpdate) SetMemberProductID(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.SetMemberProductID(i)
	return mppu
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableMemberProductID(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetMemberProductID(*i)
	}
	return mppu
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (mppu *MemberProductPropertyUpdate) ClearMemberProductID() *MemberProductPropertyUpdate {
	mppu.mutation.ClearMemberProductID()
	return mppu
}

// SetType sets the "type" field.
func (mppu *MemberProductPropertyUpdate) SetType(s string) *MemberProductPropertyUpdate {
	mppu.mutation.SetType(s)
	return mppu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableType(s *string) *MemberProductPropertyUpdate {
	if s != nil {
		mppu.SetType(*s)
	}
	return mppu
}

// ClearType clears the value of the "type" field.
func (mppu *MemberProductPropertyUpdate) ClearType() *MemberProductPropertyUpdate {
	mppu.mutation.ClearType()
	return mppu
}

// SetName sets the "name" field.
func (mppu *MemberProductPropertyUpdate) SetName(s string) *MemberProductPropertyUpdate {
	mppu.mutation.SetName(s)
	return mppu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableName(s *string) *MemberProductPropertyUpdate {
	if s != nil {
		mppu.SetName(*s)
	}
	return mppu
}

// ClearName clears the value of the "name" field.
func (mppu *MemberProductPropertyUpdate) ClearName() *MemberProductPropertyUpdate {
	mppu.mutation.ClearName()
	return mppu
}

// SetDuration sets the "duration" field.
func (mppu *MemberProductPropertyUpdate) SetDuration(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetDuration()
	mppu.mutation.SetDuration(i)
	return mppu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableDuration(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetDuration(*i)
	}
	return mppu
}

// AddDuration adds i to the "duration" field.
func (mppu *MemberProductPropertyUpdate) AddDuration(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddDuration(i)
	return mppu
}

// ClearDuration clears the value of the "duration" field.
func (mppu *MemberProductPropertyUpdate) ClearDuration() *MemberProductPropertyUpdate {
	mppu.mutation.ClearDuration()
	return mppu
}

// SetLength sets the "length" field.
func (mppu *MemberProductPropertyUpdate) SetLength(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetLength()
	mppu.mutation.SetLength(i)
	return mppu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableLength(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetLength(*i)
	}
	return mppu
}

// AddLength adds i to the "length" field.
func (mppu *MemberProductPropertyUpdate) AddLength(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddLength(i)
	return mppu
}

// ClearLength clears the value of the "length" field.
func (mppu *MemberProductPropertyUpdate) ClearLength() *MemberProductPropertyUpdate {
	mppu.mutation.ClearLength()
	return mppu
}

// SetCount sets the "count" field.
func (mppu *MemberProductPropertyUpdate) SetCount(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetCount()
	mppu.mutation.SetCount(i)
	return mppu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableCount(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetCount(*i)
	}
	return mppu
}

// AddCount adds i to the "count" field.
func (mppu *MemberProductPropertyUpdate) AddCount(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddCount(i)
	return mppu
}

// ClearCount clears the value of the "count" field.
func (mppu *MemberProductPropertyUpdate) ClearCount() *MemberProductPropertyUpdate {
	mppu.mutation.ClearCount()
	return mppu
}

// SetCountSurplus sets the "count_surplus" field.
func (mppu *MemberProductPropertyUpdate) SetCountSurplus(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetCountSurplus()
	mppu.mutation.SetCountSurplus(i)
	return mppu
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableCountSurplus(i *int64) *MemberProductPropertyUpdate {
	if i != nil {
		mppu.SetCountSurplus(*i)
	}
	return mppu
}

// AddCountSurplus adds i to the "count_surplus" field.
func (mppu *MemberProductPropertyUpdate) AddCountSurplus(i int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddCountSurplus(i)
	return mppu
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (mppu *MemberProductPropertyUpdate) ClearCountSurplus() *MemberProductPropertyUpdate {
	mppu.mutation.ClearCountSurplus()
	return mppu
}

// SetPrice sets the "price" field.
func (mppu *MemberProductPropertyUpdate) SetPrice(f float64) *MemberProductPropertyUpdate {
	mppu.mutation.ResetPrice()
	mppu.mutation.SetPrice(f)
	return mppu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillablePrice(f *float64) *MemberProductPropertyUpdate {
	if f != nil {
		mppu.SetPrice(*f)
	}
	return mppu
}

// AddPrice adds f to the "price" field.
func (mppu *MemberProductPropertyUpdate) AddPrice(f float64) *MemberProductPropertyUpdate {
	mppu.mutation.AddPrice(f)
	return mppu
}

// ClearPrice clears the value of the "price" field.
func (mppu *MemberProductPropertyUpdate) ClearPrice() *MemberProductPropertyUpdate {
	mppu.mutation.ClearPrice()
	return mppu
}

// SetOwnerID sets the "owner" edge to the MemberProduct entity by ID.
func (mppu *MemberProductPropertyUpdate) SetOwnerID(id int64) *MemberProductPropertyUpdate {
	mppu.mutation.SetOwnerID(id)
	return mppu
}

// SetNillableOwnerID sets the "owner" edge to the MemberProduct entity by ID if the given value is not nil.
func (mppu *MemberProductPropertyUpdate) SetNillableOwnerID(id *int64) *MemberProductPropertyUpdate {
	if id != nil {
		mppu = mppu.SetOwnerID(*id)
	}
	return mppu
}

// SetOwner sets the "owner" edge to the MemberProduct entity.
func (mppu *MemberProductPropertyUpdate) SetOwner(m *MemberProduct) *MemberProductPropertyUpdate {
	return mppu.SetOwnerID(m.ID)
}

// AddMemberProductPropertyVenueIDs adds the "member_product_property_venues" edge to the MemberProductPropertyVenue entity by IDs.
func (mppu *MemberProductPropertyUpdate) AddMemberProductPropertyVenueIDs(ids ...int64) *MemberProductPropertyUpdate {
	mppu.mutation.AddMemberProductPropertyVenueIDs(ids...)
	return mppu
}

// AddMemberProductPropertyVenues adds the "member_product_property_venues" edges to the MemberProductPropertyVenue entity.
func (mppu *MemberProductPropertyUpdate) AddMemberProductPropertyVenues(m ...*MemberProductPropertyVenue) *MemberProductPropertyUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mppu.AddMemberProductPropertyVenueIDs(ids...)
}

// Mutation returns the MemberProductPropertyMutation object of the builder.
func (mppu *MemberProductPropertyUpdate) Mutation() *MemberProductPropertyMutation {
	return mppu.mutation
}

// ClearOwner clears the "owner" edge to the MemberProduct entity.
func (mppu *MemberProductPropertyUpdate) ClearOwner() *MemberProductPropertyUpdate {
	mppu.mutation.ClearOwner()
	return mppu
}

// ClearMemberProductPropertyVenues clears all "member_product_property_venues" edges to the MemberProductPropertyVenue entity.
func (mppu *MemberProductPropertyUpdate) ClearMemberProductPropertyVenues() *MemberProductPropertyUpdate {
	mppu.mutation.ClearMemberProductPropertyVenues()
	return mppu
}

// RemoveMemberProductPropertyVenueIDs removes the "member_product_property_venues" edge to MemberProductPropertyVenue entities by IDs.
func (mppu *MemberProductPropertyUpdate) RemoveMemberProductPropertyVenueIDs(ids ...int64) *MemberProductPropertyUpdate {
	mppu.mutation.RemoveMemberProductPropertyVenueIDs(ids...)
	return mppu
}

// RemoveMemberProductPropertyVenues removes "member_product_property_venues" edges to MemberProductPropertyVenue entities.
func (mppu *MemberProductPropertyUpdate) RemoveMemberProductPropertyVenues(m ...*MemberProductPropertyVenue) *MemberProductPropertyUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mppu.RemoveMemberProductPropertyVenueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mppu *MemberProductPropertyUpdate) Save(ctx context.Context) (int, error) {
	mppu.defaults()
	return withHooks(ctx, mppu.sqlSave, mppu.mutation, mppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mppu *MemberProductPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := mppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mppu *MemberProductPropertyUpdate) Exec(ctx context.Context) error {
	_, err := mppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mppu *MemberProductPropertyUpdate) ExecX(ctx context.Context) {
	if err := mppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mppu *MemberProductPropertyUpdate) defaults() {
	if _, ok := mppu.mutation.UpdatedAt(); !ok {
		v := memberproductproperty.UpdateDefaultUpdatedAt()
		mppu.mutation.SetUpdatedAt(v)
	}
}

func (mppu *MemberProductPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproductproperty.Table, memberproductproperty.Columns, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	if ps := mppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mppu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mppu.mutation.Status(); ok {
		_spec.SetField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedStatus(); ok {
		_spec.AddField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if mppu.mutation.StatusCleared() {
		_spec.ClearField(memberproductproperty.FieldStatus, field.TypeInt64)
	}
	if value, ok := mppu.mutation.MemberID(); ok {
		_spec.SetField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedMemberID(); ok {
		_spec.AddField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if mppu.mutation.MemberIDCleared() {
		_spec.ClearField(memberproductproperty.FieldMemberID, field.TypeInt64)
	}
	if value, ok := mppu.mutation.GetType(); ok {
		_spec.SetField(memberproductproperty.FieldType, field.TypeString, value)
	}
	if mppu.mutation.TypeCleared() {
		_spec.ClearField(memberproductproperty.FieldType, field.TypeString)
	}
	if value, ok := mppu.mutation.Name(); ok {
		_spec.SetField(memberproductproperty.FieldName, field.TypeString, value)
	}
	if mppu.mutation.NameCleared() {
		_spec.ClearField(memberproductproperty.FieldName, field.TypeString)
	}
	if value, ok := mppu.mutation.Duration(); ok {
		_spec.SetField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedDuration(); ok {
		_spec.AddField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if mppu.mutation.DurationCleared() {
		_spec.ClearField(memberproductproperty.FieldDuration, field.TypeInt64)
	}
	if value, ok := mppu.mutation.Length(); ok {
		_spec.SetField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedLength(); ok {
		_spec.AddField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if mppu.mutation.LengthCleared() {
		_spec.ClearField(memberproductproperty.FieldLength, field.TypeInt64)
	}
	if value, ok := mppu.mutation.Count(); ok {
		_spec.SetField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedCount(); ok {
		_spec.AddField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if mppu.mutation.CountCleared() {
		_spec.ClearField(memberproductproperty.FieldCount, field.TypeInt64)
	}
	if value, ok := mppu.mutation.CountSurplus(); ok {
		_spec.SetField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := mppu.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if mppu.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproductproperty.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := mppu.mutation.Price(); ok {
		_spec.SetField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mppu.mutation.AddedPrice(); ok {
		_spec.AddField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if mppu.mutation.PriceCleared() {
		_spec.ClearField(memberproductproperty.FieldPrice, field.TypeFloat64)
	}
	if mppu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mppu.mutation.MemberProductPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppu.mutation.RemovedMemberProductPropertyVenuesIDs(); len(nodes) > 0 && !mppu.mutation.MemberProductPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppu.mutation.MemberProductPropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproductproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mppu.mutation.done = true
	return n, nil
}

// MemberProductPropertyUpdateOne is the builder for updating a single MemberProductProperty entity.
type MemberProductPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProductPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mppuo *MemberProductPropertyUpdateOne) SetUpdatedAt(t time.Time) *MemberProductPropertyUpdateOne {
	mppuo.mutation.SetUpdatedAt(t)
	return mppuo
}

// SetStatus sets the "status" field.
func (mppuo *MemberProductPropertyUpdateOne) SetStatus(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetStatus()
	mppuo.mutation.SetStatus(i)
	return mppuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableStatus(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetStatus(*i)
	}
	return mppuo
}

// AddStatus adds i to the "status" field.
func (mppuo *MemberProductPropertyUpdateOne) AddStatus(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddStatus(i)
	return mppuo
}

// ClearStatus clears the value of the "status" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearStatus() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearStatus()
	return mppuo
}

// SetMemberID sets the "member_id" field.
func (mppuo *MemberProductPropertyUpdateOne) SetMemberID(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetMemberID()
	mppuo.mutation.SetMemberID(i)
	return mppuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableMemberID(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetMemberID(*i)
	}
	return mppuo
}

// AddMemberID adds i to the "member_id" field.
func (mppuo *MemberProductPropertyUpdateOne) AddMemberID(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddMemberID(i)
	return mppuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearMemberID() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearMemberID()
	return mppuo
}

// SetMemberProductID sets the "member_product_id" field.
func (mppuo *MemberProductPropertyUpdateOne) SetMemberProductID(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.SetMemberProductID(i)
	return mppuo
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableMemberProductID(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetMemberProductID(*i)
	}
	return mppuo
}

// ClearMemberProductID clears the value of the "member_product_id" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearMemberProductID() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearMemberProductID()
	return mppuo
}

// SetType sets the "type" field.
func (mppuo *MemberProductPropertyUpdateOne) SetType(s string) *MemberProductPropertyUpdateOne {
	mppuo.mutation.SetType(s)
	return mppuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableType(s *string) *MemberProductPropertyUpdateOne {
	if s != nil {
		mppuo.SetType(*s)
	}
	return mppuo
}

// ClearType clears the value of the "type" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearType() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearType()
	return mppuo
}

// SetName sets the "name" field.
func (mppuo *MemberProductPropertyUpdateOne) SetName(s string) *MemberProductPropertyUpdateOne {
	mppuo.mutation.SetName(s)
	return mppuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableName(s *string) *MemberProductPropertyUpdateOne {
	if s != nil {
		mppuo.SetName(*s)
	}
	return mppuo
}

// ClearName clears the value of the "name" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearName() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearName()
	return mppuo
}

// SetDuration sets the "duration" field.
func (mppuo *MemberProductPropertyUpdateOne) SetDuration(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetDuration()
	mppuo.mutation.SetDuration(i)
	return mppuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableDuration(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetDuration(*i)
	}
	return mppuo
}

// AddDuration adds i to the "duration" field.
func (mppuo *MemberProductPropertyUpdateOne) AddDuration(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddDuration(i)
	return mppuo
}

// ClearDuration clears the value of the "duration" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearDuration() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearDuration()
	return mppuo
}

// SetLength sets the "length" field.
func (mppuo *MemberProductPropertyUpdateOne) SetLength(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetLength()
	mppuo.mutation.SetLength(i)
	return mppuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableLength(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetLength(*i)
	}
	return mppuo
}

// AddLength adds i to the "length" field.
func (mppuo *MemberProductPropertyUpdateOne) AddLength(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddLength(i)
	return mppuo
}

// ClearLength clears the value of the "length" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearLength() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearLength()
	return mppuo
}

// SetCount sets the "count" field.
func (mppuo *MemberProductPropertyUpdateOne) SetCount(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetCount()
	mppuo.mutation.SetCount(i)
	return mppuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableCount(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetCount(*i)
	}
	return mppuo
}

// AddCount adds i to the "count" field.
func (mppuo *MemberProductPropertyUpdateOne) AddCount(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddCount(i)
	return mppuo
}

// ClearCount clears the value of the "count" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearCount() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearCount()
	return mppuo
}

// SetCountSurplus sets the "count_surplus" field.
func (mppuo *MemberProductPropertyUpdateOne) SetCountSurplus(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetCountSurplus()
	mppuo.mutation.SetCountSurplus(i)
	return mppuo
}

// SetNillableCountSurplus sets the "count_surplus" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableCountSurplus(i *int64) *MemberProductPropertyUpdateOne {
	if i != nil {
		mppuo.SetCountSurplus(*i)
	}
	return mppuo
}

// AddCountSurplus adds i to the "count_surplus" field.
func (mppuo *MemberProductPropertyUpdateOne) AddCountSurplus(i int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddCountSurplus(i)
	return mppuo
}

// ClearCountSurplus clears the value of the "count_surplus" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearCountSurplus() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearCountSurplus()
	return mppuo
}

// SetPrice sets the "price" field.
func (mppuo *MemberProductPropertyUpdateOne) SetPrice(f float64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.ResetPrice()
	mppuo.mutation.SetPrice(f)
	return mppuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillablePrice(f *float64) *MemberProductPropertyUpdateOne {
	if f != nil {
		mppuo.SetPrice(*f)
	}
	return mppuo
}

// AddPrice adds f to the "price" field.
func (mppuo *MemberProductPropertyUpdateOne) AddPrice(f float64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddPrice(f)
	return mppuo
}

// ClearPrice clears the value of the "price" field.
func (mppuo *MemberProductPropertyUpdateOne) ClearPrice() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearPrice()
	return mppuo
}

// SetOwnerID sets the "owner" edge to the MemberProduct entity by ID.
func (mppuo *MemberProductPropertyUpdateOne) SetOwnerID(id int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.SetOwnerID(id)
	return mppuo
}

// SetNillableOwnerID sets the "owner" edge to the MemberProduct entity by ID if the given value is not nil.
func (mppuo *MemberProductPropertyUpdateOne) SetNillableOwnerID(id *int64) *MemberProductPropertyUpdateOne {
	if id != nil {
		mppuo = mppuo.SetOwnerID(*id)
	}
	return mppuo
}

// SetOwner sets the "owner" edge to the MemberProduct entity.
func (mppuo *MemberProductPropertyUpdateOne) SetOwner(m *MemberProduct) *MemberProductPropertyUpdateOne {
	return mppuo.SetOwnerID(m.ID)
}

// AddMemberProductPropertyVenueIDs adds the "member_product_property_venues" edge to the MemberProductPropertyVenue entity by IDs.
func (mppuo *MemberProductPropertyUpdateOne) AddMemberProductPropertyVenueIDs(ids ...int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.AddMemberProductPropertyVenueIDs(ids...)
	return mppuo
}

// AddMemberProductPropertyVenues adds the "member_product_property_venues" edges to the MemberProductPropertyVenue entity.
func (mppuo *MemberProductPropertyUpdateOne) AddMemberProductPropertyVenues(m ...*MemberProductPropertyVenue) *MemberProductPropertyUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mppuo.AddMemberProductPropertyVenueIDs(ids...)
}

// Mutation returns the MemberProductPropertyMutation object of the builder.
func (mppuo *MemberProductPropertyUpdateOne) Mutation() *MemberProductPropertyMutation {
	return mppuo.mutation
}

// ClearOwner clears the "owner" edge to the MemberProduct entity.
func (mppuo *MemberProductPropertyUpdateOne) ClearOwner() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearOwner()
	return mppuo
}

// ClearMemberProductPropertyVenues clears all "member_product_property_venues" edges to the MemberProductPropertyVenue entity.
func (mppuo *MemberProductPropertyUpdateOne) ClearMemberProductPropertyVenues() *MemberProductPropertyUpdateOne {
	mppuo.mutation.ClearMemberProductPropertyVenues()
	return mppuo
}

// RemoveMemberProductPropertyVenueIDs removes the "member_product_property_venues" edge to MemberProductPropertyVenue entities by IDs.
func (mppuo *MemberProductPropertyUpdateOne) RemoveMemberProductPropertyVenueIDs(ids ...int64) *MemberProductPropertyUpdateOne {
	mppuo.mutation.RemoveMemberProductPropertyVenueIDs(ids...)
	return mppuo
}

// RemoveMemberProductPropertyVenues removes "member_product_property_venues" edges to MemberProductPropertyVenue entities.
func (mppuo *MemberProductPropertyUpdateOne) RemoveMemberProductPropertyVenues(m ...*MemberProductPropertyVenue) *MemberProductPropertyUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mppuo.RemoveMemberProductPropertyVenueIDs(ids...)
}

// Where appends a list predicates to the MemberProductPropertyUpdate builder.
func (mppuo *MemberProductPropertyUpdateOne) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyUpdateOne {
	mppuo.mutation.Where(ps...)
	return mppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mppuo *MemberProductPropertyUpdateOne) Select(field string, fields ...string) *MemberProductPropertyUpdateOne {
	mppuo.fields = append([]string{field}, fields...)
	return mppuo
}

// Save executes the query and returns the updated MemberProductProperty entity.
func (mppuo *MemberProductPropertyUpdateOne) Save(ctx context.Context) (*MemberProductProperty, error) {
	mppuo.defaults()
	return withHooks(ctx, mppuo.sqlSave, mppuo.mutation, mppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mppuo *MemberProductPropertyUpdateOne) SaveX(ctx context.Context) *MemberProductProperty {
	node, err := mppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mppuo *MemberProductPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := mppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mppuo *MemberProductPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := mppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mppuo *MemberProductPropertyUpdateOne) defaults() {
	if _, ok := mppuo.mutation.UpdatedAt(); !ok {
		v := memberproductproperty.UpdateDefaultUpdatedAt()
		mppuo.mutation.SetUpdatedAt(v)
	}
}

func (mppuo *MemberProductPropertyUpdateOne) sqlSave(ctx context.Context) (_node *MemberProductProperty, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproductproperty.Table, memberproductproperty.Columns, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	id, ok := mppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProductProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproductproperty.FieldID)
		for _, f := range fields {
			if !memberproductproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberproductproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproductproperty.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mppuo.mutation.Status(); ok {
		_spec.SetField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedStatus(); ok {
		_spec.AddField(memberproductproperty.FieldStatus, field.TypeInt64, value)
	}
	if mppuo.mutation.StatusCleared() {
		_spec.ClearField(memberproductproperty.FieldStatus, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.MemberID(); ok {
		_spec.SetField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedMemberID(); ok {
		_spec.AddField(memberproductproperty.FieldMemberID, field.TypeInt64, value)
	}
	if mppuo.mutation.MemberIDCleared() {
		_spec.ClearField(memberproductproperty.FieldMemberID, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.GetType(); ok {
		_spec.SetField(memberproductproperty.FieldType, field.TypeString, value)
	}
	if mppuo.mutation.TypeCleared() {
		_spec.ClearField(memberproductproperty.FieldType, field.TypeString)
	}
	if value, ok := mppuo.mutation.Name(); ok {
		_spec.SetField(memberproductproperty.FieldName, field.TypeString, value)
	}
	if mppuo.mutation.NameCleared() {
		_spec.ClearField(memberproductproperty.FieldName, field.TypeString)
	}
	if value, ok := mppuo.mutation.Duration(); ok {
		_spec.SetField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedDuration(); ok {
		_spec.AddField(memberproductproperty.FieldDuration, field.TypeInt64, value)
	}
	if mppuo.mutation.DurationCleared() {
		_spec.ClearField(memberproductproperty.FieldDuration, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.Length(); ok {
		_spec.SetField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedLength(); ok {
		_spec.AddField(memberproductproperty.FieldLength, field.TypeInt64, value)
	}
	if mppuo.mutation.LengthCleared() {
		_spec.ClearField(memberproductproperty.FieldLength, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.Count(); ok {
		_spec.SetField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedCount(); ok {
		_spec.AddField(memberproductproperty.FieldCount, field.TypeInt64, value)
	}
	if mppuo.mutation.CountCleared() {
		_spec.ClearField(memberproductproperty.FieldCount, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.CountSurplus(); ok {
		_spec.SetField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if value, ok := mppuo.mutation.AddedCountSurplus(); ok {
		_spec.AddField(memberproductproperty.FieldCountSurplus, field.TypeInt64, value)
	}
	if mppuo.mutation.CountSurplusCleared() {
		_spec.ClearField(memberproductproperty.FieldCountSurplus, field.TypeInt64)
	}
	if value, ok := mppuo.mutation.Price(); ok {
		_spec.SetField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mppuo.mutation.AddedPrice(); ok {
		_spec.AddField(memberproductproperty.FieldPrice, field.TypeFloat64, value)
	}
	if mppuo.mutation.PriceCleared() {
		_spec.ClearField(memberproductproperty.FieldPrice, field.TypeFloat64)
	}
	if mppuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproductproperty.OwnerTable,
			Columns: []string{memberproductproperty.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mppuo.mutation.MemberProductPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppuo.mutation.RemovedMemberProductPropertyVenuesIDs(); len(nodes) > 0 && !mppuo.mutation.MemberProductPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mppuo.mutation.MemberProductPropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproductproperty.MemberProductPropertyVenuesTable,
			Columns: []string{memberproductproperty.MemberProductPropertyVenuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProductProperty{config: mppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproductproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mppuo.mutation.done = true
	return _node, nil
}

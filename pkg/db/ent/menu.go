// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/pkg/db/ent/menu"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Menu is the model entity for the Menu schema.
type Menu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID *int `json:"parent_id,omitempty"`
	// RouteName holds the value of the "route_name" field.
	RouteName *string `json:"route_name,omitempty"`
	// RoutePath holds the value of the "route_path" field.
	RoutePath *string `json:"route_path,omitempty"`
	// Status holds the value of the "status" field.
	Status *string `json:"status,omitempty"`
	// MenuName holds the value of the "menu_name" field.
	MenuName *string `json:"menu_name,omitempty"`
	// MenuType holds the value of the "menu_type" field.
	MenuType *string `json:"menu_type,omitempty"`
	// IconType holds the value of the "icon_type" field.
	IconType *string `json:"icon_type,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon *string `json:"icon,omitempty"`
	// I18nKey holds the value of the "i18n_key" field.
	I18nKey *string `json:"i18n_key,omitempty"`
	// Level holds the value of the "level" field.
	Level *string `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MenuQuery when eager-loading is set.
	Edges        MenuEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MenuEdges holds the relations/edges for other nodes in the graph.
type MenuEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Menu `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Menu `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MenuEdges) ParentOrErr() (*Menu, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: menu.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e MenuEdges) ChildrenOrErr() ([]*Menu, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Menu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menu.FieldID, menu.FieldParentID:
			values[i] = new(sql.NullInt64)
		case menu.FieldRouteName, menu.FieldRoutePath, menu.FieldStatus, menu.FieldMenuName, menu.FieldMenuType, menu.FieldIconType, menu.FieldIcon, menu.FieldI18nKey, menu.FieldLevel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Menu fields.
func (m *Menu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case menu.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				m.ParentID = new(int)
				*m.ParentID = int(value.Int64)
			}
		case menu.FieldRouteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_name", values[i])
			} else if value.Valid {
				m.RouteName = new(string)
				*m.RouteName = value.String
			}
		case menu.FieldRoutePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_path", values[i])
			} else if value.Valid {
				m.RoutePath = new(string)
				*m.RoutePath = value.String
			}
		case menu.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = new(string)
				*m.Status = value.String
			}
		case menu.FieldMenuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu_name", values[i])
			} else if value.Valid {
				m.MenuName = new(string)
				*m.MenuName = value.String
			}
		case menu.FieldMenuType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu_type", values[i])
			} else if value.Valid {
				m.MenuType = new(string)
				*m.MenuType = value.String
			}
		case menu.FieldIconType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_type", values[i])
			} else if value.Valid {
				m.IconType = new(string)
				*m.IconType = value.String
			}
		case menu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				m.Icon = new(string)
				*m.Icon = value.String
			}
		case menu.FieldI18nKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field i18n_key", values[i])
			} else if value.Valid {
				m.I18nKey = new(string)
				*m.I18nKey = value.String
			}
		case menu.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				m.Level = new(string)
				*m.Level = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Menu.
// This includes values selected through modifiers, order, etc.
func (m *Menu) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Menu entity.
func (m *Menu) QueryParent() *MenuQuery {
	return NewMenuClient(m.config).QueryParent(m)
}

// QueryChildren queries the "children" edge of the Menu entity.
func (m *Menu) QueryChildren() *MenuQuery {
	return NewMenuClient(m.config).QueryChildren(m)
}

// Update returns a builder for updating this Menu.
// Note that you need to call Menu.Unwrap() before calling this method if this Menu
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Menu) Update() *MenuUpdateOne {
	return NewMenuClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Menu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Menu) Unwrap() *Menu {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Menu is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Menu) String() string {
	var builder strings.Builder
	builder.WriteString("Menu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	if v := m.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := m.RouteName; v != nil {
		builder.WriteString("route_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.RoutePath; v != nil {
		builder.WriteString("route_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.MenuName; v != nil {
		builder.WriteString("menu_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.MenuType; v != nil {
		builder.WriteString("menu_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.IconType; v != nil {
		builder.WriteString("icon_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Icon; v != nil {
		builder.WriteString("icon=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.I18nKey; v != nil {
		builder.WriteString("i18n_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Level; v != nil {
		builder.WriteString("level=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Menus is a parsable slice of Menu.
type Menus []*Menu

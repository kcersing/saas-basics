// Code generated by ent, DO NOT EDIT.

package courserecorduser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the courserecorduser type in the database.
	Label = "course_record_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldVenueID holds the string denoting the venue_id field in the database.
	FieldVenueID = "venue_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCourseRecordScheduleID holds the string denoting the course_record_schedule_id field in the database.
	FieldCourseRecordScheduleID = "course_record_schedule_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldSignStartTime holds the string denoting the sign_start_time field in the database.
	FieldSignStartTime = "sign_start_time"
	// FieldSignNdTime holds the string denoting the sign_nd_time field in the database.
	FieldSignNdTime = "sign_nd_time"
	// FieldUserProductID holds the string denoting the user_product_id field in the database.
	FieldUserProductID = "user_product_id"
	// FieldUserProductItemID holds the string denoting the user_product_item_id field in the database.
	FieldUserProductItemID = "user_product_item_id"
	// FieldCoachID holds the string denoting the coach_id field in the database.
	FieldCoachID = "coach_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// Table holds the table name of the courserecorduser in the database.
	Table = "course_record_user"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "course_record_user"
	// ScheduleInverseTable is the table name for the CourseRecordSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "courserecordschedule" package.
	ScheduleInverseTable = "course_record_schedule"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "course_record_schedule_id"
)

// Columns holds all SQL columns for courserecorduser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldVenueID,
	FieldUserID,
	FieldCourseRecordScheduleID,
	FieldType,
	FieldStartTime,
	FieldEndTime,
	FieldSignStartTime,
	FieldSignNdTime,
	FieldUserProductID,
	FieldUserProductItemID,
	FieldCoachID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultEndTime holds the default value on creation for the "end_time" field.
	DefaultEndTime func() time.Time
	// DefaultSignStartTime holds the default value on creation for the "sign_start_time" field.
	DefaultSignStartTime func() time.Time
	// DefaultSignNdTime holds the default value on creation for the "sign_nd_time" field.
	DefaultSignNdTime func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
)

// OrderOption defines the ordering options for the CourseRecordUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVenueID orders the results by the venue_id field.
func ByVenueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVenueID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCourseRecordScheduleID orders the results by the course_record_schedule_id field.
func ByCourseRecordScheduleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseRecordScheduleID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// BySignStartTime orders the results by the sign_start_time field.
func BySignStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignStartTime, opts...).ToFunc()
}

// BySignNdTime orders the results by the sign_nd_time field.
func BySignNdTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignNdTime, opts...).ToFunc()
}

// ByUserProductID orders the results by the user_product_id field.
func ByUserProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserProductID, opts...).ToFunc()
}

// ByUserProductItemID orders the results by the user_product_item_id field.
func ByUserProductItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserProductItemID, opts...).ToFunc()
}

// ByCoachID orders the results by the coach_id field.
func ByCoachID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoachID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByScheduleField orders the results by schedule field.
func ByScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduleStep(), sql.OrderByField(field, opts...))
	}
}
func newScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
	)
}

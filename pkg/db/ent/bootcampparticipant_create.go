// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/bootcamp"
	"saas/pkg/db/ent/bootcampparticipant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BootcampParticipantCreate is the builder for creating a BootcampParticipant entity.
type BootcampParticipantCreate struct {
	config
	mutation *BootcampParticipantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bpc *BootcampParticipantCreate) SetCreatedAt(t time.Time) *BootcampParticipantCreate {
	bpc.mutation.SetCreatedAt(t)
	return bpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableCreatedAt(t *time.Time) *BootcampParticipantCreate {
	if t != nil {
		bpc.SetCreatedAt(*t)
	}
	return bpc
}

// SetUpdatedAt sets the "updated_at" field.
func (bpc *BootcampParticipantCreate) SetUpdatedAt(t time.Time) *BootcampParticipantCreate {
	bpc.mutation.SetUpdatedAt(t)
	return bpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableUpdatedAt(t *time.Time) *BootcampParticipantCreate {
	if t != nil {
		bpc.SetUpdatedAt(*t)
	}
	return bpc
}

// SetDeleteAt sets the "delete_at" field.
func (bpc *BootcampParticipantCreate) SetDeleteAt(t time.Time) *BootcampParticipantCreate {
	bpc.mutation.SetDeleteAt(t)
	return bpc
}

// SetCreatedID sets the "created_id" field.
func (bpc *BootcampParticipantCreate) SetCreatedID(i int64) *BootcampParticipantCreate {
	bpc.mutation.SetCreatedID(i)
	return bpc
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableCreatedID(i *int64) *BootcampParticipantCreate {
	if i != nil {
		bpc.SetCreatedID(*i)
	}
	return bpc
}

// SetStatus sets the "status" field.
func (bpc *BootcampParticipantCreate) SetStatus(i int64) *BootcampParticipantCreate {
	bpc.mutation.SetStatus(i)
	return bpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableStatus(i *int64) *BootcampParticipantCreate {
	if i != nil {
		bpc.SetStatus(*i)
	}
	return bpc
}

// SetBootcampID sets the "bootcamp_id" field.
func (bpc *BootcampParticipantCreate) SetBootcampID(i int64) *BootcampParticipantCreate {
	bpc.mutation.SetBootcampID(i)
	return bpc
}

// SetNillableBootcampID sets the "bootcamp_id" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableBootcampID(i *int64) *BootcampParticipantCreate {
	if i != nil {
		bpc.SetBootcampID(*i)
	}
	return bpc
}

// SetName sets the "name" field.
func (bpc *BootcampParticipantCreate) SetName(s string) *BootcampParticipantCreate {
	bpc.mutation.SetName(s)
	return bpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableName(s *string) *BootcampParticipantCreate {
	if s != nil {
		bpc.SetName(*s)
	}
	return bpc
}

// SetMobile sets the "mobile" field.
func (bpc *BootcampParticipantCreate) SetMobile(s string) *BootcampParticipantCreate {
	bpc.mutation.SetMobile(s)
	return bpc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableMobile(s *string) *BootcampParticipantCreate {
	if s != nil {
		bpc.SetMobile(*s)
	}
	return bpc
}

// SetFields sets the "fields" field.
func (bpc *BootcampParticipantCreate) SetFields(s string) *BootcampParticipantCreate {
	bpc.mutation.SetFields(s)
	return bpc
}

// SetNillableFields sets the "fields" field if the given value is not nil.
func (bpc *BootcampParticipantCreate) SetNillableFields(s *string) *BootcampParticipantCreate {
	if s != nil {
		bpc.SetFields(*s)
	}
	return bpc
}

// SetID sets the "id" field.
func (bpc *BootcampParticipantCreate) SetID(i int64) *BootcampParticipantCreate {
	bpc.mutation.SetID(i)
	return bpc
}

// SetBootcamp sets the "bootcamp" edge to the Bootcamp entity.
func (bpc *BootcampParticipantCreate) SetBootcamp(b *Bootcamp) *BootcampParticipantCreate {
	return bpc.SetBootcampID(b.ID)
}

// Mutation returns the BootcampParticipantMutation object of the builder.
func (bpc *BootcampParticipantCreate) Mutation() *BootcampParticipantMutation {
	return bpc.mutation
}

// Save creates the BootcampParticipant in the database.
func (bpc *BootcampParticipantCreate) Save(ctx context.Context) (*BootcampParticipant, error) {
	bpc.defaults()
	return withHooks(ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BootcampParticipantCreate) SaveX(ctx context.Context) *BootcampParticipant {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BootcampParticipantCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BootcampParticipantCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BootcampParticipantCreate) defaults() {
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		v := bootcampparticipant.DefaultCreatedAt()
		bpc.mutation.SetCreatedAt(v)
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		v := bootcampparticipant.DefaultUpdatedAt()
		bpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bpc.mutation.CreatedID(); !ok {
		v := bootcampparticipant.DefaultCreatedID
		bpc.mutation.SetCreatedID(v)
	}
	if _, ok := bpc.mutation.Status(); !ok {
		v := bootcampparticipant.DefaultStatus
		bpc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BootcampParticipantCreate) check() error {
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BootcampParticipant.created_at"`)}
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BootcampParticipant.updated_at"`)}
	}
	if _, ok := bpc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "BootcampParticipant.delete_at"`)}
	}
	if _, ok := bpc.mutation.CreatedID(); !ok {
		return &ValidationError{Name: "created_id", err: errors.New(`ent: missing required field "BootcampParticipant.created_id"`)}
	}
	return nil
}

func (bpc *BootcampParticipantCreate) sqlSave(ctx context.Context) (*BootcampParticipant, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BootcampParticipantCreate) createSpec() (*BootcampParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &BootcampParticipant{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(bootcampparticipant.Table, sqlgraph.NewFieldSpec(bootcampparticipant.FieldID, field.TypeInt64))
	)
	if id, ok := bpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bpc.mutation.CreatedAt(); ok {
		_spec.SetField(bootcampparticipant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bpc.mutation.UpdatedAt(); ok {
		_spec.SetField(bootcampparticipant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bpc.mutation.DeleteAt(); ok {
		_spec.SetField(bootcampparticipant.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := bpc.mutation.CreatedID(); ok {
		_spec.SetField(bootcampparticipant.FieldCreatedID, field.TypeInt64, value)
		_node.CreatedID = value
	}
	if value, ok := bpc.mutation.Status(); ok {
		_spec.SetField(bootcampparticipant.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := bpc.mutation.Name(); ok {
		_spec.SetField(bootcampparticipant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bpc.mutation.Mobile(); ok {
		_spec.SetField(bootcampparticipant.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := bpc.mutation.GetFields(); ok {
		_spec.SetField(bootcampparticipant.FieldFields, field.TypeString, value)
		_node.Fields = value
	}
	if nodes := bpc.mutation.BootcampIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bootcampparticipant.BootcampTable,
			Columns: []string{bootcampparticipant.BootcampColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bootcamp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BootcampID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BootcampParticipantCreateBulk is the builder for creating many BootcampParticipant entities in bulk.
type BootcampParticipantCreateBulk struct {
	config
	err      error
	builders []*BootcampParticipantCreate
}

// Save creates the BootcampParticipant entities in the database.
func (bpcb *BootcampParticipantCreateBulk) Save(ctx context.Context) ([]*BootcampParticipant, error) {
	if bpcb.err != nil {
		return nil, bpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BootcampParticipant, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BootcampParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BootcampParticipantCreateBulk) SaveX(ctx context.Context) []*BootcampParticipant {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BootcampParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BootcampParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

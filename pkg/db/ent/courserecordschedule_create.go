// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/courserecordcoach"
	"saas/pkg/db/ent/courserecordmember"
	"saas/pkg/db/ent/courserecordschedule"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordScheduleCreate is the builder for creating a CourseRecordSchedule entity.
type CourseRecordScheduleCreate struct {
	config
	mutation *CourseRecordScheduleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (crsc *CourseRecordScheduleCreate) SetCreatedAt(t time.Time) *CourseRecordScheduleCreate {
	crsc.mutation.SetCreatedAt(t)
	return crsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableCreatedAt(t *time.Time) *CourseRecordScheduleCreate {
	if t != nil {
		crsc.SetCreatedAt(*t)
	}
	return crsc
}

// SetUpdatedAt sets the "updated_at" field.
func (crsc *CourseRecordScheduleCreate) SetUpdatedAt(t time.Time) *CourseRecordScheduleCreate {
	crsc.mutation.SetUpdatedAt(t)
	return crsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableUpdatedAt(t *time.Time) *CourseRecordScheduleCreate {
	if t != nil {
		crsc.SetUpdatedAt(*t)
	}
	return crsc
}

// SetType sets the "type" field.
func (crsc *CourseRecordScheduleCreate) SetType(s string) *CourseRecordScheduleCreate {
	crsc.mutation.SetType(s)
	return crsc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableType(s *string) *CourseRecordScheduleCreate {
	if s != nil {
		crsc.SetType(*s)
	}
	return crsc
}

// SetVenueID sets the "venue_id" field.
func (crsc *CourseRecordScheduleCreate) SetVenueID(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetVenueID(i)
	return crsc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableVenueID(i *int64) *CourseRecordScheduleCreate {
	if i != nil {
		crsc.SetVenueID(*i)
	}
	return crsc
}

// SetPlaceID sets the "place_id" field.
func (crsc *CourseRecordScheduleCreate) SetPlaceID(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetPlaceID(i)
	return crsc
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillablePlaceID(i *int64) *CourseRecordScheduleCreate {
	if i != nil {
		crsc.SetPlaceID(*i)
	}
	return crsc
}

// SetCoachID sets the "coach_id" field.
func (crsc *CourseRecordScheduleCreate) SetCoachID(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetCoachID(i)
	return crsc
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableCoachID(i *int64) *CourseRecordScheduleCreate {
	if i != nil {
		crsc.SetCoachID(*i)
	}
	return crsc
}

// SetNum sets the "num" field.
func (crsc *CourseRecordScheduleCreate) SetNum(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetNum(i)
	return crsc
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableNum(i *int64) *CourseRecordScheduleCreate {
	if i != nil {
		crsc.SetNum(*i)
	}
	return crsc
}

// SetStartTime sets the "start_time" field.
func (crsc *CourseRecordScheduleCreate) SetStartTime(t time.Time) *CourseRecordScheduleCreate {
	crsc.mutation.SetStartTime(t)
	return crsc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableStartTime(t *time.Time) *CourseRecordScheduleCreate {
	if t != nil {
		crsc.SetStartTime(*t)
	}
	return crsc
}

// SetEndTime sets the "end_time" field.
func (crsc *CourseRecordScheduleCreate) SetEndTime(t time.Time) *CourseRecordScheduleCreate {
	crsc.mutation.SetEndTime(t)
	return crsc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableEndTime(t *time.Time) *CourseRecordScheduleCreate {
	if t != nil {
		crsc.SetEndTime(*t)
	}
	return crsc
}

// SetPrice sets the "price" field.
func (crsc *CourseRecordScheduleCreate) SetPrice(f float64) *CourseRecordScheduleCreate {
	crsc.mutation.SetPrice(f)
	return crsc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillablePrice(f *float64) *CourseRecordScheduleCreate {
	if f != nil {
		crsc.SetPrice(*f)
	}
	return crsc
}

// SetStatus sets the "status" field.
func (crsc *CourseRecordScheduleCreate) SetStatus(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetStatus(i)
	return crsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crsc *CourseRecordScheduleCreate) SetNillableStatus(i *int64) *CourseRecordScheduleCreate {
	if i != nil {
		crsc.SetStatus(*i)
	}
	return crsc
}

// SetID sets the "id" field.
func (crsc *CourseRecordScheduleCreate) SetID(i int64) *CourseRecordScheduleCreate {
	crsc.mutation.SetID(i)
	return crsc
}

// AddMemberIDs adds the "members" edge to the CourseRecordMember entity by IDs.
func (crsc *CourseRecordScheduleCreate) AddMemberIDs(ids ...int64) *CourseRecordScheduleCreate {
	crsc.mutation.AddMemberIDs(ids...)
	return crsc
}

// AddMembers adds the "members" edges to the CourseRecordMember entity.
func (crsc *CourseRecordScheduleCreate) AddMembers(c ...*CourseRecordMember) *CourseRecordScheduleCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsc.AddMemberIDs(ids...)
}

// AddCoachIDs adds the "coachs" edge to the CourseRecordCoach entity by IDs.
func (crsc *CourseRecordScheduleCreate) AddCoachIDs(ids ...int64) *CourseRecordScheduleCreate {
	crsc.mutation.AddCoachIDs(ids...)
	return crsc
}

// AddCoachs adds the "coachs" edges to the CourseRecordCoach entity.
func (crsc *CourseRecordScheduleCreate) AddCoachs(c ...*CourseRecordCoach) *CourseRecordScheduleCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsc.AddCoachIDs(ids...)
}

// Mutation returns the CourseRecordScheduleMutation object of the builder.
func (crsc *CourseRecordScheduleCreate) Mutation() *CourseRecordScheduleMutation {
	return crsc.mutation
}

// Save creates the CourseRecordSchedule in the database.
func (crsc *CourseRecordScheduleCreate) Save(ctx context.Context) (*CourseRecordSchedule, error) {
	crsc.defaults()
	return withHooks(ctx, crsc.sqlSave, crsc.mutation, crsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crsc *CourseRecordScheduleCreate) SaveX(ctx context.Context) *CourseRecordSchedule {
	v, err := crsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crsc *CourseRecordScheduleCreate) Exec(ctx context.Context) error {
	_, err := crsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crsc *CourseRecordScheduleCreate) ExecX(ctx context.Context) {
	if err := crsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crsc *CourseRecordScheduleCreate) defaults() {
	if _, ok := crsc.mutation.CreatedAt(); !ok {
		v := courserecordschedule.DefaultCreatedAt()
		crsc.mutation.SetCreatedAt(v)
	}
	if _, ok := crsc.mutation.UpdatedAt(); !ok {
		v := courserecordschedule.DefaultUpdatedAt()
		crsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crsc.mutation.StartTime(); !ok {
		v := courserecordschedule.DefaultStartTime()
		crsc.mutation.SetStartTime(v)
	}
	if _, ok := crsc.mutation.EndTime(); !ok {
		v := courserecordschedule.DefaultEndTime()
		crsc.mutation.SetEndTime(v)
	}
	if _, ok := crsc.mutation.Price(); !ok {
		v := courserecordschedule.DefaultPrice
		crsc.mutation.SetPrice(v)
	}
	if _, ok := crsc.mutation.Status(); !ok {
		v := courserecordschedule.DefaultStatus
		crsc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crsc *CourseRecordScheduleCreate) check() error {
	if _, ok := crsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CourseRecordSchedule.created_at"`)}
	}
	if _, ok := crsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CourseRecordSchedule.updated_at"`)}
	}
	return nil
}

func (crsc *CourseRecordScheduleCreate) sqlSave(ctx context.Context) (*CourseRecordSchedule, error) {
	if err := crsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	crsc.mutation.id = &_node.ID
	crsc.mutation.done = true
	return _node, nil
}

func (crsc *CourseRecordScheduleCreate) createSpec() (*CourseRecordSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseRecordSchedule{config: crsc.config}
		_spec = sqlgraph.NewCreateSpec(courserecordschedule.Table, sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64))
	)
	if id, ok := crsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crsc.mutation.CreatedAt(); ok {
		_spec.SetField(courserecordschedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crsc.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecordschedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crsc.mutation.GetType(); ok {
		_spec.SetField(courserecordschedule.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := crsc.mutation.VenueID(); ok {
		_spec.SetField(courserecordschedule.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if value, ok := crsc.mutation.PlaceID(); ok {
		_spec.SetField(courserecordschedule.FieldPlaceID, field.TypeInt64, value)
		_node.PlaceID = value
	}
	if value, ok := crsc.mutation.CoachID(); ok {
		_spec.SetField(courserecordschedule.FieldCoachID, field.TypeInt64, value)
		_node.CoachID = value
	}
	if value, ok := crsc.mutation.Num(); ok {
		_spec.SetField(courserecordschedule.FieldNum, field.TypeInt64, value)
		_node.Num = value
	}
	if value, ok := crsc.mutation.StartTime(); ok {
		_spec.SetField(courserecordschedule.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := crsc.mutation.EndTime(); ok {
		_spec.SetField(courserecordschedule.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := crsc.mutation.Price(); ok {
		_spec.SetField(courserecordschedule.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := crsc.mutation.Status(); ok {
		_spec.SetField(courserecordschedule.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if nodes := crsc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crsc.mutation.CoachsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseRecordScheduleCreateBulk is the builder for creating many CourseRecordSchedule entities in bulk.
type CourseRecordScheduleCreateBulk struct {
	config
	err      error
	builders []*CourseRecordScheduleCreate
}

// Save creates the CourseRecordSchedule entities in the database.
func (crscb *CourseRecordScheduleCreateBulk) Save(ctx context.Context) ([]*CourseRecordSchedule, error) {
	if crscb.err != nil {
		return nil, crscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crscb.builders))
	nodes := make([]*CourseRecordSchedule, len(crscb.builders))
	mutators := make([]Mutator, len(crscb.builders))
	for i := range crscb.builders {
		func(i int, root context.Context) {
			builder := crscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseRecordScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crscb *CourseRecordScheduleCreateBulk) SaveX(ctx context.Context) []*CourseRecordSchedule {
	v, err := crscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crscb *CourseRecordScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := crscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crscb *CourseRecordScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := crscb.Exec(ctx); err != nil {
		panic(err)
	}
}

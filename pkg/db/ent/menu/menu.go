// Code generated by ent, DO NOT EDIT.

package menu

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the menu type in the database.
	Label = "menu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldRouteName holds the string denoting the route_name field in the database.
	FieldRouteName = "route_name"
	// FieldRoutePath holds the string denoting the route_path field in the database.
	FieldRoutePath = "route_path"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMenuName holds the string denoting the menu_name field in the database.
	FieldMenuName = "menu_name"
	// FieldMenuType holds the string denoting the menu_type field in the database.
	FieldMenuType = "menu_type"
	// FieldIconType holds the string denoting the icon_type field in the database.
	FieldIconType = "icon_type"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldI18nKey holds the string denoting the i18n_key field in the database.
	FieldI18nKey = "i18n_key"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the menu in the database.
	Table = "menu"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "menu"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "menu"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
)

// Columns holds all SQL columns for menu fields.
var Columns = []string{
	FieldID,
	FieldParentID,
	FieldRouteName,
	FieldRoutePath,
	FieldStatus,
	FieldMenuName,
	FieldMenuType,
	FieldIconType,
	FieldIcon,
	FieldI18nKey,
	FieldLevel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Menu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByRouteName orders the results by the route_name field.
func ByRouteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouteName, opts...).ToFunc()
}

// ByRoutePath orders the results by the route_path field.
func ByRoutePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoutePath, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMenuName orders the results by the menu_name field.
func ByMenuName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenuName, opts...).ToFunc()
}

// ByMenuType orders the results by the menu_type field.
func ByMenuType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenuType, opts...).ToFunc()
}

// ByIconType orders the results by the icon_type field.
func ByIconType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconType, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByI18nKey orders the results by the i18n_key field.
func ByI18nKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldI18nKey, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}

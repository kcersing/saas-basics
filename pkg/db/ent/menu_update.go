// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/menu"
	"saas/pkg/db/ent/menuparam"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MenuUpdate) SetUpdatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeleteAt sets the "delete_at" field.
func (mu *MenuUpdate) SetDeleteAt(t time.Time) *MenuUpdate {
	mu.mutation.SetDeleteAt(t)
	return mu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDeleteAt(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetDeleteAt(*t)
	}
	return mu
}

// SetCreatedID sets the "created_id" field.
func (mu *MenuUpdate) SetCreatedID(i int64) *MenuUpdate {
	mu.mutation.ResetCreatedID()
	mu.mutation.SetCreatedID(i)
	return mu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCreatedID(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetCreatedID(*i)
	}
	return mu
}

// AddCreatedID adds i to the "created_id" field.
func (mu *MenuUpdate) AddCreatedID(i int64) *MenuUpdate {
	mu.mutation.AddCreatedID(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MenuUpdate) SetStatus(i int64) *MenuUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableStatus(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MenuUpdate) AddStatus(i int64) *MenuUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MenuUpdate) ClearStatus() *MenuUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetParentID sets the "parent_id" field.
func (mu *MenuUpdate) SetParentID(i int64) *MenuUpdate {
	mu.mutation.SetParentID(i)
	return mu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableParentID(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetParentID(*i)
	}
	return mu
}

// ClearParentID clears the value of the "parent_id" field.
func (mu *MenuUpdate) ClearParentID() *MenuUpdate {
	mu.mutation.ClearParentID()
	return mu
}

// SetPath sets the "path" field.
func (mu *MenuUpdate) SetPath(s string) *MenuUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillablePath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// ClearPath clears the value of the "path" field.
func (mu *MenuUpdate) ClearPath() *MenuUpdate {
	mu.mutation.ClearPath()
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableName(s *string) *MenuUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *MenuUpdate) ClearName() *MenuUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetSort sets the "sort" field.
func (mu *MenuUpdate) SetSort(i int64) *MenuUpdate {
	mu.mutation.ResetSort()
	mu.mutation.SetSort(i)
	return mu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSort(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetSort(*i)
	}
	return mu
}

// AddSort adds i to the "sort" field.
func (mu *MenuUpdate) AddSort(i int64) *MenuUpdate {
	mu.mutation.AddSort(i)
	return mu
}

// ClearSort clears the value of the "sort" field.
func (mu *MenuUpdate) ClearSort() *MenuUpdate {
	mu.mutation.ClearSort()
	return mu
}

// SetDisabled sets the "disabled" field.
func (mu *MenuUpdate) SetDisabled(i int64) *MenuUpdate {
	mu.mutation.ResetDisabled()
	mu.mutation.SetDisabled(i)
	return mu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDisabled(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetDisabled(*i)
	}
	return mu
}

// AddDisabled adds i to the "disabled" field.
func (mu *MenuUpdate) AddDisabled(i int64) *MenuUpdate {
	mu.mutation.AddDisabled(i)
	return mu
}

// ClearDisabled clears the value of the "disabled" field.
func (mu *MenuUpdate) ClearDisabled() *MenuUpdate {
	mu.mutation.ClearDisabled()
	return mu
}

// SetIgnore sets the "ignore" field.
func (mu *MenuUpdate) SetIgnore(b bool) *MenuUpdate {
	mu.mutation.SetIgnore(b)
	return mu
}

// SetNillableIgnore sets the "ignore" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIgnore(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetIgnore(*b)
	}
	return mu
}

// ClearIgnore clears the value of the "ignore" field.
func (mu *MenuUpdate) ClearIgnore() *MenuUpdate {
	mu.mutation.ClearIgnore()
	return mu
}

// SetLevel sets the "level" field.
func (mu *MenuUpdate) SetLevel(i int64) *MenuUpdate {
	mu.mutation.ResetLevel()
	mu.mutation.SetLevel(i)
	return mu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableLevel(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetLevel(*i)
	}
	return mu
}

// AddLevel adds i to the "level" field.
func (mu *MenuUpdate) AddLevel(i int64) *MenuUpdate {
	mu.mutation.AddLevel(i)
	return mu
}

// ClearLevel clears the value of the "level" field.
func (mu *MenuUpdate) ClearLevel() *MenuUpdate {
	mu.mutation.ClearLevel()
	return mu
}

// SetMenuType sets the "menu_type" field.
func (mu *MenuUpdate) SetMenuType(i int64) *MenuUpdate {
	mu.mutation.ResetMenuType()
	mu.mutation.SetMenuType(i)
	return mu
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableMenuType(i *int64) *MenuUpdate {
	if i != nil {
		mu.SetMenuType(*i)
	}
	return mu
}

// AddMenuType adds i to the "menu_type" field.
func (mu *MenuUpdate) AddMenuType(i int64) *MenuUpdate {
	mu.mutation.AddMenuType(i)
	return mu
}

// ClearMenuType clears the value of the "menu_type" field.
func (mu *MenuUpdate) ClearMenuType() *MenuUpdate {
	mu.mutation.ClearMenuType()
	return mu
}

// SetRedirect sets the "redirect" field.
func (mu *MenuUpdate) SetRedirect(s string) *MenuUpdate {
	mu.mutation.SetRedirect(s)
	return mu
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableRedirect(s *string) *MenuUpdate {
	if s != nil {
		mu.SetRedirect(*s)
	}
	return mu
}

// ClearRedirect clears the value of the "redirect" field.
func (mu *MenuUpdate) ClearRedirect() *MenuUpdate {
	mu.mutation.ClearRedirect()
	return mu
}

// SetComponent sets the "component" field.
func (mu *MenuUpdate) SetComponent(s string) *MenuUpdate {
	mu.mutation.SetComponent(s)
	return mu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableComponent(s *string) *MenuUpdate {
	if s != nil {
		mu.SetComponent(*s)
	}
	return mu
}

// ClearComponent clears the value of the "component" field.
func (mu *MenuUpdate) ClearComponent() *MenuUpdate {
	mu.mutation.ClearComponent()
	return mu
}

// SetURL sets the "url" field.
func (mu *MenuUpdate) SetURL(s string) *MenuUpdate {
	mu.mutation.SetURL(s)
	return mu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableURL(s *string) *MenuUpdate {
	if s != nil {
		mu.SetURL(*s)
	}
	return mu
}

// ClearURL clears the value of the "url" field.
func (mu *MenuUpdate) ClearURL() *MenuUpdate {
	mu.mutation.ClearURL()
	return mu
}

// SetHidden sets the "hidden" field.
func (mu *MenuUpdate) SetHidden(b bool) *MenuUpdate {
	mu.mutation.SetHidden(b)
	return mu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableHidden(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetHidden(*b)
	}
	return mu
}

// ClearHidden clears the value of the "hidden" field.
func (mu *MenuUpdate) ClearHidden() *MenuUpdate {
	mu.mutation.ClearHidden()
	return mu
}

// SetTitle sets the "title" field.
func (mu *MenuUpdate) SetTitle(s string) *MenuUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableTitle(s *string) *MenuUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// ClearTitle clears the value of the "title" field.
func (mu *MenuUpdate) ClearTitle() *MenuUpdate {
	mu.mutation.ClearTitle()
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIcon(s *string) *MenuUpdate {
	if s != nil {
		mu.SetIcon(*s)
	}
	return mu
}

// ClearIcon clears the value of the "icon" field.
func (mu *MenuUpdate) ClearIcon() *MenuUpdate {
	mu.mutation.ClearIcon()
	return mu
}

// SetActiveMenu sets the "active_menu" field.
func (mu *MenuUpdate) SetActiveMenu(s string) *MenuUpdate {
	mu.mutation.SetActiveMenu(s)
	return mu
}

// SetNillableActiveMenu sets the "active_menu" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableActiveMenu(s *string) *MenuUpdate {
	if s != nil {
		mu.SetActiveMenu(*s)
	}
	return mu
}

// ClearActiveMenu clears the value of the "active_menu" field.
func (mu *MenuUpdate) ClearActiveMenu() *MenuUpdate {
	mu.mutation.ClearActiveMenu()
	return mu
}

// SetAffix sets the "affix" field.
func (mu *MenuUpdate) SetAffix(b bool) *MenuUpdate {
	mu.mutation.SetAffix(b)
	return mu
}

// SetNillableAffix sets the "affix" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableAffix(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetAffix(*b)
	}
	return mu
}

// ClearAffix clears the value of the "affix" field.
func (mu *MenuUpdate) ClearAffix() *MenuUpdate {
	mu.mutation.ClearAffix()
	return mu
}

// SetNoCache sets the "no_cache" field.
func (mu *MenuUpdate) SetNoCache(b bool) *MenuUpdate {
	mu.mutation.SetNoCache(b)
	return mu
}

// SetNillableNoCache sets the "no_cache" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableNoCache(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetNoCache(*b)
	}
	return mu
}

// ClearNoCache clears the value of the "no_cache" field.
func (mu *MenuUpdate) ClearNoCache() *MenuUpdate {
	mu.mutation.ClearNoCache()
	return mu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (mu *MenuUpdate) AddRoleIDs(ids ...int64) *MenuUpdate {
	mu.mutation.AddRoleIDs(ids...)
	return mu
}

// AddRoles adds the "roles" edges to the Role entity.
func (mu *MenuUpdate) AddRoles(r ...*Role) *MenuUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (mu *MenuUpdate) SetParent(m *Menu) *MenuUpdate {
	return mu.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mu *MenuUpdate) AddChildIDs(ids ...int64) *MenuUpdate {
	mu.mutation.AddChildIDs(ids...)
	return mu
}

// AddChildren adds the "children" edges to the Menu entity.
func (mu *MenuUpdate) AddChildren(m ...*Menu) *MenuUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddChildIDs(ids...)
}

// AddParamIDs adds the "params" edge to the MenuParam entity by IDs.
func (mu *MenuUpdate) AddParamIDs(ids ...int64) *MenuUpdate {
	mu.mutation.AddParamIDs(ids...)
	return mu
}

// AddParams adds the "params" edges to the MenuParam entity.
func (mu *MenuUpdate) AddParams(m ...*MenuParam) *MenuUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddParamIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (mu *MenuUpdate) ClearRoles() *MenuUpdate {
	mu.mutation.ClearRoles()
	return mu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (mu *MenuUpdate) RemoveRoleIDs(ids ...int64) *MenuUpdate {
	mu.mutation.RemoveRoleIDs(ids...)
	return mu
}

// RemoveRoles removes "roles" edges to Role entities.
func (mu *MenuUpdate) RemoveRoles(r ...*Role) *MenuUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (mu *MenuUpdate) ClearParent() *MenuUpdate {
	mu.mutation.ClearParent()
	return mu
}

// ClearChildren clears all "children" edges to the Menu entity.
func (mu *MenuUpdate) ClearChildren() *MenuUpdate {
	mu.mutation.ClearChildren()
	return mu
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (mu *MenuUpdate) RemoveChildIDs(ids ...int64) *MenuUpdate {
	mu.mutation.RemoveChildIDs(ids...)
	return mu
}

// RemoveChildren removes "children" edges to Menu entities.
func (mu *MenuUpdate) RemoveChildren(m ...*Menu) *MenuUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveChildIDs(ids...)
}

// ClearParams clears all "params" edges to the MenuParam entity.
func (mu *MenuUpdate) ClearParams() *MenuUpdate {
	mu.mutation.ClearParams()
	return mu
}

// RemoveParamIDs removes the "params" edge to MenuParam entities by IDs.
func (mu *MenuUpdate) RemoveParamIDs(ids ...int64) *MenuUpdate {
	mu.mutation.RemoveParamIDs(ids...)
	return mu
}

// RemoveParams removes "params" edges to MenuParam entities.
func (mu *MenuUpdate) RemoveParams(m ...*MenuParam) *MenuUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveParamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeleteAt(); ok {
		_spec.SetField(menu.FieldDeleteAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.CreatedID(); ok {
		_spec.SetField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedID(); ok {
		_spec.AddField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt64, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeInt64)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if mu.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if mu.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := mu.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeInt64, value)
	}
	if mu.mutation.SortCleared() {
		_spec.ClearField(menu.FieldSort, field.TypeInt64)
	}
	if value, ok := mu.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedDisabled(); ok {
		_spec.AddField(menu.FieldDisabled, field.TypeInt64, value)
	}
	if mu.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeInt64)
	}
	if value, ok := mu.mutation.Ignore(); ok {
		_spec.SetField(menu.FieldIgnore, field.TypeBool, value)
	}
	if mu.mutation.IgnoreCleared() {
		_spec.ClearField(menu.FieldIgnore, field.TypeBool)
	}
	if value, ok := mu.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedLevel(); ok {
		_spec.AddField(menu.FieldLevel, field.TypeInt64, value)
	}
	if mu.mutation.LevelCleared() {
		_spec.ClearField(menu.FieldLevel, field.TypeInt64)
	}
	if value, ok := mu.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if mu.mutation.MenuTypeCleared() {
		_spec.ClearField(menu.FieldMenuType, field.TypeInt64)
	}
	if value, ok := mu.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if mu.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := mu.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if mu.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := mu.mutation.URL(); ok {
		_spec.SetField(menu.FieldURL, field.TypeString, value)
	}
	if mu.mutation.URLCleared() {
		_spec.ClearField(menu.FieldURL, field.TypeString)
	}
	if value, ok := mu.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeBool, value)
	}
	if mu.mutation.HiddenCleared() {
		_spec.ClearField(menu.FieldHidden, field.TypeBool)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if mu.mutation.TitleCleared() {
		_spec.ClearField(menu.FieldTitle, field.TypeString)
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if mu.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := mu.mutation.ActiveMenu(); ok {
		_spec.SetField(menu.FieldActiveMenu, field.TypeString, value)
	}
	if mu.mutation.ActiveMenuCleared() {
		_spec.ClearField(menu.FieldActiveMenu, field.TypeString)
	}
	if value, ok := mu.mutation.Affix(); ok {
		_spec.SetField(menu.FieldAffix, field.TypeBool, value)
	}
	if mu.mutation.AffixCleared() {
		_spec.ClearField(menu.FieldAffix, field.TypeBool)
	}
	if value, ok := mu.mutation.NoCache(); ok {
		_spec.SetField(menu.FieldNoCache, field.TypeBool, value)
	}
	if mu.mutation.NoCacheCleared() {
		_spec.ClearField(menu.FieldNoCache, field.TypeBool)
	}
	if mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedParamsIDs(); len(nodes) > 0 && !mu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MenuUpdateOne) SetUpdatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeleteAt sets the "delete_at" field.
func (muo *MenuUpdateOne) SetDeleteAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetDeleteAt(t)
	return muo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDeleteAt(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetDeleteAt(*t)
	}
	return muo
}

// SetCreatedID sets the "created_id" field.
func (muo *MenuUpdateOne) SetCreatedID(i int64) *MenuUpdateOne {
	muo.mutation.ResetCreatedID()
	muo.mutation.SetCreatedID(i)
	return muo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCreatedID(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetCreatedID(*i)
	}
	return muo
}

// AddCreatedID adds i to the "created_id" field.
func (muo *MenuUpdateOne) AddCreatedID(i int64) *MenuUpdateOne {
	muo.mutation.AddCreatedID(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MenuUpdateOne) SetStatus(i int64) *MenuUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableStatus(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MenuUpdateOne) AddStatus(i int64) *MenuUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MenuUpdateOne) ClearStatus() *MenuUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetParentID sets the "parent_id" field.
func (muo *MenuUpdateOne) SetParentID(i int64) *MenuUpdateOne {
	muo.mutation.SetParentID(i)
	return muo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableParentID(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetParentID(*i)
	}
	return muo
}

// ClearParentID clears the value of the "parent_id" field.
func (muo *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	muo.mutation.ClearParentID()
	return muo
}

// SetPath sets the "path" field.
func (muo *MenuUpdateOne) SetPath(s string) *MenuUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// ClearPath clears the value of the "path" field.
func (muo *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	muo.mutation.ClearPath()
	return muo
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableName(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *MenuUpdateOne) ClearName() *MenuUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetSort sets the "sort" field.
func (muo *MenuUpdateOne) SetSort(i int64) *MenuUpdateOne {
	muo.mutation.ResetSort()
	muo.mutation.SetSort(i)
	return muo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSort(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetSort(*i)
	}
	return muo
}

// AddSort adds i to the "sort" field.
func (muo *MenuUpdateOne) AddSort(i int64) *MenuUpdateOne {
	muo.mutation.AddSort(i)
	return muo
}

// ClearSort clears the value of the "sort" field.
func (muo *MenuUpdateOne) ClearSort() *MenuUpdateOne {
	muo.mutation.ClearSort()
	return muo
}

// SetDisabled sets the "disabled" field.
func (muo *MenuUpdateOne) SetDisabled(i int64) *MenuUpdateOne {
	muo.mutation.ResetDisabled()
	muo.mutation.SetDisabled(i)
	return muo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDisabled(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetDisabled(*i)
	}
	return muo
}

// AddDisabled adds i to the "disabled" field.
func (muo *MenuUpdateOne) AddDisabled(i int64) *MenuUpdateOne {
	muo.mutation.AddDisabled(i)
	return muo
}

// ClearDisabled clears the value of the "disabled" field.
func (muo *MenuUpdateOne) ClearDisabled() *MenuUpdateOne {
	muo.mutation.ClearDisabled()
	return muo
}

// SetIgnore sets the "ignore" field.
func (muo *MenuUpdateOne) SetIgnore(b bool) *MenuUpdateOne {
	muo.mutation.SetIgnore(b)
	return muo
}

// SetNillableIgnore sets the "ignore" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIgnore(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetIgnore(*b)
	}
	return muo
}

// ClearIgnore clears the value of the "ignore" field.
func (muo *MenuUpdateOne) ClearIgnore() *MenuUpdateOne {
	muo.mutation.ClearIgnore()
	return muo
}

// SetLevel sets the "level" field.
func (muo *MenuUpdateOne) SetLevel(i int64) *MenuUpdateOne {
	muo.mutation.ResetLevel()
	muo.mutation.SetLevel(i)
	return muo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableLevel(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetLevel(*i)
	}
	return muo
}

// AddLevel adds i to the "level" field.
func (muo *MenuUpdateOne) AddLevel(i int64) *MenuUpdateOne {
	muo.mutation.AddLevel(i)
	return muo
}

// ClearLevel clears the value of the "level" field.
func (muo *MenuUpdateOne) ClearLevel() *MenuUpdateOne {
	muo.mutation.ClearLevel()
	return muo
}

// SetMenuType sets the "menu_type" field.
func (muo *MenuUpdateOne) SetMenuType(i int64) *MenuUpdateOne {
	muo.mutation.ResetMenuType()
	muo.mutation.SetMenuType(i)
	return muo
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableMenuType(i *int64) *MenuUpdateOne {
	if i != nil {
		muo.SetMenuType(*i)
	}
	return muo
}

// AddMenuType adds i to the "menu_type" field.
func (muo *MenuUpdateOne) AddMenuType(i int64) *MenuUpdateOne {
	muo.mutation.AddMenuType(i)
	return muo
}

// ClearMenuType clears the value of the "menu_type" field.
func (muo *MenuUpdateOne) ClearMenuType() *MenuUpdateOne {
	muo.mutation.ClearMenuType()
	return muo
}

// SetRedirect sets the "redirect" field.
func (muo *MenuUpdateOne) SetRedirect(s string) *MenuUpdateOne {
	muo.mutation.SetRedirect(s)
	return muo
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableRedirect(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetRedirect(*s)
	}
	return muo
}

// ClearRedirect clears the value of the "redirect" field.
func (muo *MenuUpdateOne) ClearRedirect() *MenuUpdateOne {
	muo.mutation.ClearRedirect()
	return muo
}

// SetComponent sets the "component" field.
func (muo *MenuUpdateOne) SetComponent(s string) *MenuUpdateOne {
	muo.mutation.SetComponent(s)
	return muo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableComponent(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetComponent(*s)
	}
	return muo
}

// ClearComponent clears the value of the "component" field.
func (muo *MenuUpdateOne) ClearComponent() *MenuUpdateOne {
	muo.mutation.ClearComponent()
	return muo
}

// SetURL sets the "url" field.
func (muo *MenuUpdateOne) SetURL(s string) *MenuUpdateOne {
	muo.mutation.SetURL(s)
	return muo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableURL(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetURL(*s)
	}
	return muo
}

// ClearURL clears the value of the "url" field.
func (muo *MenuUpdateOne) ClearURL() *MenuUpdateOne {
	muo.mutation.ClearURL()
	return muo
}

// SetHidden sets the "hidden" field.
func (muo *MenuUpdateOne) SetHidden(b bool) *MenuUpdateOne {
	muo.mutation.SetHidden(b)
	return muo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableHidden(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetHidden(*b)
	}
	return muo
}

// ClearHidden clears the value of the "hidden" field.
func (muo *MenuUpdateOne) ClearHidden() *MenuUpdateOne {
	muo.mutation.ClearHidden()
	return muo
}

// SetTitle sets the "title" field.
func (muo *MenuUpdateOne) SetTitle(s string) *MenuUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTitle(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// ClearTitle clears the value of the "title" field.
func (muo *MenuUpdateOne) ClearTitle() *MenuUpdateOne {
	muo.mutation.ClearTitle()
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIcon(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetIcon(*s)
	}
	return muo
}

// ClearIcon clears the value of the "icon" field.
func (muo *MenuUpdateOne) ClearIcon() *MenuUpdateOne {
	muo.mutation.ClearIcon()
	return muo
}

// SetActiveMenu sets the "active_menu" field.
func (muo *MenuUpdateOne) SetActiveMenu(s string) *MenuUpdateOne {
	muo.mutation.SetActiveMenu(s)
	return muo
}

// SetNillableActiveMenu sets the "active_menu" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableActiveMenu(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetActiveMenu(*s)
	}
	return muo
}

// ClearActiveMenu clears the value of the "active_menu" field.
func (muo *MenuUpdateOne) ClearActiveMenu() *MenuUpdateOne {
	muo.mutation.ClearActiveMenu()
	return muo
}

// SetAffix sets the "affix" field.
func (muo *MenuUpdateOne) SetAffix(b bool) *MenuUpdateOne {
	muo.mutation.SetAffix(b)
	return muo
}

// SetNillableAffix sets the "affix" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableAffix(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetAffix(*b)
	}
	return muo
}

// ClearAffix clears the value of the "affix" field.
func (muo *MenuUpdateOne) ClearAffix() *MenuUpdateOne {
	muo.mutation.ClearAffix()
	return muo
}

// SetNoCache sets the "no_cache" field.
func (muo *MenuUpdateOne) SetNoCache(b bool) *MenuUpdateOne {
	muo.mutation.SetNoCache(b)
	return muo
}

// SetNillableNoCache sets the "no_cache" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableNoCache(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetNoCache(*b)
	}
	return muo
}

// ClearNoCache clears the value of the "no_cache" field.
func (muo *MenuUpdateOne) ClearNoCache() *MenuUpdateOne {
	muo.mutation.ClearNoCache()
	return muo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (muo *MenuUpdateOne) AddRoleIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.AddRoleIDs(ids...)
	return muo
}

// AddRoles adds the "roles" edges to the Role entity.
func (muo *MenuUpdateOne) AddRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) SetParent(m *Menu) *MenuUpdateOne {
	return muo.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (muo *MenuUpdateOne) AddChildIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.AddChildIDs(ids...)
	return muo
}

// AddChildren adds the "children" edges to the Menu entity.
func (muo *MenuUpdateOne) AddChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddChildIDs(ids...)
}

// AddParamIDs adds the "params" edge to the MenuParam entity by IDs.
func (muo *MenuUpdateOne) AddParamIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.AddParamIDs(ids...)
	return muo
}

// AddParams adds the "params" edges to the MenuParam entity.
func (muo *MenuUpdateOne) AddParams(m ...*MenuParam) *MenuUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddParamIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (muo *MenuUpdateOne) ClearRoles() *MenuUpdateOne {
	muo.mutation.ClearRoles()
	return muo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (muo *MenuUpdateOne) RemoveRoleIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.RemoveRoleIDs(ids...)
	return muo
}

// RemoveRoles removes "roles" edges to Role entities.
func (muo *MenuUpdateOne) RemoveRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	muo.mutation.ClearParent()
	return muo
}

// ClearChildren clears all "children" edges to the Menu entity.
func (muo *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	muo.mutation.ClearChildren()
	return muo
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (muo *MenuUpdateOne) RemoveChildIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.RemoveChildIDs(ids...)
	return muo
}

// RemoveChildren removes "children" edges to Menu entities.
func (muo *MenuUpdateOne) RemoveChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveChildIDs(ids...)
}

// ClearParams clears all "params" edges to the MenuParam entity.
func (muo *MenuUpdateOne) ClearParams() *MenuUpdateOne {
	muo.mutation.ClearParams()
	return muo
}

// RemoveParamIDs removes the "params" edge to MenuParam entities by IDs.
func (muo *MenuUpdateOne) RemoveParamIDs(ids ...int64) *MenuUpdateOne {
	muo.mutation.RemoveParamIDs(ids...)
	return muo
}

// RemoveParams removes "params" edges to MenuParam entities.
func (muo *MenuUpdateOne) RemoveParams(m ...*MenuParam) *MenuUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveParamIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeleteAt(); ok {
		_spec.SetField(menu.FieldDeleteAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.CreatedID(); ok {
		_spec.SetField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedID(); ok {
		_spec.AddField(menu.FieldCreatedID, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt64, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeInt64)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if muo.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if muo.mutation.NameCleared() {
		_spec.ClearField(menu.FieldName, field.TypeString)
	}
	if value, ok := muo.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeInt64, value)
	}
	if muo.mutation.SortCleared() {
		_spec.ClearField(menu.FieldSort, field.TypeInt64)
	}
	if value, ok := muo.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedDisabled(); ok {
		_spec.AddField(menu.FieldDisabled, field.TypeInt64, value)
	}
	if muo.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeInt64)
	}
	if value, ok := muo.mutation.Ignore(); ok {
		_spec.SetField(menu.FieldIgnore, field.TypeBool, value)
	}
	if muo.mutation.IgnoreCleared() {
		_spec.ClearField(menu.FieldIgnore, field.TypeBool)
	}
	if value, ok := muo.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedLevel(); ok {
		_spec.AddField(menu.FieldLevel, field.TypeInt64, value)
	}
	if muo.mutation.LevelCleared() {
		_spec.ClearField(menu.FieldLevel, field.TypeInt64)
	}
	if value, ok := muo.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeInt64, value)
	}
	if muo.mutation.MenuTypeCleared() {
		_spec.ClearField(menu.FieldMenuType, field.TypeInt64)
	}
	if value, ok := muo.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if muo.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := muo.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if muo.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := muo.mutation.URL(); ok {
		_spec.SetField(menu.FieldURL, field.TypeString, value)
	}
	if muo.mutation.URLCleared() {
		_spec.ClearField(menu.FieldURL, field.TypeString)
	}
	if value, ok := muo.mutation.Hidden(); ok {
		_spec.SetField(menu.FieldHidden, field.TypeBool, value)
	}
	if muo.mutation.HiddenCleared() {
		_spec.ClearField(menu.FieldHidden, field.TypeBool)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if muo.mutation.TitleCleared() {
		_spec.ClearField(menu.FieldTitle, field.TypeString)
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if muo.mutation.IconCleared() {
		_spec.ClearField(menu.FieldIcon, field.TypeString)
	}
	if value, ok := muo.mutation.ActiveMenu(); ok {
		_spec.SetField(menu.FieldActiveMenu, field.TypeString, value)
	}
	if muo.mutation.ActiveMenuCleared() {
		_spec.ClearField(menu.FieldActiveMenu, field.TypeString)
	}
	if value, ok := muo.mutation.Affix(); ok {
		_spec.SetField(menu.FieldAffix, field.TypeBool, value)
	}
	if muo.mutation.AffixCleared() {
		_spec.ClearField(menu.FieldAffix, field.TypeBool)
	}
	if value, ok := muo.mutation.NoCache(); ok {
		_spec.SetField(menu.FieldNoCache, field.TypeBool, value)
	}
	if muo.mutation.NoCacheCleared() {
		_spec.ClearField(menu.FieldNoCache, field.TypeBool)
	}
	if muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedParamsIDs(); len(nodes) > 0 && !muo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ParamsTable,
			Columns: []string{menu.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuparam.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

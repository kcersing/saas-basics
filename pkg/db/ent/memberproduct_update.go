// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/member"
	"saas/pkg/db/ent/memberproduct"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductUpdate is the builder for updating MemberProduct entities.
type MemberProductUpdate struct {
	config
	hooks    []Hook
	mutation *MemberProductMutation
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (mpu *MemberProductUpdate) Where(ps ...predicate.MemberProduct) *MemberProductUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MemberProductUpdate) SetUpdatedAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// SetStatus sets the "status" field.
func (mpu *MemberProductUpdate) SetStatus(i int64) *MemberProductUpdate {
	mpu.mutation.ResetStatus()
	mpu.mutation.SetStatus(i)
	return mpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableStatus(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetStatus(*i)
	}
	return mpu
}

// AddStatus adds i to the "status" field.
func (mpu *MemberProductUpdate) AddStatus(i int64) *MemberProductUpdate {
	mpu.mutation.AddStatus(i)
	return mpu
}

// ClearStatus clears the value of the "status" field.
func (mpu *MemberProductUpdate) ClearStatus() *MemberProductUpdate {
	mpu.mutation.ClearStatus()
	return mpu
}

// SetSn sets the "sn" field.
func (mpu *MemberProductUpdate) SetSn(s string) *MemberProductUpdate {
	mpu.mutation.SetSn(s)
	return mpu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableSn(s *string) *MemberProductUpdate {
	if s != nil {
		mpu.SetSn(*s)
	}
	return mpu
}

// ClearSn clears the value of the "sn" field.
func (mpu *MemberProductUpdate) ClearSn() *MemberProductUpdate {
	mpu.mutation.ClearSn()
	return mpu
}

// SetType sets the "type" field.
func (mpu *MemberProductUpdate) SetType(s string) *MemberProductUpdate {
	mpu.mutation.SetType(s)
	return mpu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableType(s *string) *MemberProductUpdate {
	if s != nil {
		mpu.SetType(*s)
	}
	return mpu
}

// ClearType clears the value of the "type" field.
func (mpu *MemberProductUpdate) ClearType() *MemberProductUpdate {
	mpu.mutation.ClearType()
	return mpu
}

// SetMemberID sets the "member_id" field.
func (mpu *MemberProductUpdate) SetMemberID(i int64) *MemberProductUpdate {
	mpu.mutation.SetMemberID(i)
	return mpu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableMemberID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetMemberID(*i)
	}
	return mpu
}

// ClearMemberID clears the value of the "member_id" field.
func (mpu *MemberProductUpdate) ClearMemberID() *MemberProductUpdate {
	mpu.mutation.ClearMemberID()
	return mpu
}

// SetProductID sets the "product_id" field.
func (mpu *MemberProductUpdate) SetProductID(i int64) *MemberProductUpdate {
	mpu.mutation.ResetProductID()
	mpu.mutation.SetProductID(i)
	return mpu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableProductID(i *int64) *MemberProductUpdate {
	if i != nil {
		mpu.SetProductID(*i)
	}
	return mpu
}

// AddProductID adds i to the "product_id" field.
func (mpu *MemberProductUpdate) AddProductID(i int64) *MemberProductUpdate {
	mpu.mutation.AddProductID(i)
	return mpu
}

// ClearProductID clears the value of the "product_id" field.
func (mpu *MemberProductUpdate) ClearProductID() *MemberProductUpdate {
	mpu.mutation.ClearProductID()
	return mpu
}

// SetName sets the "name" field.
func (mpu *MemberProductUpdate) SetName(f float64) *MemberProductUpdate {
	mpu.mutation.ResetName()
	mpu.mutation.SetName(f)
	return mpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableName(f *float64) *MemberProductUpdate {
	if f != nil {
		mpu.SetName(*f)
	}
	return mpu
}

// AddName adds f to the "name" field.
func (mpu *MemberProductUpdate) AddName(f float64) *MemberProductUpdate {
	mpu.mutation.AddName(f)
	return mpu
}

// ClearName clears the value of the "name" field.
func (mpu *MemberProductUpdate) ClearName() *MemberProductUpdate {
	mpu.mutation.ClearName()
	return mpu
}

// SetPrice sets the "price" field.
func (mpu *MemberProductUpdate) SetPrice(f float64) *MemberProductUpdate {
	mpu.mutation.ResetPrice()
	mpu.mutation.SetPrice(f)
	return mpu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillablePrice(f *float64) *MemberProductUpdate {
	if f != nil {
		mpu.SetPrice(*f)
	}
	return mpu
}

// AddPrice adds f to the "price" field.
func (mpu *MemberProductUpdate) AddPrice(f float64) *MemberProductUpdate {
	mpu.mutation.AddPrice(f)
	return mpu
}

// ClearPrice clears the value of the "price" field.
func (mpu *MemberProductUpdate) ClearPrice() *MemberProductUpdate {
	mpu.mutation.ClearPrice()
	return mpu
}

// SetValidityAt sets the "validity_at" field.
func (mpu *MemberProductUpdate) SetValidityAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetValidityAt(t)
	return mpu
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableValidityAt(t *time.Time) *MemberProductUpdate {
	if t != nil {
		mpu.SetValidityAt(*t)
	}
	return mpu
}

// ClearValidityAt clears the value of the "validity_at" field.
func (mpu *MemberProductUpdate) ClearValidityAt() *MemberProductUpdate {
	mpu.mutation.ClearValidityAt()
	return mpu
}

// SetCancelAt sets the "cancel_at" field.
func (mpu *MemberProductUpdate) SetCancelAt(t time.Time) *MemberProductUpdate {
	mpu.mutation.SetCancelAt(t)
	return mpu
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableCancelAt(t *time.Time) *MemberProductUpdate {
	if t != nil {
		mpu.SetCancelAt(*t)
	}
	return mpu
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (mpu *MemberProductUpdate) ClearCancelAt() *MemberProductUpdate {
	mpu.mutation.ClearCancelAt()
	return mpu
}

// SetOwnerID sets the "owner" edge to the Member entity by ID.
func (mpu *MemberProductUpdate) SetOwnerID(id int64) *MemberProductUpdate {
	mpu.mutation.SetOwnerID(id)
	return mpu
}

// SetNillableOwnerID sets the "owner" edge to the Member entity by ID if the given value is not nil.
func (mpu *MemberProductUpdate) SetNillableOwnerID(id *int64) *MemberProductUpdate {
	if id != nil {
		mpu = mpu.SetOwnerID(*id)
	}
	return mpu
}

// SetOwner sets the "owner" edge to the Member entity.
func (mpu *MemberProductUpdate) SetOwner(m *Member) *MemberProductUpdate {
	return mpu.SetOwnerID(m.ID)
}

// AddMemberProductPropertyIDs adds the "member_product_propertys" edge to the MemberProductProperty entity by IDs.
func (mpu *MemberProductUpdate) AddMemberProductPropertyIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.AddMemberProductPropertyIDs(ids...)
	return mpu
}

// AddMemberProductPropertys adds the "member_product_propertys" edges to the MemberProductProperty entity.
func (mpu *MemberProductUpdate) AddMemberProductPropertys(m ...*MemberProductProperty) *MemberProductUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpu.AddMemberProductPropertyIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (mpu *MemberProductUpdate) Mutation() *MemberProductMutation {
	return mpu.mutation
}

// ClearOwner clears the "owner" edge to the Member entity.
func (mpu *MemberProductUpdate) ClearOwner() *MemberProductUpdate {
	mpu.mutation.ClearOwner()
	return mpu
}

// ClearMemberProductPropertys clears all "member_product_propertys" edges to the MemberProductProperty entity.
func (mpu *MemberProductUpdate) ClearMemberProductPropertys() *MemberProductUpdate {
	mpu.mutation.ClearMemberProductPropertys()
	return mpu
}

// RemoveMemberProductPropertyIDs removes the "member_product_propertys" edge to MemberProductProperty entities by IDs.
func (mpu *MemberProductUpdate) RemoveMemberProductPropertyIDs(ids ...int64) *MemberProductUpdate {
	mpu.mutation.RemoveMemberProductPropertyIDs(ids...)
	return mpu
}

// RemoveMemberProductPropertys removes "member_product_propertys" edges to MemberProductProperty entities.
func (mpu *MemberProductUpdate) RemoveMemberProductPropertys(m ...*MemberProductProperty) *MemberProductUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpu.RemoveMemberProductPropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MemberProductUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MemberProductUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MemberProductUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MemberProductUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *MemberProductUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok {
		v := memberproduct.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

func (mpu *MemberProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if mpu.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if mpu.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := mpu.mutation.GetType(); ok {
		_spec.SetField(memberproduct.FieldType, field.TypeString, value)
	}
	if mpu.mutation.TypeCleared() {
		_spec.ClearField(memberproduct.FieldType, field.TypeString)
	}
	if value, ok := mpu.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mpu.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if mpu.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := mpu.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedName(); ok {
		_spec.AddField(memberproduct.FieldName, field.TypeFloat64, value)
	}
	if mpu.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeFloat64)
	}
	if value, ok := mpu.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if mpu.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if value, ok := mpu.mutation.ValidityAt(); ok {
		_spec.SetField(memberproduct.FieldValidityAt, field.TypeTime, value)
	}
	if mpu.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproduct.FieldValidityAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.CancelAt(); ok {
		_spec.SetField(memberproduct.FieldCancelAt, field.TypeTime, value)
	}
	if mpu.mutation.CancelAtCleared() {
		_spec.ClearField(memberproduct.FieldCancelAt, field.TypeTime)
	}
	if mpu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.OwnerTable,
			Columns: []string{memberproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.OwnerTable,
			Columns: []string{memberproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.RemovedMemberProductPropertysIDs(); len(nodes) > 0 && !mpu.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MemberProductPropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MemberProductUpdateOne is the builder for updating a single MemberProduct entity.
type MemberProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MemberProductUpdateOne) SetUpdatedAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// SetStatus sets the "status" field.
func (mpuo *MemberProductUpdateOne) SetStatus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetStatus()
	mpuo.mutation.SetStatus(i)
	return mpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableStatus(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetStatus(*i)
	}
	return mpuo
}

// AddStatus adds i to the "status" field.
func (mpuo *MemberProductUpdateOne) AddStatus(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddStatus(i)
	return mpuo
}

// ClearStatus clears the value of the "status" field.
func (mpuo *MemberProductUpdateOne) ClearStatus() *MemberProductUpdateOne {
	mpuo.mutation.ClearStatus()
	return mpuo
}

// SetSn sets the "sn" field.
func (mpuo *MemberProductUpdateOne) SetSn(s string) *MemberProductUpdateOne {
	mpuo.mutation.SetSn(s)
	return mpuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableSn(s *string) *MemberProductUpdateOne {
	if s != nil {
		mpuo.SetSn(*s)
	}
	return mpuo
}

// ClearSn clears the value of the "sn" field.
func (mpuo *MemberProductUpdateOne) ClearSn() *MemberProductUpdateOne {
	mpuo.mutation.ClearSn()
	return mpuo
}

// SetType sets the "type" field.
func (mpuo *MemberProductUpdateOne) SetType(s string) *MemberProductUpdateOne {
	mpuo.mutation.SetType(s)
	return mpuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableType(s *string) *MemberProductUpdateOne {
	if s != nil {
		mpuo.SetType(*s)
	}
	return mpuo
}

// ClearType clears the value of the "type" field.
func (mpuo *MemberProductUpdateOne) ClearType() *MemberProductUpdateOne {
	mpuo.mutation.ClearType()
	return mpuo
}

// SetMemberID sets the "member_id" field.
func (mpuo *MemberProductUpdateOne) SetMemberID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.SetMemberID(i)
	return mpuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableMemberID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetMemberID(*i)
	}
	return mpuo
}

// ClearMemberID clears the value of the "member_id" field.
func (mpuo *MemberProductUpdateOne) ClearMemberID() *MemberProductUpdateOne {
	mpuo.mutation.ClearMemberID()
	return mpuo
}

// SetProductID sets the "product_id" field.
func (mpuo *MemberProductUpdateOne) SetProductID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.ResetProductID()
	mpuo.mutation.SetProductID(i)
	return mpuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableProductID(i *int64) *MemberProductUpdateOne {
	if i != nil {
		mpuo.SetProductID(*i)
	}
	return mpuo
}

// AddProductID adds i to the "product_id" field.
func (mpuo *MemberProductUpdateOne) AddProductID(i int64) *MemberProductUpdateOne {
	mpuo.mutation.AddProductID(i)
	return mpuo
}

// ClearProductID clears the value of the "product_id" field.
func (mpuo *MemberProductUpdateOne) ClearProductID() *MemberProductUpdateOne {
	mpuo.mutation.ClearProductID()
	return mpuo
}

// SetName sets the "name" field.
func (mpuo *MemberProductUpdateOne) SetName(f float64) *MemberProductUpdateOne {
	mpuo.mutation.ResetName()
	mpuo.mutation.SetName(f)
	return mpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableName(f *float64) *MemberProductUpdateOne {
	if f != nil {
		mpuo.SetName(*f)
	}
	return mpuo
}

// AddName adds f to the "name" field.
func (mpuo *MemberProductUpdateOne) AddName(f float64) *MemberProductUpdateOne {
	mpuo.mutation.AddName(f)
	return mpuo
}

// ClearName clears the value of the "name" field.
func (mpuo *MemberProductUpdateOne) ClearName() *MemberProductUpdateOne {
	mpuo.mutation.ClearName()
	return mpuo
}

// SetPrice sets the "price" field.
func (mpuo *MemberProductUpdateOne) SetPrice(f float64) *MemberProductUpdateOne {
	mpuo.mutation.ResetPrice()
	mpuo.mutation.SetPrice(f)
	return mpuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillablePrice(f *float64) *MemberProductUpdateOne {
	if f != nil {
		mpuo.SetPrice(*f)
	}
	return mpuo
}

// AddPrice adds f to the "price" field.
func (mpuo *MemberProductUpdateOne) AddPrice(f float64) *MemberProductUpdateOne {
	mpuo.mutation.AddPrice(f)
	return mpuo
}

// ClearPrice clears the value of the "price" field.
func (mpuo *MemberProductUpdateOne) ClearPrice() *MemberProductUpdateOne {
	mpuo.mutation.ClearPrice()
	return mpuo
}

// SetValidityAt sets the "validity_at" field.
func (mpuo *MemberProductUpdateOne) SetValidityAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetValidityAt(t)
	return mpuo
}

// SetNillableValidityAt sets the "validity_at" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableValidityAt(t *time.Time) *MemberProductUpdateOne {
	if t != nil {
		mpuo.SetValidityAt(*t)
	}
	return mpuo
}

// ClearValidityAt clears the value of the "validity_at" field.
func (mpuo *MemberProductUpdateOne) ClearValidityAt() *MemberProductUpdateOne {
	mpuo.mutation.ClearValidityAt()
	return mpuo
}

// SetCancelAt sets the "cancel_at" field.
func (mpuo *MemberProductUpdateOne) SetCancelAt(t time.Time) *MemberProductUpdateOne {
	mpuo.mutation.SetCancelAt(t)
	return mpuo
}

// SetNillableCancelAt sets the "cancel_at" field if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableCancelAt(t *time.Time) *MemberProductUpdateOne {
	if t != nil {
		mpuo.SetCancelAt(*t)
	}
	return mpuo
}

// ClearCancelAt clears the value of the "cancel_at" field.
func (mpuo *MemberProductUpdateOne) ClearCancelAt() *MemberProductUpdateOne {
	mpuo.mutation.ClearCancelAt()
	return mpuo
}

// SetOwnerID sets the "owner" edge to the Member entity by ID.
func (mpuo *MemberProductUpdateOne) SetOwnerID(id int64) *MemberProductUpdateOne {
	mpuo.mutation.SetOwnerID(id)
	return mpuo
}

// SetNillableOwnerID sets the "owner" edge to the Member entity by ID if the given value is not nil.
func (mpuo *MemberProductUpdateOne) SetNillableOwnerID(id *int64) *MemberProductUpdateOne {
	if id != nil {
		mpuo = mpuo.SetOwnerID(*id)
	}
	return mpuo
}

// SetOwner sets the "owner" edge to the Member entity.
func (mpuo *MemberProductUpdateOne) SetOwner(m *Member) *MemberProductUpdateOne {
	return mpuo.SetOwnerID(m.ID)
}

// AddMemberProductPropertyIDs adds the "member_product_propertys" edge to the MemberProductProperty entity by IDs.
func (mpuo *MemberProductUpdateOne) AddMemberProductPropertyIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.AddMemberProductPropertyIDs(ids...)
	return mpuo
}

// AddMemberProductPropertys adds the "member_product_propertys" edges to the MemberProductProperty entity.
func (mpuo *MemberProductUpdateOne) AddMemberProductPropertys(m ...*MemberProductProperty) *MemberProductUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpuo.AddMemberProductPropertyIDs(ids...)
}

// Mutation returns the MemberProductMutation object of the builder.
func (mpuo *MemberProductUpdateOne) Mutation() *MemberProductMutation {
	return mpuo.mutation
}

// ClearOwner clears the "owner" edge to the Member entity.
func (mpuo *MemberProductUpdateOne) ClearOwner() *MemberProductUpdateOne {
	mpuo.mutation.ClearOwner()
	return mpuo
}

// ClearMemberProductPropertys clears all "member_product_propertys" edges to the MemberProductProperty entity.
func (mpuo *MemberProductUpdateOne) ClearMemberProductPropertys() *MemberProductUpdateOne {
	mpuo.mutation.ClearMemberProductPropertys()
	return mpuo
}

// RemoveMemberProductPropertyIDs removes the "member_product_propertys" edge to MemberProductProperty entities by IDs.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductPropertyIDs(ids ...int64) *MemberProductUpdateOne {
	mpuo.mutation.RemoveMemberProductPropertyIDs(ids...)
	return mpuo
}

// RemoveMemberProductPropertys removes "member_product_propertys" edges to MemberProductProperty entities.
func (mpuo *MemberProductUpdateOne) RemoveMemberProductPropertys(m ...*MemberProductProperty) *MemberProductUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpuo.RemoveMemberProductPropertyIDs(ids...)
}

// Where appends a list predicates to the MemberProductUpdate builder.
func (mpuo *MemberProductUpdateOne) Where(ps ...predicate.MemberProduct) *MemberProductUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MemberProductUpdateOne) Select(field string, fields ...string) *MemberProductUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MemberProduct entity.
func (mpuo *MemberProductUpdateOne) Save(ctx context.Context) (*MemberProduct, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MemberProductUpdateOne) SaveX(ctx context.Context) *MemberProduct {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MemberProductUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MemberProductUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *MemberProductUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok {
		v := memberproduct.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

func (mpuo *MemberProductUpdateOne) sqlSave(ctx context.Context) (_node *MemberProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberproduct.Table, memberproduct.Columns, sqlgraph.NewFieldSpec(memberproduct.FieldID, field.TypeInt64))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproduct.FieldID)
		for _, f := range fields {
			if !memberproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.Status(); ok {
		_spec.SetField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedStatus(); ok {
		_spec.AddField(memberproduct.FieldStatus, field.TypeInt64, value)
	}
	if mpuo.mutation.StatusCleared() {
		_spec.ClearField(memberproduct.FieldStatus, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Sn(); ok {
		_spec.SetField(memberproduct.FieldSn, field.TypeString, value)
	}
	if mpuo.mutation.SnCleared() {
		_spec.ClearField(memberproduct.FieldSn, field.TypeString)
	}
	if value, ok := mpuo.mutation.GetType(); ok {
		_spec.SetField(memberproduct.FieldType, field.TypeString, value)
	}
	if mpuo.mutation.TypeCleared() {
		_spec.ClearField(memberproduct.FieldType, field.TypeString)
	}
	if value, ok := mpuo.mutation.ProductID(); ok {
		_spec.SetField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := mpuo.mutation.AddedProductID(); ok {
		_spec.AddField(memberproduct.FieldProductID, field.TypeInt64, value)
	}
	if mpuo.mutation.ProductIDCleared() {
		_spec.ClearField(memberproduct.FieldProductID, field.TypeInt64)
	}
	if value, ok := mpuo.mutation.Name(); ok {
		_spec.SetField(memberproduct.FieldName, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedName(); ok {
		_spec.AddField(memberproduct.FieldName, field.TypeFloat64, value)
	}
	if mpuo.mutation.NameCleared() {
		_spec.ClearField(memberproduct.FieldName, field.TypeFloat64)
	}
	if value, ok := mpuo.mutation.Price(); ok {
		_spec.SetField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedPrice(); ok {
		_spec.AddField(memberproduct.FieldPrice, field.TypeFloat64, value)
	}
	if mpuo.mutation.PriceCleared() {
		_spec.ClearField(memberproduct.FieldPrice, field.TypeFloat64)
	}
	if value, ok := mpuo.mutation.ValidityAt(); ok {
		_spec.SetField(memberproduct.FieldValidityAt, field.TypeTime, value)
	}
	if mpuo.mutation.ValidityAtCleared() {
		_spec.ClearField(memberproduct.FieldValidityAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.CancelAt(); ok {
		_spec.SetField(memberproduct.FieldCancelAt, field.TypeTime, value)
	}
	if mpuo.mutation.CancelAtCleared() {
		_spec.ClearField(memberproduct.FieldCancelAt, field.TypeTime)
	}
	if mpuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.OwnerTable,
			Columns: []string{memberproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memberproduct.OwnerTable,
			Columns: []string{memberproduct.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.RemovedMemberProductPropertysIDs(); len(nodes) > 0 && !mpuo.mutation.MemberProductPropertysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MemberProductPropertysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   memberproduct.MemberProductPropertysTable,
			Columns: []string{memberproduct.MemberProductPropertysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberProduct{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/productpropertyvenue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPropertyVenueUpdate is the builder for updating ProductPropertyVenue entities.
type ProductPropertyVenueUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPropertyVenueMutation
}

// Where appends a list predicates to the ProductPropertyVenueUpdate builder.
func (ppvu *ProductPropertyVenueUpdate) Where(ps ...predicate.ProductPropertyVenue) *ProductPropertyVenueUpdate {
	ppvu.mutation.Where(ps...)
	return ppvu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppvu *ProductPropertyVenueUpdate) SetUpdatedAt(t time.Time) *ProductPropertyVenueUpdate {
	ppvu.mutation.SetUpdatedAt(t)
	return ppvu
}

// SetVenueID sets the "venue_id" field.
func (ppvu *ProductPropertyVenueUpdate) SetVenueID(i int64) *ProductPropertyVenueUpdate {
	ppvu.mutation.ResetVenueID()
	ppvu.mutation.SetVenueID(i)
	return ppvu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (ppvu *ProductPropertyVenueUpdate) SetNillableVenueID(i *int64) *ProductPropertyVenueUpdate {
	if i != nil {
		ppvu.SetVenueID(*i)
	}
	return ppvu
}

// AddVenueID adds i to the "venue_id" field.
func (ppvu *ProductPropertyVenueUpdate) AddVenueID(i int64) *ProductPropertyVenueUpdate {
	ppvu.mutation.AddVenueID(i)
	return ppvu
}

// ClearVenueID clears the value of the "venue_id" field.
func (ppvu *ProductPropertyVenueUpdate) ClearVenueID() *ProductPropertyVenueUpdate {
	ppvu.mutation.ClearVenueID()
	return ppvu
}

// SetProductPropertyID sets the "product_property_id" field.
func (ppvu *ProductPropertyVenueUpdate) SetProductPropertyID(i int64) *ProductPropertyVenueUpdate {
	ppvu.mutation.ResetProductPropertyID()
	ppvu.mutation.SetProductPropertyID(i)
	return ppvu
}

// SetNillableProductPropertyID sets the "product_property_id" field if the given value is not nil.
func (ppvu *ProductPropertyVenueUpdate) SetNillableProductPropertyID(i *int64) *ProductPropertyVenueUpdate {
	if i != nil {
		ppvu.SetProductPropertyID(*i)
	}
	return ppvu
}

// AddProductPropertyID adds i to the "product_property_id" field.
func (ppvu *ProductPropertyVenueUpdate) AddProductPropertyID(i int64) *ProductPropertyVenueUpdate {
	ppvu.mutation.AddProductPropertyID(i)
	return ppvu
}

// ClearProductPropertyID clears the value of the "product_property_id" field.
func (ppvu *ProductPropertyVenueUpdate) ClearProductPropertyID() *ProductPropertyVenueUpdate {
	ppvu.mutation.ClearProductPropertyID()
	return ppvu
}

// Mutation returns the ProductPropertyVenueMutation object of the builder.
func (ppvu *ProductPropertyVenueUpdate) Mutation() *ProductPropertyVenueMutation {
	return ppvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppvu *ProductPropertyVenueUpdate) Save(ctx context.Context) (int, error) {
	ppvu.defaults()
	return withHooks(ctx, ppvu.sqlSave, ppvu.mutation, ppvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppvu *ProductPropertyVenueUpdate) SaveX(ctx context.Context) int {
	affected, err := ppvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppvu *ProductPropertyVenueUpdate) Exec(ctx context.Context) error {
	_, err := ppvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvu *ProductPropertyVenueUpdate) ExecX(ctx context.Context) {
	if err := ppvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppvu *ProductPropertyVenueUpdate) defaults() {
	if _, ok := ppvu.mutation.UpdatedAt(); !ok {
		v := productpropertyvenue.UpdateDefaultUpdatedAt()
		ppvu.mutation.SetUpdatedAt(v)
	}
}

func (ppvu *ProductPropertyVenueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productpropertyvenue.Table, productpropertyvenue.Columns, sqlgraph.NewFieldSpec(productpropertyvenue.FieldID, field.TypeInt64))
	if ps := ppvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppvu.mutation.UpdatedAt(); ok {
		_spec.SetField(productpropertyvenue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppvu.mutation.VenueID(); ok {
		_spec.SetField(productpropertyvenue.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := ppvu.mutation.AddedVenueID(); ok {
		_spec.AddField(productpropertyvenue.FieldVenueID, field.TypeInt64, value)
	}
	if ppvu.mutation.VenueIDCleared() {
		_spec.ClearField(productpropertyvenue.FieldVenueID, field.TypeInt64)
	}
	if value, ok := ppvu.mutation.ProductPropertyID(); ok {
		_spec.SetField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64, value)
	}
	if value, ok := ppvu.mutation.AddedProductPropertyID(); ok {
		_spec.AddField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64, value)
	}
	if ppvu.mutation.ProductPropertyIDCleared() {
		_spec.ClearField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpropertyvenue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppvu.mutation.done = true
	return n, nil
}

// ProductPropertyVenueUpdateOne is the builder for updating a single ProductPropertyVenue entity.
type ProductPropertyVenueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPropertyVenueMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ppvuo *ProductPropertyVenueUpdateOne) SetUpdatedAt(t time.Time) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.SetUpdatedAt(t)
	return ppvuo
}

// SetVenueID sets the "venue_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) SetVenueID(i int64) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.ResetVenueID()
	ppvuo.mutation.SetVenueID(i)
	return ppvuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (ppvuo *ProductPropertyVenueUpdateOne) SetNillableVenueID(i *int64) *ProductPropertyVenueUpdateOne {
	if i != nil {
		ppvuo.SetVenueID(*i)
	}
	return ppvuo
}

// AddVenueID adds i to the "venue_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) AddVenueID(i int64) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.AddVenueID(i)
	return ppvuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) ClearVenueID() *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.ClearVenueID()
	return ppvuo
}

// SetProductPropertyID sets the "product_property_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) SetProductPropertyID(i int64) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.ResetProductPropertyID()
	ppvuo.mutation.SetProductPropertyID(i)
	return ppvuo
}

// SetNillableProductPropertyID sets the "product_property_id" field if the given value is not nil.
func (ppvuo *ProductPropertyVenueUpdateOne) SetNillableProductPropertyID(i *int64) *ProductPropertyVenueUpdateOne {
	if i != nil {
		ppvuo.SetProductPropertyID(*i)
	}
	return ppvuo
}

// AddProductPropertyID adds i to the "product_property_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) AddProductPropertyID(i int64) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.AddProductPropertyID(i)
	return ppvuo
}

// ClearProductPropertyID clears the value of the "product_property_id" field.
func (ppvuo *ProductPropertyVenueUpdateOne) ClearProductPropertyID() *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.ClearProductPropertyID()
	return ppvuo
}

// Mutation returns the ProductPropertyVenueMutation object of the builder.
func (ppvuo *ProductPropertyVenueUpdateOne) Mutation() *ProductPropertyVenueMutation {
	return ppvuo.mutation
}

// Where appends a list predicates to the ProductPropertyVenueUpdate builder.
func (ppvuo *ProductPropertyVenueUpdateOne) Where(ps ...predicate.ProductPropertyVenue) *ProductPropertyVenueUpdateOne {
	ppvuo.mutation.Where(ps...)
	return ppvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppvuo *ProductPropertyVenueUpdateOne) Select(field string, fields ...string) *ProductPropertyVenueUpdateOne {
	ppvuo.fields = append([]string{field}, fields...)
	return ppvuo
}

// Save executes the query and returns the updated ProductPropertyVenue entity.
func (ppvuo *ProductPropertyVenueUpdateOne) Save(ctx context.Context) (*ProductPropertyVenue, error) {
	ppvuo.defaults()
	return withHooks(ctx, ppvuo.sqlSave, ppvuo.mutation, ppvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppvuo *ProductPropertyVenueUpdateOne) SaveX(ctx context.Context) *ProductPropertyVenue {
	node, err := ppvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppvuo *ProductPropertyVenueUpdateOne) Exec(ctx context.Context) error {
	_, err := ppvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvuo *ProductPropertyVenueUpdateOne) ExecX(ctx context.Context) {
	if err := ppvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppvuo *ProductPropertyVenueUpdateOne) defaults() {
	if _, ok := ppvuo.mutation.UpdatedAt(); !ok {
		v := productpropertyvenue.UpdateDefaultUpdatedAt()
		ppvuo.mutation.SetUpdatedAt(v)
	}
}

func (ppvuo *ProductPropertyVenueUpdateOne) sqlSave(ctx context.Context) (_node *ProductPropertyVenue, err error) {
	_spec := sqlgraph.NewUpdateSpec(productpropertyvenue.Table, productpropertyvenue.Columns, sqlgraph.NewFieldSpec(productpropertyvenue.FieldID, field.TypeInt64))
	id, ok := ppvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductPropertyVenue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpropertyvenue.FieldID)
		for _, f := range fields {
			if !productpropertyvenue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpropertyvenue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productpropertyvenue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppvuo.mutation.VenueID(); ok {
		_spec.SetField(productpropertyvenue.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := ppvuo.mutation.AddedVenueID(); ok {
		_spec.AddField(productpropertyvenue.FieldVenueID, field.TypeInt64, value)
	}
	if ppvuo.mutation.VenueIDCleared() {
		_spec.ClearField(productpropertyvenue.FieldVenueID, field.TypeInt64)
	}
	if value, ok := ppvuo.mutation.ProductPropertyID(); ok {
		_spec.SetField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64, value)
	}
	if value, ok := ppvuo.mutation.AddedProductPropertyID(); ok {
		_spec.AddField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64, value)
	}
	if ppvuo.mutation.ProductPropertyIDCleared() {
		_spec.ClearField(productpropertyvenue.FieldProductPropertyID, field.TypeInt64)
	}
	_node = &ProductPropertyVenue{config: ppvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpropertyvenue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppvuo.mutation.done = true
	return _node, nil
}

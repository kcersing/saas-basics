// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/courserecordcoach"
	"saas/pkg/db/ent/courserecordmember"
	"saas/pkg/db/ent/courserecordschedule"
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordScheduleUpdate is the builder for updating CourseRecordSchedule entities.
type CourseRecordScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *CourseRecordScheduleMutation
}

// Where appends a list predicates to the CourseRecordScheduleUpdate builder.
func (crsu *CourseRecordScheduleUpdate) Where(ps ...predicate.CourseRecordSchedule) *CourseRecordScheduleUpdate {
	crsu.mutation.Where(ps...)
	return crsu
}

// SetUpdatedAt sets the "updated_at" field.
func (crsu *CourseRecordScheduleUpdate) SetUpdatedAt(t time.Time) *CourseRecordScheduleUpdate {
	crsu.mutation.SetUpdatedAt(t)
	return crsu
}

// SetType sets the "type" field.
func (crsu *CourseRecordScheduleUpdate) SetType(s string) *CourseRecordScheduleUpdate {
	crsu.mutation.SetType(s)
	return crsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableType(s *string) *CourseRecordScheduleUpdate {
	if s != nil {
		crsu.SetType(*s)
	}
	return crsu
}

// ClearType clears the value of the "type" field.
func (crsu *CourseRecordScheduleUpdate) ClearType() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearType()
	return crsu
}

// SetVenueID sets the "venue_id" field.
func (crsu *CourseRecordScheduleUpdate) SetVenueID(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.ResetVenueID()
	crsu.mutation.SetVenueID(i)
	return crsu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableVenueID(i *int64) *CourseRecordScheduleUpdate {
	if i != nil {
		crsu.SetVenueID(*i)
	}
	return crsu
}

// AddVenueID adds i to the "venue_id" field.
func (crsu *CourseRecordScheduleUpdate) AddVenueID(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddVenueID(i)
	return crsu
}

// ClearVenueID clears the value of the "venue_id" field.
func (crsu *CourseRecordScheduleUpdate) ClearVenueID() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearVenueID()
	return crsu
}

// SetPlaceID sets the "place_id" field.
func (crsu *CourseRecordScheduleUpdate) SetPlaceID(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.ResetPlaceID()
	crsu.mutation.SetPlaceID(i)
	return crsu
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillablePlaceID(i *int64) *CourseRecordScheduleUpdate {
	if i != nil {
		crsu.SetPlaceID(*i)
	}
	return crsu
}

// AddPlaceID adds i to the "place_id" field.
func (crsu *CourseRecordScheduleUpdate) AddPlaceID(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddPlaceID(i)
	return crsu
}

// ClearPlaceID clears the value of the "place_id" field.
func (crsu *CourseRecordScheduleUpdate) ClearPlaceID() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearPlaceID()
	return crsu
}

// SetNum sets the "num" field.
func (crsu *CourseRecordScheduleUpdate) SetNum(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.ResetNum()
	crsu.mutation.SetNum(i)
	return crsu
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableNum(i *int64) *CourseRecordScheduleUpdate {
	if i != nil {
		crsu.SetNum(*i)
	}
	return crsu
}

// AddNum adds i to the "num" field.
func (crsu *CourseRecordScheduleUpdate) AddNum(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddNum(i)
	return crsu
}

// ClearNum clears the value of the "num" field.
func (crsu *CourseRecordScheduleUpdate) ClearNum() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearNum()
	return crsu
}

// SetStartTime sets the "start_time" field.
func (crsu *CourseRecordScheduleUpdate) SetStartTime(t time.Time) *CourseRecordScheduleUpdate {
	crsu.mutation.SetStartTime(t)
	return crsu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableStartTime(t *time.Time) *CourseRecordScheduleUpdate {
	if t != nil {
		crsu.SetStartTime(*t)
	}
	return crsu
}

// ClearStartTime clears the value of the "start_time" field.
func (crsu *CourseRecordScheduleUpdate) ClearStartTime() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearStartTime()
	return crsu
}

// SetEndTime sets the "end_time" field.
func (crsu *CourseRecordScheduleUpdate) SetEndTime(t time.Time) *CourseRecordScheduleUpdate {
	crsu.mutation.SetEndTime(t)
	return crsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableEndTime(t *time.Time) *CourseRecordScheduleUpdate {
	if t != nil {
		crsu.SetEndTime(*t)
	}
	return crsu
}

// ClearEndTime clears the value of the "end_time" field.
func (crsu *CourseRecordScheduleUpdate) ClearEndTime() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearEndTime()
	return crsu
}

// SetPrice sets the "price" field.
func (crsu *CourseRecordScheduleUpdate) SetPrice(f float64) *CourseRecordScheduleUpdate {
	crsu.mutation.ResetPrice()
	crsu.mutation.SetPrice(f)
	return crsu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillablePrice(f *float64) *CourseRecordScheduleUpdate {
	if f != nil {
		crsu.SetPrice(*f)
	}
	return crsu
}

// AddPrice adds f to the "price" field.
func (crsu *CourseRecordScheduleUpdate) AddPrice(f float64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddPrice(f)
	return crsu
}

// ClearPrice clears the value of the "price" field.
func (crsu *CourseRecordScheduleUpdate) ClearPrice() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearPrice()
	return crsu
}

// SetStatus sets the "status" field.
func (crsu *CourseRecordScheduleUpdate) SetStatus(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.ResetStatus()
	crsu.mutation.SetStatus(i)
	return crsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crsu *CourseRecordScheduleUpdate) SetNillableStatus(i *int64) *CourseRecordScheduleUpdate {
	if i != nil {
		crsu.SetStatus(*i)
	}
	return crsu
}

// AddStatus adds i to the "status" field.
func (crsu *CourseRecordScheduleUpdate) AddStatus(i int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddStatus(i)
	return crsu
}

// ClearStatus clears the value of the "status" field.
func (crsu *CourseRecordScheduleUpdate) ClearStatus() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearStatus()
	return crsu
}

// AddMemberIDs adds the "members" edge to the CourseRecordMember entity by IDs.
func (crsu *CourseRecordScheduleUpdate) AddMemberIDs(ids ...int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddMemberIDs(ids...)
	return crsu
}

// AddMembers adds the "members" edges to the CourseRecordMember entity.
func (crsu *CourseRecordScheduleUpdate) AddMembers(c ...*CourseRecordMember) *CourseRecordScheduleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsu.AddMemberIDs(ids...)
}

// AddCoachIDs adds the "coachs" edge to the CourseRecordCoach entity by IDs.
func (crsu *CourseRecordScheduleUpdate) AddCoachIDs(ids ...int64) *CourseRecordScheduleUpdate {
	crsu.mutation.AddCoachIDs(ids...)
	return crsu
}

// AddCoachs adds the "coachs" edges to the CourseRecordCoach entity.
func (crsu *CourseRecordScheduleUpdate) AddCoachs(c ...*CourseRecordCoach) *CourseRecordScheduleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsu.AddCoachIDs(ids...)
}

// Mutation returns the CourseRecordScheduleMutation object of the builder.
func (crsu *CourseRecordScheduleUpdate) Mutation() *CourseRecordScheduleMutation {
	return crsu.mutation
}

// ClearMembers clears all "members" edges to the CourseRecordMember entity.
func (crsu *CourseRecordScheduleUpdate) ClearMembers() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearMembers()
	return crsu
}

// RemoveMemberIDs removes the "members" edge to CourseRecordMember entities by IDs.
func (crsu *CourseRecordScheduleUpdate) RemoveMemberIDs(ids ...int64) *CourseRecordScheduleUpdate {
	crsu.mutation.RemoveMemberIDs(ids...)
	return crsu
}

// RemoveMembers removes "members" edges to CourseRecordMember entities.
func (crsu *CourseRecordScheduleUpdate) RemoveMembers(c ...*CourseRecordMember) *CourseRecordScheduleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsu.RemoveMemberIDs(ids...)
}

// ClearCoachs clears all "coachs" edges to the CourseRecordCoach entity.
func (crsu *CourseRecordScheduleUpdate) ClearCoachs() *CourseRecordScheduleUpdate {
	crsu.mutation.ClearCoachs()
	return crsu
}

// RemoveCoachIDs removes the "coachs" edge to CourseRecordCoach entities by IDs.
func (crsu *CourseRecordScheduleUpdate) RemoveCoachIDs(ids ...int64) *CourseRecordScheduleUpdate {
	crsu.mutation.RemoveCoachIDs(ids...)
	return crsu
}

// RemoveCoachs removes "coachs" edges to CourseRecordCoach entities.
func (crsu *CourseRecordScheduleUpdate) RemoveCoachs(c ...*CourseRecordCoach) *CourseRecordScheduleUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsu.RemoveCoachIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crsu *CourseRecordScheduleUpdate) Save(ctx context.Context) (int, error) {
	crsu.defaults()
	return withHooks(ctx, crsu.sqlSave, crsu.mutation, crsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crsu *CourseRecordScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := crsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crsu *CourseRecordScheduleUpdate) Exec(ctx context.Context) error {
	_, err := crsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crsu *CourseRecordScheduleUpdate) ExecX(ctx context.Context) {
	if err := crsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crsu *CourseRecordScheduleUpdate) defaults() {
	if _, ok := crsu.mutation.UpdatedAt(); !ok {
		v := courserecordschedule.UpdateDefaultUpdatedAt()
		crsu.mutation.SetUpdatedAt(v)
	}
}

func (crsu *CourseRecordScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(courserecordschedule.Table, courserecordschedule.Columns, sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64))
	if ps := crsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crsu.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecordschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := crsu.mutation.GetType(); ok {
		_spec.SetField(courserecordschedule.FieldType, field.TypeString, value)
	}
	if crsu.mutation.TypeCleared() {
		_spec.ClearField(courserecordschedule.FieldType, field.TypeString)
	}
	if value, ok := crsu.mutation.VenueID(); ok {
		_spec.SetField(courserecordschedule.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := crsu.mutation.AddedVenueID(); ok {
		_spec.AddField(courserecordschedule.FieldVenueID, field.TypeInt64, value)
	}
	if crsu.mutation.VenueIDCleared() {
		_spec.ClearField(courserecordschedule.FieldVenueID, field.TypeInt64)
	}
	if value, ok := crsu.mutation.PlaceID(); ok {
		_spec.SetField(courserecordschedule.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := crsu.mutation.AddedPlaceID(); ok {
		_spec.AddField(courserecordschedule.FieldPlaceID, field.TypeInt64, value)
	}
	if crsu.mutation.PlaceIDCleared() {
		_spec.ClearField(courserecordschedule.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := crsu.mutation.Num(); ok {
		_spec.SetField(courserecordschedule.FieldNum, field.TypeInt64, value)
	}
	if value, ok := crsu.mutation.AddedNum(); ok {
		_spec.AddField(courserecordschedule.FieldNum, field.TypeInt64, value)
	}
	if crsu.mutation.NumCleared() {
		_spec.ClearField(courserecordschedule.FieldNum, field.TypeInt64)
	}
	if value, ok := crsu.mutation.StartTime(); ok {
		_spec.SetField(courserecordschedule.FieldStartTime, field.TypeTime, value)
	}
	if crsu.mutation.StartTimeCleared() {
		_spec.ClearField(courserecordschedule.FieldStartTime, field.TypeTime)
	}
	if value, ok := crsu.mutation.EndTime(); ok {
		_spec.SetField(courserecordschedule.FieldEndTime, field.TypeTime, value)
	}
	if crsu.mutation.EndTimeCleared() {
		_spec.ClearField(courserecordschedule.FieldEndTime, field.TypeTime)
	}
	if value, ok := crsu.mutation.Price(); ok {
		_spec.SetField(courserecordschedule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := crsu.mutation.AddedPrice(); ok {
		_spec.AddField(courserecordschedule.FieldPrice, field.TypeFloat64, value)
	}
	if crsu.mutation.PriceCleared() {
		_spec.ClearField(courserecordschedule.FieldPrice, field.TypeFloat64)
	}
	if value, ok := crsu.mutation.Status(); ok {
		_spec.SetField(courserecordschedule.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := crsu.mutation.AddedStatus(); ok {
		_spec.AddField(courserecordschedule.FieldStatus, field.TypeInt64, value)
	}
	if crsu.mutation.StatusCleared() {
		_spec.ClearField(courserecordschedule.FieldStatus, field.TypeInt64)
	}
	if crsu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !crsu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crsu.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsu.mutation.RemovedCoachsIDs(); len(nodes) > 0 && !crsu.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsu.mutation.CoachsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, crsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courserecordschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crsu.mutation.done = true
	return n, nil
}

// CourseRecordScheduleUpdateOne is the builder for updating a single CourseRecordSchedule entity.
type CourseRecordScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseRecordScheduleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetUpdatedAt(t time.Time) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.SetUpdatedAt(t)
	return crsuo
}

// SetType sets the "type" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetType(s string) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.SetType(s)
	return crsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableType(s *string) *CourseRecordScheduleUpdateOne {
	if s != nil {
		crsuo.SetType(*s)
	}
	return crsuo
}

// ClearType clears the value of the "type" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearType() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearType()
	return crsuo
}

// SetVenueID sets the "venue_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetVenueID(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ResetVenueID()
	crsuo.mutation.SetVenueID(i)
	return crsuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableVenueID(i *int64) *CourseRecordScheduleUpdateOne {
	if i != nil {
		crsuo.SetVenueID(*i)
	}
	return crsuo
}

// AddVenueID adds i to the "venue_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) AddVenueID(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddVenueID(i)
	return crsuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearVenueID() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearVenueID()
	return crsuo
}

// SetPlaceID sets the "place_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetPlaceID(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ResetPlaceID()
	crsuo.mutation.SetPlaceID(i)
	return crsuo
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillablePlaceID(i *int64) *CourseRecordScheduleUpdateOne {
	if i != nil {
		crsuo.SetPlaceID(*i)
	}
	return crsuo
}

// AddPlaceID adds i to the "place_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) AddPlaceID(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddPlaceID(i)
	return crsuo
}

// ClearPlaceID clears the value of the "place_id" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearPlaceID() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearPlaceID()
	return crsuo
}

// SetNum sets the "num" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetNum(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ResetNum()
	crsuo.mutation.SetNum(i)
	return crsuo
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableNum(i *int64) *CourseRecordScheduleUpdateOne {
	if i != nil {
		crsuo.SetNum(*i)
	}
	return crsuo
}

// AddNum adds i to the "num" field.
func (crsuo *CourseRecordScheduleUpdateOne) AddNum(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddNum(i)
	return crsuo
}

// ClearNum clears the value of the "num" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearNum() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearNum()
	return crsuo
}

// SetStartTime sets the "start_time" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetStartTime(t time.Time) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.SetStartTime(t)
	return crsuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableStartTime(t *time.Time) *CourseRecordScheduleUpdateOne {
	if t != nil {
		crsuo.SetStartTime(*t)
	}
	return crsuo
}

// ClearStartTime clears the value of the "start_time" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearStartTime() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearStartTime()
	return crsuo
}

// SetEndTime sets the "end_time" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetEndTime(t time.Time) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.SetEndTime(t)
	return crsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableEndTime(t *time.Time) *CourseRecordScheduleUpdateOne {
	if t != nil {
		crsuo.SetEndTime(*t)
	}
	return crsuo
}

// ClearEndTime clears the value of the "end_time" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearEndTime() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearEndTime()
	return crsuo
}

// SetPrice sets the "price" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetPrice(f float64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ResetPrice()
	crsuo.mutation.SetPrice(f)
	return crsuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillablePrice(f *float64) *CourseRecordScheduleUpdateOne {
	if f != nil {
		crsuo.SetPrice(*f)
	}
	return crsuo
}

// AddPrice adds f to the "price" field.
func (crsuo *CourseRecordScheduleUpdateOne) AddPrice(f float64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddPrice(f)
	return crsuo
}

// ClearPrice clears the value of the "price" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearPrice() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearPrice()
	return crsuo
}

// SetStatus sets the "status" field.
func (crsuo *CourseRecordScheduleUpdateOne) SetStatus(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ResetStatus()
	crsuo.mutation.SetStatus(i)
	return crsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crsuo *CourseRecordScheduleUpdateOne) SetNillableStatus(i *int64) *CourseRecordScheduleUpdateOne {
	if i != nil {
		crsuo.SetStatus(*i)
	}
	return crsuo
}

// AddStatus adds i to the "status" field.
func (crsuo *CourseRecordScheduleUpdateOne) AddStatus(i int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddStatus(i)
	return crsuo
}

// ClearStatus clears the value of the "status" field.
func (crsuo *CourseRecordScheduleUpdateOne) ClearStatus() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearStatus()
	return crsuo
}

// AddMemberIDs adds the "members" edge to the CourseRecordMember entity by IDs.
func (crsuo *CourseRecordScheduleUpdateOne) AddMemberIDs(ids ...int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddMemberIDs(ids...)
	return crsuo
}

// AddMembers adds the "members" edges to the CourseRecordMember entity.
func (crsuo *CourseRecordScheduleUpdateOne) AddMembers(c ...*CourseRecordMember) *CourseRecordScheduleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsuo.AddMemberIDs(ids...)
}

// AddCoachIDs adds the "coachs" edge to the CourseRecordCoach entity by IDs.
func (crsuo *CourseRecordScheduleUpdateOne) AddCoachIDs(ids ...int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.AddCoachIDs(ids...)
	return crsuo
}

// AddCoachs adds the "coachs" edges to the CourseRecordCoach entity.
func (crsuo *CourseRecordScheduleUpdateOne) AddCoachs(c ...*CourseRecordCoach) *CourseRecordScheduleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsuo.AddCoachIDs(ids...)
}

// Mutation returns the CourseRecordScheduleMutation object of the builder.
func (crsuo *CourseRecordScheduleUpdateOne) Mutation() *CourseRecordScheduleMutation {
	return crsuo.mutation
}

// ClearMembers clears all "members" edges to the CourseRecordMember entity.
func (crsuo *CourseRecordScheduleUpdateOne) ClearMembers() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearMembers()
	return crsuo
}

// RemoveMemberIDs removes the "members" edge to CourseRecordMember entities by IDs.
func (crsuo *CourseRecordScheduleUpdateOne) RemoveMemberIDs(ids ...int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.RemoveMemberIDs(ids...)
	return crsuo
}

// RemoveMembers removes "members" edges to CourseRecordMember entities.
func (crsuo *CourseRecordScheduleUpdateOne) RemoveMembers(c ...*CourseRecordMember) *CourseRecordScheduleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsuo.RemoveMemberIDs(ids...)
}

// ClearCoachs clears all "coachs" edges to the CourseRecordCoach entity.
func (crsuo *CourseRecordScheduleUpdateOne) ClearCoachs() *CourseRecordScheduleUpdateOne {
	crsuo.mutation.ClearCoachs()
	return crsuo
}

// RemoveCoachIDs removes the "coachs" edge to CourseRecordCoach entities by IDs.
func (crsuo *CourseRecordScheduleUpdateOne) RemoveCoachIDs(ids ...int64) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.RemoveCoachIDs(ids...)
	return crsuo
}

// RemoveCoachs removes "coachs" edges to CourseRecordCoach entities.
func (crsuo *CourseRecordScheduleUpdateOne) RemoveCoachs(c ...*CourseRecordCoach) *CourseRecordScheduleUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crsuo.RemoveCoachIDs(ids...)
}

// Where appends a list predicates to the CourseRecordScheduleUpdate builder.
func (crsuo *CourseRecordScheduleUpdateOne) Where(ps ...predicate.CourseRecordSchedule) *CourseRecordScheduleUpdateOne {
	crsuo.mutation.Where(ps...)
	return crsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crsuo *CourseRecordScheduleUpdateOne) Select(field string, fields ...string) *CourseRecordScheduleUpdateOne {
	crsuo.fields = append([]string{field}, fields...)
	return crsuo
}

// Save executes the query and returns the updated CourseRecordSchedule entity.
func (crsuo *CourseRecordScheduleUpdateOne) Save(ctx context.Context) (*CourseRecordSchedule, error) {
	crsuo.defaults()
	return withHooks(ctx, crsuo.sqlSave, crsuo.mutation, crsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crsuo *CourseRecordScheduleUpdateOne) SaveX(ctx context.Context) *CourseRecordSchedule {
	node, err := crsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crsuo *CourseRecordScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := crsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crsuo *CourseRecordScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := crsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crsuo *CourseRecordScheduleUpdateOne) defaults() {
	if _, ok := crsuo.mutation.UpdatedAt(); !ok {
		v := courserecordschedule.UpdateDefaultUpdatedAt()
		crsuo.mutation.SetUpdatedAt(v)
	}
}

func (crsuo *CourseRecordScheduleUpdateOne) sqlSave(ctx context.Context) (_node *CourseRecordSchedule, err error) {
	_spec := sqlgraph.NewUpdateSpec(courserecordschedule.Table, courserecordschedule.Columns, sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64))
	id, ok := crsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseRecordSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, courserecordschedule.FieldID)
		for _, f := range fields {
			if !courserecordschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != courserecordschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecordschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := crsuo.mutation.GetType(); ok {
		_spec.SetField(courserecordschedule.FieldType, field.TypeString, value)
	}
	if crsuo.mutation.TypeCleared() {
		_spec.ClearField(courserecordschedule.FieldType, field.TypeString)
	}
	if value, ok := crsuo.mutation.VenueID(); ok {
		_spec.SetField(courserecordschedule.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := crsuo.mutation.AddedVenueID(); ok {
		_spec.AddField(courserecordschedule.FieldVenueID, field.TypeInt64, value)
	}
	if crsuo.mutation.VenueIDCleared() {
		_spec.ClearField(courserecordschedule.FieldVenueID, field.TypeInt64)
	}
	if value, ok := crsuo.mutation.PlaceID(); ok {
		_spec.SetField(courserecordschedule.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := crsuo.mutation.AddedPlaceID(); ok {
		_spec.AddField(courserecordschedule.FieldPlaceID, field.TypeInt64, value)
	}
	if crsuo.mutation.PlaceIDCleared() {
		_spec.ClearField(courserecordschedule.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := crsuo.mutation.Num(); ok {
		_spec.SetField(courserecordschedule.FieldNum, field.TypeInt64, value)
	}
	if value, ok := crsuo.mutation.AddedNum(); ok {
		_spec.AddField(courserecordschedule.FieldNum, field.TypeInt64, value)
	}
	if crsuo.mutation.NumCleared() {
		_spec.ClearField(courserecordschedule.FieldNum, field.TypeInt64)
	}
	if value, ok := crsuo.mutation.StartTime(); ok {
		_spec.SetField(courserecordschedule.FieldStartTime, field.TypeTime, value)
	}
	if crsuo.mutation.StartTimeCleared() {
		_spec.ClearField(courserecordschedule.FieldStartTime, field.TypeTime)
	}
	if value, ok := crsuo.mutation.EndTime(); ok {
		_spec.SetField(courserecordschedule.FieldEndTime, field.TypeTime, value)
	}
	if crsuo.mutation.EndTimeCleared() {
		_spec.ClearField(courserecordschedule.FieldEndTime, field.TypeTime)
	}
	if value, ok := crsuo.mutation.Price(); ok {
		_spec.SetField(courserecordschedule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := crsuo.mutation.AddedPrice(); ok {
		_spec.AddField(courserecordschedule.FieldPrice, field.TypeFloat64, value)
	}
	if crsuo.mutation.PriceCleared() {
		_spec.ClearField(courserecordschedule.FieldPrice, field.TypeFloat64)
	}
	if value, ok := crsuo.mutation.Status(); ok {
		_spec.SetField(courserecordschedule.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := crsuo.mutation.AddedStatus(); ok {
		_spec.AddField(courserecordschedule.FieldStatus, field.TypeInt64, value)
	}
	if crsuo.mutation.StatusCleared() {
		_spec.ClearField(courserecordschedule.FieldStatus, field.TypeInt64)
	}
	if crsuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !crsuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.MembersTable,
			Columns: []string{courserecordschedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordmember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crsuo.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsuo.mutation.RemovedCoachsIDs(); len(nodes) > 0 && !crsuo.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crsuo.mutation.CoachsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   courserecordschedule.CoachsTable,
			Columns: []string{courserecordschedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CourseRecordSchedule{config: crsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courserecordschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crsuo.mutation.done = true
	return _node, nil
}

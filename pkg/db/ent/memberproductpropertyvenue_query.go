// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/memberproductpropertyvenue"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyVenueQuery is the builder for querying MemberProductPropertyVenue entities.
type MemberProductPropertyVenueQuery struct {
	config
	ctx        *QueryContext
	order      []memberproductpropertyvenue.OrderOption
	inters     []Interceptor
	predicates []predicate.MemberProductPropertyVenue
	withOwner  *MemberProductPropertyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MemberProductPropertyVenueQuery builder.
func (mppvq *MemberProductPropertyVenueQuery) Where(ps ...predicate.MemberProductPropertyVenue) *MemberProductPropertyVenueQuery {
	mppvq.predicates = append(mppvq.predicates, ps...)
	return mppvq
}

// Limit the number of records to be returned by this query.
func (mppvq *MemberProductPropertyVenueQuery) Limit(limit int) *MemberProductPropertyVenueQuery {
	mppvq.ctx.Limit = &limit
	return mppvq
}

// Offset to start from.
func (mppvq *MemberProductPropertyVenueQuery) Offset(offset int) *MemberProductPropertyVenueQuery {
	mppvq.ctx.Offset = &offset
	return mppvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mppvq *MemberProductPropertyVenueQuery) Unique(unique bool) *MemberProductPropertyVenueQuery {
	mppvq.ctx.Unique = &unique
	return mppvq
}

// Order specifies how the records should be ordered.
func (mppvq *MemberProductPropertyVenueQuery) Order(o ...memberproductpropertyvenue.OrderOption) *MemberProductPropertyVenueQuery {
	mppvq.order = append(mppvq.order, o...)
	return mppvq
}

// QueryOwner chains the current query on the "owner" edge.
func (mppvq *MemberProductPropertyVenueQuery) QueryOwner() *MemberProductPropertyQuery {
	query := (&MemberProductPropertyClient{config: mppvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mppvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mppvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(memberproductpropertyvenue.Table, memberproductpropertyvenue.FieldID, selector),
			sqlgraph.To(memberproductproperty.Table, memberproductproperty.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, memberproductpropertyvenue.OwnerTable, memberproductpropertyvenue.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(mppvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MemberProductPropertyVenue entity from the query.
// Returns a *NotFoundError when no MemberProductPropertyVenue was found.
func (mppvq *MemberProductPropertyVenueQuery) First(ctx context.Context) (*MemberProductPropertyVenue, error) {
	nodes, err := mppvq.Limit(1).All(setContextOp(ctx, mppvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{memberproductpropertyvenue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) FirstX(ctx context.Context) *MemberProductPropertyVenue {
	node, err := mppvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MemberProductPropertyVenue ID from the query.
// Returns a *NotFoundError when no MemberProductPropertyVenue ID was found.
func (mppvq *MemberProductPropertyVenueQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mppvq.Limit(1).IDs(setContextOp(ctx, mppvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{memberproductpropertyvenue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) FirstIDX(ctx context.Context) int64 {
	id, err := mppvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MemberProductPropertyVenue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MemberProductPropertyVenue entity is found.
// Returns a *NotFoundError when no MemberProductPropertyVenue entities are found.
func (mppvq *MemberProductPropertyVenueQuery) Only(ctx context.Context) (*MemberProductPropertyVenue, error) {
	nodes, err := mppvq.Limit(2).All(setContextOp(ctx, mppvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{memberproductpropertyvenue.Label}
	default:
		return nil, &NotSingularError{memberproductpropertyvenue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) OnlyX(ctx context.Context) *MemberProductPropertyVenue {
	node, err := mppvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MemberProductPropertyVenue ID in the query.
// Returns a *NotSingularError when more than one MemberProductPropertyVenue ID is found.
// Returns a *NotFoundError when no entities are found.
func (mppvq *MemberProductPropertyVenueQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = mppvq.Limit(2).IDs(setContextOp(ctx, mppvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{memberproductpropertyvenue.Label}
	default:
		err = &NotSingularError{memberproductpropertyvenue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := mppvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MemberProductPropertyVenues.
func (mppvq *MemberProductPropertyVenueQuery) All(ctx context.Context) ([]*MemberProductPropertyVenue, error) {
	ctx = setContextOp(ctx, mppvq.ctx, "All")
	if err := mppvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MemberProductPropertyVenue, *MemberProductPropertyVenueQuery]()
	return withInterceptors[[]*MemberProductPropertyVenue](ctx, mppvq, qr, mppvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) AllX(ctx context.Context) []*MemberProductPropertyVenue {
	nodes, err := mppvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MemberProductPropertyVenue IDs.
func (mppvq *MemberProductPropertyVenueQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if mppvq.ctx.Unique == nil && mppvq.path != nil {
		mppvq.Unique(true)
	}
	ctx = setContextOp(ctx, mppvq.ctx, "IDs")
	if err = mppvq.Select(memberproductpropertyvenue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) IDsX(ctx context.Context) []int64 {
	ids, err := mppvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mppvq *MemberProductPropertyVenueQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mppvq.ctx, "Count")
	if err := mppvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mppvq, querierCount[*MemberProductPropertyVenueQuery](), mppvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) CountX(ctx context.Context) int {
	count, err := mppvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mppvq *MemberProductPropertyVenueQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mppvq.ctx, "Exist")
	switch _, err := mppvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mppvq *MemberProductPropertyVenueQuery) ExistX(ctx context.Context) bool {
	exist, err := mppvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MemberProductPropertyVenueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mppvq *MemberProductPropertyVenueQuery) Clone() *MemberProductPropertyVenueQuery {
	if mppvq == nil {
		return nil
	}
	return &MemberProductPropertyVenueQuery{
		config:     mppvq.config,
		ctx:        mppvq.ctx.Clone(),
		order:      append([]memberproductpropertyvenue.OrderOption{}, mppvq.order...),
		inters:     append([]Interceptor{}, mppvq.inters...),
		predicates: append([]predicate.MemberProductPropertyVenue{}, mppvq.predicates...),
		withOwner:  mppvq.withOwner.Clone(),
		// clone intermediate query.
		sql:  mppvq.sql.Clone(),
		path: mppvq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (mppvq *MemberProductPropertyVenueQuery) WithOwner(opts ...func(*MemberProductPropertyQuery)) *MemberProductPropertyVenueQuery {
	query := (&MemberProductPropertyClient{config: mppvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mppvq.withOwner = query
	return mppvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MemberProductPropertyVenue.Query().
//		GroupBy(memberproductpropertyvenue.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mppvq *MemberProductPropertyVenueQuery) GroupBy(field string, fields ...string) *MemberProductPropertyVenueGroupBy {
	mppvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MemberProductPropertyVenueGroupBy{build: mppvq}
	grbuild.flds = &mppvq.ctx.Fields
	grbuild.label = memberproductpropertyvenue.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MemberProductPropertyVenue.Query().
//		Select(memberproductpropertyvenue.FieldCreatedAt).
//		Scan(ctx, &v)
func (mppvq *MemberProductPropertyVenueQuery) Select(fields ...string) *MemberProductPropertyVenueSelect {
	mppvq.ctx.Fields = append(mppvq.ctx.Fields, fields...)
	sbuild := &MemberProductPropertyVenueSelect{MemberProductPropertyVenueQuery: mppvq}
	sbuild.label = memberproductpropertyvenue.Label
	sbuild.flds, sbuild.scan = &mppvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MemberProductPropertyVenueSelect configured with the given aggregations.
func (mppvq *MemberProductPropertyVenueQuery) Aggregate(fns ...AggregateFunc) *MemberProductPropertyVenueSelect {
	return mppvq.Select().Aggregate(fns...)
}

func (mppvq *MemberProductPropertyVenueQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mppvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mppvq); err != nil {
				return err
			}
		}
	}
	for _, f := range mppvq.ctx.Fields {
		if !memberproductpropertyvenue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mppvq.path != nil {
		prev, err := mppvq.path(ctx)
		if err != nil {
			return err
		}
		mppvq.sql = prev
	}
	return nil
}

func (mppvq *MemberProductPropertyVenueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MemberProductPropertyVenue, error) {
	var (
		nodes       = []*MemberProductPropertyVenue{}
		_spec       = mppvq.querySpec()
		loadedTypes = [1]bool{
			mppvq.withOwner != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MemberProductPropertyVenue).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MemberProductPropertyVenue{config: mppvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mppvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mppvq.withOwner; query != nil {
		if err := mppvq.loadOwner(ctx, query, nodes, nil,
			func(n *MemberProductPropertyVenue, e *MemberProductProperty) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mppvq *MemberProductPropertyVenueQuery) loadOwner(ctx context.Context, query *MemberProductPropertyQuery, nodes []*MemberProductPropertyVenue, init func(*MemberProductPropertyVenue), assign func(*MemberProductPropertyVenue, *MemberProductProperty)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*MemberProductPropertyVenue)
	for i := range nodes {
		fk := nodes[i].MemberProductPropertyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(memberproductproperty.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_product_property_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mppvq *MemberProductPropertyVenueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mppvq.querySpec()
	_spec.Node.Columns = mppvq.ctx.Fields
	if len(mppvq.ctx.Fields) > 0 {
		_spec.Unique = mppvq.ctx.Unique != nil && *mppvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mppvq.driver, _spec)
}

func (mppvq *MemberProductPropertyVenueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(memberproductpropertyvenue.Table, memberproductpropertyvenue.Columns, sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64))
	_spec.From = mppvq.sql
	if unique := mppvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mppvq.path != nil {
		_spec.Unique = true
	}
	if fields := mppvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberproductpropertyvenue.FieldID)
		for i := range fields {
			if fields[i] != memberproductpropertyvenue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mppvq.withOwner != nil {
			_spec.Node.AddColumnOnce(memberproductpropertyvenue.FieldMemberProductPropertyID)
		}
	}
	if ps := mppvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mppvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mppvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mppvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mppvq *MemberProductPropertyVenueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mppvq.driver.Dialect())
	t1 := builder.Table(memberproductpropertyvenue.Table)
	columns := mppvq.ctx.Fields
	if len(columns) == 0 {
		columns = memberproductpropertyvenue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mppvq.sql != nil {
		selector = mppvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mppvq.ctx.Unique != nil && *mppvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mppvq.predicates {
		p(selector)
	}
	for _, p := range mppvq.order {
		p(selector)
	}
	if offset := mppvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mppvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MemberProductPropertyVenueGroupBy is the group-by builder for MemberProductPropertyVenue entities.
type MemberProductPropertyVenueGroupBy struct {
	selector
	build *MemberProductPropertyVenueQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mppvgb *MemberProductPropertyVenueGroupBy) Aggregate(fns ...AggregateFunc) *MemberProductPropertyVenueGroupBy {
	mppvgb.fns = append(mppvgb.fns, fns...)
	return mppvgb
}

// Scan applies the selector query and scans the result into the given value.
func (mppvgb *MemberProductPropertyVenueGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mppvgb.build.ctx, "GroupBy")
	if err := mppvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MemberProductPropertyVenueQuery, *MemberProductPropertyVenueGroupBy](ctx, mppvgb.build, mppvgb, mppvgb.build.inters, v)
}

func (mppvgb *MemberProductPropertyVenueGroupBy) sqlScan(ctx context.Context, root *MemberProductPropertyVenueQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mppvgb.fns))
	for _, fn := range mppvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mppvgb.flds)+len(mppvgb.fns))
		for _, f := range *mppvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mppvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mppvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MemberProductPropertyVenueSelect is the builder for selecting fields of MemberProductPropertyVenue entities.
type MemberProductPropertyVenueSelect struct {
	*MemberProductPropertyVenueQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mppvs *MemberProductPropertyVenueSelect) Aggregate(fns ...AggregateFunc) *MemberProductPropertyVenueSelect {
	mppvs.fns = append(mppvs.fns, fns...)
	return mppvs
}

// Scan applies the selector query and scans the result into the given value.
func (mppvs *MemberProductPropertyVenueSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mppvs.ctx, "Select")
	if err := mppvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MemberProductPropertyVenueQuery, *MemberProductPropertyVenueSelect](ctx, mppvs.MemberProductPropertyVenueQuery, mppvs, mppvs.inters, v)
}

func (mppvs *MemberProductPropertyVenueSelect) sqlScan(ctx context.Context, root *MemberProductPropertyVenueQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mppvs.fns))
	for _, fn := range mppvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mppvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mppvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/courserecordcoach"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordCoachDelete is the builder for deleting a CourseRecordCoach entity.
type CourseRecordCoachDelete struct {
	config
	hooks    []Hook
	mutation *CourseRecordCoachMutation
}

// Where appends a list predicates to the CourseRecordCoachDelete builder.
func (crcd *CourseRecordCoachDelete) Where(ps ...predicate.CourseRecordCoach) *CourseRecordCoachDelete {
	crcd.mutation.Where(ps...)
	return crcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (crcd *CourseRecordCoachDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, crcd.sqlExec, crcd.mutation, crcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (crcd *CourseRecordCoachDelete) ExecX(ctx context.Context) int {
	n, err := crcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (crcd *CourseRecordCoachDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(courserecordcoach.Table, sqlgraph.NewFieldSpec(courserecordcoach.FieldID, field.TypeInt64))
	if ps := crcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, crcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	crcd.mutation.done = true
	return affected, err
}

// CourseRecordCoachDeleteOne is the builder for deleting a single CourseRecordCoach entity.
type CourseRecordCoachDeleteOne struct {
	crcd *CourseRecordCoachDelete
}

// Where appends a list predicates to the CourseRecordCoachDelete builder.
func (crcdo *CourseRecordCoachDeleteOne) Where(ps ...predicate.CourseRecordCoach) *CourseRecordCoachDeleteOne {
	crcdo.crcd.mutation.Where(ps...)
	return crcdo
}

// Exec executes the deletion query.
func (crcdo *CourseRecordCoachDeleteOne) Exec(ctx context.Context) error {
	n, err := crcdo.crcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{courserecordcoach.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (crcdo *CourseRecordCoachDeleteOne) ExecX(ctx context.Context) {
	if err := crcdo.Exec(ctx); err != nil {
		panic(err)
	}
}

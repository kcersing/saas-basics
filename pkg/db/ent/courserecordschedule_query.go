// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"saas/pkg/db/ent/courserecordcoach"
	"saas/pkg/db/ent/courserecordmember"
	"saas/pkg/db/ent/courserecordschedule"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordScheduleQuery is the builder for querying CourseRecordSchedule entities.
type CourseRecordScheduleQuery struct {
	config
	ctx         *QueryContext
	order       []courserecordschedule.OrderOption
	inters      []Interceptor
	predicates  []predicate.CourseRecordSchedule
	withMembers *CourseRecordMemberQuery
	withCoachs  *CourseRecordCoachQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CourseRecordScheduleQuery builder.
func (crsq *CourseRecordScheduleQuery) Where(ps ...predicate.CourseRecordSchedule) *CourseRecordScheduleQuery {
	crsq.predicates = append(crsq.predicates, ps...)
	return crsq
}

// Limit the number of records to be returned by this query.
func (crsq *CourseRecordScheduleQuery) Limit(limit int) *CourseRecordScheduleQuery {
	crsq.ctx.Limit = &limit
	return crsq
}

// Offset to start from.
func (crsq *CourseRecordScheduleQuery) Offset(offset int) *CourseRecordScheduleQuery {
	crsq.ctx.Offset = &offset
	return crsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crsq *CourseRecordScheduleQuery) Unique(unique bool) *CourseRecordScheduleQuery {
	crsq.ctx.Unique = &unique
	return crsq
}

// Order specifies how the records should be ordered.
func (crsq *CourseRecordScheduleQuery) Order(o ...courserecordschedule.OrderOption) *CourseRecordScheduleQuery {
	crsq.order = append(crsq.order, o...)
	return crsq
}

// QueryMembers chains the current query on the "members" edge.
func (crsq *CourseRecordScheduleQuery) QueryMembers() *CourseRecordMemberQuery {
	query := (&CourseRecordMemberClient{config: crsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(courserecordschedule.Table, courserecordschedule.FieldID, selector),
			sqlgraph.To(courserecordmember.Table, courserecordmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, courserecordschedule.MembersTable, courserecordschedule.MembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(crsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCoachs chains the current query on the "coachs" edge.
func (crsq *CourseRecordScheduleQuery) QueryCoachs() *CourseRecordCoachQuery {
	query := (&CourseRecordCoachClient{config: crsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(courserecordschedule.Table, courserecordschedule.FieldID, selector),
			sqlgraph.To(courserecordcoach.Table, courserecordcoach.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, courserecordschedule.CoachsTable, courserecordschedule.CoachsColumn),
		)
		fromU = sqlgraph.SetNeighbors(crsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CourseRecordSchedule entity from the query.
// Returns a *NotFoundError when no CourseRecordSchedule was found.
func (crsq *CourseRecordScheduleQuery) First(ctx context.Context) (*CourseRecordSchedule, error) {
	nodes, err := crsq.Limit(1).All(setContextOp(ctx, crsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{courserecordschedule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) FirstX(ctx context.Context) *CourseRecordSchedule {
	node, err := crsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CourseRecordSchedule ID from the query.
// Returns a *NotFoundError when no CourseRecordSchedule ID was found.
func (crsq *CourseRecordScheduleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = crsq.Limit(1).IDs(setContextOp(ctx, crsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{courserecordschedule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := crsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CourseRecordSchedule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CourseRecordSchedule entity is found.
// Returns a *NotFoundError when no CourseRecordSchedule entities are found.
func (crsq *CourseRecordScheduleQuery) Only(ctx context.Context) (*CourseRecordSchedule, error) {
	nodes, err := crsq.Limit(2).All(setContextOp(ctx, crsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{courserecordschedule.Label}
	default:
		return nil, &NotSingularError{courserecordschedule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) OnlyX(ctx context.Context) *CourseRecordSchedule {
	node, err := crsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CourseRecordSchedule ID in the query.
// Returns a *NotSingularError when more than one CourseRecordSchedule ID is found.
// Returns a *NotFoundError when no entities are found.
func (crsq *CourseRecordScheduleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = crsq.Limit(2).IDs(setContextOp(ctx, crsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{courserecordschedule.Label}
	default:
		err = &NotSingularError{courserecordschedule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := crsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CourseRecordSchedules.
func (crsq *CourseRecordScheduleQuery) All(ctx context.Context) ([]*CourseRecordSchedule, error) {
	ctx = setContextOp(ctx, crsq.ctx, "All")
	if err := crsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CourseRecordSchedule, *CourseRecordScheduleQuery]()
	return withInterceptors[[]*CourseRecordSchedule](ctx, crsq, qr, crsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) AllX(ctx context.Context) []*CourseRecordSchedule {
	nodes, err := crsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CourseRecordSchedule IDs.
func (crsq *CourseRecordScheduleQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if crsq.ctx.Unique == nil && crsq.path != nil {
		crsq.Unique(true)
	}
	ctx = setContextOp(ctx, crsq.ctx, "IDs")
	if err = crsq.Select(courserecordschedule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := crsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crsq *CourseRecordScheduleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, crsq.ctx, "Count")
	if err := crsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, crsq, querierCount[*CourseRecordScheduleQuery](), crsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) CountX(ctx context.Context) int {
	count, err := crsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crsq *CourseRecordScheduleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, crsq.ctx, "Exist")
	switch _, err := crsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (crsq *CourseRecordScheduleQuery) ExistX(ctx context.Context) bool {
	exist, err := crsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CourseRecordScheduleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crsq *CourseRecordScheduleQuery) Clone() *CourseRecordScheduleQuery {
	if crsq == nil {
		return nil
	}
	return &CourseRecordScheduleQuery{
		config:      crsq.config,
		ctx:         crsq.ctx.Clone(),
		order:       append([]courserecordschedule.OrderOption{}, crsq.order...),
		inters:      append([]Interceptor{}, crsq.inters...),
		predicates:  append([]predicate.CourseRecordSchedule{}, crsq.predicates...),
		withMembers: crsq.withMembers.Clone(),
		withCoachs:  crsq.withCoachs.Clone(),
		// clone intermediate query.
		sql:  crsq.sql.Clone(),
		path: crsq.path,
	}
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (crsq *CourseRecordScheduleQuery) WithMembers(opts ...func(*CourseRecordMemberQuery)) *CourseRecordScheduleQuery {
	query := (&CourseRecordMemberClient{config: crsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crsq.withMembers = query
	return crsq
}

// WithCoachs tells the query-builder to eager-load the nodes that are connected to
// the "coachs" edge. The optional arguments are used to configure the query builder of the edge.
func (crsq *CourseRecordScheduleQuery) WithCoachs(opts ...func(*CourseRecordCoachQuery)) *CourseRecordScheduleQuery {
	query := (&CourseRecordCoachClient{config: crsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crsq.withCoachs = query
	return crsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CourseRecordSchedule.Query().
//		GroupBy(courserecordschedule.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (crsq *CourseRecordScheduleQuery) GroupBy(field string, fields ...string) *CourseRecordScheduleGroupBy {
	crsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CourseRecordScheduleGroupBy{build: crsq}
	grbuild.flds = &crsq.ctx.Fields
	grbuild.label = courserecordschedule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CourseRecordSchedule.Query().
//		Select(courserecordschedule.FieldCreatedAt).
//		Scan(ctx, &v)
func (crsq *CourseRecordScheduleQuery) Select(fields ...string) *CourseRecordScheduleSelect {
	crsq.ctx.Fields = append(crsq.ctx.Fields, fields...)
	sbuild := &CourseRecordScheduleSelect{CourseRecordScheduleQuery: crsq}
	sbuild.label = courserecordschedule.Label
	sbuild.flds, sbuild.scan = &crsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CourseRecordScheduleSelect configured with the given aggregations.
func (crsq *CourseRecordScheduleQuery) Aggregate(fns ...AggregateFunc) *CourseRecordScheduleSelect {
	return crsq.Select().Aggregate(fns...)
}

func (crsq *CourseRecordScheduleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range crsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, crsq); err != nil {
				return err
			}
		}
	}
	for _, f := range crsq.ctx.Fields {
		if !courserecordschedule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crsq.path != nil {
		prev, err := crsq.path(ctx)
		if err != nil {
			return err
		}
		crsq.sql = prev
	}
	return nil
}

func (crsq *CourseRecordScheduleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CourseRecordSchedule, error) {
	var (
		nodes       = []*CourseRecordSchedule{}
		_spec       = crsq.querySpec()
		loadedTypes = [2]bool{
			crsq.withMembers != nil,
			crsq.withCoachs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CourseRecordSchedule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CourseRecordSchedule{config: crsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, crsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := crsq.withMembers; query != nil {
		if err := crsq.loadMembers(ctx, query, nodes,
			func(n *CourseRecordSchedule) { n.Edges.Members = []*CourseRecordMember{} },
			func(n *CourseRecordSchedule, e *CourseRecordMember) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := crsq.withCoachs; query != nil {
		if err := crsq.loadCoachs(ctx, query, nodes,
			func(n *CourseRecordSchedule) { n.Edges.Coachs = []*CourseRecordCoach{} },
			func(n *CourseRecordSchedule, e *CourseRecordCoach) { n.Edges.Coachs = append(n.Edges.Coachs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (crsq *CourseRecordScheduleQuery) loadMembers(ctx context.Context, query *CourseRecordMemberQuery, nodes []*CourseRecordSchedule, init func(*CourseRecordSchedule), assign func(*CourseRecordSchedule, *CourseRecordMember)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*CourseRecordSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(courserecordmember.FieldCourseRecordScheduleID)
	}
	query.Where(predicate.CourseRecordMember(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(courserecordschedule.MembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CourseRecordScheduleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "course_record_schedule_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (crsq *CourseRecordScheduleQuery) loadCoachs(ctx context.Context, query *CourseRecordCoachQuery, nodes []*CourseRecordSchedule, init func(*CourseRecordSchedule), assign func(*CourseRecordSchedule, *CourseRecordCoach)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*CourseRecordSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(courserecordcoach.FieldCourseRecordScheduleID)
	}
	query.Where(predicate.CourseRecordCoach(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(courserecordschedule.CoachsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CourseRecordScheduleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "course_record_schedule_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (crsq *CourseRecordScheduleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crsq.querySpec()
	_spec.Node.Columns = crsq.ctx.Fields
	if len(crsq.ctx.Fields) > 0 {
		_spec.Unique = crsq.ctx.Unique != nil && *crsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, crsq.driver, _spec)
}

func (crsq *CourseRecordScheduleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(courserecordschedule.Table, courserecordschedule.Columns, sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64))
	_spec.From = crsq.sql
	if unique := crsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if crsq.path != nil {
		_spec.Unique = true
	}
	if fields := crsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, courserecordschedule.FieldID)
		for i := range fields {
			if fields[i] != courserecordschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := crsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crsq *CourseRecordScheduleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crsq.driver.Dialect())
	t1 := builder.Table(courserecordschedule.Table)
	columns := crsq.ctx.Fields
	if len(columns) == 0 {
		columns = courserecordschedule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crsq.sql != nil {
		selector = crsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crsq.ctx.Unique != nil && *crsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range crsq.predicates {
		p(selector)
	}
	for _, p := range crsq.order {
		p(selector)
	}
	if offset := crsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CourseRecordScheduleGroupBy is the group-by builder for CourseRecordSchedule entities.
type CourseRecordScheduleGroupBy struct {
	selector
	build *CourseRecordScheduleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crsgb *CourseRecordScheduleGroupBy) Aggregate(fns ...AggregateFunc) *CourseRecordScheduleGroupBy {
	crsgb.fns = append(crsgb.fns, fns...)
	return crsgb
}

// Scan applies the selector query and scans the result into the given value.
func (crsgb *CourseRecordScheduleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crsgb.build.ctx, "GroupBy")
	if err := crsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CourseRecordScheduleQuery, *CourseRecordScheduleGroupBy](ctx, crsgb.build, crsgb, crsgb.build.inters, v)
}

func (crsgb *CourseRecordScheduleGroupBy) sqlScan(ctx context.Context, root *CourseRecordScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(crsgb.fns))
	for _, fn := range crsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*crsgb.flds)+len(crsgb.fns))
		for _, f := range *crsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*crsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CourseRecordScheduleSelect is the builder for selecting fields of CourseRecordSchedule entities.
type CourseRecordScheduleSelect struct {
	*CourseRecordScheduleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (crss *CourseRecordScheduleSelect) Aggregate(fns ...AggregateFunc) *CourseRecordScheduleSelect {
	crss.fns = append(crss.fns, fns...)
	return crss
}

// Scan applies the selector query and scans the result into the given value.
func (crss *CourseRecordScheduleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crss.ctx, "Select")
	if err := crss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CourseRecordScheduleQuery, *CourseRecordScheduleSelect](ctx, crss.CourseRecordScheduleQuery, crss, crss.inters, v)
}

func (crss *CourseRecordScheduleSelect) sqlScan(ctx context.Context, root *CourseRecordScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(crss.fns))
	for _, fn := range crss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*crss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(i int) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(i)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(i *int) *UserUpdate {
	if i != nil {
		uu.SetGender(*i)
	}
	return uu
}

// AddGender adds i to the "gender" field.
func (uu *UserUpdate) AddGender(i int) *UserUpdate {
	uu.mutation.AddGender(i)
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UserUpdate) ClearGender() *UserUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetAge sets the "age" field.
func (uu *UserUpdate) SetAge(i int) *UserUpdate {
	uu.mutation.ResetAge()
	uu.mutation.SetAge(i)
	return uu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAge(i *int) *UserUpdate {
	if i != nil {
		uu.SetAge(*i)
	}
	return uu
}

// AddAge adds i to the "age" field.
func (uu *UserUpdate) AddAge(i int) *UserUpdate {
	uu.mutation.AddAge(i)
	return uu
}

// ClearAge clears the value of the "age" field.
func (uu *UserUpdate) ClearAge() *UserUpdate {
	uu.mutation.ClearAge()
	return uu
}

// SetIntroduce sets the "introduce" field.
func (uu *UserUpdate) SetIntroduce(s string) *UserUpdate {
	uu.mutation.SetIntroduce(s)
	return uu
}

// SetNillableIntroduce sets the "introduce" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIntroduce(s *string) *UserUpdate {
	if s != nil {
		uu.SetIntroduce(*s)
	}
	return uu
}

// ClearIntroduce clears the value of the "introduce" field.
func (uu *UserUpdate) ClearIntroduce() *UserUpdate {
	uu.mutation.ClearIntroduce()
	return uu
}

// SetAccountID sets the "account_id" field.
func (uu *UserUpdate) SetAccountID(s string) *UserUpdate {
	uu.mutation.SetAccountID(s)
	return uu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountID(s *string) *UserUpdate {
	if s != nil {
		uu.SetAccountID(*s)
	}
	return uu
}

// ClearAccountID clears the value of the "account_id" field.
func (uu *UserUpdate) ClearAccountID() *UserUpdate {
	uu.mutation.ClearAccountID()
	return uu
}

// SetAvatarBlobID sets the "avatar_blob_id" field.
func (uu *UserUpdate) SetAvatarBlobID(s string) *UserUpdate {
	uu.mutation.SetAvatarBlobID(s)
	return uu
}

// SetNillableAvatarBlobID sets the "avatar_blob_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarBlobID(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarBlobID(*s)
	}
	return uu
}

// ClearAvatarBlobID clears the value of the "avatar_blob_id" field.
func (uu *UserUpdate) ClearAvatarBlobID() *UserUpdate {
	uu.mutation.ClearAvatarBlobID()
	return uu
}

// SetOpenID sets the "open_id" field.
func (uu *UserUpdate) SetOpenID(s string) *UserUpdate {
	uu.mutation.SetOpenID(s)
	return uu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOpenID(s *string) *UserUpdate {
	if s != nil {
		uu.SetOpenID(*s)
	}
	return uu
}

// ClearOpenID clears the value of the "open_id" field.
func (uu *UserUpdate) ClearOpenID() *UserUpdate {
	uu.mutation.ClearOpenID()
	return uu
}

// SetBalance sets the "balance" field.
func (uu *UserUpdate) SetBalance(i int) *UserUpdate {
	uu.mutation.ResetBalance()
	uu.mutation.SetBalance(i)
	return uu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBalance(i *int) *UserUpdate {
	if i != nil {
		uu.SetBalance(*i)
	}
	return uu
}

// AddBalance adds i to the "balance" field.
func (uu *UserUpdate) AddBalance(i int) *UserUpdate {
	uu.mutation.AddBalance(i)
	return uu
}

// ClearBalance clears the value of the "balance" field.
func (uu *UserUpdate) ClearBalance() *UserUpdate {
	uu.mutation.ClearBalance()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt, value)
	}
	if uu.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt)
	}
	if value, ok := uu.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if uu.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := uu.mutation.Introduce(); ok {
		_spec.SetField(user.FieldIntroduce, field.TypeString, value)
	}
	if uu.mutation.IntroduceCleared() {
		_spec.ClearField(user.FieldIntroduce, field.TypeString)
	}
	if value, ok := uu.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeString, value)
	}
	if uu.mutation.AccountIDCleared() {
		_spec.ClearField(user.FieldAccountID, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarBlobID(); ok {
		_spec.SetField(user.FieldAvatarBlobID, field.TypeString, value)
	}
	if uu.mutation.AvatarBlobIDCleared() {
		_spec.ClearField(user.FieldAvatarBlobID, field.TypeString)
	}
	if value, ok := uu.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if uu.mutation.OpenIDCleared() {
		_spec.ClearField(user.FieldOpenID, field.TypeString)
	}
	if value, ok := uu.mutation.Balance(); ok {
		_spec.SetField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBalance(); ok {
		_spec.AddField(user.FieldBalance, field.TypeInt, value)
	}
	if uu.mutation.BalanceCleared() {
		_spec.ClearField(user.FieldBalance, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(i int) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(i)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGender(*i)
	}
	return uuo
}

// AddGender adds i to the "gender" field.
func (uuo *UserUpdateOne) AddGender(i int) *UserUpdateOne {
	uuo.mutation.AddGender(i)
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UserUpdateOne) ClearGender() *UserUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetAge sets the "age" field.
func (uuo *UserUpdateOne) SetAge(i int) *UserUpdateOne {
	uuo.mutation.ResetAge()
	uuo.mutation.SetAge(i)
	return uuo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAge(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAge(*i)
	}
	return uuo
}

// AddAge adds i to the "age" field.
func (uuo *UserUpdateOne) AddAge(i int) *UserUpdateOne {
	uuo.mutation.AddAge(i)
	return uuo
}

// ClearAge clears the value of the "age" field.
func (uuo *UserUpdateOne) ClearAge() *UserUpdateOne {
	uuo.mutation.ClearAge()
	return uuo
}

// SetIntroduce sets the "introduce" field.
func (uuo *UserUpdateOne) SetIntroduce(s string) *UserUpdateOne {
	uuo.mutation.SetIntroduce(s)
	return uuo
}

// SetNillableIntroduce sets the "introduce" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIntroduce(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIntroduce(*s)
	}
	return uuo
}

// ClearIntroduce clears the value of the "introduce" field.
func (uuo *UserUpdateOne) ClearIntroduce() *UserUpdateOne {
	uuo.mutation.ClearIntroduce()
	return uuo
}

// SetAccountID sets the "account_id" field.
func (uuo *UserUpdateOne) SetAccountID(s string) *UserUpdateOne {
	uuo.mutation.SetAccountID(s)
	return uuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAccountID(*s)
	}
	return uuo
}

// ClearAccountID clears the value of the "account_id" field.
func (uuo *UserUpdateOne) ClearAccountID() *UserUpdateOne {
	uuo.mutation.ClearAccountID()
	return uuo
}

// SetAvatarBlobID sets the "avatar_blob_id" field.
func (uuo *UserUpdateOne) SetAvatarBlobID(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarBlobID(s)
	return uuo
}

// SetNillableAvatarBlobID sets the "avatar_blob_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarBlobID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarBlobID(*s)
	}
	return uuo
}

// ClearAvatarBlobID clears the value of the "avatar_blob_id" field.
func (uuo *UserUpdateOne) ClearAvatarBlobID() *UserUpdateOne {
	uuo.mutation.ClearAvatarBlobID()
	return uuo
}

// SetOpenID sets the "open_id" field.
func (uuo *UserUpdateOne) SetOpenID(s string) *UserUpdateOne {
	uuo.mutation.SetOpenID(s)
	return uuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOpenID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOpenID(*s)
	}
	return uuo
}

// ClearOpenID clears the value of the "open_id" field.
func (uuo *UserUpdateOne) ClearOpenID() *UserUpdateOne {
	uuo.mutation.ClearOpenID()
	return uuo
}

// SetBalance sets the "balance" field.
func (uuo *UserUpdateOne) SetBalance(i int) *UserUpdateOne {
	uuo.mutation.ResetBalance()
	uuo.mutation.SetBalance(i)
	return uuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBalance(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBalance(*i)
	}
	return uuo
}

// AddBalance adds i to the "balance" field.
func (uuo *UserUpdateOne) AddBalance(i int) *UserUpdateOne {
	uuo.mutation.AddBalance(i)
	return uuo
}

// ClearBalance clears the value of the "balance" field.
func (uuo *UserUpdateOne) ClearBalance() *UserUpdateOne {
	uuo.mutation.ClearBalance()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt, value)
	}
	if uuo.mutation.GenderCleared() {
		_spec.ClearField(user.FieldGender, field.TypeInt)
	}
	if value, ok := uuo.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if uuo.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := uuo.mutation.Introduce(); ok {
		_spec.SetField(user.FieldIntroduce, field.TypeString, value)
	}
	if uuo.mutation.IntroduceCleared() {
		_spec.ClearField(user.FieldIntroduce, field.TypeString)
	}
	if value, ok := uuo.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeString, value)
	}
	if uuo.mutation.AccountIDCleared() {
		_spec.ClearField(user.FieldAccountID, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarBlobID(); ok {
		_spec.SetField(user.FieldAvatarBlobID, field.TypeString, value)
	}
	if uuo.mutation.AvatarBlobIDCleared() {
		_spec.ClearField(user.FieldAvatarBlobID, field.TypeString)
	}
	if value, ok := uuo.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if uuo.mutation.OpenIDCleared() {
		_spec.ClearField(user.FieldOpenID, field.TypeString)
	}
	if value, ok := uuo.mutation.Balance(); ok {
		_spec.SetField(user.FieldBalance, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBalance(); ok {
		_spec.AddField(user.FieldBalance, field.TypeInt, value)
	}
	if uuo.mutation.BalanceCleared() {
		_spec.ClearField(user.FieldBalance, field.TypeInt)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

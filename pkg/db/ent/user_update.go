// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/idl_gen/model/user"
	"saas/pkg/db/ent/dictionarydetail"
	"saas/pkg/db/ent/entrylogs"
	"saas/pkg/db/ent/order"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/token"
	entuser "saas/pkg/db/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int64) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int64) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int64) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// ClearStatus clears the value of the "status" field.
func (uu *UserUpdate) ClearStatus() *UserUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetMobile sets the "mobile" field.
func (uu *UserUpdate) SetMobile(s string) *UserUpdate {
	uu.mutation.SetMobile(s)
	return uu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMobile(s *string) *UserUpdate {
	if s != nil {
		uu.SetMobile(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(i int64) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(i)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(i *int64) *UserUpdate {
	if i != nil {
		uu.SetGender(*i)
	}
	return uu
}

// AddGender adds i to the "gender" field.
func (uu *UserUpdate) AddGender(i int64) *UserUpdate {
	uu.mutation.AddGender(i)
	return uu
}

// ClearGender clears the value of the "gender" field.
func (uu *UserUpdate) ClearGender() *UserUpdate {
	uu.mutation.ClearGender()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetFunctions sets the "functions" field.
func (uu *UserUpdate) SetFunctions(u user.Functions) *UserUpdate {
	uu.mutation.SetFunctions(u)
	return uu
}

// SetNillableFunctions sets the "functions" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFunctions(u *user.Functions) *UserUpdate {
	if u != nil {
		uu.SetFunctions(*u)
	}
	return uu
}

// SetJobTime sets the "job_time" field.
func (uu *UserUpdate) SetJobTime(i int64) *UserUpdate {
	uu.mutation.ResetJobTime()
	uu.mutation.SetJobTime(i)
	return uu
}

// SetNillableJobTime sets the "job_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJobTime(i *int64) *UserUpdate {
	if i != nil {
		uu.SetJobTime(*i)
	}
	return uu
}

// AddJobTime adds i to the "job_time" field.
func (uu *UserUpdate) AddJobTime(i int64) *UserUpdate {
	uu.mutation.AddJobTime(i)
	return uu
}

// ClearJobTime clears the value of the "job_time" field.
func (uu *UserUpdate) ClearJobTime() *UserUpdate {
	uu.mutation.ClearJobTime()
	return uu
}

// SetRoleID sets the "role_id" field.
func (uu *UserUpdate) SetRoleID(i int64) *UserUpdate {
	uu.mutation.ResetRoleID()
	uu.mutation.SetRoleID(i)
	return uu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetRoleID(*i)
	}
	return uu
}

// AddRoleID adds i to the "role_id" field.
func (uu *UserUpdate) AddRoleID(i int64) *UserUpdate {
	uu.mutation.AddRoleID(i)
	return uu
}

// ClearRoleID clears the value of the "role_id" field.
func (uu *UserUpdate) ClearRoleID() *UserUpdate {
	uu.mutation.ClearRoleID()
	return uu
}

// SetDefaultVenueID sets the "default_venue_id" field.
func (uu *UserUpdate) SetDefaultVenueID(i int64) *UserUpdate {
	uu.mutation.ResetDefaultVenueID()
	uu.mutation.SetDefaultVenueID(i)
	return uu
}

// SetNillableDefaultVenueID sets the "default_venue_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDefaultVenueID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDefaultVenueID(*i)
	}
	return uu
}

// AddDefaultVenueID adds i to the "default_venue_id" field.
func (uu *UserUpdate) AddDefaultVenueID(i int64) *UserUpdate {
	uu.mutation.AddDefaultVenueID(i)
	return uu
}

// ClearDefaultVenueID clears the value of the "default_venue_id" field.
func (uu *UserUpdate) ClearDefaultVenueID() *UserUpdate {
	uu.mutation.ClearDefaultVenueID()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetDetail sets the "detail" field.
func (uu *UserUpdate) SetDetail(s string) *UserUpdate {
	uu.mutation.SetDetail(s)
	return uu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDetail(s *string) *UserUpdate {
	if s != nil {
		uu.SetDetail(*s)
	}
	return uu
}

// ClearDetail clears the value of the "detail" field.
func (uu *UserUpdate) ClearDetail() *UserUpdate {
	uu.mutation.ClearDetail()
	return uu
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (uu *UserUpdate) SetTokenID(id int64) *UserUpdate {
	uu.mutation.SetTokenID(id)
	return uu
}

// SetNillableTokenID sets the "token" edge to the Token entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableTokenID(id *int64) *UserUpdate {
	if id != nil {
		uu = uu.SetTokenID(*id)
	}
	return uu
}

// SetToken sets the "token" edge to the Token entity.
func (uu *UserUpdate) SetToken(t *Token) *UserUpdate {
	return uu.SetTokenID(t.ID)
}

// SetTagsID sets the "tags" edge to the DictionaryDetail entity by ID.
func (uu *UserUpdate) SetTagsID(id int64) *UserUpdate {
	uu.mutation.SetTagsID(id)
	return uu
}

// SetNillableTagsID sets the "tags" edge to the DictionaryDetail entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableTagsID(id *int64) *UserUpdate {
	if id != nil {
		uu = uu.SetTagsID(*id)
	}
	return uu
}

// SetTags sets the "tags" edge to the DictionaryDetail entity.
func (uu *UserUpdate) SetTags(d *DictionaryDetail) *UserUpdate {
	return uu.SetTagsID(d.ID)
}

// AddCreatedOrderIDs adds the "created_orders" edge to the Order entity by IDs.
func (uu *UserUpdate) AddCreatedOrderIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddCreatedOrderIDs(ids...)
	return uu
}

// AddCreatedOrders adds the "created_orders" edges to the Order entity.
func (uu *UserUpdate) AddCreatedOrders(o ...*Order) *UserUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddCreatedOrderIDs(ids...)
}

// AddUserEntryIDs adds the "user_entry" edge to the EntryLogs entity by IDs.
func (uu *UserUpdate) AddUserEntryIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddUserEntryIDs(ids...)
	return uu
}

// AddUserEntry adds the "user_entry" edges to the EntryLogs entity.
func (uu *UserUpdate) AddUserEntry(e ...*EntryLogs) *UserUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddUserEntryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearToken clears the "token" edge to the Token entity.
func (uu *UserUpdate) ClearToken() *UserUpdate {
	uu.mutation.ClearToken()
	return uu
}

// ClearTags clears the "tags" edge to the DictionaryDetail entity.
func (uu *UserUpdate) ClearTags() *UserUpdate {
	uu.mutation.ClearTags()
	return uu
}

// ClearCreatedOrders clears all "created_orders" edges to the Order entity.
func (uu *UserUpdate) ClearCreatedOrders() *UserUpdate {
	uu.mutation.ClearCreatedOrders()
	return uu
}

// RemoveCreatedOrderIDs removes the "created_orders" edge to Order entities by IDs.
func (uu *UserUpdate) RemoveCreatedOrderIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveCreatedOrderIDs(ids...)
	return uu
}

// RemoveCreatedOrders removes "created_orders" edges to Order entities.
func (uu *UserUpdate) RemoveCreatedOrders(o ...*Order) *UserUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveCreatedOrderIDs(ids...)
}

// ClearUserEntry clears all "user_entry" edges to the EntryLogs entity.
func (uu *UserUpdate) ClearUserEntry() *UserUpdate {
	uu.mutation.ClearUserEntry()
	return uu
}

// RemoveUserEntryIDs removes the "user_entry" edge to EntryLogs entities by IDs.
func (uu *UserUpdate) RemoveUserEntryIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveUserEntryIDs(ids...)
	return uu
}

// RemoveUserEntry removes "user_entry" edges to EntryLogs entities.
func (uu *UserUpdate) RemoveUserEntry(e ...*EntryLogs) *UserUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveUserEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(entuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(entuser.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(entuser.FieldStatus, field.TypeInt64, value)
	}
	if uu.mutation.StatusCleared() {
		_spec.ClearField(entuser.FieldStatus, field.TypeInt64)
	}
	if value, ok := uu.mutation.Mobile(); ok {
		_spec.SetField(entuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(entuser.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(entuser.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(entuser.FieldGender, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.AddField(entuser.FieldGender, field.TypeInt64, value)
	}
	if uu.mutation.GenderCleared() {
		_spec.ClearField(entuser.FieldGender, field.TypeInt64)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(entuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(entuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Functions(); ok {
		_spec.SetField(entuser.FieldFunctions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.JobTime(); ok {
		_spec.SetField(entuser.FieldJobTime, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedJobTime(); ok {
		_spec.AddField(entuser.FieldJobTime, field.TypeInt64, value)
	}
	if uu.mutation.JobTimeCleared() {
		_spec.ClearField(entuser.FieldJobTime, field.TypeInt64)
	}
	if value, ok := uu.mutation.RoleID(); ok {
		_spec.SetField(entuser.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedRoleID(); ok {
		_spec.AddField(entuser.FieldRoleID, field.TypeInt64, value)
	}
	if uu.mutation.RoleIDCleared() {
		_spec.ClearField(entuser.FieldRoleID, field.TypeInt64)
	}
	if value, ok := uu.mutation.DefaultVenueID(); ok {
		_spec.SetField(entuser.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDefaultVenueID(); ok {
		_spec.AddField(entuser.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if uu.mutation.DefaultVenueIDCleared() {
		_spec.ClearField(entuser.FieldDefaultVenueID, field.TypeInt64)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(entuser.FieldAvatar, field.TypeString, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(entuser.FieldAvatar, field.TypeString)
	}
	if value, ok := uu.mutation.Detail(); ok {
		_spec.SetField(entuser.FieldDetail, field.TypeString, value)
	}
	if uu.mutation.DetailCleared() {
		_spec.ClearField(entuser.FieldDetail, field.TypeString)
	}
	if uu.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entuser.TokenTable,
			Columns: []string{entuser.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entuser.TokenTable,
			Columns: []string{entuser.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entuser.TagsTable,
			Columns: []string{entuser.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entuser.TagsTable,
			Columns: []string{entuser.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedOrdersIDs(); len(nodes) > 0 && !uu.mutation.CreatedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserEntryIDs(); len(nodes) > 0 && !uu.mutation.UserEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int64) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int64) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// ClearStatus clears the value of the "status" field.
func (uuo *UserUpdateOne) ClearStatus() *UserUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetMobile sets the "mobile" field.
func (uuo *UserUpdateOne) SetMobile(s string) *UserUpdateOne {
	uuo.mutation.SetMobile(s)
	return uuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMobile(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMobile(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(i int64) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(i)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetGender(*i)
	}
	return uuo
}

// AddGender adds i to the "gender" field.
func (uuo *UserUpdateOne) AddGender(i int64) *UserUpdateOne {
	uuo.mutation.AddGender(i)
	return uuo
}

// ClearGender clears the value of the "gender" field.
func (uuo *UserUpdateOne) ClearGender() *UserUpdateOne {
	uuo.mutation.ClearGender()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetFunctions sets the "functions" field.
func (uuo *UserUpdateOne) SetFunctions(u user.Functions) *UserUpdateOne {
	uuo.mutation.SetFunctions(u)
	return uuo
}

// SetNillableFunctions sets the "functions" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFunctions(u *user.Functions) *UserUpdateOne {
	if u != nil {
		uuo.SetFunctions(*u)
	}
	return uuo
}

// SetJobTime sets the "job_time" field.
func (uuo *UserUpdateOne) SetJobTime(i int64) *UserUpdateOne {
	uuo.mutation.ResetJobTime()
	uuo.mutation.SetJobTime(i)
	return uuo
}

// SetNillableJobTime sets the "job_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJobTime(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetJobTime(*i)
	}
	return uuo
}

// AddJobTime adds i to the "job_time" field.
func (uuo *UserUpdateOne) AddJobTime(i int64) *UserUpdateOne {
	uuo.mutation.AddJobTime(i)
	return uuo
}

// ClearJobTime clears the value of the "job_time" field.
func (uuo *UserUpdateOne) ClearJobTime() *UserUpdateOne {
	uuo.mutation.ClearJobTime()
	return uuo
}

// SetRoleID sets the "role_id" field.
func (uuo *UserUpdateOne) SetRoleID(i int64) *UserUpdateOne {
	uuo.mutation.ResetRoleID()
	uuo.mutation.SetRoleID(i)
	return uuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetRoleID(*i)
	}
	return uuo
}

// AddRoleID adds i to the "role_id" field.
func (uuo *UserUpdateOne) AddRoleID(i int64) *UserUpdateOne {
	uuo.mutation.AddRoleID(i)
	return uuo
}

// ClearRoleID clears the value of the "role_id" field.
func (uuo *UserUpdateOne) ClearRoleID() *UserUpdateOne {
	uuo.mutation.ClearRoleID()
	return uuo
}

// SetDefaultVenueID sets the "default_venue_id" field.
func (uuo *UserUpdateOne) SetDefaultVenueID(i int64) *UserUpdateOne {
	uuo.mutation.ResetDefaultVenueID()
	uuo.mutation.SetDefaultVenueID(i)
	return uuo
}

// SetNillableDefaultVenueID sets the "default_venue_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDefaultVenueID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDefaultVenueID(*i)
	}
	return uuo
}

// AddDefaultVenueID adds i to the "default_venue_id" field.
func (uuo *UserUpdateOne) AddDefaultVenueID(i int64) *UserUpdateOne {
	uuo.mutation.AddDefaultVenueID(i)
	return uuo
}

// ClearDefaultVenueID clears the value of the "default_venue_id" field.
func (uuo *UserUpdateOne) ClearDefaultVenueID() *UserUpdateOne {
	uuo.mutation.ClearDefaultVenueID()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetDetail sets the "detail" field.
func (uuo *UserUpdateOne) SetDetail(s string) *UserUpdateOne {
	uuo.mutation.SetDetail(s)
	return uuo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDetail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDetail(*s)
	}
	return uuo
}

// ClearDetail clears the value of the "detail" field.
func (uuo *UserUpdateOne) ClearDetail() *UserUpdateOne {
	uuo.mutation.ClearDetail()
	return uuo
}

// SetTokenID sets the "token" edge to the Token entity by ID.
func (uuo *UserUpdateOne) SetTokenID(id int64) *UserUpdateOne {
	uuo.mutation.SetTokenID(id)
	return uuo
}

// SetNillableTokenID sets the "token" edge to the Token entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTokenID(id *int64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetTokenID(*id)
	}
	return uuo
}

// SetToken sets the "token" edge to the Token entity.
func (uuo *UserUpdateOne) SetToken(t *Token) *UserUpdateOne {
	return uuo.SetTokenID(t.ID)
}

// SetTagsID sets the "tags" edge to the DictionaryDetail entity by ID.
func (uuo *UserUpdateOne) SetTagsID(id int64) *UserUpdateOne {
	uuo.mutation.SetTagsID(id)
	return uuo
}

// SetNillableTagsID sets the "tags" edge to the DictionaryDetail entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTagsID(id *int64) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetTagsID(*id)
	}
	return uuo
}

// SetTags sets the "tags" edge to the DictionaryDetail entity.
func (uuo *UserUpdateOne) SetTags(d *DictionaryDetail) *UserUpdateOne {
	return uuo.SetTagsID(d.ID)
}

// AddCreatedOrderIDs adds the "created_orders" edge to the Order entity by IDs.
func (uuo *UserUpdateOne) AddCreatedOrderIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddCreatedOrderIDs(ids...)
	return uuo
}

// AddCreatedOrders adds the "created_orders" edges to the Order entity.
func (uuo *UserUpdateOne) AddCreatedOrders(o ...*Order) *UserUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddCreatedOrderIDs(ids...)
}

// AddUserEntryIDs adds the "user_entry" edge to the EntryLogs entity by IDs.
func (uuo *UserUpdateOne) AddUserEntryIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddUserEntryIDs(ids...)
	return uuo
}

// AddUserEntry adds the "user_entry" edges to the EntryLogs entity.
func (uuo *UserUpdateOne) AddUserEntry(e ...*EntryLogs) *UserUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddUserEntryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearToken clears the "token" edge to the Token entity.
func (uuo *UserUpdateOne) ClearToken() *UserUpdateOne {
	uuo.mutation.ClearToken()
	return uuo
}

// ClearTags clears the "tags" edge to the DictionaryDetail entity.
func (uuo *UserUpdateOne) ClearTags() *UserUpdateOne {
	uuo.mutation.ClearTags()
	return uuo
}

// ClearCreatedOrders clears all "created_orders" edges to the Order entity.
func (uuo *UserUpdateOne) ClearCreatedOrders() *UserUpdateOne {
	uuo.mutation.ClearCreatedOrders()
	return uuo
}

// RemoveCreatedOrderIDs removes the "created_orders" edge to Order entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedOrderIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveCreatedOrderIDs(ids...)
	return uuo
}

// RemoveCreatedOrders removes "created_orders" edges to Order entities.
func (uuo *UserUpdateOne) RemoveCreatedOrders(o ...*Order) *UserUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveCreatedOrderIDs(ids...)
}

// ClearUserEntry clears all "user_entry" edges to the EntryLogs entity.
func (uuo *UserUpdateOne) ClearUserEntry() *UserUpdateOne {
	uuo.mutation.ClearUserEntry()
	return uuo
}

// RemoveUserEntryIDs removes the "user_entry" edge to EntryLogs entities by IDs.
func (uuo *UserUpdateOne) RemoveUserEntryIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveUserEntryIDs(ids...)
	return uuo
}

// RemoveUserEntry removes "user_entry" edges to EntryLogs entities.
func (uuo *UserUpdateOne) RemoveUserEntry(e ...*EntryLogs) *UserUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveUserEntryIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuser.FieldID)
		for _, f := range fields {
			if !entuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(entuser.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(entuser.FieldStatus, field.TypeInt64, value)
	}
	if uuo.mutation.StatusCleared() {
		_spec.ClearField(entuser.FieldStatus, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Mobile(); ok {
		_spec.SetField(entuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(entuser.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(entuser.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(entuser.FieldGender, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.AddField(entuser.FieldGender, field.TypeInt64, value)
	}
	if uuo.mutation.GenderCleared() {
		_spec.ClearField(entuser.FieldGender, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(entuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(entuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Functions(); ok {
		_spec.SetField(entuser.FieldFunctions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.JobTime(); ok {
		_spec.SetField(entuser.FieldJobTime, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedJobTime(); ok {
		_spec.AddField(entuser.FieldJobTime, field.TypeInt64, value)
	}
	if uuo.mutation.JobTimeCleared() {
		_spec.ClearField(entuser.FieldJobTime, field.TypeInt64)
	}
	if value, ok := uuo.mutation.RoleID(); ok {
		_spec.SetField(entuser.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedRoleID(); ok {
		_spec.AddField(entuser.FieldRoleID, field.TypeInt64, value)
	}
	if uuo.mutation.RoleIDCleared() {
		_spec.ClearField(entuser.FieldRoleID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.DefaultVenueID(); ok {
		_spec.SetField(entuser.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDefaultVenueID(); ok {
		_spec.AddField(entuser.FieldDefaultVenueID, field.TypeInt64, value)
	}
	if uuo.mutation.DefaultVenueIDCleared() {
		_spec.ClearField(entuser.FieldDefaultVenueID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(entuser.FieldAvatar, field.TypeString, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(entuser.FieldAvatar, field.TypeString)
	}
	if value, ok := uuo.mutation.Detail(); ok {
		_spec.SetField(entuser.FieldDetail, field.TypeString, value)
	}
	if uuo.mutation.DetailCleared() {
		_spec.ClearField(entuser.FieldDetail, field.TypeString)
	}
	if uuo.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entuser.TokenTable,
			Columns: []string{entuser.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   entuser.TokenTable,
			Columns: []string{entuser.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entuser.TagsTable,
			Columns: []string{entuser.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entuser.TagsTable,
			Columns: []string{entuser.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedOrdersIDs(); len(nodes) > 0 && !uuo.mutation.CreatedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CreatedOrdersTable,
			Columns: []string{entuser.CreatedOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserEntryIDs(); len(nodes) > 0 && !uuo.mutation.UserEntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserEntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.UserEntryTable,
			Columns: []string{entuser.UserEntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entrylogs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

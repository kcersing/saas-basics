// Code generated by ent, DO NOT EDIT.

package memberproductproperty

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldStatus, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldMemberID, v))
}

// MemberProductID applies equality check predicate on the "member_product_id" field. It's identical to MemberProductIDEQ.
func MemberProductID(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldMemberProductID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldSn, v))
}

// PropertyID applies equality check predicate on the "property_id" field. It's identical to PropertyIDEQ.
func PropertyID(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldPropertyID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldName, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldDuration, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldLength, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCount, v))
}

// CountSurplus applies equality check predicate on the "count_surplus" field. It's identical to CountSurplusEQ.
func CountSurplus(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCountSurplus, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldStatus))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldMemberID, v))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldMemberID))
}

// MemberProductIDEQ applies the EQ predicate on the "member_product_id" field.
func MemberProductIDEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldMemberProductID, v))
}

// MemberProductIDNEQ applies the NEQ predicate on the "member_product_id" field.
func MemberProductIDNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldMemberProductID, v))
}

// MemberProductIDIn applies the In predicate on the "member_product_id" field.
func MemberProductIDIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldMemberProductID, vs...))
}

// MemberProductIDNotIn applies the NotIn predicate on the "member_product_id" field.
func MemberProductIDNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldMemberProductID, vs...))
}

// MemberProductIDIsNil applies the IsNil predicate on the "member_product_id" field.
func MemberProductIDIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldMemberProductID))
}

// MemberProductIDNotNil applies the NotNil predicate on the "member_product_id" field.
func MemberProductIDNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldMemberProductID))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasSuffix(FieldSn, v))
}

// SnIsNil applies the IsNil predicate on the "sn" field.
func SnIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldSn))
}

// SnNotNil applies the NotNil predicate on the "sn" field.
func SnNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldSn))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContainsFold(FieldSn, v))
}

// PropertyIDEQ applies the EQ predicate on the "property_id" field.
func PropertyIDEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldPropertyID, v))
}

// PropertyIDNEQ applies the NEQ predicate on the "property_id" field.
func PropertyIDNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldPropertyID, v))
}

// PropertyIDIn applies the In predicate on the "property_id" field.
func PropertyIDIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldPropertyID, vs...))
}

// PropertyIDNotIn applies the NotIn predicate on the "property_id" field.
func PropertyIDNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldPropertyID, vs...))
}

// PropertyIDGT applies the GT predicate on the "property_id" field.
func PropertyIDGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldPropertyID, v))
}

// PropertyIDGTE applies the GTE predicate on the "property_id" field.
func PropertyIDGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldPropertyID, v))
}

// PropertyIDLT applies the LT predicate on the "property_id" field.
func PropertyIDLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldPropertyID, v))
}

// PropertyIDLTE applies the LTE predicate on the "property_id" field.
func PropertyIDLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldPropertyID, v))
}

// PropertyIDIsNil applies the IsNil predicate on the "property_id" field.
func PropertyIDIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldPropertyID))
}

// PropertyIDNotNil applies the NotNil predicate on the "property_id" field.
func PropertyIDNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldPropertyID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldContainsFold(FieldName, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldDuration))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldLength))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldCount))
}

// CountSurplusEQ applies the EQ predicate on the "count_surplus" field.
func CountSurplusEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldCountSurplus, v))
}

// CountSurplusNEQ applies the NEQ predicate on the "count_surplus" field.
func CountSurplusNEQ(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldCountSurplus, v))
}

// CountSurplusIn applies the In predicate on the "count_surplus" field.
func CountSurplusIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldCountSurplus, vs...))
}

// CountSurplusNotIn applies the NotIn predicate on the "count_surplus" field.
func CountSurplusNotIn(vs ...int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldCountSurplus, vs...))
}

// CountSurplusGT applies the GT predicate on the "count_surplus" field.
func CountSurplusGT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldCountSurplus, v))
}

// CountSurplusGTE applies the GTE predicate on the "count_surplus" field.
func CountSurplusGTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldCountSurplus, v))
}

// CountSurplusLT applies the LT predicate on the "count_surplus" field.
func CountSurplusLT(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldCountSurplus, v))
}

// CountSurplusLTE applies the LTE predicate on the "count_surplus" field.
func CountSurplusLTE(v int64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldCountSurplus, v))
}

// CountSurplusIsNil applies the IsNil predicate on the "count_surplus" field.
func CountSurplusIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldCountSurplus))
}

// CountSurplusNotNil applies the NotNil predicate on the "count_surplus" field.
func CountSurplusNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldCountSurplus))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.FieldNotNull(FieldPrice))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.MemberProduct) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVenues applies the HasEdge predicate on the "venues" edge.
func HasVenues() predicate.MemberProductProperty {
	return predicate.MemberProductProperty(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, VenuesTable, VenuesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVenuesWith applies the HasEdge predicate on the "venues" edge with a given conditions (other predicates).
func HasVenuesWith(preds ...predicate.Venue) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(func(s *sql.Selector) {
		step := newVenuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProductProperty) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProductProperty) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProductProperty) predicate.MemberProductProperty {
	return predicate.MemberProductProperty(sql.NotPredicates(p))
}

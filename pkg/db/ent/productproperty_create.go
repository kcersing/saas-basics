// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/product"
	"saas/pkg/db/ent/productproperty"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPropertyCreate is the builder for creating a ProductProperty entity.
type ProductPropertyCreate struct {
	config
	mutation *ProductPropertyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ppc *ProductPropertyCreate) SetCreatedAt(t time.Time) *ProductPropertyCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableCreatedAt(t *time.Time) *ProductPropertyCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *ProductPropertyCreate) SetUpdatedAt(t time.Time) *ProductPropertyCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableUpdatedAt(t *time.Time) *ProductPropertyCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetStatus sets the "status" field.
func (ppc *ProductPropertyCreate) SetStatus(i int64) *ProductPropertyCreate {
	ppc.mutation.SetStatus(i)
	return ppc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableStatus(i *int64) *ProductPropertyCreate {
	if i != nil {
		ppc.SetStatus(*i)
	}
	return ppc
}

// SetType sets the "type" field.
func (ppc *ProductPropertyCreate) SetType(s string) *ProductPropertyCreate {
	ppc.mutation.SetType(s)
	return ppc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableType(s *string) *ProductPropertyCreate {
	if s != nil {
		ppc.SetType(*s)
	}
	return ppc
}

// SetName sets the "name" field.
func (ppc *ProductPropertyCreate) SetName(s string) *ProductPropertyCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableName(s *string) *ProductPropertyCreate {
	if s != nil {
		ppc.SetName(*s)
	}
	return ppc
}

// SetDuration sets the "duration" field.
func (ppc *ProductPropertyCreate) SetDuration(i int64) *ProductPropertyCreate {
	ppc.mutation.SetDuration(i)
	return ppc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableDuration(i *int64) *ProductPropertyCreate {
	if i != nil {
		ppc.SetDuration(*i)
	}
	return ppc
}

// SetLength sets the "length" field.
func (ppc *ProductPropertyCreate) SetLength(i int64) *ProductPropertyCreate {
	ppc.mutation.SetLength(i)
	return ppc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableLength(i *int64) *ProductPropertyCreate {
	if i != nil {
		ppc.SetLength(*i)
	}
	return ppc
}

// SetCount sets the "count" field.
func (ppc *ProductPropertyCreate) SetCount(i int64) *ProductPropertyCreate {
	ppc.mutation.SetCount(i)
	return ppc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableCount(i *int64) *ProductPropertyCreate {
	if i != nil {
		ppc.SetCount(*i)
	}
	return ppc
}

// SetPrice sets the "price" field.
func (ppc *ProductPropertyCreate) SetPrice(f float64) *ProductPropertyCreate {
	ppc.mutation.SetPrice(f)
	return ppc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillablePrice(f *float64) *ProductPropertyCreate {
	if f != nil {
		ppc.SetPrice(*f)
	}
	return ppc
}

// SetData sets the "data" field.
func (ppc *ProductPropertyCreate) SetData(s string) *ProductPropertyCreate {
	ppc.mutation.SetData(s)
	return ppc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableData(s *string) *ProductPropertyCreate {
	if s != nil {
		ppc.SetData(*s)
	}
	return ppc
}

// SetCreateID sets the "create_id" field.
func (ppc *ProductPropertyCreate) SetCreateID(i int64) *ProductPropertyCreate {
	ppc.mutation.SetCreateID(i)
	return ppc
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (ppc *ProductPropertyCreate) SetNillableCreateID(i *int64) *ProductPropertyCreate {
	if i != nil {
		ppc.SetCreateID(*i)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *ProductPropertyCreate) SetID(i int64) *ProductPropertyCreate {
	ppc.mutation.SetID(i)
	return ppc
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (ppc *ProductPropertyCreate) AddProductIDs(ids ...int64) *ProductPropertyCreate {
	ppc.mutation.AddProductIDs(ids...)
	return ppc
}

// AddProduct adds the "product" edges to the Product entity.
func (ppc *ProductPropertyCreate) AddProduct(p ...*Product) *ProductPropertyCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddProductIDs(ids...)
}

// Mutation returns the ProductPropertyMutation object of the builder.
func (ppc *ProductPropertyCreate) Mutation() *ProductPropertyMutation {
	return ppc.mutation
}

// Save creates the ProductProperty in the database.
func (ppc *ProductPropertyCreate) Save(ctx context.Context) (*ProductProperty, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *ProductPropertyCreate) SaveX(ctx context.Context) *ProductProperty {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *ProductPropertyCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *ProductPropertyCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *ProductPropertyCreate) defaults() {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		v := productproperty.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		v := productproperty.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.Status(); !ok {
		v := productproperty.DefaultStatus
		ppc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *ProductPropertyCreate) check() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductProperty.created_at"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductProperty.updated_at"`)}
	}
	return nil
}

func (ppc *ProductPropertyCreate) sqlSave(ctx context.Context) (*ProductProperty, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *ProductPropertyCreate) createSpec() (*ProductProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductProperty{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(productproperty.Table, sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64))
	)
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(productproperty.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(productproperty.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.Status(); ok {
		_spec.SetField(productproperty.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := ppc.mutation.GetType(); ok {
		_spec.SetField(productproperty.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(productproperty.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Duration(); ok {
		_spec.SetField(productproperty.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := ppc.mutation.Length(); ok {
		_spec.SetField(productproperty.FieldLength, field.TypeInt64, value)
		_node.Length = value
	}
	if value, ok := ppc.mutation.Count(); ok {
		_spec.SetField(productproperty.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if value, ok := ppc.mutation.Price(); ok {
		_spec.SetField(productproperty.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ppc.mutation.Data(); ok {
		_spec.SetField(productproperty.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := ppc.mutation.CreateID(); ok {
		_spec.SetField(productproperty.FieldCreateID, field.TypeInt64, value)
		_node.CreateID = value
	}
	if nodes := ppc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productproperty.ProductTable,
			Columns: productproperty.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductPropertyCreateBulk is the builder for creating many ProductProperty entities in bulk.
type ProductPropertyCreateBulk struct {
	config
	err      error
	builders []*ProductPropertyCreate
}

// Save creates the ProductProperty entities in the database.
func (ppcb *ProductPropertyCreateBulk) Save(ctx context.Context) ([]*ProductProperty, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*ProductProperty, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *ProductPropertyCreateBulk) SaveX(ctx context.Context) []*ProductProperty {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *ProductPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *ProductPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

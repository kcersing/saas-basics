// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/productproperty"
	"saas/pkg/db/ent/venue"
	"saas/pkg/db/ent/venueplace"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenueUpdate is the builder for updating Venue entities.
type VenueUpdate struct {
	config
	hooks    []Hook
	mutation *VenueMutation
}

// Where appends a list predicates to the VenueUpdate builder.
func (vu *VenueUpdate) Where(ps ...predicate.Venue) *VenueUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VenueUpdate) SetUpdatedAt(t time.Time) *VenueUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetStatus sets the "status" field.
func (vu *VenueUpdate) SetStatus(i int64) *VenueUpdate {
	vu.mutation.ResetStatus()
	vu.mutation.SetStatus(i)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableStatus(i *int64) *VenueUpdate {
	if i != nil {
		vu.SetStatus(*i)
	}
	return vu
}

// AddStatus adds i to the "status" field.
func (vu *VenueUpdate) AddStatus(i int64) *VenueUpdate {
	vu.mutation.AddStatus(i)
	return vu
}

// ClearStatus clears the value of the "status" field.
func (vu *VenueUpdate) ClearStatus() *VenueUpdate {
	vu.mutation.ClearStatus()
	return vu
}

// SetName sets the "name" field.
func (vu *VenueUpdate) SetName(s string) *VenueUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableName(s *string) *VenueUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// ClearName clears the value of the "name" field.
func (vu *VenueUpdate) ClearName() *VenueUpdate {
	vu.mutation.ClearName()
	return vu
}

// SetAddress sets the "address" field.
func (vu *VenueUpdate) SetAddress(s string) *VenueUpdate {
	vu.mutation.SetAddress(s)
	return vu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableAddress(s *string) *VenueUpdate {
	if s != nil {
		vu.SetAddress(*s)
	}
	return vu
}

// ClearAddress clears the value of the "address" field.
func (vu *VenueUpdate) ClearAddress() *VenueUpdate {
	vu.mutation.ClearAddress()
	return vu
}

// SetAddressDetail sets the "address_detail" field.
func (vu *VenueUpdate) SetAddressDetail(s string) *VenueUpdate {
	vu.mutation.SetAddressDetail(s)
	return vu
}

// SetNillableAddressDetail sets the "address_detail" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableAddressDetail(s *string) *VenueUpdate {
	if s != nil {
		vu.SetAddressDetail(*s)
	}
	return vu
}

// ClearAddressDetail clears the value of the "address_detail" field.
func (vu *VenueUpdate) ClearAddressDetail() *VenueUpdate {
	vu.mutation.ClearAddressDetail()
	return vu
}

// SetLatitude sets the "latitude" field.
func (vu *VenueUpdate) SetLatitude(s string) *VenueUpdate {
	vu.mutation.SetLatitude(s)
	return vu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableLatitude(s *string) *VenueUpdate {
	if s != nil {
		vu.SetLatitude(*s)
	}
	return vu
}

// ClearLatitude clears the value of the "latitude" field.
func (vu *VenueUpdate) ClearLatitude() *VenueUpdate {
	vu.mutation.ClearLatitude()
	return vu
}

// SetLongitude sets the "longitude" field.
func (vu *VenueUpdate) SetLongitude(s string) *VenueUpdate {
	vu.mutation.SetLongitude(s)
	return vu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableLongitude(s *string) *VenueUpdate {
	if s != nil {
		vu.SetLongitude(*s)
	}
	return vu
}

// ClearLongitude clears the value of the "longitude" field.
func (vu *VenueUpdate) ClearLongitude() *VenueUpdate {
	vu.mutation.ClearLongitude()
	return vu
}

// SetMobile sets the "mobile" field.
func (vu *VenueUpdate) SetMobile(s string) *VenueUpdate {
	vu.mutation.SetMobile(s)
	return vu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableMobile(s *string) *VenueUpdate {
	if s != nil {
		vu.SetMobile(*s)
	}
	return vu
}

// ClearMobile clears the value of the "mobile" field.
func (vu *VenueUpdate) ClearMobile() *VenueUpdate {
	vu.mutation.ClearMobile()
	return vu
}

// SetPic sets the "pic" field.
func (vu *VenueUpdate) SetPic(s string) *VenueUpdate {
	vu.mutation.SetPic(s)
	return vu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (vu *VenueUpdate) SetNillablePic(s *string) *VenueUpdate {
	if s != nil {
		vu.SetPic(*s)
	}
	return vu
}

// ClearPic clears the value of the "pic" field.
func (vu *VenueUpdate) ClearPic() *VenueUpdate {
	vu.mutation.ClearPic()
	return vu
}

// SetInformation sets the "information" field.
func (vu *VenueUpdate) SetInformation(s string) *VenueUpdate {
	vu.mutation.SetInformation(s)
	return vu
}

// SetNillableInformation sets the "information" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableInformation(s *string) *VenueUpdate {
	if s != nil {
		vu.SetInformation(*s)
	}
	return vu
}

// ClearInformation clears the value of the "information" field.
func (vu *VenueUpdate) ClearInformation() *VenueUpdate {
	vu.mutation.ClearInformation()
	return vu
}

// AddPlaceIDs adds the "places" edge to the VenuePlace entity by IDs.
func (vu *VenueUpdate) AddPlaceIDs(ids ...int64) *VenueUpdate {
	vu.mutation.AddPlaceIDs(ids...)
	return vu
}

// AddPlaces adds the "places" edges to the VenuePlace entity.
func (vu *VenueUpdate) AddPlaces(v ...*VenuePlace) *VenueUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddPlaceIDs(ids...)
}

// AddMemberPropertyVenueIDs adds the "member_property_venues" edge to the MemberProductProperty entity by IDs.
func (vu *VenueUpdate) AddMemberPropertyVenueIDs(ids ...int64) *VenueUpdate {
	vu.mutation.AddMemberPropertyVenueIDs(ids...)
	return vu
}

// AddMemberPropertyVenues adds the "member_property_venues" edges to the MemberProductProperty entity.
func (vu *VenueUpdate) AddMemberPropertyVenues(m ...*MemberProductProperty) *VenueUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMemberPropertyVenueIDs(ids...)
}

// AddPropertyVenueIDs adds the "property_venues" edge to the ProductProperty entity by IDs.
func (vu *VenueUpdate) AddPropertyVenueIDs(ids ...int64) *VenueUpdate {
	vu.mutation.AddPropertyVenueIDs(ids...)
	return vu
}

// AddPropertyVenues adds the "property_venues" edges to the ProductProperty entity.
func (vu *VenueUpdate) AddPropertyVenues(p ...*ProductProperty) *VenueUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddPropertyVenueIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vu *VenueUpdate) Mutation() *VenueMutation {
	return vu.mutation
}

// ClearPlaces clears all "places" edges to the VenuePlace entity.
func (vu *VenueUpdate) ClearPlaces() *VenueUpdate {
	vu.mutation.ClearPlaces()
	return vu
}

// RemovePlaceIDs removes the "places" edge to VenuePlace entities by IDs.
func (vu *VenueUpdate) RemovePlaceIDs(ids ...int64) *VenueUpdate {
	vu.mutation.RemovePlaceIDs(ids...)
	return vu
}

// RemovePlaces removes "places" edges to VenuePlace entities.
func (vu *VenueUpdate) RemovePlaces(v ...*VenuePlace) *VenueUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemovePlaceIDs(ids...)
}

// ClearMemberPropertyVenues clears all "member_property_venues" edges to the MemberProductProperty entity.
func (vu *VenueUpdate) ClearMemberPropertyVenues() *VenueUpdate {
	vu.mutation.ClearMemberPropertyVenues()
	return vu
}

// RemoveMemberPropertyVenueIDs removes the "member_property_venues" edge to MemberProductProperty entities by IDs.
func (vu *VenueUpdate) RemoveMemberPropertyVenueIDs(ids ...int64) *VenueUpdate {
	vu.mutation.RemoveMemberPropertyVenueIDs(ids...)
	return vu
}

// RemoveMemberPropertyVenues removes "member_property_venues" edges to MemberProductProperty entities.
func (vu *VenueUpdate) RemoveMemberPropertyVenues(m ...*MemberProductProperty) *VenueUpdate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMemberPropertyVenueIDs(ids...)
}

// ClearPropertyVenues clears all "property_venues" edges to the ProductProperty entity.
func (vu *VenueUpdate) ClearPropertyVenues() *VenueUpdate {
	vu.mutation.ClearPropertyVenues()
	return vu
}

// RemovePropertyVenueIDs removes the "property_venues" edge to ProductProperty entities by IDs.
func (vu *VenueUpdate) RemovePropertyVenueIDs(ids ...int64) *VenueUpdate {
	vu.mutation.RemovePropertyVenueIDs(ids...)
	return vu
}

// RemovePropertyVenues removes "property_venues" edges to ProductProperty entities.
func (vu *VenueUpdate) RemovePropertyVenues(p ...*ProductProperty) *VenueUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemovePropertyVenueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VenueUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VenueUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VenueUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VenueUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VenueUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := venue.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

func (vu *VenueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(venue.Table, venue.Columns, sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(venue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(venue.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedStatus(); ok {
		_spec.AddField(venue.FieldStatus, field.TypeInt64, value)
	}
	if vu.mutation.StatusCleared() {
		_spec.ClearField(venue.FieldStatus, field.TypeInt64)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
	}
	if vu.mutation.NameCleared() {
		_spec.ClearField(venue.FieldName, field.TypeString)
	}
	if value, ok := vu.mutation.Address(); ok {
		_spec.SetField(venue.FieldAddress, field.TypeString, value)
	}
	if vu.mutation.AddressCleared() {
		_spec.ClearField(venue.FieldAddress, field.TypeString)
	}
	if value, ok := vu.mutation.AddressDetail(); ok {
		_spec.SetField(venue.FieldAddressDetail, field.TypeString, value)
	}
	if vu.mutation.AddressDetailCleared() {
		_spec.ClearField(venue.FieldAddressDetail, field.TypeString)
	}
	if value, ok := vu.mutation.Latitude(); ok {
		_spec.SetField(venue.FieldLatitude, field.TypeString, value)
	}
	if vu.mutation.LatitudeCleared() {
		_spec.ClearField(venue.FieldLatitude, field.TypeString)
	}
	if value, ok := vu.mutation.Longitude(); ok {
		_spec.SetField(venue.FieldLongitude, field.TypeString, value)
	}
	if vu.mutation.LongitudeCleared() {
		_spec.ClearField(venue.FieldLongitude, field.TypeString)
	}
	if value, ok := vu.mutation.Mobile(); ok {
		_spec.SetField(venue.FieldMobile, field.TypeString, value)
	}
	if vu.mutation.MobileCleared() {
		_spec.ClearField(venue.FieldMobile, field.TypeString)
	}
	if value, ok := vu.mutation.Pic(); ok {
		_spec.SetField(venue.FieldPic, field.TypeString, value)
	}
	if vu.mutation.PicCleared() {
		_spec.ClearField(venue.FieldPic, field.TypeString)
	}
	if value, ok := vu.mutation.Information(); ok {
		_spec.SetField(venue.FieldInformation, field.TypeString, value)
	}
	if vu.mutation.InformationCleared() {
		_spec.ClearField(venue.FieldInformation, field.TypeString)
	}
	if vu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !vu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MemberPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMemberPropertyVenuesIDs(); len(nodes) > 0 && !vu.mutation.MemberPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MemberPropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPropertyVenuesIDs(); len(nodes) > 0 && !vu.mutation.PropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VenueUpdateOne is the builder for updating a single Venue entity.
type VenueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VenueMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VenueUpdateOne) SetUpdatedAt(t time.Time) *VenueUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VenueUpdateOne) SetStatus(i int64) *VenueUpdateOne {
	vuo.mutation.ResetStatus()
	vuo.mutation.SetStatus(i)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableStatus(i *int64) *VenueUpdateOne {
	if i != nil {
		vuo.SetStatus(*i)
	}
	return vuo
}

// AddStatus adds i to the "status" field.
func (vuo *VenueUpdateOne) AddStatus(i int64) *VenueUpdateOne {
	vuo.mutation.AddStatus(i)
	return vuo
}

// ClearStatus clears the value of the "status" field.
func (vuo *VenueUpdateOne) ClearStatus() *VenueUpdateOne {
	vuo.mutation.ClearStatus()
	return vuo
}

// SetName sets the "name" field.
func (vuo *VenueUpdateOne) SetName(s string) *VenueUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableName(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// ClearName clears the value of the "name" field.
func (vuo *VenueUpdateOne) ClearName() *VenueUpdateOne {
	vuo.mutation.ClearName()
	return vuo
}

// SetAddress sets the "address" field.
func (vuo *VenueUpdateOne) SetAddress(s string) *VenueUpdateOne {
	vuo.mutation.SetAddress(s)
	return vuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableAddress(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetAddress(*s)
	}
	return vuo
}

// ClearAddress clears the value of the "address" field.
func (vuo *VenueUpdateOne) ClearAddress() *VenueUpdateOne {
	vuo.mutation.ClearAddress()
	return vuo
}

// SetAddressDetail sets the "address_detail" field.
func (vuo *VenueUpdateOne) SetAddressDetail(s string) *VenueUpdateOne {
	vuo.mutation.SetAddressDetail(s)
	return vuo
}

// SetNillableAddressDetail sets the "address_detail" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableAddressDetail(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetAddressDetail(*s)
	}
	return vuo
}

// ClearAddressDetail clears the value of the "address_detail" field.
func (vuo *VenueUpdateOne) ClearAddressDetail() *VenueUpdateOne {
	vuo.mutation.ClearAddressDetail()
	return vuo
}

// SetLatitude sets the "latitude" field.
func (vuo *VenueUpdateOne) SetLatitude(s string) *VenueUpdateOne {
	vuo.mutation.SetLatitude(s)
	return vuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableLatitude(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetLatitude(*s)
	}
	return vuo
}

// ClearLatitude clears the value of the "latitude" field.
func (vuo *VenueUpdateOne) ClearLatitude() *VenueUpdateOne {
	vuo.mutation.ClearLatitude()
	return vuo
}

// SetLongitude sets the "longitude" field.
func (vuo *VenueUpdateOne) SetLongitude(s string) *VenueUpdateOne {
	vuo.mutation.SetLongitude(s)
	return vuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableLongitude(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetLongitude(*s)
	}
	return vuo
}

// ClearLongitude clears the value of the "longitude" field.
func (vuo *VenueUpdateOne) ClearLongitude() *VenueUpdateOne {
	vuo.mutation.ClearLongitude()
	return vuo
}

// SetMobile sets the "mobile" field.
func (vuo *VenueUpdateOne) SetMobile(s string) *VenueUpdateOne {
	vuo.mutation.SetMobile(s)
	return vuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableMobile(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetMobile(*s)
	}
	return vuo
}

// ClearMobile clears the value of the "mobile" field.
func (vuo *VenueUpdateOne) ClearMobile() *VenueUpdateOne {
	vuo.mutation.ClearMobile()
	return vuo
}

// SetPic sets the "pic" field.
func (vuo *VenueUpdateOne) SetPic(s string) *VenueUpdateOne {
	vuo.mutation.SetPic(s)
	return vuo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillablePic(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetPic(*s)
	}
	return vuo
}

// ClearPic clears the value of the "pic" field.
func (vuo *VenueUpdateOne) ClearPic() *VenueUpdateOne {
	vuo.mutation.ClearPic()
	return vuo
}

// SetInformation sets the "information" field.
func (vuo *VenueUpdateOne) SetInformation(s string) *VenueUpdateOne {
	vuo.mutation.SetInformation(s)
	return vuo
}

// SetNillableInformation sets the "information" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableInformation(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetInformation(*s)
	}
	return vuo
}

// ClearInformation clears the value of the "information" field.
func (vuo *VenueUpdateOne) ClearInformation() *VenueUpdateOne {
	vuo.mutation.ClearInformation()
	return vuo
}

// AddPlaceIDs adds the "places" edge to the VenuePlace entity by IDs.
func (vuo *VenueUpdateOne) AddPlaceIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.AddPlaceIDs(ids...)
	return vuo
}

// AddPlaces adds the "places" edges to the VenuePlace entity.
func (vuo *VenueUpdateOne) AddPlaces(v ...*VenuePlace) *VenueUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddPlaceIDs(ids...)
}

// AddMemberPropertyVenueIDs adds the "member_property_venues" edge to the MemberProductProperty entity by IDs.
func (vuo *VenueUpdateOne) AddMemberPropertyVenueIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.AddMemberPropertyVenueIDs(ids...)
	return vuo
}

// AddMemberPropertyVenues adds the "member_property_venues" edges to the MemberProductProperty entity.
func (vuo *VenueUpdateOne) AddMemberPropertyVenues(m ...*MemberProductProperty) *VenueUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMemberPropertyVenueIDs(ids...)
}

// AddPropertyVenueIDs adds the "property_venues" edge to the ProductProperty entity by IDs.
func (vuo *VenueUpdateOne) AddPropertyVenueIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.AddPropertyVenueIDs(ids...)
	return vuo
}

// AddPropertyVenues adds the "property_venues" edges to the ProductProperty entity.
func (vuo *VenueUpdateOne) AddPropertyVenues(p ...*ProductProperty) *VenueUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddPropertyVenueIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vuo *VenueUpdateOne) Mutation() *VenueMutation {
	return vuo.mutation
}

// ClearPlaces clears all "places" edges to the VenuePlace entity.
func (vuo *VenueUpdateOne) ClearPlaces() *VenueUpdateOne {
	vuo.mutation.ClearPlaces()
	return vuo
}

// RemovePlaceIDs removes the "places" edge to VenuePlace entities by IDs.
func (vuo *VenueUpdateOne) RemovePlaceIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.RemovePlaceIDs(ids...)
	return vuo
}

// RemovePlaces removes "places" edges to VenuePlace entities.
func (vuo *VenueUpdateOne) RemovePlaces(v ...*VenuePlace) *VenueUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemovePlaceIDs(ids...)
}

// ClearMemberPropertyVenues clears all "member_property_venues" edges to the MemberProductProperty entity.
func (vuo *VenueUpdateOne) ClearMemberPropertyVenues() *VenueUpdateOne {
	vuo.mutation.ClearMemberPropertyVenues()
	return vuo
}

// RemoveMemberPropertyVenueIDs removes the "member_property_venues" edge to MemberProductProperty entities by IDs.
func (vuo *VenueUpdateOne) RemoveMemberPropertyVenueIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.RemoveMemberPropertyVenueIDs(ids...)
	return vuo
}

// RemoveMemberPropertyVenues removes "member_property_venues" edges to MemberProductProperty entities.
func (vuo *VenueUpdateOne) RemoveMemberPropertyVenues(m ...*MemberProductProperty) *VenueUpdateOne {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMemberPropertyVenueIDs(ids...)
}

// ClearPropertyVenues clears all "property_venues" edges to the ProductProperty entity.
func (vuo *VenueUpdateOne) ClearPropertyVenues() *VenueUpdateOne {
	vuo.mutation.ClearPropertyVenues()
	return vuo
}

// RemovePropertyVenueIDs removes the "property_venues" edge to ProductProperty entities by IDs.
func (vuo *VenueUpdateOne) RemovePropertyVenueIDs(ids ...int64) *VenueUpdateOne {
	vuo.mutation.RemovePropertyVenueIDs(ids...)
	return vuo
}

// RemovePropertyVenues removes "property_venues" edges to ProductProperty entities.
func (vuo *VenueUpdateOne) RemovePropertyVenues(p ...*ProductProperty) *VenueUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemovePropertyVenueIDs(ids...)
}

// Where appends a list predicates to the VenueUpdate builder.
func (vuo *VenueUpdateOne) Where(ps ...predicate.Venue) *VenueUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VenueUpdateOne) Select(field string, fields ...string) *VenueUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Venue entity.
func (vuo *VenueUpdateOne) Save(ctx context.Context) (*Venue, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VenueUpdateOne) SaveX(ctx context.Context) *Venue {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VenueUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VenueUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VenueUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := venue.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

func (vuo *VenueUpdateOne) sqlSave(ctx context.Context) (_node *Venue, err error) {
	_spec := sqlgraph.NewUpdateSpec(venue.Table, venue.Columns, sqlgraph.NewFieldSpec(venue.FieldID, field.TypeInt64))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Venue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venue.FieldID)
		for _, f := range fields {
			if !venue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != venue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(venue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(venue.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedStatus(); ok {
		_spec.AddField(venue.FieldStatus, field.TypeInt64, value)
	}
	if vuo.mutation.StatusCleared() {
		_spec.ClearField(venue.FieldStatus, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
	}
	if vuo.mutation.NameCleared() {
		_spec.ClearField(venue.FieldName, field.TypeString)
	}
	if value, ok := vuo.mutation.Address(); ok {
		_spec.SetField(venue.FieldAddress, field.TypeString, value)
	}
	if vuo.mutation.AddressCleared() {
		_spec.ClearField(venue.FieldAddress, field.TypeString)
	}
	if value, ok := vuo.mutation.AddressDetail(); ok {
		_spec.SetField(venue.FieldAddressDetail, field.TypeString, value)
	}
	if vuo.mutation.AddressDetailCleared() {
		_spec.ClearField(venue.FieldAddressDetail, field.TypeString)
	}
	if value, ok := vuo.mutation.Latitude(); ok {
		_spec.SetField(venue.FieldLatitude, field.TypeString, value)
	}
	if vuo.mutation.LatitudeCleared() {
		_spec.ClearField(venue.FieldLatitude, field.TypeString)
	}
	if value, ok := vuo.mutation.Longitude(); ok {
		_spec.SetField(venue.FieldLongitude, field.TypeString, value)
	}
	if vuo.mutation.LongitudeCleared() {
		_spec.ClearField(venue.FieldLongitude, field.TypeString)
	}
	if value, ok := vuo.mutation.Mobile(); ok {
		_spec.SetField(venue.FieldMobile, field.TypeString, value)
	}
	if vuo.mutation.MobileCleared() {
		_spec.ClearField(venue.FieldMobile, field.TypeString)
	}
	if value, ok := vuo.mutation.Pic(); ok {
		_spec.SetField(venue.FieldPic, field.TypeString, value)
	}
	if vuo.mutation.PicCleared() {
		_spec.ClearField(venue.FieldPic, field.TypeString)
	}
	if value, ok := vuo.mutation.Information(); ok {
		_spec.SetField(venue.FieldInformation, field.TypeString, value)
	}
	if vuo.mutation.InformationCleared() {
		_spec.ClearField(venue.FieldInformation, field.TypeString)
	}
	if vuo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !vuo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.PlacesTable,
			Columns: []string{venue.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MemberPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMemberPropertyVenuesIDs(); len(nodes) > 0 && !vuo.mutation.MemberPropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MemberPropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.MemberPropertyVenuesTable,
			Columns: venue.MemberPropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPropertyVenuesIDs(); len(nodes) > 0 && !vuo.mutation.PropertyVenuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PropertyVenuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   venue.PropertyVenuesTable,
			Columns: venue.PropertyVenuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productproperty.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Venue{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}

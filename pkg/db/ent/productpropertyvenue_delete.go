// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/productpropertyvenue"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPropertyVenueDelete is the builder for deleting a ProductPropertyVenue entity.
type ProductPropertyVenueDelete struct {
	config
	hooks    []Hook
	mutation *ProductPropertyVenueMutation
}

// Where appends a list predicates to the ProductPropertyVenueDelete builder.
func (ppvd *ProductPropertyVenueDelete) Where(ps ...predicate.ProductPropertyVenue) *ProductPropertyVenueDelete {
	ppvd.mutation.Where(ps...)
	return ppvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ppvd *ProductPropertyVenueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ppvd.sqlExec, ppvd.mutation, ppvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvd *ProductPropertyVenueDelete) ExecX(ctx context.Context) int {
	n, err := ppvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ppvd *ProductPropertyVenueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(productpropertyvenue.Table, sqlgraph.NewFieldSpec(productpropertyvenue.FieldID, field.TypeInt64))
	if ps := ppvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ppvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ppvd.mutation.done = true
	return affected, err
}

// ProductPropertyVenueDeleteOne is the builder for deleting a single ProductPropertyVenue entity.
type ProductPropertyVenueDeleteOne struct {
	ppvd *ProductPropertyVenueDelete
}

// Where appends a list predicates to the ProductPropertyVenueDelete builder.
func (ppvdo *ProductPropertyVenueDeleteOne) Where(ps ...predicate.ProductPropertyVenue) *ProductPropertyVenueDeleteOne {
	ppvdo.ppvd.mutation.Where(ps...)
	return ppvdo
}

// Exec executes the deletion query.
func (ppvdo *ProductPropertyVenueDeleteOne) Exec(ctx context.Context) error {
	n, err := ppvdo.ppvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{productpropertyvenue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ppvdo *ProductPropertyVenueDeleteOne) ExecX(ctx context.Context) {
	if err := ppvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package memberdetails

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldDeleteAt, v))
}

// CreatedID applies equality check predicate on the "created_id" field. It's identical to CreatedIDEQ.
func CreatedID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedID, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMemberID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEmail, v))
}

// Wecom applies equality check predicate on the "wecom" field. It's identical to WecomEQ.
func Wecom(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldWecom, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldGender, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldBirthday, v))
}

// MoneySum applies equality check predicate on the "money_sum" field. It's identical to MoneySumEQ.
func MoneySum(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMoneySum, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductID, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductName, v))
}

// ProductVenue applies equality check predicate on the "product_venue" field. It's identical to ProductVenueEQ.
func ProductVenue(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductVenue, v))
}

// ProductVenueName applies equality check predicate on the "product_venue_name" field. It's identical to ProductVenueNameEQ.
func ProductVenueName(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductVenueName, v))
}

// EntrySum applies equality check predicate on the "entry_sum" field. It's identical to EntrySumEQ.
func EntrySum(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntrySum, v))
}

// EntryLastTime applies equality check predicate on the "entry_last_time" field. It's identical to EntryLastTimeEQ.
func EntryLastTime(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryLastTime, v))
}

// EntryDeadlineTime applies equality check predicate on the "entry_deadline_time" field. It's identical to EntryDeadlineTimeEQ.
func EntryDeadlineTime(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryDeadlineTime, v))
}

// ClassLastTime applies equality check predicate on the "class_last_time" field. It's identical to ClassLastTimeEQ.
func ClassLastTime(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldClassLastTime, v))
}

// RelationUID applies equality check predicate on the "relation_uid" field. It's identical to RelationUIDEQ.
func RelationUID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationUID, v))
}

// RelationUname applies equality check predicate on the "relation_uname" field. It's identical to RelationUnameEQ.
func RelationUname(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationUname, v))
}

// RelationMid applies equality check predicate on the "relation_mid" field. It's identical to RelationMidEQ.
func RelationMid(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationMid, v))
}

// RelationMame applies equality check predicate on the "relation_mame" field. It's identical to RelationMameEQ.
func RelationMame(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationMame, v))
}

// CreateID applies equality check predicate on the "create_id" field. It's identical to CreateIDEQ.
func CreateID(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreateID, v))
}

// CreateName applies equality check predicate on the "create_name" field. It's identical to CreateNameEQ.
func CreateName(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreateName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldDeleteAt, v))
}

// CreatedIDEQ applies the EQ predicate on the "created_id" field.
func CreatedIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreatedID, v))
}

// CreatedIDNEQ applies the NEQ predicate on the "created_id" field.
func CreatedIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreatedID, v))
}

// CreatedIDIn applies the In predicate on the "created_id" field.
func CreatedIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreatedID, vs...))
}

// CreatedIDNotIn applies the NotIn predicate on the "created_id" field.
func CreatedIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreatedID, vs...))
}

// CreatedIDGT applies the GT predicate on the "created_id" field.
func CreatedIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreatedID, v))
}

// CreatedIDGTE applies the GTE predicate on the "created_id" field.
func CreatedIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreatedID, v))
}

// CreatedIDLT applies the LT predicate on the "created_id" field.
func CreatedIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreatedID, v))
}

// CreatedIDLTE applies the LTE predicate on the "created_id" field.
func CreatedIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreatedID, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldMemberID))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldEmail, v))
}

// WecomEQ applies the EQ predicate on the "wecom" field.
func WecomEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldWecom, v))
}

// WecomNEQ applies the NEQ predicate on the "wecom" field.
func WecomNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldWecom, v))
}

// WecomIn applies the In predicate on the "wecom" field.
func WecomIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldWecom, vs...))
}

// WecomNotIn applies the NotIn predicate on the "wecom" field.
func WecomNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldWecom, vs...))
}

// WecomGT applies the GT predicate on the "wecom" field.
func WecomGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldWecom, v))
}

// WecomGTE applies the GTE predicate on the "wecom" field.
func WecomGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldWecom, v))
}

// WecomLT applies the LT predicate on the "wecom" field.
func WecomLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldWecom, v))
}

// WecomLTE applies the LTE predicate on the "wecom" field.
func WecomLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldWecom, v))
}

// WecomContains applies the Contains predicate on the "wecom" field.
func WecomContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldWecom, v))
}

// WecomHasPrefix applies the HasPrefix predicate on the "wecom" field.
func WecomHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldWecom, v))
}

// WecomHasSuffix applies the HasSuffix predicate on the "wecom" field.
func WecomHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldWecom, v))
}

// WecomIsNil applies the IsNil predicate on the "wecom" field.
func WecomIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldWecom))
}

// WecomNotNil applies the NotNil predicate on the "wecom" field.
func WecomNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldWecom))
}

// WecomEqualFold applies the EqualFold predicate on the "wecom" field.
func WecomEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldWecom, v))
}

// WecomContainsFold applies the ContainsFold predicate on the "wecom" field.
func WecomContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldWecom, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldGender))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldBirthday))
}

// MoneySumEQ applies the EQ predicate on the "money_sum" field.
func MoneySumEQ(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldMoneySum, v))
}

// MoneySumNEQ applies the NEQ predicate on the "money_sum" field.
func MoneySumNEQ(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldMoneySum, v))
}

// MoneySumIn applies the In predicate on the "money_sum" field.
func MoneySumIn(vs ...float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldMoneySum, vs...))
}

// MoneySumNotIn applies the NotIn predicate on the "money_sum" field.
func MoneySumNotIn(vs ...float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldMoneySum, vs...))
}

// MoneySumGT applies the GT predicate on the "money_sum" field.
func MoneySumGT(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldMoneySum, v))
}

// MoneySumGTE applies the GTE predicate on the "money_sum" field.
func MoneySumGTE(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldMoneySum, v))
}

// MoneySumLT applies the LT predicate on the "money_sum" field.
func MoneySumLT(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldMoneySum, v))
}

// MoneySumLTE applies the LTE predicate on the "money_sum" field.
func MoneySumLTE(v float64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldMoneySum, v))
}

// MoneySumIsNil applies the IsNil predicate on the "money_sum" field.
func MoneySumIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldMoneySum))
}

// MoneySumNotNil applies the NotNil predicate on the "money_sum" field.
func MoneySumNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldMoneySum))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductID))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameIsNil applies the IsNil predicate on the "product_name" field.
func ProductNameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductName))
}

// ProductNameNotNil applies the NotNil predicate on the "product_name" field.
func ProductNameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductName))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldProductName, v))
}

// ProductVenueEQ applies the EQ predicate on the "product_venue" field.
func ProductVenueEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductVenue, v))
}

// ProductVenueNEQ applies the NEQ predicate on the "product_venue" field.
func ProductVenueNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductVenue, v))
}

// ProductVenueIn applies the In predicate on the "product_venue" field.
func ProductVenueIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductVenue, vs...))
}

// ProductVenueNotIn applies the NotIn predicate on the "product_venue" field.
func ProductVenueNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductVenue, vs...))
}

// ProductVenueGT applies the GT predicate on the "product_venue" field.
func ProductVenueGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductVenue, v))
}

// ProductVenueGTE applies the GTE predicate on the "product_venue" field.
func ProductVenueGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductVenue, v))
}

// ProductVenueLT applies the LT predicate on the "product_venue" field.
func ProductVenueLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductVenue, v))
}

// ProductVenueLTE applies the LTE predicate on the "product_venue" field.
func ProductVenueLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductVenue, v))
}

// ProductVenueIsNil applies the IsNil predicate on the "product_venue" field.
func ProductVenueIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductVenue))
}

// ProductVenueNotNil applies the NotNil predicate on the "product_venue" field.
func ProductVenueNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductVenue))
}

// ProductVenueNameEQ applies the EQ predicate on the "product_venue_name" field.
func ProductVenueNameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldProductVenueName, v))
}

// ProductVenueNameNEQ applies the NEQ predicate on the "product_venue_name" field.
func ProductVenueNameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldProductVenueName, v))
}

// ProductVenueNameIn applies the In predicate on the "product_venue_name" field.
func ProductVenueNameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldProductVenueName, vs...))
}

// ProductVenueNameNotIn applies the NotIn predicate on the "product_venue_name" field.
func ProductVenueNameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldProductVenueName, vs...))
}

// ProductVenueNameGT applies the GT predicate on the "product_venue_name" field.
func ProductVenueNameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldProductVenueName, v))
}

// ProductVenueNameGTE applies the GTE predicate on the "product_venue_name" field.
func ProductVenueNameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldProductVenueName, v))
}

// ProductVenueNameLT applies the LT predicate on the "product_venue_name" field.
func ProductVenueNameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldProductVenueName, v))
}

// ProductVenueNameLTE applies the LTE predicate on the "product_venue_name" field.
func ProductVenueNameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldProductVenueName, v))
}

// ProductVenueNameContains applies the Contains predicate on the "product_venue_name" field.
func ProductVenueNameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldProductVenueName, v))
}

// ProductVenueNameHasPrefix applies the HasPrefix predicate on the "product_venue_name" field.
func ProductVenueNameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldProductVenueName, v))
}

// ProductVenueNameHasSuffix applies the HasSuffix predicate on the "product_venue_name" field.
func ProductVenueNameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldProductVenueName, v))
}

// ProductVenueNameIsNil applies the IsNil predicate on the "product_venue_name" field.
func ProductVenueNameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldProductVenueName))
}

// ProductVenueNameNotNil applies the NotNil predicate on the "product_venue_name" field.
func ProductVenueNameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldProductVenueName))
}

// ProductVenueNameEqualFold applies the EqualFold predicate on the "product_venue_name" field.
func ProductVenueNameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldProductVenueName, v))
}

// ProductVenueNameContainsFold applies the ContainsFold predicate on the "product_venue_name" field.
func ProductVenueNameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldProductVenueName, v))
}

// EntrySumEQ applies the EQ predicate on the "entry_sum" field.
func EntrySumEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntrySum, v))
}

// EntrySumNEQ applies the NEQ predicate on the "entry_sum" field.
func EntrySumNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntrySum, v))
}

// EntrySumIn applies the In predicate on the "entry_sum" field.
func EntrySumIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntrySum, vs...))
}

// EntrySumNotIn applies the NotIn predicate on the "entry_sum" field.
func EntrySumNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntrySum, vs...))
}

// EntrySumGT applies the GT predicate on the "entry_sum" field.
func EntrySumGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntrySum, v))
}

// EntrySumGTE applies the GTE predicate on the "entry_sum" field.
func EntrySumGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntrySum, v))
}

// EntrySumLT applies the LT predicate on the "entry_sum" field.
func EntrySumLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntrySum, v))
}

// EntrySumLTE applies the LTE predicate on the "entry_sum" field.
func EntrySumLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntrySum, v))
}

// EntrySumIsNil applies the IsNil predicate on the "entry_sum" field.
func EntrySumIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntrySum))
}

// EntrySumNotNil applies the NotNil predicate on the "entry_sum" field.
func EntrySumNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntrySum))
}

// EntryLastTimeEQ applies the EQ predicate on the "entry_last_time" field.
func EntryLastTimeEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryLastTime, v))
}

// EntryLastTimeNEQ applies the NEQ predicate on the "entry_last_time" field.
func EntryLastTimeNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntryLastTime, v))
}

// EntryLastTimeIn applies the In predicate on the "entry_last_time" field.
func EntryLastTimeIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntryLastTime, vs...))
}

// EntryLastTimeNotIn applies the NotIn predicate on the "entry_last_time" field.
func EntryLastTimeNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntryLastTime, vs...))
}

// EntryLastTimeGT applies the GT predicate on the "entry_last_time" field.
func EntryLastTimeGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntryLastTime, v))
}

// EntryLastTimeGTE applies the GTE predicate on the "entry_last_time" field.
func EntryLastTimeGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntryLastTime, v))
}

// EntryLastTimeLT applies the LT predicate on the "entry_last_time" field.
func EntryLastTimeLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntryLastTime, v))
}

// EntryLastTimeLTE applies the LTE predicate on the "entry_last_time" field.
func EntryLastTimeLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntryLastTime, v))
}

// EntryLastTimeIsNil applies the IsNil predicate on the "entry_last_time" field.
func EntryLastTimeIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntryLastTime))
}

// EntryLastTimeNotNil applies the NotNil predicate on the "entry_last_time" field.
func EntryLastTimeNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntryLastTime))
}

// EntryDeadlineTimeEQ applies the EQ predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeNEQ applies the NEQ predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeIn applies the In predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldEntryDeadlineTime, vs...))
}

// EntryDeadlineTimeNotIn applies the NotIn predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldEntryDeadlineTime, vs...))
}

// EntryDeadlineTimeGT applies the GT predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeGTE applies the GTE predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeLT applies the LT predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeLTE applies the LTE predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldEntryDeadlineTime, v))
}

// EntryDeadlineTimeIsNil applies the IsNil predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldEntryDeadlineTime))
}

// EntryDeadlineTimeNotNil applies the NotNil predicate on the "entry_deadline_time" field.
func EntryDeadlineTimeNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldEntryDeadlineTime))
}

// ClassLastTimeEQ applies the EQ predicate on the "class_last_time" field.
func ClassLastTimeEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldClassLastTime, v))
}

// ClassLastTimeNEQ applies the NEQ predicate on the "class_last_time" field.
func ClassLastTimeNEQ(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldClassLastTime, v))
}

// ClassLastTimeIn applies the In predicate on the "class_last_time" field.
func ClassLastTimeIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldClassLastTime, vs...))
}

// ClassLastTimeNotIn applies the NotIn predicate on the "class_last_time" field.
func ClassLastTimeNotIn(vs ...time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldClassLastTime, vs...))
}

// ClassLastTimeGT applies the GT predicate on the "class_last_time" field.
func ClassLastTimeGT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldClassLastTime, v))
}

// ClassLastTimeGTE applies the GTE predicate on the "class_last_time" field.
func ClassLastTimeGTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldClassLastTime, v))
}

// ClassLastTimeLT applies the LT predicate on the "class_last_time" field.
func ClassLastTimeLT(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldClassLastTime, v))
}

// ClassLastTimeLTE applies the LTE predicate on the "class_last_time" field.
func ClassLastTimeLTE(v time.Time) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldClassLastTime, v))
}

// ClassLastTimeIsNil applies the IsNil predicate on the "class_last_time" field.
func ClassLastTimeIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldClassLastTime))
}

// ClassLastTimeNotNil applies the NotNil predicate on the "class_last_time" field.
func ClassLastTimeNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldClassLastTime))
}

// RelationUIDEQ applies the EQ predicate on the "relation_uid" field.
func RelationUIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationUID, v))
}

// RelationUIDNEQ applies the NEQ predicate on the "relation_uid" field.
func RelationUIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldRelationUID, v))
}

// RelationUIDIn applies the In predicate on the "relation_uid" field.
func RelationUIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldRelationUID, vs...))
}

// RelationUIDNotIn applies the NotIn predicate on the "relation_uid" field.
func RelationUIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldRelationUID, vs...))
}

// RelationUIDGT applies the GT predicate on the "relation_uid" field.
func RelationUIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldRelationUID, v))
}

// RelationUIDGTE applies the GTE predicate on the "relation_uid" field.
func RelationUIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldRelationUID, v))
}

// RelationUIDLT applies the LT predicate on the "relation_uid" field.
func RelationUIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldRelationUID, v))
}

// RelationUIDLTE applies the LTE predicate on the "relation_uid" field.
func RelationUIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldRelationUID, v))
}

// RelationUIDIsNil applies the IsNil predicate on the "relation_uid" field.
func RelationUIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldRelationUID))
}

// RelationUIDNotNil applies the NotNil predicate on the "relation_uid" field.
func RelationUIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldRelationUID))
}

// RelationUnameEQ applies the EQ predicate on the "relation_uname" field.
func RelationUnameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationUname, v))
}

// RelationUnameNEQ applies the NEQ predicate on the "relation_uname" field.
func RelationUnameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldRelationUname, v))
}

// RelationUnameIn applies the In predicate on the "relation_uname" field.
func RelationUnameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldRelationUname, vs...))
}

// RelationUnameNotIn applies the NotIn predicate on the "relation_uname" field.
func RelationUnameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldRelationUname, vs...))
}

// RelationUnameGT applies the GT predicate on the "relation_uname" field.
func RelationUnameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldRelationUname, v))
}

// RelationUnameGTE applies the GTE predicate on the "relation_uname" field.
func RelationUnameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldRelationUname, v))
}

// RelationUnameLT applies the LT predicate on the "relation_uname" field.
func RelationUnameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldRelationUname, v))
}

// RelationUnameLTE applies the LTE predicate on the "relation_uname" field.
func RelationUnameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldRelationUname, v))
}

// RelationUnameContains applies the Contains predicate on the "relation_uname" field.
func RelationUnameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldRelationUname, v))
}

// RelationUnameHasPrefix applies the HasPrefix predicate on the "relation_uname" field.
func RelationUnameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldRelationUname, v))
}

// RelationUnameHasSuffix applies the HasSuffix predicate on the "relation_uname" field.
func RelationUnameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldRelationUname, v))
}

// RelationUnameIsNil applies the IsNil predicate on the "relation_uname" field.
func RelationUnameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldRelationUname))
}

// RelationUnameNotNil applies the NotNil predicate on the "relation_uname" field.
func RelationUnameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldRelationUname))
}

// RelationUnameEqualFold applies the EqualFold predicate on the "relation_uname" field.
func RelationUnameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldRelationUname, v))
}

// RelationUnameContainsFold applies the ContainsFold predicate on the "relation_uname" field.
func RelationUnameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldRelationUname, v))
}

// RelationMidEQ applies the EQ predicate on the "relation_mid" field.
func RelationMidEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationMid, v))
}

// RelationMidNEQ applies the NEQ predicate on the "relation_mid" field.
func RelationMidNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldRelationMid, v))
}

// RelationMidIn applies the In predicate on the "relation_mid" field.
func RelationMidIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldRelationMid, vs...))
}

// RelationMidNotIn applies the NotIn predicate on the "relation_mid" field.
func RelationMidNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldRelationMid, vs...))
}

// RelationMidGT applies the GT predicate on the "relation_mid" field.
func RelationMidGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldRelationMid, v))
}

// RelationMidGTE applies the GTE predicate on the "relation_mid" field.
func RelationMidGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldRelationMid, v))
}

// RelationMidLT applies the LT predicate on the "relation_mid" field.
func RelationMidLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldRelationMid, v))
}

// RelationMidLTE applies the LTE predicate on the "relation_mid" field.
func RelationMidLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldRelationMid, v))
}

// RelationMidIsNil applies the IsNil predicate on the "relation_mid" field.
func RelationMidIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldRelationMid))
}

// RelationMidNotNil applies the NotNil predicate on the "relation_mid" field.
func RelationMidNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldRelationMid))
}

// RelationMameEQ applies the EQ predicate on the "relation_mame" field.
func RelationMameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldRelationMame, v))
}

// RelationMameNEQ applies the NEQ predicate on the "relation_mame" field.
func RelationMameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldRelationMame, v))
}

// RelationMameIn applies the In predicate on the "relation_mame" field.
func RelationMameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldRelationMame, vs...))
}

// RelationMameNotIn applies the NotIn predicate on the "relation_mame" field.
func RelationMameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldRelationMame, vs...))
}

// RelationMameGT applies the GT predicate on the "relation_mame" field.
func RelationMameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldRelationMame, v))
}

// RelationMameGTE applies the GTE predicate on the "relation_mame" field.
func RelationMameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldRelationMame, v))
}

// RelationMameLT applies the LT predicate on the "relation_mame" field.
func RelationMameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldRelationMame, v))
}

// RelationMameLTE applies the LTE predicate on the "relation_mame" field.
func RelationMameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldRelationMame, v))
}

// RelationMameContains applies the Contains predicate on the "relation_mame" field.
func RelationMameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldRelationMame, v))
}

// RelationMameHasPrefix applies the HasPrefix predicate on the "relation_mame" field.
func RelationMameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldRelationMame, v))
}

// RelationMameHasSuffix applies the HasSuffix predicate on the "relation_mame" field.
func RelationMameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldRelationMame, v))
}

// RelationMameIsNil applies the IsNil predicate on the "relation_mame" field.
func RelationMameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldRelationMame))
}

// RelationMameNotNil applies the NotNil predicate on the "relation_mame" field.
func RelationMameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldRelationMame))
}

// RelationMameEqualFold applies the EqualFold predicate on the "relation_mame" field.
func RelationMameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldRelationMame, v))
}

// RelationMameContainsFold applies the ContainsFold predicate on the "relation_mame" field.
func RelationMameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldRelationMame, v))
}

// CreateIDEQ applies the EQ predicate on the "create_id" field.
func CreateIDEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreateID, v))
}

// CreateIDNEQ applies the NEQ predicate on the "create_id" field.
func CreateIDNEQ(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreateID, v))
}

// CreateIDIn applies the In predicate on the "create_id" field.
func CreateIDIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreateID, vs...))
}

// CreateIDNotIn applies the NotIn predicate on the "create_id" field.
func CreateIDNotIn(vs ...int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreateID, vs...))
}

// CreateIDGT applies the GT predicate on the "create_id" field.
func CreateIDGT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreateID, v))
}

// CreateIDGTE applies the GTE predicate on the "create_id" field.
func CreateIDGTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreateID, v))
}

// CreateIDLT applies the LT predicate on the "create_id" field.
func CreateIDLT(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreateID, v))
}

// CreateIDLTE applies the LTE predicate on the "create_id" field.
func CreateIDLTE(v int64) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreateID, v))
}

// CreateIDIsNil applies the IsNil predicate on the "create_id" field.
func CreateIDIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldCreateID))
}

// CreateIDNotNil applies the NotNil predicate on the "create_id" field.
func CreateIDNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldCreateID))
}

// CreateNameEQ applies the EQ predicate on the "create_name" field.
func CreateNameEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEQ(FieldCreateName, v))
}

// CreateNameNEQ applies the NEQ predicate on the "create_name" field.
func CreateNameNEQ(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNEQ(FieldCreateName, v))
}

// CreateNameIn applies the In predicate on the "create_name" field.
func CreateNameIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIn(FieldCreateName, vs...))
}

// CreateNameNotIn applies the NotIn predicate on the "create_name" field.
func CreateNameNotIn(vs ...string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotIn(FieldCreateName, vs...))
}

// CreateNameGT applies the GT predicate on the "create_name" field.
func CreateNameGT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGT(FieldCreateName, v))
}

// CreateNameGTE applies the GTE predicate on the "create_name" field.
func CreateNameGTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldGTE(FieldCreateName, v))
}

// CreateNameLT applies the LT predicate on the "create_name" field.
func CreateNameLT(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLT(FieldCreateName, v))
}

// CreateNameLTE applies the LTE predicate on the "create_name" field.
func CreateNameLTE(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldLTE(FieldCreateName, v))
}

// CreateNameContains applies the Contains predicate on the "create_name" field.
func CreateNameContains(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContains(FieldCreateName, v))
}

// CreateNameHasPrefix applies the HasPrefix predicate on the "create_name" field.
func CreateNameHasPrefix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasPrefix(FieldCreateName, v))
}

// CreateNameHasSuffix applies the HasSuffix predicate on the "create_name" field.
func CreateNameHasSuffix(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldHasSuffix(FieldCreateName, v))
}

// CreateNameIsNil applies the IsNil predicate on the "create_name" field.
func CreateNameIsNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldIsNull(FieldCreateName))
}

// CreateNameNotNil applies the NotNil predicate on the "create_name" field.
func CreateNameNotNil() predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldNotNull(FieldCreateName))
}

// CreateNameEqualFold applies the EqualFold predicate on the "create_name" field.
func CreateNameEqualFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldEqualFold(FieldCreateName, v))
}

// CreateNameContainsFold applies the ContainsFold predicate on the "create_name" field.
func CreateNameContainsFold(v string) predicate.MemberDetails {
	return predicate.MemberDetails(sql.FieldContainsFold(FieldCreateName, v))
}

// HasInfo applies the HasEdge predicate on the "info" edge.
func HasInfo() predicate.MemberDetails {
	return predicate.MemberDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InfoTable, InfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInfoWith applies the HasEdge predicate on the "info" edge with a given conditions (other predicates).
func HasInfoWith(preds ...predicate.Member) predicate.MemberDetails {
	return predicate.MemberDetails(func(s *sql.Selector) {
		step := newInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberDetails) predicate.MemberDetails {
	return predicate.MemberDetails(sql.NotPredicates(p))
}

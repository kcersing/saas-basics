// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/member"
	"saas/pkg/db/ent/membercontract"
	"saas/pkg/db/ent/membercontractcontent"
	"saas/pkg/db/ent/order"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberContractCreate is the builder for creating a MemberContract entity.
type MemberContractCreate struct {
	config
	mutation *MemberContractMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mcc *MemberContractCreate) SetCreatedAt(t time.Time) *MemberContractCreate {
	mcc.mutation.SetCreatedAt(t)
	return mcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableCreatedAt(t *time.Time) *MemberContractCreate {
	if t != nil {
		mcc.SetCreatedAt(*t)
	}
	return mcc
}

// SetUpdatedAt sets the "updated_at" field.
func (mcc *MemberContractCreate) SetUpdatedAt(t time.Time) *MemberContractCreate {
	mcc.mutation.SetUpdatedAt(t)
	return mcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableUpdatedAt(t *time.Time) *MemberContractCreate {
	if t != nil {
		mcc.SetUpdatedAt(*t)
	}
	return mcc
}

// SetStatus sets the "status" field.
func (mcc *MemberContractCreate) SetStatus(i int64) *MemberContractCreate {
	mcc.mutation.SetStatus(i)
	return mcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableStatus(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetStatus(*i)
	}
	return mcc
}

// SetMemberID sets the "member_id" field.
func (mcc *MemberContractCreate) SetMemberID(i int64) *MemberContractCreate {
	mcc.mutation.SetMemberID(i)
	return mcc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableMemberID(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetMemberID(*i)
	}
	return mcc
}

// SetContractID sets the "contract_id" field.
func (mcc *MemberContractCreate) SetContractID(i int64) *MemberContractCreate {
	mcc.mutation.SetContractID(i)
	return mcc
}

// SetNillableContractID sets the "contract_id" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableContractID(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetContractID(*i)
	}
	return mcc
}

// SetOrderID sets the "order_id" field.
func (mcc *MemberContractCreate) SetOrderID(i int64) *MemberContractCreate {
	mcc.mutation.SetOrderID(i)
	return mcc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableOrderID(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetOrderID(*i)
	}
	return mcc
}

// SetVenueID sets the "venue_id" field.
func (mcc *MemberContractCreate) SetVenueID(i int64) *MemberContractCreate {
	mcc.mutation.SetVenueID(i)
	return mcc
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableVenueID(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetVenueID(*i)
	}
	return mcc
}

// SetMemberProductID sets the "member_product_id" field.
func (mcc *MemberContractCreate) SetMemberProductID(i int64) *MemberContractCreate {
	mcc.mutation.SetMemberProductID(i)
	return mcc
}

// SetNillableMemberProductID sets the "member_product_id" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableMemberProductID(i *int64) *MemberContractCreate {
	if i != nil {
		mcc.SetMemberProductID(*i)
	}
	return mcc
}

// SetName sets the "name" field.
func (mcc *MemberContractCreate) SetName(s string) *MemberContractCreate {
	mcc.mutation.SetName(s)
	return mcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableName(s *string) *MemberContractCreate {
	if s != nil {
		mcc.SetName(*s)
	}
	return mcc
}

// SetSign sets the "sign" field.
func (mcc *MemberContractCreate) SetSign(s string) *MemberContractCreate {
	mcc.mutation.SetSign(s)
	return mcc
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (mcc *MemberContractCreate) SetNillableSign(s *string) *MemberContractCreate {
	if s != nil {
		mcc.SetSign(*s)
	}
	return mcc
}

// SetID sets the "id" field.
func (mcc *MemberContractCreate) SetID(i int64) *MemberContractCreate {
	mcc.mutation.SetID(i)
	return mcc
}

// AddContentIDs adds the "content" edge to the MemberContractContent entity by IDs.
func (mcc *MemberContractCreate) AddContentIDs(ids ...int64) *MemberContractCreate {
	mcc.mutation.AddContentIDs(ids...)
	return mcc
}

// AddContent adds the "content" edges to the MemberContractContent entity.
func (mcc *MemberContractCreate) AddContent(m ...*MemberContractContent) *MemberContractCreate {
	ids := make([]int64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcc.AddContentIDs(ids...)
}

// SetMember sets the "member" edge to the Member entity.
func (mcc *MemberContractCreate) SetMember(m *Member) *MemberContractCreate {
	return mcc.SetMemberID(m.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (mcc *MemberContractCreate) SetOrder(o *Order) *MemberContractCreate {
	return mcc.SetOrderID(o.ID)
}

// Mutation returns the MemberContractMutation object of the builder.
func (mcc *MemberContractCreate) Mutation() *MemberContractMutation {
	return mcc.mutation
}

// Save creates the MemberContract in the database.
func (mcc *MemberContractCreate) Save(ctx context.Context) (*MemberContract, error) {
	mcc.defaults()
	return withHooks(ctx, mcc.sqlSave, mcc.mutation, mcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MemberContractCreate) SaveX(ctx context.Context) *MemberContract {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MemberContractCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MemberContractCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MemberContractCreate) defaults() {
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		v := membercontract.DefaultCreatedAt()
		mcc.mutation.SetCreatedAt(v)
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		v := membercontract.DefaultUpdatedAt()
		mcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mcc.mutation.Status(); !ok {
		v := membercontract.DefaultStatus
		mcc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MemberContractCreate) check() error {
	if _, ok := mcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MemberContract.created_at"`)}
	}
	if _, ok := mcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MemberContract.updated_at"`)}
	}
	return nil
}

func (mcc *MemberContractCreate) sqlSave(ctx context.Context) (*MemberContract, error) {
	if err := mcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mcc.mutation.id = &_node.ID
	mcc.mutation.done = true
	return _node, nil
}

func (mcc *MemberContractCreate) createSpec() (*MemberContract, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberContract{config: mcc.config}
		_spec = sqlgraph.NewCreateSpec(membercontract.Table, sqlgraph.NewFieldSpec(membercontract.FieldID, field.TypeInt64))
	)
	if id, ok := mcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mcc.mutation.CreatedAt(); ok {
		_spec.SetField(membercontract.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mcc.mutation.UpdatedAt(); ok {
		_spec.SetField(membercontract.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mcc.mutation.Status(); ok {
		_spec.SetField(membercontract.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	if value, ok := mcc.mutation.ContractID(); ok {
		_spec.SetField(membercontract.FieldContractID, field.TypeInt64, value)
		_node.ContractID = value
	}
	if value, ok := mcc.mutation.VenueID(); ok {
		_spec.SetField(membercontract.FieldVenueID, field.TypeInt64, value)
		_node.VenueID = value
	}
	if value, ok := mcc.mutation.MemberProductID(); ok {
		_spec.SetField(membercontract.FieldMemberProductID, field.TypeInt64, value)
		_node.MemberProductID = value
	}
	if value, ok := mcc.mutation.Name(); ok {
		_spec.SetField(membercontract.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mcc.mutation.Sign(); ok {
		_spec.SetField(membercontract.FieldSign, field.TypeString, value)
		_node.Sign = value
	}
	if nodes := mcc.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   membercontract.ContentTable,
			Columns: []string{membercontract.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membercontractcontent.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.MemberTable,
			Columns: []string{membercontract.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mcc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membercontract.OrderTable,
			Columns: []string{membercontract.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MemberContractCreateBulk is the builder for creating many MemberContract entities in bulk.
type MemberContractCreateBulk struct {
	config
	err      error
	builders []*MemberContractCreate
}

// Save creates the MemberContract entities in the database.
func (mccb *MemberContractCreateBulk) Save(ctx context.Context) ([]*MemberContract, error) {
	if mccb.err != nil {
		return nil, mccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MemberContract, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MemberContractCreateBulk) SaveX(ctx context.Context) []*MemberContract {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MemberContractCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MemberContractCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}

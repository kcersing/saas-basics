// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/memberproductproperty"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyDelete is the builder for deleting a MemberProductProperty entity.
type MemberProductPropertyDelete struct {
	config
	hooks    []Hook
	mutation *MemberProductPropertyMutation
}

// Where appends a list predicates to the MemberProductPropertyDelete builder.
func (mppd *MemberProductPropertyDelete) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyDelete {
	mppd.mutation.Where(ps...)
	return mppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mppd *MemberProductPropertyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mppd.sqlExec, mppd.mutation, mppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mppd *MemberProductPropertyDelete) ExecX(ctx context.Context) int {
	n, err := mppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mppd *MemberProductPropertyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberproductproperty.Table, sqlgraph.NewFieldSpec(memberproductproperty.FieldID, field.TypeInt64))
	if ps := mppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mppd.mutation.done = true
	return affected, err
}

// MemberProductPropertyDeleteOne is the builder for deleting a single MemberProductProperty entity.
type MemberProductPropertyDeleteOne struct {
	mppd *MemberProductPropertyDelete
}

// Where appends a list predicates to the MemberProductPropertyDelete builder.
func (mppdo *MemberProductPropertyDeleteOne) Where(ps ...predicate.MemberProductProperty) *MemberProductPropertyDeleteOne {
	mppdo.mppd.mutation.Where(ps...)
	return mppdo
}

// Exec executes the deletion query.
func (mppdo *MemberProductPropertyDeleteOne) Exec(ctx context.Context) error {
	n, err := mppdo.mppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberproductproperty.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mppdo *MemberProductPropertyDeleteOne) ExecX(ctx context.Context) {
	if err := mppdo.Exec(ctx); err != nil {
		panic(err)
	}
}

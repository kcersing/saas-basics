// Code generated by ent, DO NOT EDIT.

package contest

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldName, v))
}

// SignNumber applies equality check predicate on the "sign_number" field. It's identical to SignNumberEQ.
func SignNumber(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignNumber, v))
}

// SignStartAt applies equality check predicate on the "sign_start_at" field. It's identical to SignStartAtEQ.
func SignStartAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignStartAt, v))
}

// SignEndAt applies equality check predicate on the "sign_end_at" field. It's identical to SignEndAtEQ.
func SignEndAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignEndAt, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldNumber, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldEndAt, v))
}

// Pic applies equality check predicate on the "pic" field. It's identical to PicEQ.
func Pic(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldPic, v))
}

// Sponsor applies equality check predicate on the "sponsor" field. It's identical to SponsorEQ.
func Sponsor(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSponsor, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFee, v))
}

// IsCancel applies equality check predicate on the "is_cancel" field. It's identical to IsCancelEQ.
func IsCancel(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldIsCancel, v))
}

// CancelTime applies equality check predicate on the "cancel_time" field. It's identical to CancelTimeEQ.
func CancelTime(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCancelTime, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldDetail, v))
}

// SignFields applies equality check predicate on the "sign_fields" field. It's identical to SignFieldsEQ.
func SignFields(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignFields, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldName, v))
}

// SignNumberEQ applies the EQ predicate on the "sign_number" field.
func SignNumberEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignNumber, v))
}

// SignNumberNEQ applies the NEQ predicate on the "sign_number" field.
func SignNumberNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldSignNumber, v))
}

// SignNumberIn applies the In predicate on the "sign_number" field.
func SignNumberIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldSignNumber, vs...))
}

// SignNumberNotIn applies the NotIn predicate on the "sign_number" field.
func SignNumberNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldSignNumber, vs...))
}

// SignNumberGT applies the GT predicate on the "sign_number" field.
func SignNumberGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldSignNumber, v))
}

// SignNumberGTE applies the GTE predicate on the "sign_number" field.
func SignNumberGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldSignNumber, v))
}

// SignNumberLT applies the LT predicate on the "sign_number" field.
func SignNumberLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldSignNumber, v))
}

// SignNumberLTE applies the LTE predicate on the "sign_number" field.
func SignNumberLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldSignNumber, v))
}

// SignNumberIsNil applies the IsNil predicate on the "sign_number" field.
func SignNumberIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldSignNumber))
}

// SignNumberNotNil applies the NotNil predicate on the "sign_number" field.
func SignNumberNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldSignNumber))
}

// SignStartAtEQ applies the EQ predicate on the "sign_start_at" field.
func SignStartAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignStartAt, v))
}

// SignStartAtNEQ applies the NEQ predicate on the "sign_start_at" field.
func SignStartAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldSignStartAt, v))
}

// SignStartAtIn applies the In predicate on the "sign_start_at" field.
func SignStartAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldSignStartAt, vs...))
}

// SignStartAtNotIn applies the NotIn predicate on the "sign_start_at" field.
func SignStartAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldSignStartAt, vs...))
}

// SignStartAtGT applies the GT predicate on the "sign_start_at" field.
func SignStartAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldSignStartAt, v))
}

// SignStartAtGTE applies the GTE predicate on the "sign_start_at" field.
func SignStartAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldSignStartAt, v))
}

// SignStartAtLT applies the LT predicate on the "sign_start_at" field.
func SignStartAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldSignStartAt, v))
}

// SignStartAtLTE applies the LTE predicate on the "sign_start_at" field.
func SignStartAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldSignStartAt, v))
}

// SignStartAtIsNil applies the IsNil predicate on the "sign_start_at" field.
func SignStartAtIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldSignStartAt))
}

// SignStartAtNotNil applies the NotNil predicate on the "sign_start_at" field.
func SignStartAtNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldSignStartAt))
}

// SignEndAtEQ applies the EQ predicate on the "sign_end_at" field.
func SignEndAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignEndAt, v))
}

// SignEndAtNEQ applies the NEQ predicate on the "sign_end_at" field.
func SignEndAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldSignEndAt, v))
}

// SignEndAtIn applies the In predicate on the "sign_end_at" field.
func SignEndAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldSignEndAt, vs...))
}

// SignEndAtNotIn applies the NotIn predicate on the "sign_end_at" field.
func SignEndAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldSignEndAt, vs...))
}

// SignEndAtGT applies the GT predicate on the "sign_end_at" field.
func SignEndAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldSignEndAt, v))
}

// SignEndAtGTE applies the GTE predicate on the "sign_end_at" field.
func SignEndAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldSignEndAt, v))
}

// SignEndAtLT applies the LT predicate on the "sign_end_at" field.
func SignEndAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldSignEndAt, v))
}

// SignEndAtLTE applies the LTE predicate on the "sign_end_at" field.
func SignEndAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldSignEndAt, v))
}

// SignEndAtIsNil applies the IsNil predicate on the "sign_end_at" field.
func SignEndAtIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldSignEndAt))
}

// SignEndAtNotNil applies the NotNil predicate on the "sign_end_at" field.
func SignEndAtNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldSignEndAt))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldNumber))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldEndAt))
}

// PicEQ applies the EQ predicate on the "pic" field.
func PicEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldPic, v))
}

// PicNEQ applies the NEQ predicate on the "pic" field.
func PicNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldPic, v))
}

// PicIn applies the In predicate on the "pic" field.
func PicIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldPic, vs...))
}

// PicNotIn applies the NotIn predicate on the "pic" field.
func PicNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldPic, vs...))
}

// PicGT applies the GT predicate on the "pic" field.
func PicGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldPic, v))
}

// PicGTE applies the GTE predicate on the "pic" field.
func PicGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldPic, v))
}

// PicLT applies the LT predicate on the "pic" field.
func PicLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldPic, v))
}

// PicLTE applies the LTE predicate on the "pic" field.
func PicLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldPic, v))
}

// PicContains applies the Contains predicate on the "pic" field.
func PicContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldPic, v))
}

// PicHasPrefix applies the HasPrefix predicate on the "pic" field.
func PicHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldPic, v))
}

// PicHasSuffix applies the HasSuffix predicate on the "pic" field.
func PicHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldPic, v))
}

// PicIsNil applies the IsNil predicate on the "pic" field.
func PicIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldPic))
}

// PicNotNil applies the NotNil predicate on the "pic" field.
func PicNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldPic))
}

// PicEqualFold applies the EqualFold predicate on the "pic" field.
func PicEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldPic, v))
}

// PicContainsFold applies the ContainsFold predicate on the "pic" field.
func PicContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldPic, v))
}

// SponsorEQ applies the EQ predicate on the "sponsor" field.
func SponsorEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSponsor, v))
}

// SponsorNEQ applies the NEQ predicate on the "sponsor" field.
func SponsorNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldSponsor, v))
}

// SponsorIn applies the In predicate on the "sponsor" field.
func SponsorIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldSponsor, vs...))
}

// SponsorNotIn applies the NotIn predicate on the "sponsor" field.
func SponsorNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldSponsor, vs...))
}

// SponsorGT applies the GT predicate on the "sponsor" field.
func SponsorGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldSponsor, v))
}

// SponsorGTE applies the GTE predicate on the "sponsor" field.
func SponsorGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldSponsor, v))
}

// SponsorLT applies the LT predicate on the "sponsor" field.
func SponsorLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldSponsor, v))
}

// SponsorLTE applies the LTE predicate on the "sponsor" field.
func SponsorLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldSponsor, v))
}

// SponsorContains applies the Contains predicate on the "sponsor" field.
func SponsorContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldSponsor, v))
}

// SponsorHasPrefix applies the HasPrefix predicate on the "sponsor" field.
func SponsorHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldSponsor, v))
}

// SponsorHasSuffix applies the HasSuffix predicate on the "sponsor" field.
func SponsorHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldSponsor, v))
}

// SponsorIsNil applies the IsNil predicate on the "sponsor" field.
func SponsorIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldSponsor))
}

// SponsorNotNil applies the NotNil predicate on the "sponsor" field.
func SponsorNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldSponsor))
}

// SponsorEqualFold applies the EqualFold predicate on the "sponsor" field.
func SponsorEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldSponsor, v))
}

// SponsorContainsFold applies the ContainsFold predicate on the "sponsor" field.
func SponsorContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldSponsor, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldFee, v))
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldFee))
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldFee))
}

// IsCancelEQ applies the EQ predicate on the "is_cancel" field.
func IsCancelEQ(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldIsCancel, v))
}

// IsCancelNEQ applies the NEQ predicate on the "is_cancel" field.
func IsCancelNEQ(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldIsCancel, v))
}

// IsCancelIn applies the In predicate on the "is_cancel" field.
func IsCancelIn(vs ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldIsCancel, vs...))
}

// IsCancelNotIn applies the NotIn predicate on the "is_cancel" field.
func IsCancelNotIn(vs ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldIsCancel, vs...))
}

// IsCancelGT applies the GT predicate on the "is_cancel" field.
func IsCancelGT(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldIsCancel, v))
}

// IsCancelGTE applies the GTE predicate on the "is_cancel" field.
func IsCancelGTE(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldIsCancel, v))
}

// IsCancelLT applies the LT predicate on the "is_cancel" field.
func IsCancelLT(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldIsCancel, v))
}

// IsCancelLTE applies the LTE predicate on the "is_cancel" field.
func IsCancelLTE(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldIsCancel, v))
}

// IsCancelIsNil applies the IsNil predicate on the "is_cancel" field.
func IsCancelIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldIsCancel))
}

// IsCancelNotNil applies the NotNil predicate on the "is_cancel" field.
func IsCancelNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldIsCancel))
}

// CancelTimeEQ applies the EQ predicate on the "cancel_time" field.
func CancelTimeEQ(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCancelTime, v))
}

// CancelTimeNEQ applies the NEQ predicate on the "cancel_time" field.
func CancelTimeNEQ(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldCancelTime, v))
}

// CancelTimeIn applies the In predicate on the "cancel_time" field.
func CancelTimeIn(vs ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldCancelTime, vs...))
}

// CancelTimeNotIn applies the NotIn predicate on the "cancel_time" field.
func CancelTimeNotIn(vs ...int64) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldCancelTime, vs...))
}

// CancelTimeGT applies the GT predicate on the "cancel_time" field.
func CancelTimeGT(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldCancelTime, v))
}

// CancelTimeGTE applies the GTE predicate on the "cancel_time" field.
func CancelTimeGTE(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldCancelTime, v))
}

// CancelTimeLT applies the LT predicate on the "cancel_time" field.
func CancelTimeLT(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldCancelTime, v))
}

// CancelTimeLTE applies the LTE predicate on the "cancel_time" field.
func CancelTimeLTE(v int64) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldCancelTime, v))
}

// CancelTimeIsNil applies the IsNil predicate on the "cancel_time" field.
func CancelTimeIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldCancelTime))
}

// CancelTimeNotNil applies the NotNil predicate on the "cancel_time" field.
func CancelTimeNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldCancelTime))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldDetail))
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldDetail))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldDetail, v))
}

// SignFieldsEQ applies the EQ predicate on the "sign_fields" field.
func SignFieldsEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldSignFields, v))
}

// SignFieldsNEQ applies the NEQ predicate on the "sign_fields" field.
func SignFieldsNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldSignFields, v))
}

// SignFieldsIn applies the In predicate on the "sign_fields" field.
func SignFieldsIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldSignFields, vs...))
}

// SignFieldsNotIn applies the NotIn predicate on the "sign_fields" field.
func SignFieldsNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldSignFields, vs...))
}

// SignFieldsGT applies the GT predicate on the "sign_fields" field.
func SignFieldsGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldSignFields, v))
}

// SignFieldsGTE applies the GTE predicate on the "sign_fields" field.
func SignFieldsGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldSignFields, v))
}

// SignFieldsLT applies the LT predicate on the "sign_fields" field.
func SignFieldsLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldSignFields, v))
}

// SignFieldsLTE applies the LTE predicate on the "sign_fields" field.
func SignFieldsLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldSignFields, v))
}

// SignFieldsContains applies the Contains predicate on the "sign_fields" field.
func SignFieldsContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldSignFields, v))
}

// SignFieldsHasPrefix applies the HasPrefix predicate on the "sign_fields" field.
func SignFieldsHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldSignFields, v))
}

// SignFieldsHasSuffix applies the HasSuffix predicate on the "sign_fields" field.
func SignFieldsHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldSignFields, v))
}

// SignFieldsIsNil applies the IsNil predicate on the "sign_fields" field.
func SignFieldsIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldSignFields))
}

// SignFieldsNotNil applies the NotNil predicate on the "sign_fields" field.
func SignFieldsNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldSignFields))
}

// SignFieldsEqualFold applies the EqualFold predicate on the "sign_fields" field.
func SignFieldsEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldSignFields, v))
}

// SignFieldsContainsFold applies the ContainsFold predicate on the "sign_fields" field.
func SignFieldsContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldSignFields, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.NotPredicates(p))
}

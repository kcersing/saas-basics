// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/memberproductpropertyvenue"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberProductPropertyVenueDelete is the builder for deleting a MemberProductPropertyVenue entity.
type MemberProductPropertyVenueDelete struct {
	config
	hooks    []Hook
	mutation *MemberProductPropertyVenueMutation
}

// Where appends a list predicates to the MemberProductPropertyVenueDelete builder.
func (mppvd *MemberProductPropertyVenueDelete) Where(ps ...predicate.MemberProductPropertyVenue) *MemberProductPropertyVenueDelete {
	mppvd.mutation.Where(ps...)
	return mppvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mppvd *MemberProductPropertyVenueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mppvd.sqlExec, mppvd.mutation, mppvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mppvd *MemberProductPropertyVenueDelete) ExecX(ctx context.Context) int {
	n, err := mppvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mppvd *MemberProductPropertyVenueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberproductpropertyvenue.Table, sqlgraph.NewFieldSpec(memberproductpropertyvenue.FieldID, field.TypeInt64))
	if ps := mppvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mppvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mppvd.mutation.done = true
	return affected, err
}

// MemberProductPropertyVenueDeleteOne is the builder for deleting a single MemberProductPropertyVenue entity.
type MemberProductPropertyVenueDeleteOne struct {
	mppvd *MemberProductPropertyVenueDelete
}

// Where appends a list predicates to the MemberProductPropertyVenueDelete builder.
func (mppvdo *MemberProductPropertyVenueDeleteOne) Where(ps ...predicate.MemberProductPropertyVenue) *MemberProductPropertyVenueDeleteOne {
	mppvdo.mppvd.mutation.Where(ps...)
	return mppvdo
}

// Exec executes the deletion query.
func (mppvdo *MemberProductPropertyVenueDeleteOne) Exec(ctx context.Context) error {
	n, err := mppvdo.mppvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberproductpropertyvenue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mppvdo *MemberProductPropertyVenueDeleteOne) ExecX(ctx context.Context) {
	if err := mppvdo.Exec(ctx); err != nil {
		panic(err)
	}
}

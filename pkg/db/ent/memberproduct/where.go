// Code generated by ent, DO NOT EDIT.

package memberproduct

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldStatus, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldSn, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldType, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldMemberID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldProductID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldPrice, v))
}

// ValidityAt applies equality check predicate on the "validity_at" field. It's identical to ValidityAtEQ.
func ValidityAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldValidityAt, v))
}

// CancelAt applies equality check predicate on the "cancel_at" field. It's identical to CancelAtEQ.
func CancelAt(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCancelAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldStatus))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasSuffix(FieldSn, v))
}

// SnIsNil applies the IsNil predicate on the "sn" field.
func SnIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldSn))
}

// SnNotNil applies the NotNil predicate on the "sn" field.
func SnNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldSn))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContainsFold(FieldSn, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldContainsFold(FieldType, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldMemberID))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldProductID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldName))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldPrice))
}

// ValidityAtEQ applies the EQ predicate on the "validity_at" field.
func ValidityAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldValidityAt, v))
}

// ValidityAtNEQ applies the NEQ predicate on the "validity_at" field.
func ValidityAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldValidityAt, v))
}

// ValidityAtIn applies the In predicate on the "validity_at" field.
func ValidityAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldValidityAt, vs...))
}

// ValidityAtNotIn applies the NotIn predicate on the "validity_at" field.
func ValidityAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldValidityAt, vs...))
}

// ValidityAtGT applies the GT predicate on the "validity_at" field.
func ValidityAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldValidityAt, v))
}

// ValidityAtGTE applies the GTE predicate on the "validity_at" field.
func ValidityAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldValidityAt, v))
}

// ValidityAtLT applies the LT predicate on the "validity_at" field.
func ValidityAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldValidityAt, v))
}

// ValidityAtLTE applies the LTE predicate on the "validity_at" field.
func ValidityAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldValidityAt, v))
}

// ValidityAtIsNil applies the IsNil predicate on the "validity_at" field.
func ValidityAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldValidityAt))
}

// ValidityAtNotNil applies the NotNil predicate on the "validity_at" field.
func ValidityAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldValidityAt))
}

// CancelAtEQ applies the EQ predicate on the "cancel_at" field.
func CancelAtEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldEQ(FieldCancelAt, v))
}

// CancelAtNEQ applies the NEQ predicate on the "cancel_at" field.
func CancelAtNEQ(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNEQ(FieldCancelAt, v))
}

// CancelAtIn applies the In predicate on the "cancel_at" field.
func CancelAtIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIn(FieldCancelAt, vs...))
}

// CancelAtNotIn applies the NotIn predicate on the "cancel_at" field.
func CancelAtNotIn(vs ...time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotIn(FieldCancelAt, vs...))
}

// CancelAtGT applies the GT predicate on the "cancel_at" field.
func CancelAtGT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGT(FieldCancelAt, v))
}

// CancelAtGTE applies the GTE predicate on the "cancel_at" field.
func CancelAtGTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldGTE(FieldCancelAt, v))
}

// CancelAtLT applies the LT predicate on the "cancel_at" field.
func CancelAtLT(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLT(FieldCancelAt, v))
}

// CancelAtLTE applies the LTE predicate on the "cancel_at" field.
func CancelAtLTE(v time.Time) predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldLTE(FieldCancelAt, v))
}

// CancelAtIsNil applies the IsNil predicate on the "cancel_at" field.
func CancelAtIsNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldIsNull(FieldCancelAt))
}

// CancelAtNotNil applies the NotNil predicate on the "cancel_at" field.
func CancelAtNotNil() predicate.MemberProduct {
	return predicate.MemberProduct(sql.FieldNotNull(FieldCancelAt))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Member) predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberProductPropertys applies the HasEdge predicate on the "member_product_propertys" edge.
func HasMemberProductPropertys() predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberProductPropertysTable, MemberProductPropertysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberProductPropertysWith applies the HasEdge predicate on the "member_product_propertys" edge with a given conditions (other predicates).
func HasMemberProductPropertysWith(preds ...predicate.MemberProductProperty) predicate.MemberProduct {
	return predicate.MemberProduct(func(s *sql.Selector) {
		step := newMemberProductPropertysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberProduct) predicate.MemberProduct {
	return predicate.MemberProduct(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/order"
	"saas/pkg/db/ent/orderpay"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderPayCreate is the builder for creating a OrderPay entity.
type OrderPayCreate struct {
	config
	mutation *OrderPayMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrderPayCreate) SetCreatedAt(t time.Time) *OrderPayCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableCreatedAt(t *time.Time) *OrderPayCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrderPayCreate) SetUpdatedAt(t time.Time) *OrderPayCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableUpdatedAt(t *time.Time) *OrderPayCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetOrderID sets the "order_id" field.
func (opc *OrderPayCreate) SetOrderID(i int64) *OrderPayCreate {
	opc.mutation.SetOrderID(i)
	return opc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableOrderID(i *int64) *OrderPayCreate {
	if i != nil {
		opc.SetOrderID(*i)
	}
	return opc
}

// SetPaySn sets the "pay_sn" field.
func (opc *OrderPayCreate) SetPaySn(s string) *OrderPayCreate {
	opc.mutation.SetPaySn(s)
	return opc
}

// SetNillablePaySn sets the "pay_sn" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillablePaySn(s *string) *OrderPayCreate {
	if s != nil {
		opc.SetPaySn(*s)
	}
	return opc
}

// SetRemission sets the "remission" field.
func (opc *OrderPayCreate) SetRemission(f float64) *OrderPayCreate {
	opc.mutation.SetRemission(f)
	return opc
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableRemission(f *float64) *OrderPayCreate {
	if f != nil {
		opc.SetRemission(*f)
	}
	return opc
}

// SetPay sets the "pay" field.
func (opc *OrderPayCreate) SetPay(f float64) *OrderPayCreate {
	opc.mutation.SetPay(f)
	return opc
}

// SetNillablePay sets the "pay" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillablePay(f *float64) *OrderPayCreate {
	if f != nil {
		opc.SetPay(*f)
	}
	return opc
}

// SetNote sets the "note" field.
func (opc *OrderPayCreate) SetNote(s string) *OrderPayCreate {
	opc.mutation.SetNote(s)
	return opc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableNote(s *string) *OrderPayCreate {
	if s != nil {
		opc.SetNote(*s)
	}
	return opc
}

// SetCreateID sets the "create_id" field.
func (opc *OrderPayCreate) SetCreateID(i int64) *OrderPayCreate {
	opc.mutation.SetCreateID(i)
	return opc
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (opc *OrderPayCreate) SetNillableCreateID(i *int64) *OrderPayCreate {
	if i != nil {
		opc.SetCreateID(*i)
	}
	return opc
}

// SetID sets the "id" field.
func (opc *OrderPayCreate) SetID(i int64) *OrderPayCreate {
	opc.mutation.SetID(i)
	return opc
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (opc *OrderPayCreate) SetOwnerID(id int64) *OrderPayCreate {
	opc.mutation.SetOwnerID(id)
	return opc
}

// SetNillableOwnerID sets the "owner" edge to the Order entity by ID if the given value is not nil.
func (opc *OrderPayCreate) SetNillableOwnerID(id *int64) *OrderPayCreate {
	if id != nil {
		opc = opc.SetOwnerID(*id)
	}
	return opc
}

// SetOwner sets the "owner" edge to the Order entity.
func (opc *OrderPayCreate) SetOwner(o *Order) *OrderPayCreate {
	return opc.SetOwnerID(o.ID)
}

// Mutation returns the OrderPayMutation object of the builder.
func (opc *OrderPayCreate) Mutation() *OrderPayMutation {
	return opc.mutation
}

// Save creates the OrderPay in the database.
func (opc *OrderPayCreate) Save(ctx context.Context) (*OrderPay, error) {
	opc.defaults()
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrderPayCreate) SaveX(ctx context.Context) *OrderPay {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrderPayCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrderPayCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrderPayCreate) defaults() {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		v := orderpay.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		v := orderpay.DefaultUpdatedAt()
		opc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrderPayCreate) check() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPay.created_at"`)}
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPay.updated_at"`)}
	}
	return nil
}

func (opc *OrderPayCreate) sqlSave(ctx context.Context) (*OrderPay, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrderPayCreate) createSpec() (*OrderPay, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPay{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(orderpay.Table, sqlgraph.NewFieldSpec(orderpay.FieldID, field.TypeInt64))
	)
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.SetField(orderpay.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.SetField(orderpay.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.PaySn(); ok {
		_spec.SetField(orderpay.FieldPaySn, field.TypeString, value)
		_node.PaySn = value
	}
	if value, ok := opc.mutation.Remission(); ok {
		_spec.SetField(orderpay.FieldRemission, field.TypeFloat64, value)
		_node.Remission = value
	}
	if value, ok := opc.mutation.Pay(); ok {
		_spec.SetField(orderpay.FieldPay, field.TypeFloat64, value)
		_node.Pay = value
	}
	if value, ok := opc.mutation.Note(); ok {
		_spec.SetField(orderpay.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := opc.mutation.CreateID(); ok {
		_spec.SetField(orderpay.FieldCreateID, field.TypeInt64, value)
		_node.CreateID = value
	}
	if nodes := opc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OwnerTable,
			Columns: []string{orderpay.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderPayCreateBulk is the builder for creating many OrderPay entities in bulk.
type OrderPayCreateBulk struct {
	config
	err      error
	builders []*OrderPayCreate
}

// Save creates the OrderPay entities in the database.
func (opcb *OrderPayCreateBulk) Save(ctx context.Context) ([]*OrderPay, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrderPay, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrderPayCreateBulk) SaveX(ctx context.Context) []*OrderPay {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrderPayCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrderPayCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

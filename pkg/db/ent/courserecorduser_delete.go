// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/courserecorduser"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordUserDelete is the builder for deleting a CourseRecordUser entity.
type CourseRecordUserDelete struct {
	config
	hooks    []Hook
	mutation *CourseRecordUserMutation
}

// Where appends a list predicates to the CourseRecordUserDelete builder.
func (crud *CourseRecordUserDelete) Where(ps ...predicate.CourseRecordUser) *CourseRecordUserDelete {
	crud.mutation.Where(ps...)
	return crud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (crud *CourseRecordUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, crud.sqlExec, crud.mutation, crud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (crud *CourseRecordUserDelete) ExecX(ctx context.Context) int {
	n, err := crud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (crud *CourseRecordUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(courserecorduser.Table, sqlgraph.NewFieldSpec(courserecorduser.FieldID, field.TypeInt64))
	if ps := crud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, crud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	crud.mutation.done = true
	return affected, err
}

// CourseRecordUserDeleteOne is the builder for deleting a single CourseRecordUser entity.
type CourseRecordUserDeleteOne struct {
	crud *CourseRecordUserDelete
}

// Where appends a list predicates to the CourseRecordUserDelete builder.
func (crudo *CourseRecordUserDeleteOne) Where(ps ...predicate.CourseRecordUser) *CourseRecordUserDeleteOne {
	crudo.crud.mutation.Where(ps...)
	return crudo
}

// Exec executes the deletion query.
func (crudo *CourseRecordUserDeleteOne) Exec(ctx context.Context) error {
	n, err := crudo.crud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{courserecorduser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (crudo *CourseRecordUserDeleteOne) ExecX(ctx context.Context) {
	if err := crudo.Exec(ctx); err != nil {
		panic(err)
	}
}

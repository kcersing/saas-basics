// Code generated by ent, DO NOT EDIT.

package bootcamp

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bootcamp type in the database.
	Label = "bootcamp"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSignNumber holds the string denoting the sign_number field in the database.
	FieldSignNumber = "sign_number"
	// FieldSignStartAt holds the string denoting the sign_start_at field in the database.
	FieldSignStartAt = "sign_start_at"
	// FieldSignEndAt holds the string denoting the sign_end_at field in the database.
	FieldSignEndAt = "sign_end_at"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldPic holds the string denoting the pic field in the database.
	FieldPic = "pic"
	// FieldSponsor holds the string denoting the sponsor field in the database.
	FieldSponsor = "sponsor"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldIsFee holds the string denoting the is_fee field in the database.
	FieldIsFee = "is_fee"
	// FieldIsCancel holds the string denoting the is_cancel field in the database.
	FieldIsCancel = "is_cancel"
	// FieldCancelTime holds the string denoting the cancel_time field in the database.
	FieldCancelTime = "cancel_time"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldSignFields holds the string denoting the sign_fields field in the database.
	FieldSignFields = "sign_fields"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// EdgeBootcampParticipants holds the string denoting the bootcamp_participants edge name in mutations.
	EdgeBootcampParticipants = "bootcamp_participants"
	// Table holds the table name of the bootcamp in the database.
	Table = "bootcamp"
	// BootcampParticipantsTable is the table that holds the bootcamp_participants relation/edge.
	BootcampParticipantsTable = "bootcamp_participant"
	// BootcampParticipantsInverseTable is the table name for the BootcampParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "bootcampparticipant" package.
	BootcampParticipantsInverseTable = "bootcamp_participant"
	// BootcampParticipantsColumn is the table column denoting the bootcamp_participants relation/edge.
	BootcampParticipantsColumn = "bootcamp_id"
)

// Columns holds all SQL columns for bootcamp fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleteAt,
	FieldCreatedID,
	FieldStatus,
	FieldName,
	FieldSignNumber,
	FieldSignStartAt,
	FieldSignEndAt,
	FieldNumber,
	FieldStartAt,
	FieldEndAt,
	FieldPic,
	FieldSponsor,
	FieldFee,
	FieldIsFee,
	FieldIsCancel,
	FieldCancelTime,
	FieldDetail,
	FieldSignFields,
	FieldCondition,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedID holds the default value on creation for the "created_id" field.
	DefaultCreatedID int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultIsFee holds the default value on creation for the "is_fee" field.
	DefaultIsFee int64
	// DefaultIsCancel holds the default value on creation for the "is_cancel" field.
	DefaultIsCancel int64
	// DefaultCancelTime holds the default value on creation for the "cancel_time" field.
	DefaultCancelTime int64
	// DefaultCondition holds the default value on creation for the "condition" field.
	DefaultCondition int64
)

// OrderOption defines the ordering options for the Bootcamp queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleteAt orders the results by the delete_at field.
func ByDeleteAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteAt, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySignNumber orders the results by the sign_number field.
func BySignNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignNumber, opts...).ToFunc()
}

// BySignStartAt orders the results by the sign_start_at field.
func BySignStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignStartAt, opts...).ToFunc()
}

// BySignEndAt orders the results by the sign_end_at field.
func BySignEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignEndAt, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByPic orders the results by the pic field.
func ByPic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPic, opts...).ToFunc()
}

// BySponsor orders the results by the sponsor field.
func BySponsor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSponsor, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByIsFee orders the results by the is_fee field.
func ByIsFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFee, opts...).ToFunc()
}

// ByIsCancel orders the results by the is_cancel field.
func ByIsCancel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCancel, opts...).ToFunc()
}

// ByCancelTime orders the results by the cancel_time field.
func ByCancelTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelTime, opts...).ToFunc()
}

// ByDetail orders the results by the detail field.
func ByDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetail, opts...).ToFunc()
}

// BySignFields orders the results by the sign_fields field.
func BySignFields(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignFields, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByBootcampParticipantsCount orders the results by bootcamp_participants count.
func ByBootcampParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBootcampParticipantsStep(), opts...)
	}
}

// ByBootcampParticipants orders the results by bootcamp_participants terms.
func ByBootcampParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBootcampParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBootcampParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BootcampParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BootcampParticipantsTable, BootcampParticipantsColumn),
	)
}

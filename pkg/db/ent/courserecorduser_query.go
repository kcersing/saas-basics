// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/pkg/db/ent/courserecordschedule"
	"saas/pkg/db/ent/courserecorduser"
	"saas/pkg/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordUserQuery is the builder for querying CourseRecordUser entities.
type CourseRecordUserQuery struct {
	config
	ctx          *QueryContext
	order        []courserecorduser.OrderOption
	inters       []Interceptor
	predicates   []predicate.CourseRecordUser
	withSchedule *CourseRecordScheduleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CourseRecordUserQuery builder.
func (cruq *CourseRecordUserQuery) Where(ps ...predicate.CourseRecordUser) *CourseRecordUserQuery {
	cruq.predicates = append(cruq.predicates, ps...)
	return cruq
}

// Limit the number of records to be returned by this query.
func (cruq *CourseRecordUserQuery) Limit(limit int) *CourseRecordUserQuery {
	cruq.ctx.Limit = &limit
	return cruq
}

// Offset to start from.
func (cruq *CourseRecordUserQuery) Offset(offset int) *CourseRecordUserQuery {
	cruq.ctx.Offset = &offset
	return cruq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cruq *CourseRecordUserQuery) Unique(unique bool) *CourseRecordUserQuery {
	cruq.ctx.Unique = &unique
	return cruq
}

// Order specifies how the records should be ordered.
func (cruq *CourseRecordUserQuery) Order(o ...courserecorduser.OrderOption) *CourseRecordUserQuery {
	cruq.order = append(cruq.order, o...)
	return cruq
}

// QuerySchedule chains the current query on the "schedule" edge.
func (cruq *CourseRecordUserQuery) QuerySchedule() *CourseRecordScheduleQuery {
	query := (&CourseRecordScheduleClient{config: cruq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cruq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cruq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(courserecorduser.Table, courserecorduser.FieldID, selector),
			sqlgraph.To(courserecordschedule.Table, courserecordschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, courserecorduser.ScheduleTable, courserecorduser.ScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(cruq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CourseRecordUser entity from the query.
// Returns a *NotFoundError when no CourseRecordUser was found.
func (cruq *CourseRecordUserQuery) First(ctx context.Context) (*CourseRecordUser, error) {
	nodes, err := cruq.Limit(1).All(setContextOp(ctx, cruq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{courserecorduser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) FirstX(ctx context.Context) *CourseRecordUser {
	node, err := cruq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CourseRecordUser ID from the query.
// Returns a *NotFoundError when no CourseRecordUser ID was found.
func (cruq *CourseRecordUserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cruq.Limit(1).IDs(setContextOp(ctx, cruq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{courserecorduser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := cruq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CourseRecordUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CourseRecordUser entity is found.
// Returns a *NotFoundError when no CourseRecordUser entities are found.
func (cruq *CourseRecordUserQuery) Only(ctx context.Context) (*CourseRecordUser, error) {
	nodes, err := cruq.Limit(2).All(setContextOp(ctx, cruq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{courserecorduser.Label}
	default:
		return nil, &NotSingularError{courserecorduser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) OnlyX(ctx context.Context) *CourseRecordUser {
	node, err := cruq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CourseRecordUser ID in the query.
// Returns a *NotSingularError when more than one CourseRecordUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (cruq *CourseRecordUserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cruq.Limit(2).IDs(setContextOp(ctx, cruq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{courserecorduser.Label}
	default:
		err = &NotSingularError{courserecorduser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cruq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CourseRecordUsers.
func (cruq *CourseRecordUserQuery) All(ctx context.Context) ([]*CourseRecordUser, error) {
	ctx = setContextOp(ctx, cruq.ctx, "All")
	if err := cruq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CourseRecordUser, *CourseRecordUserQuery]()
	return withInterceptors[[]*CourseRecordUser](ctx, cruq, qr, cruq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) AllX(ctx context.Context) []*CourseRecordUser {
	nodes, err := cruq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CourseRecordUser IDs.
func (cruq *CourseRecordUserQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if cruq.ctx.Unique == nil && cruq.path != nil {
		cruq.Unique(true)
	}
	ctx = setContextOp(ctx, cruq.ctx, "IDs")
	if err = cruq.Select(courserecorduser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cruq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cruq *CourseRecordUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cruq.ctx, "Count")
	if err := cruq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cruq, querierCount[*CourseRecordUserQuery](), cruq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) CountX(ctx context.Context) int {
	count, err := cruq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cruq *CourseRecordUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cruq.ctx, "Exist")
	switch _, err := cruq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cruq *CourseRecordUserQuery) ExistX(ctx context.Context) bool {
	exist, err := cruq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CourseRecordUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cruq *CourseRecordUserQuery) Clone() *CourseRecordUserQuery {
	if cruq == nil {
		return nil
	}
	return &CourseRecordUserQuery{
		config:       cruq.config,
		ctx:          cruq.ctx.Clone(),
		order:        append([]courserecorduser.OrderOption{}, cruq.order...),
		inters:       append([]Interceptor{}, cruq.inters...),
		predicates:   append([]predicate.CourseRecordUser{}, cruq.predicates...),
		withSchedule: cruq.withSchedule.Clone(),
		// clone intermediate query.
		sql:  cruq.sql.Clone(),
		path: cruq.path,
	}
}

// WithSchedule tells the query-builder to eager-load the nodes that are connected to
// the "schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (cruq *CourseRecordUserQuery) WithSchedule(opts ...func(*CourseRecordScheduleQuery)) *CourseRecordUserQuery {
	query := (&CourseRecordScheduleClient{config: cruq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cruq.withSchedule = query
	return cruq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CourseRecordUser.Query().
//		GroupBy(courserecorduser.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cruq *CourseRecordUserQuery) GroupBy(field string, fields ...string) *CourseRecordUserGroupBy {
	cruq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CourseRecordUserGroupBy{build: cruq}
	grbuild.flds = &cruq.ctx.Fields
	grbuild.label = courserecorduser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CourseRecordUser.Query().
//		Select(courserecorduser.FieldCreatedAt).
//		Scan(ctx, &v)
func (cruq *CourseRecordUserQuery) Select(fields ...string) *CourseRecordUserSelect {
	cruq.ctx.Fields = append(cruq.ctx.Fields, fields...)
	sbuild := &CourseRecordUserSelect{CourseRecordUserQuery: cruq}
	sbuild.label = courserecorduser.Label
	sbuild.flds, sbuild.scan = &cruq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CourseRecordUserSelect configured with the given aggregations.
func (cruq *CourseRecordUserQuery) Aggregate(fns ...AggregateFunc) *CourseRecordUserSelect {
	return cruq.Select().Aggregate(fns...)
}

func (cruq *CourseRecordUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cruq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cruq); err != nil {
				return err
			}
		}
	}
	for _, f := range cruq.ctx.Fields {
		if !courserecorduser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cruq.path != nil {
		prev, err := cruq.path(ctx)
		if err != nil {
			return err
		}
		cruq.sql = prev
	}
	return nil
}

func (cruq *CourseRecordUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CourseRecordUser, error) {
	var (
		nodes       = []*CourseRecordUser{}
		_spec       = cruq.querySpec()
		loadedTypes = [1]bool{
			cruq.withSchedule != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CourseRecordUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CourseRecordUser{config: cruq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cruq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cruq.withSchedule; query != nil {
		if err := cruq.loadSchedule(ctx, query, nodes, nil,
			func(n *CourseRecordUser, e *CourseRecordSchedule) { n.Edges.Schedule = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cruq *CourseRecordUserQuery) loadSchedule(ctx context.Context, query *CourseRecordScheduleQuery, nodes []*CourseRecordUser, init func(*CourseRecordUser), assign func(*CourseRecordUser, *CourseRecordSchedule)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*CourseRecordUser)
	for i := range nodes {
		fk := nodes[i].CourseRecordScheduleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(courserecordschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_record_schedule_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cruq *CourseRecordUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cruq.querySpec()
	_spec.Node.Columns = cruq.ctx.Fields
	if len(cruq.ctx.Fields) > 0 {
		_spec.Unique = cruq.ctx.Unique != nil && *cruq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cruq.driver, _spec)
}

func (cruq *CourseRecordUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(courserecorduser.Table, courserecorduser.Columns, sqlgraph.NewFieldSpec(courserecorduser.FieldID, field.TypeInt64))
	_spec.From = cruq.sql
	if unique := cruq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cruq.path != nil {
		_spec.Unique = true
	}
	if fields := cruq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, courserecorduser.FieldID)
		for i := range fields {
			if fields[i] != courserecorduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cruq.withSchedule != nil {
			_spec.Node.AddColumnOnce(courserecorduser.FieldCourseRecordScheduleID)
		}
	}
	if ps := cruq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cruq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cruq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cruq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cruq *CourseRecordUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cruq.driver.Dialect())
	t1 := builder.Table(courserecorduser.Table)
	columns := cruq.ctx.Fields
	if len(columns) == 0 {
		columns = courserecorduser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cruq.sql != nil {
		selector = cruq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cruq.ctx.Unique != nil && *cruq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cruq.predicates {
		p(selector)
	}
	for _, p := range cruq.order {
		p(selector)
	}
	if offset := cruq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cruq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CourseRecordUserGroupBy is the group-by builder for CourseRecordUser entities.
type CourseRecordUserGroupBy struct {
	selector
	build *CourseRecordUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crugb *CourseRecordUserGroupBy) Aggregate(fns ...AggregateFunc) *CourseRecordUserGroupBy {
	crugb.fns = append(crugb.fns, fns...)
	return crugb
}

// Scan applies the selector query and scans the result into the given value.
func (crugb *CourseRecordUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crugb.build.ctx, "GroupBy")
	if err := crugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CourseRecordUserQuery, *CourseRecordUserGroupBy](ctx, crugb.build, crugb, crugb.build.inters, v)
}

func (crugb *CourseRecordUserGroupBy) sqlScan(ctx context.Context, root *CourseRecordUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(crugb.fns))
	for _, fn := range crugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*crugb.flds)+len(crugb.fns))
		for _, f := range *crugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*crugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CourseRecordUserSelect is the builder for selecting fields of CourseRecordUser entities.
type CourseRecordUserSelect struct {
	*CourseRecordUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (crus *CourseRecordUserSelect) Aggregate(fns ...AggregateFunc) *CourseRecordUserSelect {
	crus.fns = append(crus.fns, fns...)
	return crus
}

// Scan applies the selector query and scans the result into the given value.
func (crus *CourseRecordUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crus.ctx, "Select")
	if err := crus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CourseRecordUserQuery, *CourseRecordUserSelect](ctx, crus.CourseRecordUserQuery, crus, crus.inters, v)
}

func (crus *CourseRecordUserSelect) sqlScan(ctx context.Context, root *CourseRecordUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(crus.fns))
	for _, fn := range crus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*crus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/courserecordschedule"
	"saas/pkg/db/ent/courserecorduser"
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseRecordUserUpdate is the builder for updating CourseRecordUser entities.
type CourseRecordUserUpdate struct {
	config
	hooks    []Hook
	mutation *CourseRecordUserMutation
}

// Where appends a list predicates to the CourseRecordUserUpdate builder.
func (cruu *CourseRecordUserUpdate) Where(ps ...predicate.CourseRecordUser) *CourseRecordUserUpdate {
	cruu.mutation.Where(ps...)
	return cruu
}

// SetUpdatedAt sets the "updated_at" field.
func (cruu *CourseRecordUserUpdate) SetUpdatedAt(t time.Time) *CourseRecordUserUpdate {
	cruu.mutation.SetUpdatedAt(t)
	return cruu
}

// SetVenueID sets the "venue_id" field.
func (cruu *CourseRecordUserUpdate) SetVenueID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetVenueID()
	cruu.mutation.SetVenueID(i)
	return cruu
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableVenueID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetVenueID(*i)
	}
	return cruu
}

// AddVenueID adds i to the "venue_id" field.
func (cruu *CourseRecordUserUpdate) AddVenueID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddVenueID(i)
	return cruu
}

// ClearVenueID clears the value of the "venue_id" field.
func (cruu *CourseRecordUserUpdate) ClearVenueID() *CourseRecordUserUpdate {
	cruu.mutation.ClearVenueID()
	return cruu
}

// SetUserID sets the "user_id" field.
func (cruu *CourseRecordUserUpdate) SetUserID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetUserID()
	cruu.mutation.SetUserID(i)
	return cruu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableUserID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetUserID(*i)
	}
	return cruu
}

// AddUserID adds i to the "user_id" field.
func (cruu *CourseRecordUserUpdate) AddUserID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddUserID(i)
	return cruu
}

// ClearUserID clears the value of the "user_id" field.
func (cruu *CourseRecordUserUpdate) ClearUserID() *CourseRecordUserUpdate {
	cruu.mutation.ClearUserID()
	return cruu
}

// SetCourseRecordScheduleID sets the "course_record_schedule_id" field.
func (cruu *CourseRecordUserUpdate) SetCourseRecordScheduleID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.SetCourseRecordScheduleID(i)
	return cruu
}

// SetNillableCourseRecordScheduleID sets the "course_record_schedule_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableCourseRecordScheduleID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetCourseRecordScheduleID(*i)
	}
	return cruu
}

// ClearCourseRecordScheduleID clears the value of the "course_record_schedule_id" field.
func (cruu *CourseRecordUserUpdate) ClearCourseRecordScheduleID() *CourseRecordUserUpdate {
	cruu.mutation.ClearCourseRecordScheduleID()
	return cruu
}

// SetType sets the "type" field.
func (cruu *CourseRecordUserUpdate) SetType(s string) *CourseRecordUserUpdate {
	cruu.mutation.SetType(s)
	return cruu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableType(s *string) *CourseRecordUserUpdate {
	if s != nil {
		cruu.SetType(*s)
	}
	return cruu
}

// ClearType clears the value of the "type" field.
func (cruu *CourseRecordUserUpdate) ClearType() *CourseRecordUserUpdate {
	cruu.mutation.ClearType()
	return cruu
}

// SetStartTime sets the "start_time" field.
func (cruu *CourseRecordUserUpdate) SetStartTime(t time.Time) *CourseRecordUserUpdate {
	cruu.mutation.SetStartTime(t)
	return cruu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableStartTime(t *time.Time) *CourseRecordUserUpdate {
	if t != nil {
		cruu.SetStartTime(*t)
	}
	return cruu
}

// ClearStartTime clears the value of the "start_time" field.
func (cruu *CourseRecordUserUpdate) ClearStartTime() *CourseRecordUserUpdate {
	cruu.mutation.ClearStartTime()
	return cruu
}

// SetEndTime sets the "end_time" field.
func (cruu *CourseRecordUserUpdate) SetEndTime(t time.Time) *CourseRecordUserUpdate {
	cruu.mutation.SetEndTime(t)
	return cruu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableEndTime(t *time.Time) *CourseRecordUserUpdate {
	if t != nil {
		cruu.SetEndTime(*t)
	}
	return cruu
}

// ClearEndTime clears the value of the "end_time" field.
func (cruu *CourseRecordUserUpdate) ClearEndTime() *CourseRecordUserUpdate {
	cruu.mutation.ClearEndTime()
	return cruu
}

// SetSignStartTime sets the "sign_start_time" field.
func (cruu *CourseRecordUserUpdate) SetSignStartTime(t time.Time) *CourseRecordUserUpdate {
	cruu.mutation.SetSignStartTime(t)
	return cruu
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableSignStartTime(t *time.Time) *CourseRecordUserUpdate {
	if t != nil {
		cruu.SetSignStartTime(*t)
	}
	return cruu
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (cruu *CourseRecordUserUpdate) ClearSignStartTime() *CourseRecordUserUpdate {
	cruu.mutation.ClearSignStartTime()
	return cruu
}

// SetSignNdTime sets the "sign_nd_time" field.
func (cruu *CourseRecordUserUpdate) SetSignNdTime(t time.Time) *CourseRecordUserUpdate {
	cruu.mutation.SetSignNdTime(t)
	return cruu
}

// SetNillableSignNdTime sets the "sign_nd_time" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableSignNdTime(t *time.Time) *CourseRecordUserUpdate {
	if t != nil {
		cruu.SetSignNdTime(*t)
	}
	return cruu
}

// ClearSignNdTime clears the value of the "sign_nd_time" field.
func (cruu *CourseRecordUserUpdate) ClearSignNdTime() *CourseRecordUserUpdate {
	cruu.mutation.ClearSignNdTime()
	return cruu
}

// SetUserProductID sets the "user_product_id" field.
func (cruu *CourseRecordUserUpdate) SetUserProductID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetUserProductID()
	cruu.mutation.SetUserProductID(i)
	return cruu
}

// SetNillableUserProductID sets the "user_product_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableUserProductID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetUserProductID(*i)
	}
	return cruu
}

// AddUserProductID adds i to the "user_product_id" field.
func (cruu *CourseRecordUserUpdate) AddUserProductID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddUserProductID(i)
	return cruu
}

// ClearUserProductID clears the value of the "user_product_id" field.
func (cruu *CourseRecordUserUpdate) ClearUserProductID() *CourseRecordUserUpdate {
	cruu.mutation.ClearUserProductID()
	return cruu
}

// SetUserProductItemID sets the "user_product_item_id" field.
func (cruu *CourseRecordUserUpdate) SetUserProductItemID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetUserProductItemID()
	cruu.mutation.SetUserProductItemID(i)
	return cruu
}

// SetNillableUserProductItemID sets the "user_product_item_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableUserProductItemID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetUserProductItemID(*i)
	}
	return cruu
}

// AddUserProductItemID adds i to the "user_product_item_id" field.
func (cruu *CourseRecordUserUpdate) AddUserProductItemID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddUserProductItemID(i)
	return cruu
}

// ClearUserProductItemID clears the value of the "user_product_item_id" field.
func (cruu *CourseRecordUserUpdate) ClearUserProductItemID() *CourseRecordUserUpdate {
	cruu.mutation.ClearUserProductItemID()
	return cruu
}

// SetCoachID sets the "coach_id" field.
func (cruu *CourseRecordUserUpdate) SetCoachID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetCoachID()
	cruu.mutation.SetCoachID(i)
	return cruu
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableCoachID(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetCoachID(*i)
	}
	return cruu
}

// AddCoachID adds i to the "coach_id" field.
func (cruu *CourseRecordUserUpdate) AddCoachID(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddCoachID(i)
	return cruu
}

// ClearCoachID clears the value of the "coach_id" field.
func (cruu *CourseRecordUserUpdate) ClearCoachID() *CourseRecordUserUpdate {
	cruu.mutation.ClearCoachID()
	return cruu
}

// SetStatus sets the "status" field.
func (cruu *CourseRecordUserUpdate) SetStatus(i int64) *CourseRecordUserUpdate {
	cruu.mutation.ResetStatus()
	cruu.mutation.SetStatus(i)
	return cruu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableStatus(i *int64) *CourseRecordUserUpdate {
	if i != nil {
		cruu.SetStatus(*i)
	}
	return cruu
}

// AddStatus adds i to the "status" field.
func (cruu *CourseRecordUserUpdate) AddStatus(i int64) *CourseRecordUserUpdate {
	cruu.mutation.AddStatus(i)
	return cruu
}

// ClearStatus clears the value of the "status" field.
func (cruu *CourseRecordUserUpdate) ClearStatus() *CourseRecordUserUpdate {
	cruu.mutation.ClearStatus()
	return cruu
}

// SetScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID.
func (cruu *CourseRecordUserUpdate) SetScheduleID(id int64) *CourseRecordUserUpdate {
	cruu.mutation.SetScheduleID(id)
	return cruu
}

// SetNillableScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID if the given value is not nil.
func (cruu *CourseRecordUserUpdate) SetNillableScheduleID(id *int64) *CourseRecordUserUpdate {
	if id != nil {
		cruu = cruu.SetScheduleID(*id)
	}
	return cruu
}

// SetSchedule sets the "schedule" edge to the CourseRecordSchedule entity.
func (cruu *CourseRecordUserUpdate) SetSchedule(c *CourseRecordSchedule) *CourseRecordUserUpdate {
	return cruu.SetScheduleID(c.ID)
}

// Mutation returns the CourseRecordUserMutation object of the builder.
func (cruu *CourseRecordUserUpdate) Mutation() *CourseRecordUserMutation {
	return cruu.mutation
}

// ClearSchedule clears the "schedule" edge to the CourseRecordSchedule entity.
func (cruu *CourseRecordUserUpdate) ClearSchedule() *CourseRecordUserUpdate {
	cruu.mutation.ClearSchedule()
	return cruu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cruu *CourseRecordUserUpdate) Save(ctx context.Context) (int, error) {
	cruu.defaults()
	return withHooks(ctx, cruu.sqlSave, cruu.mutation, cruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruu *CourseRecordUserUpdate) SaveX(ctx context.Context) int {
	affected, err := cruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cruu *CourseRecordUserUpdate) Exec(ctx context.Context) error {
	_, err := cruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruu *CourseRecordUserUpdate) ExecX(ctx context.Context) {
	if err := cruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruu *CourseRecordUserUpdate) defaults() {
	if _, ok := cruu.mutation.UpdatedAt(); !ok {
		v := courserecorduser.UpdateDefaultUpdatedAt()
		cruu.mutation.SetUpdatedAt(v)
	}
}

func (cruu *CourseRecordUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(courserecorduser.Table, courserecorduser.Columns, sqlgraph.NewFieldSpec(courserecorduser.FieldID, field.TypeInt64))
	if ps := cruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruu.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecorduser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruu.mutation.VenueID(); ok {
		_spec.SetField(courserecorduser.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedVenueID(); ok {
		_spec.AddField(courserecorduser.FieldVenueID, field.TypeInt64, value)
	}
	if cruu.mutation.VenueIDCleared() {
		_spec.ClearField(courserecorduser.FieldVenueID, field.TypeInt64)
	}
	if value, ok := cruu.mutation.UserID(); ok {
		_spec.SetField(courserecorduser.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedUserID(); ok {
		_spec.AddField(courserecorduser.FieldUserID, field.TypeInt64, value)
	}
	if cruu.mutation.UserIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserID, field.TypeInt64)
	}
	if value, ok := cruu.mutation.GetType(); ok {
		_spec.SetField(courserecorduser.FieldType, field.TypeString, value)
	}
	if cruu.mutation.TypeCleared() {
		_spec.ClearField(courserecorduser.FieldType, field.TypeString)
	}
	if value, ok := cruu.mutation.StartTime(); ok {
		_spec.SetField(courserecorduser.FieldStartTime, field.TypeTime, value)
	}
	if cruu.mutation.StartTimeCleared() {
		_spec.ClearField(courserecorduser.FieldStartTime, field.TypeTime)
	}
	if value, ok := cruu.mutation.EndTime(); ok {
		_spec.SetField(courserecorduser.FieldEndTime, field.TypeTime, value)
	}
	if cruu.mutation.EndTimeCleared() {
		_spec.ClearField(courserecorduser.FieldEndTime, field.TypeTime)
	}
	if value, ok := cruu.mutation.SignStartTime(); ok {
		_spec.SetField(courserecorduser.FieldSignStartTime, field.TypeTime, value)
	}
	if cruu.mutation.SignStartTimeCleared() {
		_spec.ClearField(courserecorduser.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := cruu.mutation.SignNdTime(); ok {
		_spec.SetField(courserecorduser.FieldSignNdTime, field.TypeTime, value)
	}
	if cruu.mutation.SignNdTimeCleared() {
		_spec.ClearField(courserecorduser.FieldSignNdTime, field.TypeTime)
	}
	if value, ok := cruu.mutation.UserProductID(); ok {
		_spec.SetField(courserecorduser.FieldUserProductID, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedUserProductID(); ok {
		_spec.AddField(courserecorduser.FieldUserProductID, field.TypeInt64, value)
	}
	if cruu.mutation.UserProductIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserProductID, field.TypeInt64)
	}
	if value, ok := cruu.mutation.UserProductItemID(); ok {
		_spec.SetField(courserecorduser.FieldUserProductItemID, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedUserProductItemID(); ok {
		_spec.AddField(courserecorduser.FieldUserProductItemID, field.TypeInt64, value)
	}
	if cruu.mutation.UserProductItemIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserProductItemID, field.TypeInt64)
	}
	if value, ok := cruu.mutation.CoachID(); ok {
		_spec.SetField(courserecorduser.FieldCoachID, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedCoachID(); ok {
		_spec.AddField(courserecorduser.FieldCoachID, field.TypeInt64, value)
	}
	if cruu.mutation.CoachIDCleared() {
		_spec.ClearField(courserecorduser.FieldCoachID, field.TypeInt64)
	}
	if value, ok := cruu.mutation.Status(); ok {
		_spec.SetField(courserecorduser.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cruu.mutation.AddedStatus(); ok {
		_spec.AddField(courserecorduser.FieldStatus, field.TypeInt64, value)
	}
	if cruu.mutation.StatusCleared() {
		_spec.ClearField(courserecorduser.FieldStatus, field.TypeInt64)
	}
	if cruu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courserecorduser.ScheduleTable,
			Columns: []string{courserecorduser.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courserecorduser.ScheduleTable,
			Columns: []string{courserecorduser.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courserecorduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cruu.mutation.done = true
	return n, nil
}

// CourseRecordUserUpdateOne is the builder for updating a single CourseRecordUser entity.
type CourseRecordUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseRecordUserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cruuo *CourseRecordUserUpdateOne) SetUpdatedAt(t time.Time) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetUpdatedAt(t)
	return cruuo
}

// SetVenueID sets the "venue_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetVenueID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetVenueID()
	cruuo.mutation.SetVenueID(i)
	return cruuo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableVenueID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetVenueID(*i)
	}
	return cruuo
}

// AddVenueID adds i to the "venue_id" field.
func (cruuo *CourseRecordUserUpdateOne) AddVenueID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddVenueID(i)
	return cruuo
}

// ClearVenueID clears the value of the "venue_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearVenueID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearVenueID()
	return cruuo
}

// SetUserID sets the "user_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetUserID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetUserID()
	cruuo.mutation.SetUserID(i)
	return cruuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableUserID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetUserID(*i)
	}
	return cruuo
}

// AddUserID adds i to the "user_id" field.
func (cruuo *CourseRecordUserUpdateOne) AddUserID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddUserID(i)
	return cruuo
}

// ClearUserID clears the value of the "user_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearUserID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearUserID()
	return cruuo
}

// SetCourseRecordScheduleID sets the "course_record_schedule_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetCourseRecordScheduleID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetCourseRecordScheduleID(i)
	return cruuo
}

// SetNillableCourseRecordScheduleID sets the "course_record_schedule_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableCourseRecordScheduleID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetCourseRecordScheduleID(*i)
	}
	return cruuo
}

// ClearCourseRecordScheduleID clears the value of the "course_record_schedule_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearCourseRecordScheduleID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearCourseRecordScheduleID()
	return cruuo
}

// SetType sets the "type" field.
func (cruuo *CourseRecordUserUpdateOne) SetType(s string) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetType(s)
	return cruuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableType(s *string) *CourseRecordUserUpdateOne {
	if s != nil {
		cruuo.SetType(*s)
	}
	return cruuo
}

// ClearType clears the value of the "type" field.
func (cruuo *CourseRecordUserUpdateOne) ClearType() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearType()
	return cruuo
}

// SetStartTime sets the "start_time" field.
func (cruuo *CourseRecordUserUpdateOne) SetStartTime(t time.Time) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetStartTime(t)
	return cruuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableStartTime(t *time.Time) *CourseRecordUserUpdateOne {
	if t != nil {
		cruuo.SetStartTime(*t)
	}
	return cruuo
}

// ClearStartTime clears the value of the "start_time" field.
func (cruuo *CourseRecordUserUpdateOne) ClearStartTime() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearStartTime()
	return cruuo
}

// SetEndTime sets the "end_time" field.
func (cruuo *CourseRecordUserUpdateOne) SetEndTime(t time.Time) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetEndTime(t)
	return cruuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableEndTime(t *time.Time) *CourseRecordUserUpdateOne {
	if t != nil {
		cruuo.SetEndTime(*t)
	}
	return cruuo
}

// ClearEndTime clears the value of the "end_time" field.
func (cruuo *CourseRecordUserUpdateOne) ClearEndTime() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearEndTime()
	return cruuo
}

// SetSignStartTime sets the "sign_start_time" field.
func (cruuo *CourseRecordUserUpdateOne) SetSignStartTime(t time.Time) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetSignStartTime(t)
	return cruuo
}

// SetNillableSignStartTime sets the "sign_start_time" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableSignStartTime(t *time.Time) *CourseRecordUserUpdateOne {
	if t != nil {
		cruuo.SetSignStartTime(*t)
	}
	return cruuo
}

// ClearSignStartTime clears the value of the "sign_start_time" field.
func (cruuo *CourseRecordUserUpdateOne) ClearSignStartTime() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearSignStartTime()
	return cruuo
}

// SetSignNdTime sets the "sign_nd_time" field.
func (cruuo *CourseRecordUserUpdateOne) SetSignNdTime(t time.Time) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetSignNdTime(t)
	return cruuo
}

// SetNillableSignNdTime sets the "sign_nd_time" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableSignNdTime(t *time.Time) *CourseRecordUserUpdateOne {
	if t != nil {
		cruuo.SetSignNdTime(*t)
	}
	return cruuo
}

// ClearSignNdTime clears the value of the "sign_nd_time" field.
func (cruuo *CourseRecordUserUpdateOne) ClearSignNdTime() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearSignNdTime()
	return cruuo
}

// SetUserProductID sets the "user_product_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetUserProductID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetUserProductID()
	cruuo.mutation.SetUserProductID(i)
	return cruuo
}

// SetNillableUserProductID sets the "user_product_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableUserProductID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetUserProductID(*i)
	}
	return cruuo
}

// AddUserProductID adds i to the "user_product_id" field.
func (cruuo *CourseRecordUserUpdateOne) AddUserProductID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddUserProductID(i)
	return cruuo
}

// ClearUserProductID clears the value of the "user_product_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearUserProductID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearUserProductID()
	return cruuo
}

// SetUserProductItemID sets the "user_product_item_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetUserProductItemID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetUserProductItemID()
	cruuo.mutation.SetUserProductItemID(i)
	return cruuo
}

// SetNillableUserProductItemID sets the "user_product_item_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableUserProductItemID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetUserProductItemID(*i)
	}
	return cruuo
}

// AddUserProductItemID adds i to the "user_product_item_id" field.
func (cruuo *CourseRecordUserUpdateOne) AddUserProductItemID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddUserProductItemID(i)
	return cruuo
}

// ClearUserProductItemID clears the value of the "user_product_item_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearUserProductItemID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearUserProductItemID()
	return cruuo
}

// SetCoachID sets the "coach_id" field.
func (cruuo *CourseRecordUserUpdateOne) SetCoachID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetCoachID()
	cruuo.mutation.SetCoachID(i)
	return cruuo
}

// SetNillableCoachID sets the "coach_id" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableCoachID(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetCoachID(*i)
	}
	return cruuo
}

// AddCoachID adds i to the "coach_id" field.
func (cruuo *CourseRecordUserUpdateOne) AddCoachID(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddCoachID(i)
	return cruuo
}

// ClearCoachID clears the value of the "coach_id" field.
func (cruuo *CourseRecordUserUpdateOne) ClearCoachID() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearCoachID()
	return cruuo
}

// SetStatus sets the "status" field.
func (cruuo *CourseRecordUserUpdateOne) SetStatus(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.ResetStatus()
	cruuo.mutation.SetStatus(i)
	return cruuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableStatus(i *int64) *CourseRecordUserUpdateOne {
	if i != nil {
		cruuo.SetStatus(*i)
	}
	return cruuo
}

// AddStatus adds i to the "status" field.
func (cruuo *CourseRecordUserUpdateOne) AddStatus(i int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.AddStatus(i)
	return cruuo
}

// ClearStatus clears the value of the "status" field.
func (cruuo *CourseRecordUserUpdateOne) ClearStatus() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearStatus()
	return cruuo
}

// SetScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID.
func (cruuo *CourseRecordUserUpdateOne) SetScheduleID(id int64) *CourseRecordUserUpdateOne {
	cruuo.mutation.SetScheduleID(id)
	return cruuo
}

// SetNillableScheduleID sets the "schedule" edge to the CourseRecordSchedule entity by ID if the given value is not nil.
func (cruuo *CourseRecordUserUpdateOne) SetNillableScheduleID(id *int64) *CourseRecordUserUpdateOne {
	if id != nil {
		cruuo = cruuo.SetScheduleID(*id)
	}
	return cruuo
}

// SetSchedule sets the "schedule" edge to the CourseRecordSchedule entity.
func (cruuo *CourseRecordUserUpdateOne) SetSchedule(c *CourseRecordSchedule) *CourseRecordUserUpdateOne {
	return cruuo.SetScheduleID(c.ID)
}

// Mutation returns the CourseRecordUserMutation object of the builder.
func (cruuo *CourseRecordUserUpdateOne) Mutation() *CourseRecordUserMutation {
	return cruuo.mutation
}

// ClearSchedule clears the "schedule" edge to the CourseRecordSchedule entity.
func (cruuo *CourseRecordUserUpdateOne) ClearSchedule() *CourseRecordUserUpdateOne {
	cruuo.mutation.ClearSchedule()
	return cruuo
}

// Where appends a list predicates to the CourseRecordUserUpdate builder.
func (cruuo *CourseRecordUserUpdateOne) Where(ps ...predicate.CourseRecordUser) *CourseRecordUserUpdateOne {
	cruuo.mutation.Where(ps...)
	return cruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruuo *CourseRecordUserUpdateOne) Select(field string, fields ...string) *CourseRecordUserUpdateOne {
	cruuo.fields = append([]string{field}, fields...)
	return cruuo
}

// Save executes the query and returns the updated CourseRecordUser entity.
func (cruuo *CourseRecordUserUpdateOne) Save(ctx context.Context) (*CourseRecordUser, error) {
	cruuo.defaults()
	return withHooks(ctx, cruuo.sqlSave, cruuo.mutation, cruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruuo *CourseRecordUserUpdateOne) SaveX(ctx context.Context) *CourseRecordUser {
	node, err := cruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruuo *CourseRecordUserUpdateOne) Exec(ctx context.Context) error {
	_, err := cruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruuo *CourseRecordUserUpdateOne) ExecX(ctx context.Context) {
	if err := cruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruuo *CourseRecordUserUpdateOne) defaults() {
	if _, ok := cruuo.mutation.UpdatedAt(); !ok {
		v := courserecorduser.UpdateDefaultUpdatedAt()
		cruuo.mutation.SetUpdatedAt(v)
	}
}

func (cruuo *CourseRecordUserUpdateOne) sqlSave(ctx context.Context) (_node *CourseRecordUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(courserecorduser.Table, courserecorduser.Columns, sqlgraph.NewFieldSpec(courserecorduser.FieldID, field.TypeInt64))
	id, ok := cruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseRecordUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, courserecorduser.FieldID)
		for _, f := range fields {
			if !courserecorduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != courserecorduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruuo.mutation.UpdatedAt(); ok {
		_spec.SetField(courserecorduser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruuo.mutation.VenueID(); ok {
		_spec.SetField(courserecorduser.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedVenueID(); ok {
		_spec.AddField(courserecorduser.FieldVenueID, field.TypeInt64, value)
	}
	if cruuo.mutation.VenueIDCleared() {
		_spec.ClearField(courserecorduser.FieldVenueID, field.TypeInt64)
	}
	if value, ok := cruuo.mutation.UserID(); ok {
		_spec.SetField(courserecorduser.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedUserID(); ok {
		_spec.AddField(courserecorduser.FieldUserID, field.TypeInt64, value)
	}
	if cruuo.mutation.UserIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserID, field.TypeInt64)
	}
	if value, ok := cruuo.mutation.GetType(); ok {
		_spec.SetField(courserecorduser.FieldType, field.TypeString, value)
	}
	if cruuo.mutation.TypeCleared() {
		_spec.ClearField(courserecorduser.FieldType, field.TypeString)
	}
	if value, ok := cruuo.mutation.StartTime(); ok {
		_spec.SetField(courserecorduser.FieldStartTime, field.TypeTime, value)
	}
	if cruuo.mutation.StartTimeCleared() {
		_spec.ClearField(courserecorduser.FieldStartTime, field.TypeTime)
	}
	if value, ok := cruuo.mutation.EndTime(); ok {
		_spec.SetField(courserecorduser.FieldEndTime, field.TypeTime, value)
	}
	if cruuo.mutation.EndTimeCleared() {
		_spec.ClearField(courserecorduser.FieldEndTime, field.TypeTime)
	}
	if value, ok := cruuo.mutation.SignStartTime(); ok {
		_spec.SetField(courserecorduser.FieldSignStartTime, field.TypeTime, value)
	}
	if cruuo.mutation.SignStartTimeCleared() {
		_spec.ClearField(courserecorduser.FieldSignStartTime, field.TypeTime)
	}
	if value, ok := cruuo.mutation.SignNdTime(); ok {
		_spec.SetField(courserecorduser.FieldSignNdTime, field.TypeTime, value)
	}
	if cruuo.mutation.SignNdTimeCleared() {
		_spec.ClearField(courserecorduser.FieldSignNdTime, field.TypeTime)
	}
	if value, ok := cruuo.mutation.UserProductID(); ok {
		_spec.SetField(courserecorduser.FieldUserProductID, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedUserProductID(); ok {
		_spec.AddField(courserecorduser.FieldUserProductID, field.TypeInt64, value)
	}
	if cruuo.mutation.UserProductIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserProductID, field.TypeInt64)
	}
	if value, ok := cruuo.mutation.UserProductItemID(); ok {
		_spec.SetField(courserecorduser.FieldUserProductItemID, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedUserProductItemID(); ok {
		_spec.AddField(courserecorduser.FieldUserProductItemID, field.TypeInt64, value)
	}
	if cruuo.mutation.UserProductItemIDCleared() {
		_spec.ClearField(courserecorduser.FieldUserProductItemID, field.TypeInt64)
	}
	if value, ok := cruuo.mutation.CoachID(); ok {
		_spec.SetField(courserecorduser.FieldCoachID, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedCoachID(); ok {
		_spec.AddField(courserecorduser.FieldCoachID, field.TypeInt64, value)
	}
	if cruuo.mutation.CoachIDCleared() {
		_spec.ClearField(courserecorduser.FieldCoachID, field.TypeInt64)
	}
	if value, ok := cruuo.mutation.Status(); ok {
		_spec.SetField(courserecorduser.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := cruuo.mutation.AddedStatus(); ok {
		_spec.AddField(courserecorduser.FieldStatus, field.TypeInt64, value)
	}
	if cruuo.mutation.StatusCleared() {
		_spec.ClearField(courserecorduser.FieldStatus, field.TypeInt64)
	}
	if cruuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courserecorduser.ScheduleTable,
			Columns: []string{courserecorduser.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courserecorduser.ScheduleTable,
			Columns: []string{courserecorduser.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(courserecordschedule.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CourseRecordUser{config: cruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courserecorduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruuo.mutation.done = true
	return _node, nil
}

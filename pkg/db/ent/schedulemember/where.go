// Code generated by ent, DO NOT EDIT.

package schedulemember

import (
	"saas/pkg/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldStatus, v))
}

// VenueID applies equality check predicate on the "venue_id" field. It's identical to VenueIDEQ.
func VenueID(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldVenueID, v))
}

// ScheduleID applies equality check predicate on the "schedule_id" field. It's identical to ScheduleIDEQ.
func ScheduleID(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldScheduleID, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberID, v))
}

// MemberProductID applies equality check predicate on the "member_product_id" field. It's identical to MemberProductIDEQ.
func MemberProductID(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductID, v))
}

// MemberProductPropertyID applies equality check predicate on the "member_product_property_id" field. It's identical to MemberProductPropertyIDEQ.
func MemberProductPropertyID(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductPropertyID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldType, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldEndTime, v))
}

// SignStartTime applies equality check predicate on the "sign_start_time" field. It's identical to SignStartTimeEQ.
func SignStartTime(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldSignStartTime, v))
}

// SignEndTime applies equality check predicate on the "sign_end_time" field. It's identical to SignEndTimeEQ.
func SignEndTime(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldSignEndTime, v))
}

// MemberName applies equality check predicate on the "member_name" field. It's identical to MemberNameEQ.
func MemberName(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberName, v))
}

// MemberProductName applies equality check predicate on the "member_product_name" field. It's identical to MemberProductNameEQ.
func MemberProductName(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductName, v))
}

// MemberProductPropertyName applies equality check predicate on the "member_product_property_name" field. It's identical to MemberProductPropertyNameEQ.
func MemberProductPropertyName(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductPropertyName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldStatus))
}

// VenueIDEQ applies the EQ predicate on the "venue_id" field.
func VenueIDEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldVenueID, v))
}

// VenueIDNEQ applies the NEQ predicate on the "venue_id" field.
func VenueIDNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldVenueID, v))
}

// VenueIDIn applies the In predicate on the "venue_id" field.
func VenueIDIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldVenueID, vs...))
}

// VenueIDNotIn applies the NotIn predicate on the "venue_id" field.
func VenueIDNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldVenueID, vs...))
}

// VenueIDGT applies the GT predicate on the "venue_id" field.
func VenueIDGT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldVenueID, v))
}

// VenueIDGTE applies the GTE predicate on the "venue_id" field.
func VenueIDGTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldVenueID, v))
}

// VenueIDLT applies the LT predicate on the "venue_id" field.
func VenueIDLT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldVenueID, v))
}

// VenueIDLTE applies the LTE predicate on the "venue_id" field.
func VenueIDLTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldVenueID, v))
}

// VenueIDIsNil applies the IsNil predicate on the "venue_id" field.
func VenueIDIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldVenueID))
}

// VenueIDNotNil applies the NotNil predicate on the "venue_id" field.
func VenueIDNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldVenueID))
}

// ScheduleIDEQ applies the EQ predicate on the "schedule_id" field.
func ScheduleIDEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldScheduleID, v))
}

// ScheduleIDNEQ applies the NEQ predicate on the "schedule_id" field.
func ScheduleIDNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldScheduleID, v))
}

// ScheduleIDIn applies the In predicate on the "schedule_id" field.
func ScheduleIDIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldScheduleID, vs...))
}

// ScheduleIDNotIn applies the NotIn predicate on the "schedule_id" field.
func ScheduleIDNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldScheduleID, vs...))
}

// ScheduleIDIsNil applies the IsNil predicate on the "schedule_id" field.
func ScheduleIDIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldScheduleID))
}

// ScheduleIDNotNil applies the NotNil predicate on the "schedule_id" field.
func ScheduleIDNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldScheduleID))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberID, v))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberID))
}

// MemberProductIDEQ applies the EQ predicate on the "member_product_id" field.
func MemberProductIDEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductID, v))
}

// MemberProductIDNEQ applies the NEQ predicate on the "member_product_id" field.
func MemberProductIDNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberProductID, v))
}

// MemberProductIDIn applies the In predicate on the "member_product_id" field.
func MemberProductIDIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberProductID, vs...))
}

// MemberProductIDNotIn applies the NotIn predicate on the "member_product_id" field.
func MemberProductIDNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberProductID, vs...))
}

// MemberProductIDGT applies the GT predicate on the "member_product_id" field.
func MemberProductIDGT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberProductID, v))
}

// MemberProductIDGTE applies the GTE predicate on the "member_product_id" field.
func MemberProductIDGTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberProductID, v))
}

// MemberProductIDLT applies the LT predicate on the "member_product_id" field.
func MemberProductIDLT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberProductID, v))
}

// MemberProductIDLTE applies the LTE predicate on the "member_product_id" field.
func MemberProductIDLTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberProductID, v))
}

// MemberProductIDIsNil applies the IsNil predicate on the "member_product_id" field.
func MemberProductIDIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberProductID))
}

// MemberProductIDNotNil applies the NotNil predicate on the "member_product_id" field.
func MemberProductIDNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberProductID))
}

// MemberProductPropertyIDEQ applies the EQ predicate on the "member_product_property_id" field.
func MemberProductPropertyIDEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDNEQ applies the NEQ predicate on the "member_product_property_id" field.
func MemberProductPropertyIDNEQ(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDIn applies the In predicate on the "member_product_property_id" field.
func MemberProductPropertyIDIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberProductPropertyID, vs...))
}

// MemberProductPropertyIDNotIn applies the NotIn predicate on the "member_product_property_id" field.
func MemberProductPropertyIDNotIn(vs ...int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberProductPropertyID, vs...))
}

// MemberProductPropertyIDGT applies the GT predicate on the "member_product_property_id" field.
func MemberProductPropertyIDGT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDGTE applies the GTE predicate on the "member_product_property_id" field.
func MemberProductPropertyIDGTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDLT applies the LT predicate on the "member_product_property_id" field.
func MemberProductPropertyIDLT(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDLTE applies the LTE predicate on the "member_product_property_id" field.
func MemberProductPropertyIDLTE(v int64) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberProductPropertyID, v))
}

// MemberProductPropertyIDIsNil applies the IsNil predicate on the "member_product_property_id" field.
func MemberProductPropertyIDIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberProductPropertyID))
}

// MemberProductPropertyIDNotNil applies the NotNil predicate on the "member_product_property_id" field.
func MemberProductPropertyIDNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberProductPropertyID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContainsFold(FieldType, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldEndTime))
}

// SignStartTimeEQ applies the EQ predicate on the "sign_start_time" field.
func SignStartTimeEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldSignStartTime, v))
}

// SignStartTimeNEQ applies the NEQ predicate on the "sign_start_time" field.
func SignStartTimeNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldSignStartTime, v))
}

// SignStartTimeIn applies the In predicate on the "sign_start_time" field.
func SignStartTimeIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldSignStartTime, vs...))
}

// SignStartTimeNotIn applies the NotIn predicate on the "sign_start_time" field.
func SignStartTimeNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldSignStartTime, vs...))
}

// SignStartTimeGT applies the GT predicate on the "sign_start_time" field.
func SignStartTimeGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldSignStartTime, v))
}

// SignStartTimeGTE applies the GTE predicate on the "sign_start_time" field.
func SignStartTimeGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldSignStartTime, v))
}

// SignStartTimeLT applies the LT predicate on the "sign_start_time" field.
func SignStartTimeLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldSignStartTime, v))
}

// SignStartTimeLTE applies the LTE predicate on the "sign_start_time" field.
func SignStartTimeLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldSignStartTime, v))
}

// SignStartTimeIsNil applies the IsNil predicate on the "sign_start_time" field.
func SignStartTimeIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldSignStartTime))
}

// SignStartTimeNotNil applies the NotNil predicate on the "sign_start_time" field.
func SignStartTimeNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldSignStartTime))
}

// SignEndTimeEQ applies the EQ predicate on the "sign_end_time" field.
func SignEndTimeEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldSignEndTime, v))
}

// SignEndTimeNEQ applies the NEQ predicate on the "sign_end_time" field.
func SignEndTimeNEQ(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldSignEndTime, v))
}

// SignEndTimeIn applies the In predicate on the "sign_end_time" field.
func SignEndTimeIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldSignEndTime, vs...))
}

// SignEndTimeNotIn applies the NotIn predicate on the "sign_end_time" field.
func SignEndTimeNotIn(vs ...time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldSignEndTime, vs...))
}

// SignEndTimeGT applies the GT predicate on the "sign_end_time" field.
func SignEndTimeGT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldSignEndTime, v))
}

// SignEndTimeGTE applies the GTE predicate on the "sign_end_time" field.
func SignEndTimeGTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldSignEndTime, v))
}

// SignEndTimeLT applies the LT predicate on the "sign_end_time" field.
func SignEndTimeLT(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldSignEndTime, v))
}

// SignEndTimeLTE applies the LTE predicate on the "sign_end_time" field.
func SignEndTimeLTE(v time.Time) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldSignEndTime, v))
}

// SignEndTimeIsNil applies the IsNil predicate on the "sign_end_time" field.
func SignEndTimeIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldSignEndTime))
}

// SignEndTimeNotNil applies the NotNil predicate on the "sign_end_time" field.
func SignEndTimeNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldSignEndTime))
}

// MemberNameEQ applies the EQ predicate on the "member_name" field.
func MemberNameEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberName, v))
}

// MemberNameNEQ applies the NEQ predicate on the "member_name" field.
func MemberNameNEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberName, v))
}

// MemberNameIn applies the In predicate on the "member_name" field.
func MemberNameIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberName, vs...))
}

// MemberNameNotIn applies the NotIn predicate on the "member_name" field.
func MemberNameNotIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberName, vs...))
}

// MemberNameGT applies the GT predicate on the "member_name" field.
func MemberNameGT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberName, v))
}

// MemberNameGTE applies the GTE predicate on the "member_name" field.
func MemberNameGTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberName, v))
}

// MemberNameLT applies the LT predicate on the "member_name" field.
func MemberNameLT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberName, v))
}

// MemberNameLTE applies the LTE predicate on the "member_name" field.
func MemberNameLTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberName, v))
}

// MemberNameContains applies the Contains predicate on the "member_name" field.
func MemberNameContains(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContains(FieldMemberName, v))
}

// MemberNameHasPrefix applies the HasPrefix predicate on the "member_name" field.
func MemberNameHasPrefix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasPrefix(FieldMemberName, v))
}

// MemberNameHasSuffix applies the HasSuffix predicate on the "member_name" field.
func MemberNameHasSuffix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasSuffix(FieldMemberName, v))
}

// MemberNameIsNil applies the IsNil predicate on the "member_name" field.
func MemberNameIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberName))
}

// MemberNameNotNil applies the NotNil predicate on the "member_name" field.
func MemberNameNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberName))
}

// MemberNameEqualFold applies the EqualFold predicate on the "member_name" field.
func MemberNameEqualFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEqualFold(FieldMemberName, v))
}

// MemberNameContainsFold applies the ContainsFold predicate on the "member_name" field.
func MemberNameContainsFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContainsFold(FieldMemberName, v))
}

// MemberProductNameEQ applies the EQ predicate on the "member_product_name" field.
func MemberProductNameEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductName, v))
}

// MemberProductNameNEQ applies the NEQ predicate on the "member_product_name" field.
func MemberProductNameNEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberProductName, v))
}

// MemberProductNameIn applies the In predicate on the "member_product_name" field.
func MemberProductNameIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberProductName, vs...))
}

// MemberProductNameNotIn applies the NotIn predicate on the "member_product_name" field.
func MemberProductNameNotIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberProductName, vs...))
}

// MemberProductNameGT applies the GT predicate on the "member_product_name" field.
func MemberProductNameGT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberProductName, v))
}

// MemberProductNameGTE applies the GTE predicate on the "member_product_name" field.
func MemberProductNameGTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberProductName, v))
}

// MemberProductNameLT applies the LT predicate on the "member_product_name" field.
func MemberProductNameLT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberProductName, v))
}

// MemberProductNameLTE applies the LTE predicate on the "member_product_name" field.
func MemberProductNameLTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberProductName, v))
}

// MemberProductNameContains applies the Contains predicate on the "member_product_name" field.
func MemberProductNameContains(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContains(FieldMemberProductName, v))
}

// MemberProductNameHasPrefix applies the HasPrefix predicate on the "member_product_name" field.
func MemberProductNameHasPrefix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasPrefix(FieldMemberProductName, v))
}

// MemberProductNameHasSuffix applies the HasSuffix predicate on the "member_product_name" field.
func MemberProductNameHasSuffix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasSuffix(FieldMemberProductName, v))
}

// MemberProductNameIsNil applies the IsNil predicate on the "member_product_name" field.
func MemberProductNameIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberProductName))
}

// MemberProductNameNotNil applies the NotNil predicate on the "member_product_name" field.
func MemberProductNameNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberProductName))
}

// MemberProductNameEqualFold applies the EqualFold predicate on the "member_product_name" field.
func MemberProductNameEqualFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEqualFold(FieldMemberProductName, v))
}

// MemberProductNameContainsFold applies the ContainsFold predicate on the "member_product_name" field.
func MemberProductNameContainsFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContainsFold(FieldMemberProductName, v))
}

// MemberProductPropertyNameEQ applies the EQ predicate on the "member_product_property_name" field.
func MemberProductPropertyNameEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEQ(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameNEQ applies the NEQ predicate on the "member_product_property_name" field.
func MemberProductPropertyNameNEQ(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNEQ(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameIn applies the In predicate on the "member_product_property_name" field.
func MemberProductPropertyNameIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIn(FieldMemberProductPropertyName, vs...))
}

// MemberProductPropertyNameNotIn applies the NotIn predicate on the "member_product_property_name" field.
func MemberProductPropertyNameNotIn(vs ...string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotIn(FieldMemberProductPropertyName, vs...))
}

// MemberProductPropertyNameGT applies the GT predicate on the "member_product_property_name" field.
func MemberProductPropertyNameGT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGT(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameGTE applies the GTE predicate on the "member_product_property_name" field.
func MemberProductPropertyNameGTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldGTE(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameLT applies the LT predicate on the "member_product_property_name" field.
func MemberProductPropertyNameLT(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLT(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameLTE applies the LTE predicate on the "member_product_property_name" field.
func MemberProductPropertyNameLTE(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldLTE(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameContains applies the Contains predicate on the "member_product_property_name" field.
func MemberProductPropertyNameContains(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContains(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameHasPrefix applies the HasPrefix predicate on the "member_product_property_name" field.
func MemberProductPropertyNameHasPrefix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasPrefix(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameHasSuffix applies the HasSuffix predicate on the "member_product_property_name" field.
func MemberProductPropertyNameHasSuffix(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldHasSuffix(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameIsNil applies the IsNil predicate on the "member_product_property_name" field.
func MemberProductPropertyNameIsNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldIsNull(FieldMemberProductPropertyName))
}

// MemberProductPropertyNameNotNil applies the NotNil predicate on the "member_product_property_name" field.
func MemberProductPropertyNameNotNil() predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldNotNull(FieldMemberProductPropertyName))
}

// MemberProductPropertyNameEqualFold applies the EqualFold predicate on the "member_product_property_name" field.
func MemberProductPropertyNameEqualFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldEqualFold(FieldMemberProductPropertyName, v))
}

// MemberProductPropertyNameContainsFold applies the ContainsFold predicate on the "member_product_property_name" field.
func MemberProductPropertyNameContainsFold(v string) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.FieldContainsFold(FieldMemberProductPropertyName, v))
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.ScheduleMember {
	return predicate.ScheduleMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.Schedule) predicate.ScheduleMember {
	return predicate.ScheduleMember(func(s *sql.Selector) {
		step := newScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduleMember) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduleMember) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduleMember) predicate.ScheduleMember {
	return predicate.ScheduleMember(sql.NotPredicates(p))
}

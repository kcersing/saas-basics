// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/schedule"
	"saas/pkg/db/ent/schedulecoach"
	"saas/pkg/db/ent/schedulemember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleMutation
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScheduleUpdate) SetUpdatedAt(t time.Time) *ScheduleUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStatus sets the "status" field.
func (su *ScheduleUpdate) SetStatus(i int64) *ScheduleUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableStatus(i *int64) *ScheduleUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *ScheduleUpdate) AddStatus(i int64) *ScheduleUpdate {
	su.mutation.AddStatus(i)
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *ScheduleUpdate) ClearStatus() *ScheduleUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetType sets the "type" field.
func (su *ScheduleUpdate) SetType(s string) *ScheduleUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableType(s *string) *ScheduleUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// ClearType clears the value of the "type" field.
func (su *ScheduleUpdate) ClearType() *ScheduleUpdate {
	su.mutation.ClearType()
	return su
}

// SetName sets the "name" field.
func (su *ScheduleUpdate) SetName(s string) *ScheduleUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableName(s *string) *ScheduleUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *ScheduleUpdate) ClearName() *ScheduleUpdate {
	su.mutation.ClearName()
	return su
}

// SetVenueID sets the "venue_id" field.
func (su *ScheduleUpdate) SetVenueID(i int64) *ScheduleUpdate {
	su.mutation.ResetVenueID()
	su.mutation.SetVenueID(i)
	return su
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableVenueID(i *int64) *ScheduleUpdate {
	if i != nil {
		su.SetVenueID(*i)
	}
	return su
}

// AddVenueID adds i to the "venue_id" field.
func (su *ScheduleUpdate) AddVenueID(i int64) *ScheduleUpdate {
	su.mutation.AddVenueID(i)
	return su
}

// ClearVenueID clears the value of the "venue_id" field.
func (su *ScheduleUpdate) ClearVenueID() *ScheduleUpdate {
	su.mutation.ClearVenueID()
	return su
}

// SetPropertyID sets the "property_id" field.
func (su *ScheduleUpdate) SetPropertyID(i int64) *ScheduleUpdate {
	su.mutation.ResetPropertyID()
	su.mutation.SetPropertyID(i)
	return su
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillablePropertyID(i *int64) *ScheduleUpdate {
	if i != nil {
		su.SetPropertyID(*i)
	}
	return su
}

// AddPropertyID adds i to the "property_id" field.
func (su *ScheduleUpdate) AddPropertyID(i int64) *ScheduleUpdate {
	su.mutation.AddPropertyID(i)
	return su
}

// ClearPropertyID clears the value of the "property_id" field.
func (su *ScheduleUpdate) ClearPropertyID() *ScheduleUpdate {
	su.mutation.ClearPropertyID()
	return su
}

// SetPlaceID sets the "place_id" field.
func (su *ScheduleUpdate) SetPlaceID(i int64) *ScheduleUpdate {
	su.mutation.ResetPlaceID()
	su.mutation.SetPlaceID(i)
	return su
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillablePlaceID(i *int64) *ScheduleUpdate {
	if i != nil {
		su.SetPlaceID(*i)
	}
	return su
}

// AddPlaceID adds i to the "place_id" field.
func (su *ScheduleUpdate) AddPlaceID(i int64) *ScheduleUpdate {
	su.mutation.AddPlaceID(i)
	return su
}

// ClearPlaceID clears the value of the "place_id" field.
func (su *ScheduleUpdate) ClearPlaceID() *ScheduleUpdate {
	su.mutation.ClearPlaceID()
	return su
}

// SetNum sets the "num" field.
func (su *ScheduleUpdate) SetNum(i int64) *ScheduleUpdate {
	su.mutation.ResetNum()
	su.mutation.SetNum(i)
	return su
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableNum(i *int64) *ScheduleUpdate {
	if i != nil {
		su.SetNum(*i)
	}
	return su
}

// AddNum adds i to the "num" field.
func (su *ScheduleUpdate) AddNum(i int64) *ScheduleUpdate {
	su.mutation.AddNum(i)
	return su
}

// ClearNum clears the value of the "num" field.
func (su *ScheduleUpdate) ClearNum() *ScheduleUpdate {
	su.mutation.ClearNum()
	return su
}

// SetDate sets the "date" field.
func (su *ScheduleUpdate) SetDate(t time.Time) *ScheduleUpdate {
	su.mutation.SetDate(t)
	return su
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDate(t *time.Time) *ScheduleUpdate {
	if t != nil {
		su.SetDate(*t)
	}
	return su
}

// ClearDate clears the value of the "date" field.
func (su *ScheduleUpdate) ClearDate() *ScheduleUpdate {
	su.mutation.ClearDate()
	return su
}

// SetStartTime sets the "start_time" field.
func (su *ScheduleUpdate) SetStartTime(t time.Time) *ScheduleUpdate {
	su.mutation.SetStartTime(t)
	return su
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableStartTime(t *time.Time) *ScheduleUpdate {
	if t != nil {
		su.SetStartTime(*t)
	}
	return su
}

// ClearStartTime clears the value of the "start_time" field.
func (su *ScheduleUpdate) ClearStartTime() *ScheduleUpdate {
	su.mutation.ClearStartTime()
	return su
}

// SetEndTime sets the "end_time" field.
func (su *ScheduleUpdate) SetEndTime(t time.Time) *ScheduleUpdate {
	su.mutation.SetEndTime(t)
	return su
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableEndTime(t *time.Time) *ScheduleUpdate {
	if t != nil {
		su.SetEndTime(*t)
	}
	return su
}

// ClearEndTime clears the value of the "end_time" field.
func (su *ScheduleUpdate) ClearEndTime() *ScheduleUpdate {
	su.mutation.ClearEndTime()
	return su
}

// SetPrice sets the "price" field.
func (su *ScheduleUpdate) SetPrice(f float64) *ScheduleUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(f)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillablePrice(f *float64) *ScheduleUpdate {
	if f != nil {
		su.SetPrice(*f)
	}
	return su
}

// AddPrice adds f to the "price" field.
func (su *ScheduleUpdate) AddPrice(f float64) *ScheduleUpdate {
	su.mutation.AddPrice(f)
	return su
}

// ClearPrice clears the value of the "price" field.
func (su *ScheduleUpdate) ClearPrice() *ScheduleUpdate {
	su.mutation.ClearPrice()
	return su
}

// SetRemark sets the "remark" field.
func (su *ScheduleUpdate) SetRemark(s string) *ScheduleUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableRemark(s *string) *ScheduleUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *ScheduleUpdate) ClearRemark() *ScheduleUpdate {
	su.mutation.ClearRemark()
	return su
}

// AddMemberIDs adds the "members" edge to the ScheduleMember entity by IDs.
func (su *ScheduleUpdate) AddMemberIDs(ids ...int64) *ScheduleUpdate {
	su.mutation.AddMemberIDs(ids...)
	return su
}

// AddMembers adds the "members" edges to the ScheduleMember entity.
func (su *ScheduleUpdate) AddMembers(s ...*ScheduleMember) *ScheduleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddMemberIDs(ids...)
}

// AddCoachIDs adds the "coachs" edge to the ScheduleCoach entity by IDs.
func (su *ScheduleUpdate) AddCoachIDs(ids ...int64) *ScheduleUpdate {
	su.mutation.AddCoachIDs(ids...)
	return su
}

// AddCoachs adds the "coachs" edges to the ScheduleCoach entity.
func (su *ScheduleUpdate) AddCoachs(s ...*ScheduleCoach) *ScheduleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddCoachIDs(ids...)
}

// Mutation returns the ScheduleMutation object of the builder.
func (su *ScheduleUpdate) Mutation() *ScheduleMutation {
	return su.mutation
}

// ClearMembers clears all "members" edges to the ScheduleMember entity.
func (su *ScheduleUpdate) ClearMembers() *ScheduleUpdate {
	su.mutation.ClearMembers()
	return su
}

// RemoveMemberIDs removes the "members" edge to ScheduleMember entities by IDs.
func (su *ScheduleUpdate) RemoveMemberIDs(ids ...int64) *ScheduleUpdate {
	su.mutation.RemoveMemberIDs(ids...)
	return su
}

// RemoveMembers removes "members" edges to ScheduleMember entities.
func (su *ScheduleUpdate) RemoveMembers(s ...*ScheduleMember) *ScheduleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveMemberIDs(ids...)
}

// ClearCoachs clears all "coachs" edges to the ScheduleCoach entity.
func (su *ScheduleUpdate) ClearCoachs() *ScheduleUpdate {
	su.mutation.ClearCoachs()
	return su
}

// RemoveCoachIDs removes the "coachs" edge to ScheduleCoach entities by IDs.
func (su *ScheduleUpdate) RemoveCoachIDs(ids ...int64) *ScheduleUpdate {
	su.mutation.RemoveCoachIDs(ids...)
	return su
}

// RemoveCoachs removes "coachs" edges to ScheduleCoach entities.
func (su *ScheduleUpdate) RemoveCoachs(s ...*ScheduleCoach) *ScheduleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveCoachIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScheduleUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := schedule.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(schedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(schedule.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(schedule.FieldStatus, field.TypeInt64, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(schedule.FieldStatus, field.TypeInt64)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(schedule.FieldType, field.TypeString, value)
	}
	if su.mutation.TypeCleared() {
		_spec.ClearField(schedule.FieldType, field.TypeString)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(schedule.FieldName, field.TypeString, value)
	}
	if su.mutation.NameCleared() {
		_spec.ClearField(schedule.FieldName, field.TypeString)
	}
	if value, ok := su.mutation.VenueID(); ok {
		_spec.SetField(schedule.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedVenueID(); ok {
		_spec.AddField(schedule.FieldVenueID, field.TypeInt64, value)
	}
	if su.mutation.VenueIDCleared() {
		_spec.ClearField(schedule.FieldVenueID, field.TypeInt64)
	}
	if value, ok := su.mutation.PropertyID(); ok {
		_spec.SetField(schedule.FieldPropertyID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedPropertyID(); ok {
		_spec.AddField(schedule.FieldPropertyID, field.TypeInt64, value)
	}
	if su.mutation.PropertyIDCleared() {
		_spec.ClearField(schedule.FieldPropertyID, field.TypeInt64)
	}
	if value, ok := su.mutation.PlaceID(); ok {
		_spec.SetField(schedule.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedule.FieldPlaceID, field.TypeInt64, value)
	}
	if su.mutation.PlaceIDCleared() {
		_spec.ClearField(schedule.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := su.mutation.Num(); ok {
		_spec.SetField(schedule.FieldNum, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedNum(); ok {
		_spec.AddField(schedule.FieldNum, field.TypeInt64, value)
	}
	if su.mutation.NumCleared() {
		_spec.ClearField(schedule.FieldNum, field.TypeInt64)
	}
	if value, ok := su.mutation.Date(); ok {
		_spec.SetField(schedule.FieldDate, field.TypeTime, value)
	}
	if su.mutation.DateCleared() {
		_spec.ClearField(schedule.FieldDate, field.TypeTime)
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.SetField(schedule.FieldStartTime, field.TypeTime, value)
	}
	if su.mutation.StartTimeCleared() {
		_spec.ClearField(schedule.FieldStartTime, field.TypeTime)
	}
	if value, ok := su.mutation.EndTime(); ok {
		_spec.SetField(schedule.FieldEndTime, field.TypeTime, value)
	}
	if su.mutation.EndTimeCleared() {
		_spec.ClearField(schedule.FieldEndTime, field.TypeTime)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(schedule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(schedule.FieldPrice, field.TypeFloat64, value)
	}
	if su.mutation.PriceCleared() {
		_spec.ClearField(schedule.FieldPrice, field.TypeFloat64)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(schedule.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(schedule.FieldRemark, field.TypeString)
	}
	if su.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedMembersIDs(); len(nodes) > 0 && !su.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCoachsIDs(); len(nodes) > 0 && !su.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CoachsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScheduleUpdateOne) SetUpdatedAt(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStatus sets the "status" field.
func (suo *ScheduleUpdateOne) SetStatus(i int64) *ScheduleUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableStatus(i *int64) *ScheduleUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *ScheduleUpdateOne) AddStatus(i int64) *ScheduleUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *ScheduleUpdateOne) ClearStatus() *ScheduleUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetType sets the "type" field.
func (suo *ScheduleUpdateOne) SetType(s string) *ScheduleUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableType(s *string) *ScheduleUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// ClearType clears the value of the "type" field.
func (suo *ScheduleUpdateOne) ClearType() *ScheduleUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// SetName sets the "name" field.
func (suo *ScheduleUpdateOne) SetName(s string) *ScheduleUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableName(s *string) *ScheduleUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *ScheduleUpdateOne) ClearName() *ScheduleUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetVenueID sets the "venue_id" field.
func (suo *ScheduleUpdateOne) SetVenueID(i int64) *ScheduleUpdateOne {
	suo.mutation.ResetVenueID()
	suo.mutation.SetVenueID(i)
	return suo
}

// SetNillableVenueID sets the "venue_id" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableVenueID(i *int64) *ScheduleUpdateOne {
	if i != nil {
		suo.SetVenueID(*i)
	}
	return suo
}

// AddVenueID adds i to the "venue_id" field.
func (suo *ScheduleUpdateOne) AddVenueID(i int64) *ScheduleUpdateOne {
	suo.mutation.AddVenueID(i)
	return suo
}

// ClearVenueID clears the value of the "venue_id" field.
func (suo *ScheduleUpdateOne) ClearVenueID() *ScheduleUpdateOne {
	suo.mutation.ClearVenueID()
	return suo
}

// SetPropertyID sets the "property_id" field.
func (suo *ScheduleUpdateOne) SetPropertyID(i int64) *ScheduleUpdateOne {
	suo.mutation.ResetPropertyID()
	suo.mutation.SetPropertyID(i)
	return suo
}

// SetNillablePropertyID sets the "property_id" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillablePropertyID(i *int64) *ScheduleUpdateOne {
	if i != nil {
		suo.SetPropertyID(*i)
	}
	return suo
}

// AddPropertyID adds i to the "property_id" field.
func (suo *ScheduleUpdateOne) AddPropertyID(i int64) *ScheduleUpdateOne {
	suo.mutation.AddPropertyID(i)
	return suo
}

// ClearPropertyID clears the value of the "property_id" field.
func (suo *ScheduleUpdateOne) ClearPropertyID() *ScheduleUpdateOne {
	suo.mutation.ClearPropertyID()
	return suo
}

// SetPlaceID sets the "place_id" field.
func (suo *ScheduleUpdateOne) SetPlaceID(i int64) *ScheduleUpdateOne {
	suo.mutation.ResetPlaceID()
	suo.mutation.SetPlaceID(i)
	return suo
}

// SetNillablePlaceID sets the "place_id" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillablePlaceID(i *int64) *ScheduleUpdateOne {
	if i != nil {
		suo.SetPlaceID(*i)
	}
	return suo
}

// AddPlaceID adds i to the "place_id" field.
func (suo *ScheduleUpdateOne) AddPlaceID(i int64) *ScheduleUpdateOne {
	suo.mutation.AddPlaceID(i)
	return suo
}

// ClearPlaceID clears the value of the "place_id" field.
func (suo *ScheduleUpdateOne) ClearPlaceID() *ScheduleUpdateOne {
	suo.mutation.ClearPlaceID()
	return suo
}

// SetNum sets the "num" field.
func (suo *ScheduleUpdateOne) SetNum(i int64) *ScheduleUpdateOne {
	suo.mutation.ResetNum()
	suo.mutation.SetNum(i)
	return suo
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableNum(i *int64) *ScheduleUpdateOne {
	if i != nil {
		suo.SetNum(*i)
	}
	return suo
}

// AddNum adds i to the "num" field.
func (suo *ScheduleUpdateOne) AddNum(i int64) *ScheduleUpdateOne {
	suo.mutation.AddNum(i)
	return suo
}

// ClearNum clears the value of the "num" field.
func (suo *ScheduleUpdateOne) ClearNum() *ScheduleUpdateOne {
	suo.mutation.ClearNum()
	return suo
}

// SetDate sets the "date" field.
func (suo *ScheduleUpdateOne) SetDate(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetDate(t)
	return suo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDate(t *time.Time) *ScheduleUpdateOne {
	if t != nil {
		suo.SetDate(*t)
	}
	return suo
}

// ClearDate clears the value of the "date" field.
func (suo *ScheduleUpdateOne) ClearDate() *ScheduleUpdateOne {
	suo.mutation.ClearDate()
	return suo
}

// SetStartTime sets the "start_time" field.
func (suo *ScheduleUpdateOne) SetStartTime(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetStartTime(t)
	return suo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableStartTime(t *time.Time) *ScheduleUpdateOne {
	if t != nil {
		suo.SetStartTime(*t)
	}
	return suo
}

// ClearStartTime clears the value of the "start_time" field.
func (suo *ScheduleUpdateOne) ClearStartTime() *ScheduleUpdateOne {
	suo.mutation.ClearStartTime()
	return suo
}

// SetEndTime sets the "end_time" field.
func (suo *ScheduleUpdateOne) SetEndTime(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetEndTime(t)
	return suo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableEndTime(t *time.Time) *ScheduleUpdateOne {
	if t != nil {
		suo.SetEndTime(*t)
	}
	return suo
}

// ClearEndTime clears the value of the "end_time" field.
func (suo *ScheduleUpdateOne) ClearEndTime() *ScheduleUpdateOne {
	suo.mutation.ClearEndTime()
	return suo
}

// SetPrice sets the "price" field.
func (suo *ScheduleUpdateOne) SetPrice(f float64) *ScheduleUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(f)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillablePrice(f *float64) *ScheduleUpdateOne {
	if f != nil {
		suo.SetPrice(*f)
	}
	return suo
}

// AddPrice adds f to the "price" field.
func (suo *ScheduleUpdateOne) AddPrice(f float64) *ScheduleUpdateOne {
	suo.mutation.AddPrice(f)
	return suo
}

// ClearPrice clears the value of the "price" field.
func (suo *ScheduleUpdateOne) ClearPrice() *ScheduleUpdateOne {
	suo.mutation.ClearPrice()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *ScheduleUpdateOne) SetRemark(s string) *ScheduleUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableRemark(s *string) *ScheduleUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *ScheduleUpdateOne) ClearRemark() *ScheduleUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// AddMemberIDs adds the "members" edge to the ScheduleMember entity by IDs.
func (suo *ScheduleUpdateOne) AddMemberIDs(ids ...int64) *ScheduleUpdateOne {
	suo.mutation.AddMemberIDs(ids...)
	return suo
}

// AddMembers adds the "members" edges to the ScheduleMember entity.
func (suo *ScheduleUpdateOne) AddMembers(s ...*ScheduleMember) *ScheduleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddMemberIDs(ids...)
}

// AddCoachIDs adds the "coachs" edge to the ScheduleCoach entity by IDs.
func (suo *ScheduleUpdateOne) AddCoachIDs(ids ...int64) *ScheduleUpdateOne {
	suo.mutation.AddCoachIDs(ids...)
	return suo
}

// AddCoachs adds the "coachs" edges to the ScheduleCoach entity.
func (suo *ScheduleUpdateOne) AddCoachs(s ...*ScheduleCoach) *ScheduleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddCoachIDs(ids...)
}

// Mutation returns the ScheduleMutation object of the builder.
func (suo *ScheduleUpdateOne) Mutation() *ScheduleMutation {
	return suo.mutation
}

// ClearMembers clears all "members" edges to the ScheduleMember entity.
func (suo *ScheduleUpdateOne) ClearMembers() *ScheduleUpdateOne {
	suo.mutation.ClearMembers()
	return suo
}

// RemoveMemberIDs removes the "members" edge to ScheduleMember entities by IDs.
func (suo *ScheduleUpdateOne) RemoveMemberIDs(ids ...int64) *ScheduleUpdateOne {
	suo.mutation.RemoveMemberIDs(ids...)
	return suo
}

// RemoveMembers removes "members" edges to ScheduleMember entities.
func (suo *ScheduleUpdateOne) RemoveMembers(s ...*ScheduleMember) *ScheduleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveMemberIDs(ids...)
}

// ClearCoachs clears all "coachs" edges to the ScheduleCoach entity.
func (suo *ScheduleUpdateOne) ClearCoachs() *ScheduleUpdateOne {
	suo.mutation.ClearCoachs()
	return suo
}

// RemoveCoachIDs removes the "coachs" edge to ScheduleCoach entities by IDs.
func (suo *ScheduleUpdateOne) RemoveCoachIDs(ids ...int64) *ScheduleUpdateOne {
	suo.mutation.RemoveCoachIDs(ids...)
	return suo
}

// RemoveCoachs removes "coachs" edges to ScheduleCoach entities.
func (suo *ScheduleUpdateOne) RemoveCoachs(s ...*ScheduleCoach) *ScheduleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveCoachIDs(ids...)
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (suo *ScheduleUpdateOne) Where(ps ...predicate.Schedule) *ScheduleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScheduleUpdateOne) Select(field string, fields ...string) *ScheduleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Schedule entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScheduleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := schedule.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (_node *Schedule, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Schedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedule.FieldID)
		for _, f := range fields {
			if !schedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(schedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(schedule.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(schedule.FieldStatus, field.TypeInt64, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(schedule.FieldStatus, field.TypeInt64)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(schedule.FieldType, field.TypeString, value)
	}
	if suo.mutation.TypeCleared() {
		_spec.ClearField(schedule.FieldType, field.TypeString)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(schedule.FieldName, field.TypeString, value)
	}
	if suo.mutation.NameCleared() {
		_spec.ClearField(schedule.FieldName, field.TypeString)
	}
	if value, ok := suo.mutation.VenueID(); ok {
		_spec.SetField(schedule.FieldVenueID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedVenueID(); ok {
		_spec.AddField(schedule.FieldVenueID, field.TypeInt64, value)
	}
	if suo.mutation.VenueIDCleared() {
		_spec.ClearField(schedule.FieldVenueID, field.TypeInt64)
	}
	if value, ok := suo.mutation.PropertyID(); ok {
		_spec.SetField(schedule.FieldPropertyID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedPropertyID(); ok {
		_spec.AddField(schedule.FieldPropertyID, field.TypeInt64, value)
	}
	if suo.mutation.PropertyIDCleared() {
		_spec.ClearField(schedule.FieldPropertyID, field.TypeInt64)
	}
	if value, ok := suo.mutation.PlaceID(); ok {
		_spec.SetField(schedule.FieldPlaceID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedPlaceID(); ok {
		_spec.AddField(schedule.FieldPlaceID, field.TypeInt64, value)
	}
	if suo.mutation.PlaceIDCleared() {
		_spec.ClearField(schedule.FieldPlaceID, field.TypeInt64)
	}
	if value, ok := suo.mutation.Num(); ok {
		_spec.SetField(schedule.FieldNum, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedNum(); ok {
		_spec.AddField(schedule.FieldNum, field.TypeInt64, value)
	}
	if suo.mutation.NumCleared() {
		_spec.ClearField(schedule.FieldNum, field.TypeInt64)
	}
	if value, ok := suo.mutation.Date(); ok {
		_spec.SetField(schedule.FieldDate, field.TypeTime, value)
	}
	if suo.mutation.DateCleared() {
		_spec.ClearField(schedule.FieldDate, field.TypeTime)
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.SetField(schedule.FieldStartTime, field.TypeTime, value)
	}
	if suo.mutation.StartTimeCleared() {
		_spec.ClearField(schedule.FieldStartTime, field.TypeTime)
	}
	if value, ok := suo.mutation.EndTime(); ok {
		_spec.SetField(schedule.FieldEndTime, field.TypeTime, value)
	}
	if suo.mutation.EndTimeCleared() {
		_spec.ClearField(schedule.FieldEndTime, field.TypeTime)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(schedule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(schedule.FieldPrice, field.TypeFloat64, value)
	}
	if suo.mutation.PriceCleared() {
		_spec.ClearField(schedule.FieldPrice, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(schedule.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(schedule.FieldRemark, field.TypeString)
	}
	if suo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !suo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.MembersTable,
			Columns: []string{schedule.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulemember.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCoachsIDs(); len(nodes) > 0 && !suo.mutation.CoachsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CoachsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.CoachsTable,
			Columns: []string{schedule.CoachsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schedulecoach.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Schedule{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

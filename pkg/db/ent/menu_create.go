// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"saas/pkg/db/ent/menu"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (mc *MenuCreate) SetParentID(i int) *MenuCreate {
	mc.mutation.SetParentID(i)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(i *int) *MenuCreate {
	if i != nil {
		mc.SetParentID(*i)
	}
	return mc
}

// SetRouteName sets the "route_name" field.
func (mc *MenuCreate) SetRouteName(s string) *MenuCreate {
	mc.mutation.SetRouteName(s)
	return mc
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (mc *MenuCreate) SetNillableRouteName(s *string) *MenuCreate {
	if s != nil {
		mc.SetRouteName(*s)
	}
	return mc
}

// SetRoutePath sets the "route_path" field.
func (mc *MenuCreate) SetRoutePath(s string) *MenuCreate {
	mc.mutation.SetRoutePath(s)
	return mc
}

// SetNillableRoutePath sets the "route_path" field if the given value is not nil.
func (mc *MenuCreate) SetNillableRoutePath(s *string) *MenuCreate {
	if s != nil {
		mc.SetRoutePath(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MenuCreate) SetStatus(s string) *MenuCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MenuCreate) SetNillableStatus(s *string) *MenuCreate {
	if s != nil {
		mc.SetStatus(*s)
	}
	return mc
}

// SetMenuName sets the "menu_name" field.
func (mc *MenuCreate) SetMenuName(s string) *MenuCreate {
	mc.mutation.SetMenuName(s)
	return mc
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (mc *MenuCreate) SetNillableMenuName(s *string) *MenuCreate {
	if s != nil {
		mc.SetMenuName(*s)
	}
	return mc
}

// SetMenuType sets the "menu_type" field.
func (mc *MenuCreate) SetMenuType(s string) *MenuCreate {
	mc.mutation.SetMenuType(s)
	return mc
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (mc *MenuCreate) SetNillableMenuType(s *string) *MenuCreate {
	if s != nil {
		mc.SetMenuType(*s)
	}
	return mc
}

// SetIconType sets the "icon_type" field.
func (mc *MenuCreate) SetIconType(s string) *MenuCreate {
	mc.mutation.SetIconType(s)
	return mc
}

// SetNillableIconType sets the "icon_type" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIconType(s *string) *MenuCreate {
	if s != nil {
		mc.SetIconType(*s)
	}
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetI18nKey sets the "i18n_key" field.
func (mc *MenuCreate) SetI18nKey(s string) *MenuCreate {
	mc.mutation.SetI18nKey(s)
	return mc
}

// SetNillableI18nKey sets the "i18n_key" field if the given value is not nil.
func (mc *MenuCreate) SetNillableI18nKey(s *string) *MenuCreate {
	if s != nil {
		mc.SetI18nKey(*s)
	}
	return mc
}

// SetLevel sets the "level" field.
func (mc *MenuCreate) SetLevel(s string) *MenuCreate {
	mc.mutation.SetLevel(s)
	return mc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mc *MenuCreate) SetNillableLevel(s *string) *MenuCreate {
	if s != nil {
		mc.SetLevel(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(i int) *MenuCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetParent sets the "parent" edge to the Menu entity.
func (mc *MenuCreate) SetParent(m *Menu) *MenuCreate {
	return mc.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mc *MenuCreate) AddChildIDs(ids ...int) *MenuCreate {
	mc.mutation.AddChildIDs(ids...)
	return mc
}

// AddChildren adds the "children" edges to the Menu entity.
func (mc *MenuCreate) AddChildren(m ...*Menu) *MenuCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.ParentID(); !ok {
		v := menu.DefaultParentID
		mc.mutation.SetParentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.RouteName(); ok {
		_spec.SetField(menu.FieldRouteName, field.TypeString, value)
		_node.RouteName = &value
	}
	if value, ok := mc.mutation.RoutePath(); ok {
		_spec.SetField(menu.FieldRoutePath, field.TypeString, value)
		_node.RoutePath = &value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := mc.mutation.MenuName(); ok {
		_spec.SetField(menu.FieldMenuName, field.TypeString, value)
		_node.MenuName = &value
	}
	if value, ok := mc.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeString, value)
		_node.MenuType = &value
	}
	if value, ok := mc.mutation.IconType(); ok {
		_spec.SetField(menu.FieldIconType, field.TypeString, value)
		_node.IconType = &value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = &value
	}
	if value, ok := mc.mutation.I18nKey(); ok {
		_spec.SetField(menu.FieldI18nKey, field.TypeString, value)
		_node.I18nKey = &value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.SetField(menu.FieldLevel, field.TypeString, value)
		_node.Level = &value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

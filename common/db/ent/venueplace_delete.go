// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/pkg/db/ent/predicate"
	"saas/pkg/db/ent/venueplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VenuePlaceDelete is the builder for deleting a VenuePlace entity.
type VenuePlaceDelete struct {
	config
	hooks    []Hook
	mutation *VenuePlaceMutation
}

// Where appends a list predicates to the VenuePlaceDelete builder.
func (vpd *VenuePlaceDelete) Where(ps ...predicate.VenuePlace) *VenuePlaceDelete {
	vpd.mutation.Where(ps...)
	return vpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vpd *VenuePlaceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vpd.sqlExec, vpd.mutation, vpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vpd *VenuePlaceDelete) ExecX(ctx context.Context) int {
	n, err := vpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vpd *VenuePlaceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(venueplace.Table, sqlgraph.NewFieldSpec(venueplace.FieldID, field.TypeInt64))
	if ps := vpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vpd.mutation.done = true
	return affected, err
}

// VenuePlaceDeleteOne is the builder for deleting a single VenuePlace entity.
type VenuePlaceDeleteOne struct {
	vpd *VenuePlaceDelete
}

// Where appends a list predicates to the VenuePlaceDelete builder.
func (vpdo *VenuePlaceDeleteOne) Where(ps ...predicate.VenuePlace) *VenuePlaceDeleteOne {
	vpdo.vpd.mutation.Where(ps...)
	return vpdo
}

// Exec executes the deletion query.
func (vpdo *VenuePlaceDeleteOne) Exec(ctx context.Context) error {
	n, err := vpdo.vpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{venueplace.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vpdo *VenuePlaceDeleteOne) ExecX(ctx context.Context) {
	if err := vpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

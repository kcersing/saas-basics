// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"order/biz/ent/order"
	"order/biz/ent/orderamount"
	"order/biz/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderAmountUpdate is the builder for updating OrderAmount entities.
type OrderAmountUpdate struct {
	config
	hooks    []Hook
	mutation *OrderAmountMutation
}

// Where appends a list predicates to the OrderAmountUpdate builder.
func (oau *OrderAmountUpdate) Where(ps ...predicate.OrderAmount) *OrderAmountUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OrderAmountUpdate) SetUpdatedAt(t time.Time) *OrderAmountUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetOrderID sets the "order_id" field.
func (oau *OrderAmountUpdate) SetOrderID(i int64) *OrderAmountUpdate {
	oau.mutation.SetOrderID(i)
	return oau
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oau *OrderAmountUpdate) SetNillableOrderID(i *int64) *OrderAmountUpdate {
	if i != nil {
		oau.SetOrderID(*i)
	}
	return oau
}

// ClearOrderID clears the value of the "order_id" field.
func (oau *OrderAmountUpdate) ClearOrderID() *OrderAmountUpdate {
	oau.mutation.ClearOrderID()
	return oau
}

// SetTotal sets the "total" field.
func (oau *OrderAmountUpdate) SetTotal(f float64) *OrderAmountUpdate {
	oau.mutation.ResetTotal()
	oau.mutation.SetTotal(f)
	return oau
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (oau *OrderAmountUpdate) SetNillableTotal(f *float64) *OrderAmountUpdate {
	if f != nil {
		oau.SetTotal(*f)
	}
	return oau
}

// AddTotal adds f to the "total" field.
func (oau *OrderAmountUpdate) AddTotal(f float64) *OrderAmountUpdate {
	oau.mutation.AddTotal(f)
	return oau
}

// ClearTotal clears the value of the "total" field.
func (oau *OrderAmountUpdate) ClearTotal() *OrderAmountUpdate {
	oau.mutation.ClearTotal()
	return oau
}

// SetActual sets the "actual" field.
func (oau *OrderAmountUpdate) SetActual(f float64) *OrderAmountUpdate {
	oau.mutation.ResetActual()
	oau.mutation.SetActual(f)
	return oau
}

// SetNillableActual sets the "actual" field if the given value is not nil.
func (oau *OrderAmountUpdate) SetNillableActual(f *float64) *OrderAmountUpdate {
	if f != nil {
		oau.SetActual(*f)
	}
	return oau
}

// AddActual adds f to the "actual" field.
func (oau *OrderAmountUpdate) AddActual(f float64) *OrderAmountUpdate {
	oau.mutation.AddActual(f)
	return oau
}

// ClearActual clears the value of the "actual" field.
func (oau *OrderAmountUpdate) ClearActual() *OrderAmountUpdate {
	oau.mutation.ClearActual()
	return oau
}

// SetResidue sets the "residue" field.
func (oau *OrderAmountUpdate) SetResidue(f float64) *OrderAmountUpdate {
	oau.mutation.ResetResidue()
	oau.mutation.SetResidue(f)
	return oau
}

// SetNillableResidue sets the "residue" field if the given value is not nil.
func (oau *OrderAmountUpdate) SetNillableResidue(f *float64) *OrderAmountUpdate {
	if f != nil {
		oau.SetResidue(*f)
	}
	return oau
}

// AddResidue adds f to the "residue" field.
func (oau *OrderAmountUpdate) AddResidue(f float64) *OrderAmountUpdate {
	oau.mutation.AddResidue(f)
	return oau
}

// ClearResidue clears the value of the "residue" field.
func (oau *OrderAmountUpdate) ClearResidue() *OrderAmountUpdate {
	oau.mutation.ClearResidue()
	return oau
}

// SetRemission sets the "remission" field.
func (oau *OrderAmountUpdate) SetRemission(f float64) *OrderAmountUpdate {
	oau.mutation.ResetRemission()
	oau.mutation.SetRemission(f)
	return oau
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (oau *OrderAmountUpdate) SetNillableRemission(f *float64) *OrderAmountUpdate {
	if f != nil {
		oau.SetRemission(*f)
	}
	return oau
}

// AddRemission adds f to the "remission" field.
func (oau *OrderAmountUpdate) AddRemission(f float64) *OrderAmountUpdate {
	oau.mutation.AddRemission(f)
	return oau
}

// ClearRemission clears the value of the "remission" field.
func (oau *OrderAmountUpdate) ClearRemission() *OrderAmountUpdate {
	oau.mutation.ClearRemission()
	return oau
}

// SetOrder sets the "order" edge to the Order entity.
func (oau *OrderAmountUpdate) SetOrder(o *Order) *OrderAmountUpdate {
	return oau.SetOrderID(o.ID)
}

// Mutation returns the OrderAmountMutation object of the builder.
func (oau *OrderAmountUpdate) Mutation() *OrderAmountMutation {
	return oau.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oau *OrderAmountUpdate) ClearOrder() *OrderAmountUpdate {
	oau.mutation.ClearOrder()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderAmountUpdate) Save(ctx context.Context) (int, error) {
	oau.defaults()
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderAmountUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderAmountUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderAmountUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderAmountUpdate) defaults() {
	if _, ok := oau.mutation.UpdatedAt(); !ok {
		v := orderamount.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrderAmountUpdate) check() error {
	if v, ok := oau.mutation.OrderID(); ok {
		if err := orderamount.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "OrderAmount.order_id": %w`, err)}
		}
	}
	return nil
}

func (oau *OrderAmountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderamount.Table, orderamount.Columns, sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.SetField(orderamount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.Total(); ok {
		_spec.SetField(orderamount.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := oau.mutation.AddedTotal(); ok {
		_spec.AddField(orderamount.FieldTotal, field.TypeFloat64, value)
	}
	if oau.mutation.TotalCleared() {
		_spec.ClearField(orderamount.FieldTotal, field.TypeFloat64)
	}
	if value, ok := oau.mutation.Actual(); ok {
		_spec.SetField(orderamount.FieldActual, field.TypeFloat64, value)
	}
	if value, ok := oau.mutation.AddedActual(); ok {
		_spec.AddField(orderamount.FieldActual, field.TypeFloat64, value)
	}
	if oau.mutation.ActualCleared() {
		_spec.ClearField(orderamount.FieldActual, field.TypeFloat64)
	}
	if value, ok := oau.mutation.Residue(); ok {
		_spec.SetField(orderamount.FieldResidue, field.TypeFloat64, value)
	}
	if value, ok := oau.mutation.AddedResidue(); ok {
		_spec.AddField(orderamount.FieldResidue, field.TypeFloat64, value)
	}
	if oau.mutation.ResidueCleared() {
		_spec.ClearField(orderamount.FieldResidue, field.TypeFloat64)
	}
	if value, ok := oau.mutation.Remission(); ok {
		_spec.SetField(orderamount.FieldRemission, field.TypeFloat64, value)
	}
	if value, ok := oau.mutation.AddedRemission(); ok {
		_spec.AddField(orderamount.FieldRemission, field.TypeFloat64, value)
	}
	if oau.mutation.RemissionCleared() {
		_spec.ClearField(orderamount.FieldRemission, field.TypeFloat64)
	}
	if oau.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamount.OrderTable,
			Columns: []string{orderamount.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamount.OrderTable,
			Columns: []string{orderamount.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderamount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OrderAmountUpdateOne is the builder for updating a single OrderAmount entity.
type OrderAmountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderAmountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OrderAmountUpdateOne) SetUpdatedAt(t time.Time) *OrderAmountUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetOrderID sets the "order_id" field.
func (oauo *OrderAmountUpdateOne) SetOrderID(i int64) *OrderAmountUpdateOne {
	oauo.mutation.SetOrderID(i)
	return oauo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oauo *OrderAmountUpdateOne) SetNillableOrderID(i *int64) *OrderAmountUpdateOne {
	if i != nil {
		oauo.SetOrderID(*i)
	}
	return oauo
}

// ClearOrderID clears the value of the "order_id" field.
func (oauo *OrderAmountUpdateOne) ClearOrderID() *OrderAmountUpdateOne {
	oauo.mutation.ClearOrderID()
	return oauo
}

// SetTotal sets the "total" field.
func (oauo *OrderAmountUpdateOne) SetTotal(f float64) *OrderAmountUpdateOne {
	oauo.mutation.ResetTotal()
	oauo.mutation.SetTotal(f)
	return oauo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (oauo *OrderAmountUpdateOne) SetNillableTotal(f *float64) *OrderAmountUpdateOne {
	if f != nil {
		oauo.SetTotal(*f)
	}
	return oauo
}

// AddTotal adds f to the "total" field.
func (oauo *OrderAmountUpdateOne) AddTotal(f float64) *OrderAmountUpdateOne {
	oauo.mutation.AddTotal(f)
	return oauo
}

// ClearTotal clears the value of the "total" field.
func (oauo *OrderAmountUpdateOne) ClearTotal() *OrderAmountUpdateOne {
	oauo.mutation.ClearTotal()
	return oauo
}

// SetActual sets the "actual" field.
func (oauo *OrderAmountUpdateOne) SetActual(f float64) *OrderAmountUpdateOne {
	oauo.mutation.ResetActual()
	oauo.mutation.SetActual(f)
	return oauo
}

// SetNillableActual sets the "actual" field if the given value is not nil.
func (oauo *OrderAmountUpdateOne) SetNillableActual(f *float64) *OrderAmountUpdateOne {
	if f != nil {
		oauo.SetActual(*f)
	}
	return oauo
}

// AddActual adds f to the "actual" field.
func (oauo *OrderAmountUpdateOne) AddActual(f float64) *OrderAmountUpdateOne {
	oauo.mutation.AddActual(f)
	return oauo
}

// ClearActual clears the value of the "actual" field.
func (oauo *OrderAmountUpdateOne) ClearActual() *OrderAmountUpdateOne {
	oauo.mutation.ClearActual()
	return oauo
}

// SetResidue sets the "residue" field.
func (oauo *OrderAmountUpdateOne) SetResidue(f float64) *OrderAmountUpdateOne {
	oauo.mutation.ResetResidue()
	oauo.mutation.SetResidue(f)
	return oauo
}

// SetNillableResidue sets the "residue" field if the given value is not nil.
func (oauo *OrderAmountUpdateOne) SetNillableResidue(f *float64) *OrderAmountUpdateOne {
	if f != nil {
		oauo.SetResidue(*f)
	}
	return oauo
}

// AddResidue adds f to the "residue" field.
func (oauo *OrderAmountUpdateOne) AddResidue(f float64) *OrderAmountUpdateOne {
	oauo.mutation.AddResidue(f)
	return oauo
}

// ClearResidue clears the value of the "residue" field.
func (oauo *OrderAmountUpdateOne) ClearResidue() *OrderAmountUpdateOne {
	oauo.mutation.ClearResidue()
	return oauo
}

// SetRemission sets the "remission" field.
func (oauo *OrderAmountUpdateOne) SetRemission(f float64) *OrderAmountUpdateOne {
	oauo.mutation.ResetRemission()
	oauo.mutation.SetRemission(f)
	return oauo
}

// SetNillableRemission sets the "remission" field if the given value is not nil.
func (oauo *OrderAmountUpdateOne) SetNillableRemission(f *float64) *OrderAmountUpdateOne {
	if f != nil {
		oauo.SetRemission(*f)
	}
	return oauo
}

// AddRemission adds f to the "remission" field.
func (oauo *OrderAmountUpdateOne) AddRemission(f float64) *OrderAmountUpdateOne {
	oauo.mutation.AddRemission(f)
	return oauo
}

// ClearRemission clears the value of the "remission" field.
func (oauo *OrderAmountUpdateOne) ClearRemission() *OrderAmountUpdateOne {
	oauo.mutation.ClearRemission()
	return oauo
}

// SetOrder sets the "order" edge to the Order entity.
func (oauo *OrderAmountUpdateOne) SetOrder(o *Order) *OrderAmountUpdateOne {
	return oauo.SetOrderID(o.ID)
}

// Mutation returns the OrderAmountMutation object of the builder.
func (oauo *OrderAmountUpdateOne) Mutation() *OrderAmountMutation {
	return oauo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oauo *OrderAmountUpdateOne) ClearOrder() *OrderAmountUpdateOne {
	oauo.mutation.ClearOrder()
	return oauo
}

// Where appends a list predicates to the OrderAmountUpdate builder.
func (oauo *OrderAmountUpdateOne) Where(ps ...predicate.OrderAmount) *OrderAmountUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderAmountUpdateOne) Select(field string, fields ...string) *OrderAmountUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderAmount entity.
func (oauo *OrderAmountUpdateOne) Save(ctx context.Context) (*OrderAmount, error) {
	oauo.defaults()
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderAmountUpdateOne) SaveX(ctx context.Context) *OrderAmount {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderAmountUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderAmountUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderAmountUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdatedAt(); !ok {
		v := orderamount.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrderAmountUpdateOne) check() error {
	if v, ok := oauo.mutation.OrderID(); ok {
		if err := orderamount.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "OrderAmount.order_id": %w`, err)}
		}
	}
	return nil
}

func (oauo *OrderAmountUpdateOne) sqlSave(ctx context.Context) (_node *OrderAmount, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderamount.Table, orderamount.Columns, sqlgraph.NewFieldSpec(orderamount.FieldID, field.TypeInt64))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderAmount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderamount.FieldID)
		for _, f := range fields {
			if !orderamount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderamount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderamount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.Total(); ok {
		_spec.SetField(orderamount.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := oauo.mutation.AddedTotal(); ok {
		_spec.AddField(orderamount.FieldTotal, field.TypeFloat64, value)
	}
	if oauo.mutation.TotalCleared() {
		_spec.ClearField(orderamount.FieldTotal, field.TypeFloat64)
	}
	if value, ok := oauo.mutation.Actual(); ok {
		_spec.SetField(orderamount.FieldActual, field.TypeFloat64, value)
	}
	if value, ok := oauo.mutation.AddedActual(); ok {
		_spec.AddField(orderamount.FieldActual, field.TypeFloat64, value)
	}
	if oauo.mutation.ActualCleared() {
		_spec.ClearField(orderamount.FieldActual, field.TypeFloat64)
	}
	if value, ok := oauo.mutation.Residue(); ok {
		_spec.SetField(orderamount.FieldResidue, field.TypeFloat64, value)
	}
	if value, ok := oauo.mutation.AddedResidue(); ok {
		_spec.AddField(orderamount.FieldResidue, field.TypeFloat64, value)
	}
	if oauo.mutation.ResidueCleared() {
		_spec.ClearField(orderamount.FieldResidue, field.TypeFloat64)
	}
	if value, ok := oauo.mutation.Remission(); ok {
		_spec.SetField(orderamount.FieldRemission, field.TypeFloat64, value)
	}
	if value, ok := oauo.mutation.AddedRemission(); ok {
		_spec.AddField(orderamount.FieldRemission, field.TypeFloat64, value)
	}
	if oauo.mutation.RemissionCleared() {
		_spec.ClearField(orderamount.FieldRemission, field.TypeFloat64)
	}
	if oauo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamount.OrderTable,
			Columns: []string{orderamount.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamount.OrderTable,
			Columns: []string{orderamount.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderAmount{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderamount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}

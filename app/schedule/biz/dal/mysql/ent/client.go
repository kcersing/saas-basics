// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"schedule/biz/dal/mysql/ent/migrate"

	"schedule/biz/dal/mysql/ent/schedule"
	"schedule/biz/dal/mysql/ent/schedulecoach"
	"schedule/biz/dal/mysql/ent/schedulemember"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Schedule is the client for interacting with the Schedule builders.
	Schedule *ScheduleClient
	// ScheduleCoach is the client for interacting with the ScheduleCoach builders.
	ScheduleCoach *ScheduleCoachClient
	// ScheduleMember is the client for interacting with the ScheduleMember builders.
	ScheduleMember *ScheduleMemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Schedule = NewScheduleClient(c.config)
	c.ScheduleCoach = NewScheduleCoachClient(c.config)
	c.ScheduleMember = NewScheduleMemberClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Schedule:       NewScheduleClient(cfg),
		ScheduleCoach:  NewScheduleCoachClient(cfg),
		ScheduleMember: NewScheduleMemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Schedule:       NewScheduleClient(cfg),
		ScheduleCoach:  NewScheduleCoachClient(cfg),
		ScheduleMember: NewScheduleMemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Schedule.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Schedule.Use(hooks...)
	c.ScheduleCoach.Use(hooks...)
	c.ScheduleMember.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Schedule.Intercept(interceptors...)
	c.ScheduleCoach.Intercept(interceptors...)
	c.ScheduleMember.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ScheduleMutation:
		return c.Schedule.mutate(ctx, m)
	case *ScheduleCoachMutation:
		return c.ScheduleCoach.mutate(ctx, m)
	case *ScheduleMemberMutation:
		return c.ScheduleMember.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ScheduleClient is a client for the Schedule schema.
type ScheduleClient struct {
	config
}

// NewScheduleClient returns a client for the Schedule from the given config.
func NewScheduleClient(c config) *ScheduleClient {
	return &ScheduleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schedule.Hooks(f(g(h())))`.
func (c *ScheduleClient) Use(hooks ...Hook) {
	c.hooks.Schedule = append(c.hooks.Schedule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schedule.Intercept(f(g(h())))`.
func (c *ScheduleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Schedule = append(c.inters.Schedule, interceptors...)
}

// Create returns a builder for creating a Schedule entity.
func (c *ScheduleClient) Create() *ScheduleCreate {
	mutation := newScheduleMutation(c.config, OpCreate)
	return &ScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Schedule entities.
func (c *ScheduleClient) CreateBulk(builders ...*ScheduleCreate) *ScheduleCreateBulk {
	return &ScheduleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScheduleClient) MapCreateBulk(slice any, setFunc func(*ScheduleCreate, int)) *ScheduleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScheduleCreateBulk{err: fmt.Errorf("calling to ScheduleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScheduleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScheduleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Schedule.
func (c *ScheduleClient) Update() *ScheduleUpdate {
	mutation := newScheduleMutation(c.config, OpUpdate)
	return &ScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScheduleClient) UpdateOne(s *Schedule) *ScheduleUpdateOne {
	mutation := newScheduleMutation(c.config, OpUpdateOne, withSchedule(s))
	return &ScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScheduleClient) UpdateOneID(id int64) *ScheduleUpdateOne {
	mutation := newScheduleMutation(c.config, OpUpdateOne, withScheduleID(id))
	return &ScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Schedule.
func (c *ScheduleClient) Delete() *ScheduleDelete {
	mutation := newScheduleMutation(c.config, OpDelete)
	return &ScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScheduleClient) DeleteOne(s *Schedule) *ScheduleDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScheduleClient) DeleteOneID(id int64) *ScheduleDeleteOne {
	builder := c.Delete().Where(schedule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScheduleDeleteOne{builder}
}

// Query returns a query builder for Schedule.
func (c *ScheduleClient) Query() *ScheduleQuery {
	return &ScheduleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchedule},
		inters: c.Interceptors(),
	}
}

// Get returns a Schedule entity by its id.
func (c *ScheduleClient) Get(ctx context.Context, id int64) (*Schedule, error) {
	return c.Query().Where(schedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScheduleClient) GetX(ctx context.Context, id int64) *Schedule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a Schedule.
func (c *ScheduleClient) QueryMembers(s *Schedule) *ScheduleMemberQuery {
	query := (&ScheduleMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schedule.Table, schedule.FieldID, id),
			sqlgraph.To(schedulemember.Table, schedulemember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, schedule.MembersTable, schedule.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoachs queries the coachs edge of a Schedule.
func (c *ScheduleClient) QueryCoachs(s *Schedule) *ScheduleCoachQuery {
	query := (&ScheduleCoachClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schedule.Table, schedule.FieldID, id),
			sqlgraph.To(schedulecoach.Table, schedulecoach.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, schedule.CoachsTable, schedule.CoachsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScheduleClient) Hooks() []Hook {
	return c.hooks.Schedule
}

// Interceptors returns the client interceptors.
func (c *ScheduleClient) Interceptors() []Interceptor {
	return c.inters.Schedule
}

func (c *ScheduleClient) mutate(ctx context.Context, m *ScheduleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Schedule mutation op: %q", m.Op())
	}
}

// ScheduleCoachClient is a client for the ScheduleCoach schema.
type ScheduleCoachClient struct {
	config
}

// NewScheduleCoachClient returns a client for the ScheduleCoach from the given config.
func NewScheduleCoachClient(c config) *ScheduleCoachClient {
	return &ScheduleCoachClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schedulecoach.Hooks(f(g(h())))`.
func (c *ScheduleCoachClient) Use(hooks ...Hook) {
	c.hooks.ScheduleCoach = append(c.hooks.ScheduleCoach, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schedulecoach.Intercept(f(g(h())))`.
func (c *ScheduleCoachClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScheduleCoach = append(c.inters.ScheduleCoach, interceptors...)
}

// Create returns a builder for creating a ScheduleCoach entity.
func (c *ScheduleCoachClient) Create() *ScheduleCoachCreate {
	mutation := newScheduleCoachMutation(c.config, OpCreate)
	return &ScheduleCoachCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScheduleCoach entities.
func (c *ScheduleCoachClient) CreateBulk(builders ...*ScheduleCoachCreate) *ScheduleCoachCreateBulk {
	return &ScheduleCoachCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScheduleCoachClient) MapCreateBulk(slice any, setFunc func(*ScheduleCoachCreate, int)) *ScheduleCoachCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScheduleCoachCreateBulk{err: fmt.Errorf("calling to ScheduleCoachClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScheduleCoachCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScheduleCoachCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScheduleCoach.
func (c *ScheduleCoachClient) Update() *ScheduleCoachUpdate {
	mutation := newScheduleCoachMutation(c.config, OpUpdate)
	return &ScheduleCoachUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScheduleCoachClient) UpdateOne(sc *ScheduleCoach) *ScheduleCoachUpdateOne {
	mutation := newScheduleCoachMutation(c.config, OpUpdateOne, withScheduleCoach(sc))
	return &ScheduleCoachUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScheduleCoachClient) UpdateOneID(id int64) *ScheduleCoachUpdateOne {
	mutation := newScheduleCoachMutation(c.config, OpUpdateOne, withScheduleCoachID(id))
	return &ScheduleCoachUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScheduleCoach.
func (c *ScheduleCoachClient) Delete() *ScheduleCoachDelete {
	mutation := newScheduleCoachMutation(c.config, OpDelete)
	return &ScheduleCoachDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScheduleCoachClient) DeleteOne(sc *ScheduleCoach) *ScheduleCoachDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScheduleCoachClient) DeleteOneID(id int64) *ScheduleCoachDeleteOne {
	builder := c.Delete().Where(schedulecoach.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScheduleCoachDeleteOne{builder}
}

// Query returns a query builder for ScheduleCoach.
func (c *ScheduleCoachClient) Query() *ScheduleCoachQuery {
	return &ScheduleCoachQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScheduleCoach},
		inters: c.Interceptors(),
	}
}

// Get returns a ScheduleCoach entity by its id.
func (c *ScheduleCoachClient) Get(ctx context.Context, id int64) (*ScheduleCoach, error) {
	return c.Query().Where(schedulecoach.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScheduleCoachClient) GetX(ctx context.Context, id int64) *ScheduleCoach {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySchedule queries the schedule edge of a ScheduleCoach.
func (c *ScheduleCoachClient) QuerySchedule(sc *ScheduleCoach) *ScheduleQuery {
	query := (&ScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulecoach.Table, schedulecoach.FieldID, id),
			sqlgraph.To(schedule.Table, schedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, schedulecoach.ScheduleTable, schedulecoach.ScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScheduleCoachClient) Hooks() []Hook {
	return c.hooks.ScheduleCoach
}

// Interceptors returns the client interceptors.
func (c *ScheduleCoachClient) Interceptors() []Interceptor {
	return c.inters.ScheduleCoach
}

func (c *ScheduleCoachClient) mutate(ctx context.Context, m *ScheduleCoachMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScheduleCoachCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScheduleCoachUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScheduleCoachUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScheduleCoachDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScheduleCoach mutation op: %q", m.Op())
	}
}

// ScheduleMemberClient is a client for the ScheduleMember schema.
type ScheduleMemberClient struct {
	config
}

// NewScheduleMemberClient returns a client for the ScheduleMember from the given config.
func NewScheduleMemberClient(c config) *ScheduleMemberClient {
	return &ScheduleMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schedulemember.Hooks(f(g(h())))`.
func (c *ScheduleMemberClient) Use(hooks ...Hook) {
	c.hooks.ScheduleMember = append(c.hooks.ScheduleMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schedulemember.Intercept(f(g(h())))`.
func (c *ScheduleMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScheduleMember = append(c.inters.ScheduleMember, interceptors...)
}

// Create returns a builder for creating a ScheduleMember entity.
func (c *ScheduleMemberClient) Create() *ScheduleMemberCreate {
	mutation := newScheduleMemberMutation(c.config, OpCreate)
	return &ScheduleMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScheduleMember entities.
func (c *ScheduleMemberClient) CreateBulk(builders ...*ScheduleMemberCreate) *ScheduleMemberCreateBulk {
	return &ScheduleMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScheduleMemberClient) MapCreateBulk(slice any, setFunc func(*ScheduleMemberCreate, int)) *ScheduleMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScheduleMemberCreateBulk{err: fmt.Errorf("calling to ScheduleMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScheduleMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScheduleMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScheduleMember.
func (c *ScheduleMemberClient) Update() *ScheduleMemberUpdate {
	mutation := newScheduleMemberMutation(c.config, OpUpdate)
	return &ScheduleMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScheduleMemberClient) UpdateOne(sm *ScheduleMember) *ScheduleMemberUpdateOne {
	mutation := newScheduleMemberMutation(c.config, OpUpdateOne, withScheduleMember(sm))
	return &ScheduleMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScheduleMemberClient) UpdateOneID(id int64) *ScheduleMemberUpdateOne {
	mutation := newScheduleMemberMutation(c.config, OpUpdateOne, withScheduleMemberID(id))
	return &ScheduleMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScheduleMember.
func (c *ScheduleMemberClient) Delete() *ScheduleMemberDelete {
	mutation := newScheduleMemberMutation(c.config, OpDelete)
	return &ScheduleMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScheduleMemberClient) DeleteOne(sm *ScheduleMember) *ScheduleMemberDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScheduleMemberClient) DeleteOneID(id int64) *ScheduleMemberDeleteOne {
	builder := c.Delete().Where(schedulemember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScheduleMemberDeleteOne{builder}
}

// Query returns a query builder for ScheduleMember.
func (c *ScheduleMemberClient) Query() *ScheduleMemberQuery {
	return &ScheduleMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScheduleMember},
		inters: c.Interceptors(),
	}
}

// Get returns a ScheduleMember entity by its id.
func (c *ScheduleMemberClient) Get(ctx context.Context, id int64) (*ScheduleMember, error) {
	return c.Query().Where(schedulemember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScheduleMemberClient) GetX(ctx context.Context, id int64) *ScheduleMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySchedule queries the schedule edge of a ScheduleMember.
func (c *ScheduleMemberClient) QuerySchedule(sm *ScheduleMember) *ScheduleQuery {
	query := (&ScheduleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schedulemember.Table, schedulemember.FieldID, id),
			sqlgraph.To(schedule.Table, schedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, schedulemember.ScheduleTable, schedulemember.ScheduleColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScheduleMemberClient) Hooks() []Hook {
	return c.hooks.ScheduleMember
}

// Interceptors returns the client interceptors.
func (c *ScheduleMemberClient) Interceptors() []Interceptor {
	return c.inters.ScheduleMember
}

func (c *ScheduleMemberClient) mutate(ctx context.Context, m *ScheduleMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScheduleMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScheduleMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScheduleMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScheduleMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScheduleMember mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Schedule, ScheduleCoach, ScheduleMember []ent.Hook
	}
	inters struct {
		Schedule, ScheduleCoach, ScheduleMember []ent.Interceptor
	}
)

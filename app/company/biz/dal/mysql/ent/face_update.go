// Code generated by ent, DO NOT EDIT.

package ent

import (
	"company/biz/dal/mysql/ent/face"
	"company/biz/dal/mysql/ent/internal"
	"company/biz/dal/mysql/ent/member"
	"company/biz/dal/mysql/ent/predicate"
	"company/biz/dal/mysql/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FaceUpdate is the builder for updating Face entities.
type FaceUpdate struct {
	config
	hooks    []Hook
	mutation *FaceMutation
}

// Where appends a list predicates to the FaceUpdate builder.
func (fu *FaceUpdate) Where(ps ...predicate.Face) *FaceUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FaceUpdate) SetUpdatedAt(t time.Time) *FaceUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetMemberID sets the "member_id" field.
func (fu *FaceUpdate) SetMemberID(i int64) *FaceUpdate {
	fu.mutation.SetMemberID(i)
	return fu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableMemberID(i *int64) *FaceUpdate {
	if i != nil {
		fu.SetMemberID(*i)
	}
	return fu
}

// ClearMemberID clears the value of the "member_id" field.
func (fu *FaceUpdate) ClearMemberID() *FaceUpdate {
	fu.mutation.ClearMemberID()
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FaceUpdate) SetUserID(i int64) *FaceUpdate {
	fu.mutation.SetUserID(i)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableUserID(i *int64) *FaceUpdate {
	if i != nil {
		fu.SetUserID(*i)
	}
	return fu
}

// ClearUserID clears the value of the "user_id" field.
func (fu *FaceUpdate) ClearUserID() *FaceUpdate {
	fu.mutation.ClearUserID()
	return fu
}

// SetIdentityCard sets the "identity_card" field.
func (fu *FaceUpdate) SetIdentityCard(s string) *FaceUpdate {
	fu.mutation.SetIdentityCard(s)
	return fu
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableIdentityCard(s *string) *FaceUpdate {
	if s != nil {
		fu.SetIdentityCard(*s)
	}
	return fu
}

// ClearIdentityCard clears the value of the "identity_card" field.
func (fu *FaceUpdate) ClearIdentityCard() *FaceUpdate {
	fu.mutation.ClearIdentityCard()
	return fu
}

// SetFaceIdentityCard sets the "face_identity_card" field.
func (fu *FaceUpdate) SetFaceIdentityCard(s string) *FaceUpdate {
	fu.mutation.SetFaceIdentityCard(s)
	return fu
}

// SetNillableFaceIdentityCard sets the "face_identity_card" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableFaceIdentityCard(s *string) *FaceUpdate {
	if s != nil {
		fu.SetFaceIdentityCard(*s)
	}
	return fu
}

// ClearFaceIdentityCard clears the value of the "face_identity_card" field.
func (fu *FaceUpdate) ClearFaceIdentityCard() *FaceUpdate {
	fu.mutation.ClearFaceIdentityCard()
	return fu
}

// SetBackIdentityCard sets the "back_identity_card" field.
func (fu *FaceUpdate) SetBackIdentityCard(s string) *FaceUpdate {
	fu.mutation.SetBackIdentityCard(s)
	return fu
}

// SetNillableBackIdentityCard sets the "back_identity_card" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableBackIdentityCard(s *string) *FaceUpdate {
	if s != nil {
		fu.SetBackIdentityCard(*s)
	}
	return fu
}

// ClearBackIdentityCard clears the value of the "back_identity_card" field.
func (fu *FaceUpdate) ClearBackIdentityCard() *FaceUpdate {
	fu.mutation.ClearBackIdentityCard()
	return fu
}

// SetFacePic sets the "face_pic" field.
func (fu *FaceUpdate) SetFacePic(s string) *FaceUpdate {
	fu.mutation.SetFacePic(s)
	return fu
}

// SetNillableFacePic sets the "face_pic" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableFacePic(s *string) *FaceUpdate {
	if s != nil {
		fu.SetFacePic(*s)
	}
	return fu
}

// ClearFacePic clears the value of the "face_pic" field.
func (fu *FaceUpdate) ClearFacePic() *FaceUpdate {
	fu.mutation.ClearFacePic()
	return fu
}

// SetFaceEigenvalue sets the "face_eigenvalue" field.
func (fu *FaceUpdate) SetFaceEigenvalue(s string) *FaceUpdate {
	fu.mutation.SetFaceEigenvalue(s)
	return fu
}

// SetNillableFaceEigenvalue sets the "face_eigenvalue" field if the given value is not nil.
func (fu *FaceUpdate) SetNillableFaceEigenvalue(s *string) *FaceUpdate {
	if s != nil {
		fu.SetFaceEigenvalue(*s)
	}
	return fu
}

// ClearFaceEigenvalue clears the value of the "face_eigenvalue" field.
func (fu *FaceUpdate) ClearFaceEigenvalue() *FaceUpdate {
	fu.mutation.ClearFaceEigenvalue()
	return fu
}

// SetMemberFacesID sets the "member_faces" edge to the Member entity by ID.
func (fu *FaceUpdate) SetMemberFacesID(id int64) *FaceUpdate {
	fu.mutation.SetMemberFacesID(id)
	return fu
}

// SetNillableMemberFacesID sets the "member_faces" edge to the Member entity by ID if the given value is not nil.
func (fu *FaceUpdate) SetNillableMemberFacesID(id *int64) *FaceUpdate {
	if id != nil {
		fu = fu.SetMemberFacesID(*id)
	}
	return fu
}

// SetMemberFaces sets the "member_faces" edge to the Member entity.
func (fu *FaceUpdate) SetMemberFaces(m *Member) *FaceUpdate {
	return fu.SetMemberFacesID(m.ID)
}

// SetUserFacesID sets the "user_faces" edge to the User entity by ID.
func (fu *FaceUpdate) SetUserFacesID(id int64) *FaceUpdate {
	fu.mutation.SetUserFacesID(id)
	return fu
}

// SetNillableUserFacesID sets the "user_faces" edge to the User entity by ID if the given value is not nil.
func (fu *FaceUpdate) SetNillableUserFacesID(id *int64) *FaceUpdate {
	if id != nil {
		fu = fu.SetUserFacesID(*id)
	}
	return fu
}

// SetUserFaces sets the "user_faces" edge to the User entity.
func (fu *FaceUpdate) SetUserFaces(u *User) *FaceUpdate {
	return fu.SetUserFacesID(u.ID)
}

// Mutation returns the FaceMutation object of the builder.
func (fu *FaceUpdate) Mutation() *FaceMutation {
	return fu.mutation
}

// ClearMemberFaces clears the "member_faces" edge to the Member entity.
func (fu *FaceUpdate) ClearMemberFaces() *FaceUpdate {
	fu.mutation.ClearMemberFaces()
	return fu
}

// ClearUserFaces clears the "user_faces" edge to the User entity.
func (fu *FaceUpdate) ClearUserFaces() *FaceUpdate {
	fu.mutation.ClearUserFaces()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FaceUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FaceUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FaceUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FaceUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FaceUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := face.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(face.Table, face.Columns, sqlgraph.NewFieldSpec(face.FieldID, field.TypeInt64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(face.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.IdentityCard(); ok {
		_spec.SetField(face.FieldIdentityCard, field.TypeString, value)
	}
	if fu.mutation.IdentityCardCleared() {
		_spec.ClearField(face.FieldIdentityCard, field.TypeString)
	}
	if value, ok := fu.mutation.FaceIdentityCard(); ok {
		_spec.SetField(face.FieldFaceIdentityCard, field.TypeString, value)
	}
	if fu.mutation.FaceIdentityCardCleared() {
		_spec.ClearField(face.FieldFaceIdentityCard, field.TypeString)
	}
	if value, ok := fu.mutation.BackIdentityCard(); ok {
		_spec.SetField(face.FieldBackIdentityCard, field.TypeString, value)
	}
	if fu.mutation.BackIdentityCardCleared() {
		_spec.ClearField(face.FieldBackIdentityCard, field.TypeString)
	}
	if value, ok := fu.mutation.FacePic(); ok {
		_spec.SetField(face.FieldFacePic, field.TypeString, value)
	}
	if fu.mutation.FacePicCleared() {
		_spec.ClearField(face.FieldFacePic, field.TypeString)
	}
	if value, ok := fu.mutation.FaceEigenvalue(); ok {
		_spec.SetField(face.FieldFaceEigenvalue, field.TypeString, value)
	}
	if fu.mutation.FaceEigenvalueCleared() {
		_spec.ClearField(face.FieldFaceEigenvalue, field.TypeString)
	}
	if fu.mutation.FacePicUpdatedTimeCleared() {
		_spec.ClearField(face.FieldFacePicUpdatedTime, field.TypeTime)
	}
	if fu.mutation.MemberFacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.MemberFacesTable,
			Columns: []string{face.MemberFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fu.schemaConfig.Face
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.MemberFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.MemberFacesTable,
			Columns: []string{face.MemberFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fu.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserFacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.UserFacesTable,
			Columns: []string{face.UserFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fu.schemaConfig.Face
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.UserFacesTable,
			Columns: []string{face.UserFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fu.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fu.schemaConfig.Face
	ctx = internal.NewSchemaConfigContext(ctx, fu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{face.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FaceUpdateOne is the builder for updating a single Face entity.
type FaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FaceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FaceUpdateOne) SetUpdatedAt(t time.Time) *FaceUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetMemberID sets the "member_id" field.
func (fuo *FaceUpdateOne) SetMemberID(i int64) *FaceUpdateOne {
	fuo.mutation.SetMemberID(i)
	return fuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableMemberID(i *int64) *FaceUpdateOne {
	if i != nil {
		fuo.SetMemberID(*i)
	}
	return fuo
}

// ClearMemberID clears the value of the "member_id" field.
func (fuo *FaceUpdateOne) ClearMemberID() *FaceUpdateOne {
	fuo.mutation.ClearMemberID()
	return fuo
}

// SetUserID sets the "user_id" field.
func (fuo *FaceUpdateOne) SetUserID(i int64) *FaceUpdateOne {
	fuo.mutation.SetUserID(i)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableUserID(i *int64) *FaceUpdateOne {
	if i != nil {
		fuo.SetUserID(*i)
	}
	return fuo
}

// ClearUserID clears the value of the "user_id" field.
func (fuo *FaceUpdateOne) ClearUserID() *FaceUpdateOne {
	fuo.mutation.ClearUserID()
	return fuo
}

// SetIdentityCard sets the "identity_card" field.
func (fuo *FaceUpdateOne) SetIdentityCard(s string) *FaceUpdateOne {
	fuo.mutation.SetIdentityCard(s)
	return fuo
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableIdentityCard(s *string) *FaceUpdateOne {
	if s != nil {
		fuo.SetIdentityCard(*s)
	}
	return fuo
}

// ClearIdentityCard clears the value of the "identity_card" field.
func (fuo *FaceUpdateOne) ClearIdentityCard() *FaceUpdateOne {
	fuo.mutation.ClearIdentityCard()
	return fuo
}

// SetFaceIdentityCard sets the "face_identity_card" field.
func (fuo *FaceUpdateOne) SetFaceIdentityCard(s string) *FaceUpdateOne {
	fuo.mutation.SetFaceIdentityCard(s)
	return fuo
}

// SetNillableFaceIdentityCard sets the "face_identity_card" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableFaceIdentityCard(s *string) *FaceUpdateOne {
	if s != nil {
		fuo.SetFaceIdentityCard(*s)
	}
	return fuo
}

// ClearFaceIdentityCard clears the value of the "face_identity_card" field.
func (fuo *FaceUpdateOne) ClearFaceIdentityCard() *FaceUpdateOne {
	fuo.mutation.ClearFaceIdentityCard()
	return fuo
}

// SetBackIdentityCard sets the "back_identity_card" field.
func (fuo *FaceUpdateOne) SetBackIdentityCard(s string) *FaceUpdateOne {
	fuo.mutation.SetBackIdentityCard(s)
	return fuo
}

// SetNillableBackIdentityCard sets the "back_identity_card" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableBackIdentityCard(s *string) *FaceUpdateOne {
	if s != nil {
		fuo.SetBackIdentityCard(*s)
	}
	return fuo
}

// ClearBackIdentityCard clears the value of the "back_identity_card" field.
func (fuo *FaceUpdateOne) ClearBackIdentityCard() *FaceUpdateOne {
	fuo.mutation.ClearBackIdentityCard()
	return fuo
}

// SetFacePic sets the "face_pic" field.
func (fuo *FaceUpdateOne) SetFacePic(s string) *FaceUpdateOne {
	fuo.mutation.SetFacePic(s)
	return fuo
}

// SetNillableFacePic sets the "face_pic" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableFacePic(s *string) *FaceUpdateOne {
	if s != nil {
		fuo.SetFacePic(*s)
	}
	return fuo
}

// ClearFacePic clears the value of the "face_pic" field.
func (fuo *FaceUpdateOne) ClearFacePic() *FaceUpdateOne {
	fuo.mutation.ClearFacePic()
	return fuo
}

// SetFaceEigenvalue sets the "face_eigenvalue" field.
func (fuo *FaceUpdateOne) SetFaceEigenvalue(s string) *FaceUpdateOne {
	fuo.mutation.SetFaceEigenvalue(s)
	return fuo
}

// SetNillableFaceEigenvalue sets the "face_eigenvalue" field if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableFaceEigenvalue(s *string) *FaceUpdateOne {
	if s != nil {
		fuo.SetFaceEigenvalue(*s)
	}
	return fuo
}

// ClearFaceEigenvalue clears the value of the "face_eigenvalue" field.
func (fuo *FaceUpdateOne) ClearFaceEigenvalue() *FaceUpdateOne {
	fuo.mutation.ClearFaceEigenvalue()
	return fuo
}

// SetMemberFacesID sets the "member_faces" edge to the Member entity by ID.
func (fuo *FaceUpdateOne) SetMemberFacesID(id int64) *FaceUpdateOne {
	fuo.mutation.SetMemberFacesID(id)
	return fuo
}

// SetNillableMemberFacesID sets the "member_faces" edge to the Member entity by ID if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableMemberFacesID(id *int64) *FaceUpdateOne {
	if id != nil {
		fuo = fuo.SetMemberFacesID(*id)
	}
	return fuo
}

// SetMemberFaces sets the "member_faces" edge to the Member entity.
func (fuo *FaceUpdateOne) SetMemberFaces(m *Member) *FaceUpdateOne {
	return fuo.SetMemberFacesID(m.ID)
}

// SetUserFacesID sets the "user_faces" edge to the User entity by ID.
func (fuo *FaceUpdateOne) SetUserFacesID(id int64) *FaceUpdateOne {
	fuo.mutation.SetUserFacesID(id)
	return fuo
}

// SetNillableUserFacesID sets the "user_faces" edge to the User entity by ID if the given value is not nil.
func (fuo *FaceUpdateOne) SetNillableUserFacesID(id *int64) *FaceUpdateOne {
	if id != nil {
		fuo = fuo.SetUserFacesID(*id)
	}
	return fuo
}

// SetUserFaces sets the "user_faces" edge to the User entity.
func (fuo *FaceUpdateOne) SetUserFaces(u *User) *FaceUpdateOne {
	return fuo.SetUserFacesID(u.ID)
}

// Mutation returns the FaceMutation object of the builder.
func (fuo *FaceUpdateOne) Mutation() *FaceMutation {
	return fuo.mutation
}

// ClearMemberFaces clears the "member_faces" edge to the Member entity.
func (fuo *FaceUpdateOne) ClearMemberFaces() *FaceUpdateOne {
	fuo.mutation.ClearMemberFaces()
	return fuo
}

// ClearUserFaces clears the "user_faces" edge to the User entity.
func (fuo *FaceUpdateOne) ClearUserFaces() *FaceUpdateOne {
	fuo.mutation.ClearUserFaces()
	return fuo
}

// Where appends a list predicates to the FaceUpdate builder.
func (fuo *FaceUpdateOne) Where(ps ...predicate.Face) *FaceUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FaceUpdateOne) Select(field string, fields ...string) *FaceUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Face entity.
func (fuo *FaceUpdateOne) Save(ctx context.Context) (*Face, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FaceUpdateOne) SaveX(ctx context.Context) *Face {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FaceUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FaceUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FaceUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := face.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FaceUpdateOne) sqlSave(ctx context.Context) (_node *Face, err error) {
	_spec := sqlgraph.NewUpdateSpec(face.Table, face.Columns, sqlgraph.NewFieldSpec(face.FieldID, field.TypeInt64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Face.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, face.FieldID)
		for _, f := range fields {
			if !face.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != face.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(face.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.IdentityCard(); ok {
		_spec.SetField(face.FieldIdentityCard, field.TypeString, value)
	}
	if fuo.mutation.IdentityCardCleared() {
		_spec.ClearField(face.FieldIdentityCard, field.TypeString)
	}
	if value, ok := fuo.mutation.FaceIdentityCard(); ok {
		_spec.SetField(face.FieldFaceIdentityCard, field.TypeString, value)
	}
	if fuo.mutation.FaceIdentityCardCleared() {
		_spec.ClearField(face.FieldFaceIdentityCard, field.TypeString)
	}
	if value, ok := fuo.mutation.BackIdentityCard(); ok {
		_spec.SetField(face.FieldBackIdentityCard, field.TypeString, value)
	}
	if fuo.mutation.BackIdentityCardCleared() {
		_spec.ClearField(face.FieldBackIdentityCard, field.TypeString)
	}
	if value, ok := fuo.mutation.FacePic(); ok {
		_spec.SetField(face.FieldFacePic, field.TypeString, value)
	}
	if fuo.mutation.FacePicCleared() {
		_spec.ClearField(face.FieldFacePic, field.TypeString)
	}
	if value, ok := fuo.mutation.FaceEigenvalue(); ok {
		_spec.SetField(face.FieldFaceEigenvalue, field.TypeString, value)
	}
	if fuo.mutation.FaceEigenvalueCleared() {
		_spec.ClearField(face.FieldFaceEigenvalue, field.TypeString)
	}
	if fuo.mutation.FacePicUpdatedTimeCleared() {
		_spec.ClearField(face.FieldFacePicUpdatedTime, field.TypeTime)
	}
	if fuo.mutation.MemberFacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.MemberFacesTable,
			Columns: []string{face.MemberFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fuo.schemaConfig.Face
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.MemberFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.MemberFacesTable,
			Columns: []string{face.MemberFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fuo.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserFacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.UserFacesTable,
			Columns: []string{face.UserFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fuo.schemaConfig.Face
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.UserFacesTable,
			Columns: []string{face.UserFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fuo.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fuo.schemaConfig.Face
	ctx = internal.NewSchemaConfigContext(ctx, fuo.schemaConfig)
	_node = &Face{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{face.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}

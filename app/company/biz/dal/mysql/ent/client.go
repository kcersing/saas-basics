// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"company/biz/dal/mysql/ent/migrate"

	"company/biz/dal/mysql/ent/contract"
	"company/biz/dal/mysql/ent/entrylogs"
	"company/biz/dal/mysql/ent/face"
	"company/biz/dal/mysql/ent/member"
	"company/biz/dal/mysql/ent/messages"
	"company/biz/dal/mysql/ent/user"
	"company/biz/dal/mysql/ent/venue"
	"company/biz/dal/mysql/ent/venueplace"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"company/biz/dal/mysql/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// EntryLogs is the client for interacting with the EntryLogs builders.
	EntryLogs *EntryLogsClient
	// Face is the client for interacting with the Face builders.
	Face *FaceClient
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// Messages is the client for interacting with the Messages builders.
	Messages *MessagesClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Venue is the client for interacting with the Venue builders.
	Venue *VenueClient
	// VenuePlace is the client for interacting with the VenuePlace builders.
	VenuePlace *VenuePlaceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Contract = NewContractClient(c.config)
	c.EntryLogs = NewEntryLogsClient(c.config)
	c.Face = NewFaceClient(c.config)
	c.Member = NewMemberClient(c.config)
	c.Messages = NewMessagesClient(c.config)
	c.User = NewUserClient(c.config)
	c.Venue = NewVenueClient(c.config)
	c.VenuePlace = NewVenuePlaceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Contract:   NewContractClient(cfg),
		EntryLogs:  NewEntryLogsClient(cfg),
		Face:       NewFaceClient(cfg),
		Member:     NewMemberClient(cfg),
		Messages:   NewMessagesClient(cfg),
		User:       NewUserClient(cfg),
		Venue:      NewVenueClient(cfg),
		VenuePlace: NewVenuePlaceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Contract:   NewContractClient(cfg),
		EntryLogs:  NewEntryLogsClient(cfg),
		Face:       NewFaceClient(cfg),
		Member:     NewMemberClient(cfg),
		Messages:   NewMessagesClient(cfg),
		User:       NewUserClient(cfg),
		Venue:      NewVenueClient(cfg),
		VenuePlace: NewVenuePlaceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Contract.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Contract, c.EntryLogs, c.Face, c.Member, c.Messages, c.User, c.Venue,
		c.VenuePlace,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Contract, c.EntryLogs, c.Face, c.Member, c.Messages, c.User, c.Venue,
		c.VenuePlace,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ContractMutation:
		return c.Contract.mutate(ctx, m)
	case *EntryLogsMutation:
		return c.EntryLogs.mutate(ctx, m)
	case *FaceMutation:
		return c.Face.mutate(ctx, m)
	case *MemberMutation:
		return c.Member.mutate(ctx, m)
	case *MessagesMutation:
		return c.Messages.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VenueMutation:
		return c.Venue.mutate(ctx, m)
	case *VenuePlaceMutation:
		return c.VenuePlace.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contract.Intercept(f(g(h())))`.
func (c *ContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contract = append(c.inters.Contract, interceptors...)
}

// Create returns a builder for creating a Contract entity.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContractClient) MapCreateBulk(slice any, setFunc func(*ContractCreate, int)) *ContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContractCreateBulk{err: fmt.Errorf("calling to ContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id int64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractClient) DeleteOneID(id int64) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContract},
		inters: c.Interceptors(),
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id int64) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id int64) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	return c.hooks.Contract
}

// Interceptors returns the client interceptors.
func (c *ContractClient) Interceptors() []Interceptor {
	return c.inters.Contract
}

func (c *ContractClient) mutate(ctx context.Context, m *ContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contract mutation op: %q", m.Op())
	}
}

// EntryLogsClient is a client for the EntryLogs schema.
type EntryLogsClient struct {
	config
}

// NewEntryLogsClient returns a client for the EntryLogs from the given config.
func NewEntryLogsClient(c config) *EntryLogsClient {
	return &EntryLogsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entrylogs.Hooks(f(g(h())))`.
func (c *EntryLogsClient) Use(hooks ...Hook) {
	c.hooks.EntryLogs = append(c.hooks.EntryLogs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entrylogs.Intercept(f(g(h())))`.
func (c *EntryLogsClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntryLogs = append(c.inters.EntryLogs, interceptors...)
}

// Create returns a builder for creating a EntryLogs entity.
func (c *EntryLogsClient) Create() *EntryLogsCreate {
	mutation := newEntryLogsMutation(c.config, OpCreate)
	return &EntryLogsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntryLogs entities.
func (c *EntryLogsClient) CreateBulk(builders ...*EntryLogsCreate) *EntryLogsCreateBulk {
	return &EntryLogsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntryLogsClient) MapCreateBulk(slice any, setFunc func(*EntryLogsCreate, int)) *EntryLogsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntryLogsCreateBulk{err: fmt.Errorf("calling to EntryLogsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntryLogsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntryLogsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntryLogs.
func (c *EntryLogsClient) Update() *EntryLogsUpdate {
	mutation := newEntryLogsMutation(c.config, OpUpdate)
	return &EntryLogsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntryLogsClient) UpdateOne(el *EntryLogs) *EntryLogsUpdateOne {
	mutation := newEntryLogsMutation(c.config, OpUpdateOne, withEntryLogs(el))
	return &EntryLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntryLogsClient) UpdateOneID(id int64) *EntryLogsUpdateOne {
	mutation := newEntryLogsMutation(c.config, OpUpdateOne, withEntryLogsID(id))
	return &EntryLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntryLogs.
func (c *EntryLogsClient) Delete() *EntryLogsDelete {
	mutation := newEntryLogsMutation(c.config, OpDelete)
	return &EntryLogsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntryLogsClient) DeleteOne(el *EntryLogs) *EntryLogsDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntryLogsClient) DeleteOneID(id int64) *EntryLogsDeleteOne {
	builder := c.Delete().Where(entrylogs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntryLogsDeleteOne{builder}
}

// Query returns a query builder for EntryLogs.
func (c *EntryLogsClient) Query() *EntryLogsQuery {
	return &EntryLogsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntryLogs},
		inters: c.Interceptors(),
	}
}

// Get returns a EntryLogs entity by its id.
func (c *EntryLogsClient) Get(ctx context.Context, id int64) (*EntryLogs, error) {
	return c.Query().Where(entrylogs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntryLogsClient) GetX(ctx context.Context, id int64) *EntryLogs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVenues queries the venues edge of a EntryLogs.
func (c *EntryLogsClient) QueryVenues(el *EntryLogs) *VenueQuery {
	query := (&VenueClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entrylogs.Table, entrylogs.FieldID, id),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entrylogs.VenuesTable, entrylogs.VenuesColumn),
		)
		schemaConfig := el.schemaConfig
		step.To.Schema = schemaConfig.Venue
		step.Edge.Schema = schemaConfig.EntryLogs
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntryLogsClient) Hooks() []Hook {
	return c.hooks.EntryLogs
}

// Interceptors returns the client interceptors.
func (c *EntryLogsClient) Interceptors() []Interceptor {
	return c.inters.EntryLogs
}

func (c *EntryLogsClient) mutate(ctx context.Context, m *EntryLogsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntryLogsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntryLogsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntryLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntryLogsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntryLogs mutation op: %q", m.Op())
	}
}

// FaceClient is a client for the Face schema.
type FaceClient struct {
	config
}

// NewFaceClient returns a client for the Face from the given config.
func NewFaceClient(c config) *FaceClient {
	return &FaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `face.Hooks(f(g(h())))`.
func (c *FaceClient) Use(hooks ...Hook) {
	c.hooks.Face = append(c.hooks.Face, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `face.Intercept(f(g(h())))`.
func (c *FaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Face = append(c.inters.Face, interceptors...)
}

// Create returns a builder for creating a Face entity.
func (c *FaceClient) Create() *FaceCreate {
	mutation := newFaceMutation(c.config, OpCreate)
	return &FaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Face entities.
func (c *FaceClient) CreateBulk(builders ...*FaceCreate) *FaceCreateBulk {
	return &FaceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FaceClient) MapCreateBulk(slice any, setFunc func(*FaceCreate, int)) *FaceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FaceCreateBulk{err: fmt.Errorf("calling to FaceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FaceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Face.
func (c *FaceClient) Update() *FaceUpdate {
	mutation := newFaceMutation(c.config, OpUpdate)
	return &FaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FaceClient) UpdateOne(f *Face) *FaceUpdateOne {
	mutation := newFaceMutation(c.config, OpUpdateOne, withFace(f))
	return &FaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FaceClient) UpdateOneID(id int64) *FaceUpdateOne {
	mutation := newFaceMutation(c.config, OpUpdateOne, withFaceID(id))
	return &FaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Face.
func (c *FaceClient) Delete() *FaceDelete {
	mutation := newFaceMutation(c.config, OpDelete)
	return &FaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FaceClient) DeleteOne(f *Face) *FaceDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FaceClient) DeleteOneID(id int64) *FaceDeleteOne {
	builder := c.Delete().Where(face.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FaceDeleteOne{builder}
}

// Query returns a query builder for Face.
func (c *FaceClient) Query() *FaceQuery {
	return &FaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFace},
		inters: c.Interceptors(),
	}
}

// Get returns a Face entity by its id.
func (c *FaceClient) Get(ctx context.Context, id int64) (*Face, error) {
	return c.Query().Where(face.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FaceClient) GetX(ctx context.Context, id int64) *Face {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMemberFaces queries the member_faces edge of a Face.
func (c *FaceClient) QueryMemberFaces(f *Face) *MemberQuery {
	query := (&MemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(face.Table, face.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, face.MemberFacesTable, face.MemberFacesColumn),
		)
		schemaConfig := f.schemaConfig
		step.To.Schema = schemaConfig.Member
		step.Edge.Schema = schemaConfig.Face
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFaces queries the user_faces edge of a Face.
func (c *FaceClient) QueryUserFaces(f *Face) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(face.Table, face.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, face.UserFacesTable, face.UserFacesColumn),
		)
		schemaConfig := f.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Face
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FaceClient) Hooks() []Hook {
	return c.hooks.Face
}

// Interceptors returns the client interceptors.
func (c *FaceClient) Interceptors() []Interceptor {
	return c.inters.Face
}

func (c *FaceClient) mutate(ctx context.Context, m *FaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Face mutation op: %q", m.Op())
	}
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `member.Intercept(f(g(h())))`.
func (c *MemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.Member = append(c.inters.Member, interceptors...)
}

// Create returns a builder for creating a Member entity.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Member entities.
func (c *MemberClient) CreateBulk(builders ...*MemberCreate) *MemberCreateBulk {
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MemberClient) MapCreateBulk(slice any, setFunc func(*MemberCreate, int)) *MemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MemberCreateBulk{err: fmt.Errorf("calling to MemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id int64) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MemberClient) DeleteOne(m *Member) *MemberDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MemberClient) DeleteOneID(id int64) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Query returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMember},
		inters: c.Interceptors(),
	}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id int64) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id int64) *Member {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMemberEntry queries the member_entry edge of a Member.
func (c *MemberClient) QueryMemberEntry(m *Member) *EntryLogsQuery {
	query := (&EntryLogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(entrylogs.Table, entrylogs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberEntryTable, member.MemberEntryColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.EntryLogs
		step.Edge.Schema = schemaConfig.EntryLogs
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberFace queries the member_face edge of a Member.
func (c *MemberClient) QueryMemberFace(m *Member) *FaceQuery {
	query := (&FaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(face.Table, face.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.MemberFaceTable, member.MemberFaceColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Face
		step.Edge.Schema = schemaConfig.Face
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// Interceptors returns the client interceptors.
func (c *MemberClient) Interceptors() []Interceptor {
	return c.inters.Member
}

func (c *MemberClient) mutate(ctx context.Context, m *MemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Member mutation op: %q", m.Op())
	}
}

// MessagesClient is a client for the Messages schema.
type MessagesClient struct {
	config
}

// NewMessagesClient returns a client for the Messages from the given config.
func NewMessagesClient(c config) *MessagesClient {
	return &MessagesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messages.Hooks(f(g(h())))`.
func (c *MessagesClient) Use(hooks ...Hook) {
	c.hooks.Messages = append(c.hooks.Messages, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `messages.Intercept(f(g(h())))`.
func (c *MessagesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Messages = append(c.inters.Messages, interceptors...)
}

// Create returns a builder for creating a Messages entity.
func (c *MessagesClient) Create() *MessagesCreate {
	mutation := newMessagesMutation(c.config, OpCreate)
	return &MessagesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Messages entities.
func (c *MessagesClient) CreateBulk(builders ...*MessagesCreate) *MessagesCreateBulk {
	return &MessagesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessagesClient) MapCreateBulk(slice any, setFunc func(*MessagesCreate, int)) *MessagesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessagesCreateBulk{err: fmt.Errorf("calling to MessagesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessagesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessagesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Messages.
func (c *MessagesClient) Update() *MessagesUpdate {
	mutation := newMessagesMutation(c.config, OpUpdate)
	return &MessagesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessagesClient) UpdateOne(m *Messages) *MessagesUpdateOne {
	mutation := newMessagesMutation(c.config, OpUpdateOne, withMessages(m))
	return &MessagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessagesClient) UpdateOneID(id int64) *MessagesUpdateOne {
	mutation := newMessagesMutation(c.config, OpUpdateOne, withMessagesID(id))
	return &MessagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Messages.
func (c *MessagesClient) Delete() *MessagesDelete {
	mutation := newMessagesMutation(c.config, OpDelete)
	return &MessagesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessagesClient) DeleteOne(m *Messages) *MessagesDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessagesClient) DeleteOneID(id int64) *MessagesDeleteOne {
	builder := c.Delete().Where(messages.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessagesDeleteOne{builder}
}

// Query returns a query builder for Messages.
func (c *MessagesClient) Query() *MessagesQuery {
	return &MessagesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessages},
		inters: c.Interceptors(),
	}
}

// Get returns a Messages entity by its id.
func (c *MessagesClient) Get(ctx context.Context, id int64) (*Messages, error) {
	return c.Query().Where(messages.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessagesClient) GetX(ctx context.Context, id int64) *Messages {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessagesClient) Hooks() []Hook {
	return c.hooks.Messages
}

// Interceptors returns the client interceptors.
func (c *MessagesClient) Interceptors() []Interceptor {
	return c.inters.Messages
}

func (c *MessagesClient) mutate(ctx context.Context, m *MessagesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessagesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessagesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessagesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessagesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Messages mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEntry queries the user_entry edge of a User.
func (c *UserClient) QueryUserEntry(u *User) *EntryLogsQuery {
	query := (&EntryLogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(entrylogs.Table, entrylogs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserEntryTable, user.UserEntryColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.EntryLogs
		step.Edge.Schema = schemaConfig.EntryLogs
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFace queries the user_face edge of a User.
func (c *UserClient) QueryUserFace(u *User) *FaceQuery {
	query := (&FaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(face.Table, face.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserFaceTable, user.UserFaceColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Face
		step.Edge.Schema = schemaConfig.Face
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VenueClient is a client for the Venue schema.
type VenueClient struct {
	config
}

// NewVenueClient returns a client for the Venue from the given config.
func NewVenueClient(c config) *VenueClient {
	return &VenueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `venue.Hooks(f(g(h())))`.
func (c *VenueClient) Use(hooks ...Hook) {
	c.hooks.Venue = append(c.hooks.Venue, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `venue.Intercept(f(g(h())))`.
func (c *VenueClient) Intercept(interceptors ...Interceptor) {
	c.inters.Venue = append(c.inters.Venue, interceptors...)
}

// Create returns a builder for creating a Venue entity.
func (c *VenueClient) Create() *VenueCreate {
	mutation := newVenueMutation(c.config, OpCreate)
	return &VenueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Venue entities.
func (c *VenueClient) CreateBulk(builders ...*VenueCreate) *VenueCreateBulk {
	return &VenueCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VenueClient) MapCreateBulk(slice any, setFunc func(*VenueCreate, int)) *VenueCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VenueCreateBulk{err: fmt.Errorf("calling to VenueClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VenueCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VenueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Venue.
func (c *VenueClient) Update() *VenueUpdate {
	mutation := newVenueMutation(c.config, OpUpdate)
	return &VenueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VenueClient) UpdateOne(v *Venue) *VenueUpdateOne {
	mutation := newVenueMutation(c.config, OpUpdateOne, withVenue(v))
	return &VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VenueClient) UpdateOneID(id int64) *VenueUpdateOne {
	mutation := newVenueMutation(c.config, OpUpdateOne, withVenueID(id))
	return &VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Venue.
func (c *VenueClient) Delete() *VenueDelete {
	mutation := newVenueMutation(c.config, OpDelete)
	return &VenueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VenueClient) DeleteOne(v *Venue) *VenueDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VenueClient) DeleteOneID(id int64) *VenueDeleteOne {
	builder := c.Delete().Where(venue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VenueDeleteOne{builder}
}

// Query returns a query builder for Venue.
func (c *VenueClient) Query() *VenueQuery {
	return &VenueQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVenue},
		inters: c.Interceptors(),
	}
}

// Get returns a Venue entity by its id.
func (c *VenueClient) Get(ctx context.Context, id int64) (*Venue, error) {
	return c.Query().Where(venue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VenueClient) GetX(ctx context.Context, id int64) *Venue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaces queries the places edge of a Venue.
func (c *VenueClient) QueryPlaces(v *Venue) *VenuePlaceQuery {
	query := (&VenuePlaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, id),
			sqlgraph.To(venueplace.Table, venueplace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, venue.PlacesTable, venue.PlacesColumn),
		)
		schemaConfig := v.schemaConfig
		step.To.Schema = schemaConfig.VenuePlace
		step.Edge.Schema = schemaConfig.VenuePlace
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVenueEntry queries the venue_entry edge of a Venue.
func (c *VenueClient) QueryVenueEntry(v *Venue) *EntryLogsQuery {
	query := (&EntryLogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, id),
			sqlgraph.To(entrylogs.Table, entrylogs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, venue.VenueEntryTable, venue.VenueEntryColumn),
		)
		schemaConfig := v.schemaConfig
		step.To.Schema = schemaConfig.EntryLogs
		step.Edge.Schema = schemaConfig.EntryLogs
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VenueClient) Hooks() []Hook {
	return c.hooks.Venue
}

// Interceptors returns the client interceptors.
func (c *VenueClient) Interceptors() []Interceptor {
	return c.inters.Venue
}

func (c *VenueClient) mutate(ctx context.Context, m *VenueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VenueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VenueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VenueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VenueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Venue mutation op: %q", m.Op())
	}
}

// VenuePlaceClient is a client for the VenuePlace schema.
type VenuePlaceClient struct {
	config
}

// NewVenuePlaceClient returns a client for the VenuePlace from the given config.
func NewVenuePlaceClient(c config) *VenuePlaceClient {
	return &VenuePlaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `venueplace.Hooks(f(g(h())))`.
func (c *VenuePlaceClient) Use(hooks ...Hook) {
	c.hooks.VenuePlace = append(c.hooks.VenuePlace, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `venueplace.Intercept(f(g(h())))`.
func (c *VenuePlaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.VenuePlace = append(c.inters.VenuePlace, interceptors...)
}

// Create returns a builder for creating a VenuePlace entity.
func (c *VenuePlaceClient) Create() *VenuePlaceCreate {
	mutation := newVenuePlaceMutation(c.config, OpCreate)
	return &VenuePlaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VenuePlace entities.
func (c *VenuePlaceClient) CreateBulk(builders ...*VenuePlaceCreate) *VenuePlaceCreateBulk {
	return &VenuePlaceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VenuePlaceClient) MapCreateBulk(slice any, setFunc func(*VenuePlaceCreate, int)) *VenuePlaceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VenuePlaceCreateBulk{err: fmt.Errorf("calling to VenuePlaceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VenuePlaceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VenuePlaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VenuePlace.
func (c *VenuePlaceClient) Update() *VenuePlaceUpdate {
	mutation := newVenuePlaceMutation(c.config, OpUpdate)
	return &VenuePlaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VenuePlaceClient) UpdateOne(vp *VenuePlace) *VenuePlaceUpdateOne {
	mutation := newVenuePlaceMutation(c.config, OpUpdateOne, withVenuePlace(vp))
	return &VenuePlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VenuePlaceClient) UpdateOneID(id int64) *VenuePlaceUpdateOne {
	mutation := newVenuePlaceMutation(c.config, OpUpdateOne, withVenuePlaceID(id))
	return &VenuePlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VenuePlace.
func (c *VenuePlaceClient) Delete() *VenuePlaceDelete {
	mutation := newVenuePlaceMutation(c.config, OpDelete)
	return &VenuePlaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VenuePlaceClient) DeleteOne(vp *VenuePlace) *VenuePlaceDeleteOne {
	return c.DeleteOneID(vp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VenuePlaceClient) DeleteOneID(id int64) *VenuePlaceDeleteOne {
	builder := c.Delete().Where(venueplace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VenuePlaceDeleteOne{builder}
}

// Query returns a query builder for VenuePlace.
func (c *VenuePlaceClient) Query() *VenuePlaceQuery {
	return &VenuePlaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVenuePlace},
		inters: c.Interceptors(),
	}
}

// Get returns a VenuePlace entity by its id.
func (c *VenuePlaceClient) Get(ctx context.Context, id int64) (*VenuePlace, error) {
	return c.Query().Where(venueplace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VenuePlaceClient) GetX(ctx context.Context, id int64) *VenuePlace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVenue queries the venue edge of a VenuePlace.
func (c *VenuePlaceClient) QueryVenue(vp *VenuePlace) *VenueQuery {
	query := (&VenueClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(venueplace.Table, venueplace.FieldID, id),
			sqlgraph.To(venue.Table, venue.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, venueplace.VenueTable, venueplace.VenueColumn),
		)
		schemaConfig := vp.schemaConfig
		step.To.Schema = schemaConfig.Venue
		step.Edge.Schema = schemaConfig.VenuePlace
		fromV = sqlgraph.Neighbors(vp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VenuePlaceClient) Hooks() []Hook {
	return c.hooks.VenuePlace
}

// Interceptors returns the client interceptors.
func (c *VenuePlaceClient) Interceptors() []Interceptor {
	return c.inters.VenuePlace
}

func (c *VenuePlaceClient) mutate(ctx context.Context, m *VenuePlaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VenuePlaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VenuePlaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VenuePlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VenuePlaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VenuePlace mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Contract, EntryLogs, Face, Member, Messages, User, Venue, VenuePlace []ent.Hook
	}
	inters struct {
		Contract, EntryLogs, Face, Member, Messages, User, Venue,
		VenuePlace []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}

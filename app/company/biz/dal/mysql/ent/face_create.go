// Code generated by ent, DO NOT EDIT.

package ent

import (
	"company/biz/dal/mysql/ent/face"
	"company/biz/dal/mysql/ent/member"
	"company/biz/dal/mysql/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FaceCreate is the builder for creating a Face entity.
type FaceCreate struct {
	config
	mutation *FaceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FaceCreate) SetCreatedAt(t time.Time) *FaceCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FaceCreate) SetNillableCreatedAt(t *time.Time) *FaceCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FaceCreate) SetUpdatedAt(t time.Time) *FaceCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FaceCreate) SetNillableUpdatedAt(t *time.Time) *FaceCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetMemberID sets the "member_id" field.
func (fc *FaceCreate) SetMemberID(i int64) *FaceCreate {
	fc.mutation.SetMemberID(i)
	return fc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fc *FaceCreate) SetNillableMemberID(i *int64) *FaceCreate {
	if i != nil {
		fc.SetMemberID(*i)
	}
	return fc
}

// SetUserID sets the "user_id" field.
func (fc *FaceCreate) SetUserID(i int64) *FaceCreate {
	fc.mutation.SetUserID(i)
	return fc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fc *FaceCreate) SetNillableUserID(i *int64) *FaceCreate {
	if i != nil {
		fc.SetUserID(*i)
	}
	return fc
}

// SetIdentityCard sets the "identity_card" field.
func (fc *FaceCreate) SetIdentityCard(s string) *FaceCreate {
	fc.mutation.SetIdentityCard(s)
	return fc
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (fc *FaceCreate) SetNillableIdentityCard(s *string) *FaceCreate {
	if s != nil {
		fc.SetIdentityCard(*s)
	}
	return fc
}

// SetFaceIdentityCard sets the "face_identity_card" field.
func (fc *FaceCreate) SetFaceIdentityCard(s string) *FaceCreate {
	fc.mutation.SetFaceIdentityCard(s)
	return fc
}

// SetNillableFaceIdentityCard sets the "face_identity_card" field if the given value is not nil.
func (fc *FaceCreate) SetNillableFaceIdentityCard(s *string) *FaceCreate {
	if s != nil {
		fc.SetFaceIdentityCard(*s)
	}
	return fc
}

// SetBackIdentityCard sets the "back_identity_card" field.
func (fc *FaceCreate) SetBackIdentityCard(s string) *FaceCreate {
	fc.mutation.SetBackIdentityCard(s)
	return fc
}

// SetNillableBackIdentityCard sets the "back_identity_card" field if the given value is not nil.
func (fc *FaceCreate) SetNillableBackIdentityCard(s *string) *FaceCreate {
	if s != nil {
		fc.SetBackIdentityCard(*s)
	}
	return fc
}

// SetFacePic sets the "face_pic" field.
func (fc *FaceCreate) SetFacePic(s string) *FaceCreate {
	fc.mutation.SetFacePic(s)
	return fc
}

// SetNillableFacePic sets the "face_pic" field if the given value is not nil.
func (fc *FaceCreate) SetNillableFacePic(s *string) *FaceCreate {
	if s != nil {
		fc.SetFacePic(*s)
	}
	return fc
}

// SetFaceEigenvalue sets the "face_eigenvalue" field.
func (fc *FaceCreate) SetFaceEigenvalue(s string) *FaceCreate {
	fc.mutation.SetFaceEigenvalue(s)
	return fc
}

// SetNillableFaceEigenvalue sets the "face_eigenvalue" field if the given value is not nil.
func (fc *FaceCreate) SetNillableFaceEigenvalue(s *string) *FaceCreate {
	if s != nil {
		fc.SetFaceEigenvalue(*s)
	}
	return fc
}

// SetFacePicUpdatedTime sets the "face_pic_updated_time" field.
func (fc *FaceCreate) SetFacePicUpdatedTime(t time.Time) *FaceCreate {
	fc.mutation.SetFacePicUpdatedTime(t)
	return fc
}

// SetNillableFacePicUpdatedTime sets the "face_pic_updated_time" field if the given value is not nil.
func (fc *FaceCreate) SetNillableFacePicUpdatedTime(t *time.Time) *FaceCreate {
	if t != nil {
		fc.SetFacePicUpdatedTime(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FaceCreate) SetID(i int64) *FaceCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetMemberFacesID sets the "member_faces" edge to the Member entity by ID.
func (fc *FaceCreate) SetMemberFacesID(id int64) *FaceCreate {
	fc.mutation.SetMemberFacesID(id)
	return fc
}

// SetNillableMemberFacesID sets the "member_faces" edge to the Member entity by ID if the given value is not nil.
func (fc *FaceCreate) SetNillableMemberFacesID(id *int64) *FaceCreate {
	if id != nil {
		fc = fc.SetMemberFacesID(*id)
	}
	return fc
}

// SetMemberFaces sets the "member_faces" edge to the Member entity.
func (fc *FaceCreate) SetMemberFaces(m *Member) *FaceCreate {
	return fc.SetMemberFacesID(m.ID)
}

// SetUserFacesID sets the "user_faces" edge to the User entity by ID.
func (fc *FaceCreate) SetUserFacesID(id int64) *FaceCreate {
	fc.mutation.SetUserFacesID(id)
	return fc
}

// SetNillableUserFacesID sets the "user_faces" edge to the User entity by ID if the given value is not nil.
func (fc *FaceCreate) SetNillableUserFacesID(id *int64) *FaceCreate {
	if id != nil {
		fc = fc.SetUserFacesID(*id)
	}
	return fc
}

// SetUserFaces sets the "user_faces" edge to the User entity.
func (fc *FaceCreate) SetUserFaces(u *User) *FaceCreate {
	return fc.SetUserFacesID(u.ID)
}

// Mutation returns the FaceMutation object of the builder.
func (fc *FaceCreate) Mutation() *FaceMutation {
	return fc.mutation
}

// Save creates the Face in the database.
func (fc *FaceCreate) Save(ctx context.Context) (*Face, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FaceCreate) SaveX(ctx context.Context) *Face {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FaceCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FaceCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FaceCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := face.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := face.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.FaceIdentityCard(); !ok {
		v := face.DefaultFaceIdentityCard
		fc.mutation.SetFaceIdentityCard(v)
	}
	if _, ok := fc.mutation.BackIdentityCard(); !ok {
		v := face.DefaultBackIdentityCard
		fc.mutation.SetBackIdentityCard(v)
	}
	if _, ok := fc.mutation.FacePic(); !ok {
		v := face.DefaultFacePic
		fc.mutation.SetFacePic(v)
	}
	if _, ok := fc.mutation.FaceEigenvalue(); !ok {
		v := face.DefaultFaceEigenvalue
		fc.mutation.SetFaceEigenvalue(v)
	}
	if _, ok := fc.mutation.FacePicUpdatedTime(); !ok {
		v := face.DefaultFacePicUpdatedTime()
		fc.mutation.SetFacePicUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FaceCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Face.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Face.updated_at"`)}
	}
	return nil
}

func (fc *FaceCreate) sqlSave(ctx context.Context) (*Face, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FaceCreate) createSpec() (*Face, *sqlgraph.CreateSpec) {
	var (
		_node = &Face{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(face.Table, sqlgraph.NewFieldSpec(face.FieldID, field.TypeInt64))
	)
	_spec.Schema = fc.schemaConfig.Face
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(face.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(face.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.IdentityCard(); ok {
		_spec.SetField(face.FieldIdentityCard, field.TypeString, value)
		_node.IdentityCard = value
	}
	if value, ok := fc.mutation.FaceIdentityCard(); ok {
		_spec.SetField(face.FieldFaceIdentityCard, field.TypeString, value)
		_node.FaceIdentityCard = value
	}
	if value, ok := fc.mutation.BackIdentityCard(); ok {
		_spec.SetField(face.FieldBackIdentityCard, field.TypeString, value)
		_node.BackIdentityCard = value
	}
	if value, ok := fc.mutation.FacePic(); ok {
		_spec.SetField(face.FieldFacePic, field.TypeString, value)
		_node.FacePic = value
	}
	if value, ok := fc.mutation.FaceEigenvalue(); ok {
		_spec.SetField(face.FieldFaceEigenvalue, field.TypeString, value)
		_node.FaceEigenvalue = value
	}
	if value, ok := fc.mutation.FacePicUpdatedTime(); ok {
		_spec.SetField(face.FieldFacePicUpdatedTime, field.TypeTime, value)
		_node.FacePicUpdatedTime = value
	}
	if nodes := fc.mutation.MemberFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.MemberFacesTable,
			Columns: []string{face.MemberFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fc.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.UserFacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   face.UserFacesTable,
			Columns: []string{face.UserFacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		edge.Schema = fc.schemaConfig.Face
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FaceCreateBulk is the builder for creating many Face entities in bulk.
type FaceCreateBulk struct {
	config
	err      error
	builders []*FaceCreate
}

// Save creates the Face entities in the database.
func (fcb *FaceCreateBulk) Save(ctx context.Context) ([]*Face, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Face, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FaceCreateBulk) SaveX(ctx context.Context) []*Face {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FaceCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FaceCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

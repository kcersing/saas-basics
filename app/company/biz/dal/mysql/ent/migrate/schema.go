// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ContractsColumns holds the columns for the "contracts" table.
	ContractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "status", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:禁用;1:正常]", Default: 1},
		{Name: "name", Type: field.TypeString, Nullable: true, Comment: "name | 名称"},
		{Name: "content", Type: field.TypeString, Nullable: true, Comment: "content | 内容"},
	}
	// ContractsTable holds the schema information for the "contracts" table.
	ContractsTable = &schema.Table{
		Name:       "contracts",
		Columns:    ContractsColumns,
		PrimaryKey: []*schema.Column{ContractsColumns[0]},
	}
	// EntryLogsColumns holds the columns for the "entry_logs" table.
	EntryLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "user_id", Type: field.TypeInt64, Nullable: true, Comment: "用户id", Default: 0},
		{Name: "member_id", Type: field.TypeInt64, Nullable: true, Comment: "会员id", Default: 0},
		{Name: "member_product_id", Type: field.TypeInt64, Nullable: true, Comment: "用户产品id"},
		{Name: "member_property_id", Type: field.TypeInt64, Nullable: true, Comment: "属性id"},
		{Name: "entry_time", Type: field.TypeTime, Nullable: true, Comment: "进场时间"},
		{Name: "leaving_time", Type: field.TypeTime, Nullable: true, Comment: "离场时间"},
		{Name: "member_member_entry", Type: field.TypeInt64, Nullable: true},
		{Name: "user_user_entry", Type: field.TypeInt64, Nullable: true},
		{Name: "venue_id", Type: field.TypeInt64, Nullable: true, Comment: "场馆id"},
	}
	// EntryLogsTable holds the schema information for the "entry_logs" table.
	EntryLogsTable = &schema.Table{
		Name:       "entry_logs",
		Columns:    EntryLogsColumns,
		PrimaryKey: []*schema.Column{EntryLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entry_logs_member_member_entry",
				Columns:    []*schema.Column{EntryLogsColumns[9]},
				RefColumns: []*schema.Column{MemberColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entry_logs_u_users_user_entry",
				Columns:    []*schema.Column{EntryLogsColumns[10]},
				RefColumns: []*schema.Column{UUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entry_logs_venue_venue_entry",
				Columns:    []*schema.Column{EntryLogsColumns[11]},
				RefColumns: []*schema.Column{VenueColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entrylogs_venue_id_member_id_user_id",
				Unique:  false,
				Columns: []*schema.Column{EntryLogsColumns[11], EntryLogsColumns[4], EntryLogsColumns[3]},
			},
		},
	}
	// FacesColumns holds the columns for the "faces" table.
	FacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "identity_card", Type: field.TypeString, Nullable: true, Comment: "证件号"},
		{Name: "face_identity_card", Type: field.TypeString, Nullable: true, Comment: "face_identity_card | 证件照片", Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "back_identity_card", Type: field.TypeString, Nullable: true, Comment: "back_identity_card | 证件照片", Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "face_pic", Type: field.TypeString, Nullable: true, Comment: "face_pic | 人脸照片", Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "face_eigenvalue", Type: field.TypeString, Nullable: true, Comment: "人脸特征值", Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "face_pic_updated_time", Type: field.TypeTime, Nullable: true, Comment: "人脸更新时间"},
		{Name: "member_id", Type: field.TypeInt64, Nullable: true, Comment: "会员id"},
		{Name: "user_id", Type: field.TypeInt64, Nullable: true, Comment: "user id"},
	}
	// FacesTable holds the schema information for the "faces" table.
	FacesTable = &schema.Table{
		Name:       "faces",
		Columns:    FacesColumns,
		PrimaryKey: []*schema.Column{FacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "faces_member_member_face",
				Columns:    []*schema.Column{FacesColumns[9]},
				RefColumns: []*schema.Column{MemberColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "faces_u_users_user_face",
				Columns:    []*schema.Column{FacesColumns[10]},
				RefColumns: []*schema.Column{UUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MemberColumns holds the columns for the "member" table.
	MemberColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "status", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:禁用;1:正常]", Default: 1},
		{Name: "password", Type: field.TypeString, Nullable: true, Comment: "password | 密码"},
		{Name: "name", Type: field.TypeString, Nullable: true, Comment: "name | 账号"},
		{Name: "nickname", Type: field.TypeString, Unique: true, Nullable: true, Comment: "nickname | 姓名"},
		{Name: "mobile", Type: field.TypeString, Nullable: true, Comment: "mobile number | 手机号"},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Comment: "avatar | 头像路径", Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "condition", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:潜在;1:正式;3:冻结;4:到期]", Default: 1},
	}
	// MemberTable holds the schema information for the "member" table.
	MemberTable = &schema.Table{
		Name:       "member",
		Columns:    MemberColumns,
		PrimaryKey: []*schema.Column{MemberColumns[0]},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "type", Type: field.TypeString, Comment: "类型[1:用户user;2:会员member]"},
		{Name: "to_user_id", Type: field.TypeString, Comment: "该消息接受者ID"},
		{Name: "from_user_id", Type: field.TypeString, Comment: "该消息发送者ID"},
		{Name: "content", Type: field.TypeString, Comment: "消息内容"},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "messages_to_user_id_from_user_id",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[4], MessagesColumns[5]},
			},
		},
	}
	// UUsersColumns holds the columns for the "u_users" table.
	UUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "status", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:禁用;1:正常]", Default: 1},
		{Name: "username", Type: field.TypeString, Unique: true, Comment: "user's login name | 登录名"},
		{Name: "password", Type: field.TypeString, Comment: "password | 密码"},
		{Name: "nickname", Type: field.TypeString, Nullable: true, Comment: "nickname | 昵称"},
		{Name: "side_mode", Type: field.TypeString, Nullable: true, Comment: "template mode | 布局方式", Default: "dark"},
		{Name: "base_color", Type: field.TypeString, Nullable: true, Comment: "base color of template | 后台页面色调", Default: "#fff"},
		{Name: "active_color", Type: field.TypeString, Nullable: true, Comment: "active color of template | 当前激活的颜色设定", Default: "#1890ff"},
		{Name: "role_id", Type: field.TypeInt64, Nullable: true, Comment: "role id | 角色ID", Default: 2},
		{Name: "mobile", Type: field.TypeString, Unique: true, Comment: "mobile number | 手机号"},
		{Name: "email", Type: field.TypeString, Nullable: true, Comment: "email | 邮箱号"},
		{Name: "wecom", Type: field.TypeString, Nullable: true, Comment: "wecom | 微信号"},
		{Name: "job", Type: field.TypeString, Nullable: true, Comment: "职业"},
		{Name: "organization", Type: field.TypeString, Nullable: true, Comment: "部门"},
		{Name: "default_venue_id", Type: field.TypeInt64, Nullable: true, Comment: "登陆后默认场馆ID"},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Comment: "avatar | 头像路径", SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "gender", Type: field.TypeInt64, Nullable: true, Comment: "性别 | [0:女性;1:男性;3:保密]", Default: 3},
		{Name: "birthday", Type: field.TypeTime, Nullable: true, Comment: "出生日期"},
	}
	// UUsersTable holds the schema information for the "u_users" table.
	UUsersTable = &schema.Table{
		Name:       "u_users",
		Columns:    UUsersColumns,
		PrimaryKey: []*schema.Column{UUsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_username_email",
				Unique:  true,
				Columns: []*schema.Column{UUsersColumns[4], UUsersColumns[12]},
			},
		},
	}
	// VenueColumns holds the columns for the "venue" table.
	VenueColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "status", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:禁用;1:正常]", Default: 1},
		{Name: "name", Type: field.TypeString, Nullable: true, Comment: "名称"},
		{Name: "address", Type: field.TypeString, Nullable: true, Comment: "地址 省/市/区"},
		{Name: "address_detail", Type: field.TypeString, Nullable: true, Comment: "详细地址"},
		{Name: "latitude", Type: field.TypeString, Nullable: true, Comment: "维度"},
		{Name: "longitude", Type: field.TypeString, Nullable: true, Comment: "经度"},
		{Name: "mobile", Type: field.TypeString, Nullable: true, Comment: "联系电话"},
		{Name: "pic", Type: field.TypeString, Nullable: true, Comment: "场馆照片"},
		{Name: "information", Type: field.TypeString, Nullable: true, Comment: "详情"},
	}
	// VenueTable holds the schema information for the "venue" table.
	VenueTable = &schema.Table{
		Name:       "venue",
		Columns:    VenueColumns,
		PrimaryKey: []*schema.Column{VenueColumns[0]},
	}
	// VenuePlaceColumns holds the columns for the "venue_place" table.
	VenuePlaceColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "primary key"},
		{Name: "created_at", Type: field.TypeTime, Comment: "created time"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "last update time"},
		{Name: "status", Type: field.TypeInt64, Nullable: true, Comment: "状态[0:禁用;1:正常]", Default: 1},
		{Name: "name", Type: field.TypeString, Nullable: true, Comment: "名称"},
		{Name: "pic", Type: field.TypeString, Nullable: true, Comment: "照片"},
		{Name: "venue_id", Type: field.TypeInt64, Nullable: true, Comment: "场馆id"},
	}
	// VenuePlaceTable holds the schema information for the "venue_place" table.
	VenuePlaceTable = &schema.Table{
		Name:       "venue_place",
		Columns:    VenuePlaceColumns,
		PrimaryKey: []*schema.Column{VenuePlaceColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "venue_place_venue_places",
				Columns:    []*schema.Column{VenuePlaceColumns[6]},
				RefColumns: []*schema.Column{VenueColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "venueplace_venue_id",
				Unique:  false,
				Columns: []*schema.Column{VenuePlaceColumns[6]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ContractsTable,
		EntryLogsTable,
		FacesTable,
		MemberTable,
		MessagesTable,
		UUsersTable,
		VenueTable,
		VenuePlaceTable,
	}
)

func init() {
	ContractsTable.Annotation = &entsql.Annotation{
		Table:   "contracts",
		Options: "AUTO_INCREMENT = 100000",
	}
	EntryLogsTable.ForeignKeys[0].RefTable = MemberTable
	EntryLogsTable.ForeignKeys[1].RefTable = UUsersTable
	EntryLogsTable.ForeignKeys[2].RefTable = VenueTable
	EntryLogsTable.Annotation = &entsql.Annotation{
		Table:   "entry_logs",
		Options: "AUTO_INCREMENT = 100000",
	}
	FacesTable.ForeignKeys[0].RefTable = MemberTable
	FacesTable.ForeignKeys[1].RefTable = UUsersTable
	FacesTable.Annotation = &entsql.Annotation{
		Table: "faces",
	}
	MemberTable.Annotation = &entsql.Annotation{
		Table:   "member",
		Options: "AUTO_INCREMENT = 100000",
	}
	MessagesTable.Annotation = &entsql.Annotation{
		Table: "messages",
	}
	UUsersTable.Annotation = &entsql.Annotation{
		Table:   "u_users",
		Options: "AUTO_INCREMENT = 100000",
	}
	VenueTable.Annotation = &entsql.Annotation{
		Table:   "venue",
		Options: "AUTO_INCREMENT = 100000",
	}
	VenuePlaceTable.ForeignKeys[0].RefTable = VenueTable
	VenuePlaceTable.Annotation = &entsql.Annotation{
		Table:   "venue_place",
		Options: "AUTO_INCREMENT = 100000",
	}
}

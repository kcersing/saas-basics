// Code generated by ent, DO NOT EDIT.

package ent

import (
	"company/biz/dal/mysql/ent/face"
	"company/biz/dal/mysql/ent/member"
	"company/biz/dal/mysql/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Face is the model entity for the Face schema.
type Face struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 会员id
	MemberID int64 `json:"member_id,omitempty"`
	// user id
	UserID int64 `json:"user_id,omitempty"`
	// 证件号
	IdentityCard string `json:"identity_card,omitempty"`
	// face_identity_card | 证件照片
	FaceIdentityCard string `json:"face_identity_card,omitempty"`
	// back_identity_card | 证件照片
	BackIdentityCard string `json:"back_identity_card,omitempty"`
	// face_pic | 人脸照片
	FacePic string `json:"face_pic,omitempty"`
	// 人脸特征值
	FaceEigenvalue string `json:"face_eigenvalue,omitempty"`
	// 人脸更新时间
	FacePicUpdatedTime time.Time `json:"face_pic_updated_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FaceQuery when eager-loading is set.
	Edges        FaceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FaceEdges holds the relations/edges for other nodes in the graph.
type FaceEdges struct {
	// MemberFaces holds the value of the member_faces edge.
	MemberFaces *Member `json:"member_faces,omitempty"`
	// UserFaces holds the value of the user_faces edge.
	UserFaces *User `json:"user_faces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberFacesOrErr returns the MemberFaces value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaceEdges) MemberFacesOrErr() (*Member, error) {
	if e.MemberFaces != nil {
		return e.MemberFaces, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: member.Label}
	}
	return nil, &NotLoadedError{edge: "member_faces"}
}

// UserFacesOrErr returns the UserFaces value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaceEdges) UserFacesOrErr() (*User, error) {
	if e.UserFaces != nil {
		return e.UserFaces, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_faces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Face) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case face.FieldID, face.FieldMemberID, face.FieldUserID:
			values[i] = new(sql.NullInt64)
		case face.FieldIdentityCard, face.FieldFaceIdentityCard, face.FieldBackIdentityCard, face.FieldFacePic, face.FieldFaceEigenvalue:
			values[i] = new(sql.NullString)
		case face.FieldCreatedAt, face.FieldUpdatedAt, face.FieldFacePicUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Face fields.
func (f *Face) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case face.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case face.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case face.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case face.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				f.MemberID = value.Int64
			}
		case face.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				f.UserID = value.Int64
			}
		case face.FieldIdentityCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity_card", values[i])
			} else if value.Valid {
				f.IdentityCard = value.String
			}
		case face.FieldFaceIdentityCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face_identity_card", values[i])
			} else if value.Valid {
				f.FaceIdentityCard = value.String
			}
		case face.FieldBackIdentityCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field back_identity_card", values[i])
			} else if value.Valid {
				f.BackIdentityCard = value.String
			}
		case face.FieldFacePic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face_pic", values[i])
			} else if value.Valid {
				f.FacePic = value.String
			}
		case face.FieldFaceEigenvalue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face_eigenvalue", values[i])
			} else if value.Valid {
				f.FaceEigenvalue = value.String
			}
		case face.FieldFacePicUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field face_pic_updated_time", values[i])
			} else if value.Valid {
				f.FacePicUpdatedTime = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Face.
// This includes values selected through modifiers, order, etc.
func (f *Face) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryMemberFaces queries the "member_faces" edge of the Face entity.
func (f *Face) QueryMemberFaces() *MemberQuery {
	return NewFaceClient(f.config).QueryMemberFaces(f)
}

// QueryUserFaces queries the "user_faces" edge of the Face entity.
func (f *Face) QueryUserFaces() *UserQuery {
	return NewFaceClient(f.config).QueryUserFaces(f)
}

// Update returns a builder for updating this Face.
// Note that you need to call Face.Unwrap() before calling this method if this Face
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Face) Update() *FaceUpdateOne {
	return NewFaceClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Face entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Face) Unwrap() *Face {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Face is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Face) String() string {
	var builder strings.Builder
	builder.WriteString("Face(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", f.MemberID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteString(", ")
	builder.WriteString("identity_card=")
	builder.WriteString(f.IdentityCard)
	builder.WriteString(", ")
	builder.WriteString("face_identity_card=")
	builder.WriteString(f.FaceIdentityCard)
	builder.WriteString(", ")
	builder.WriteString("back_identity_card=")
	builder.WriteString(f.BackIdentityCard)
	builder.WriteString(", ")
	builder.WriteString("face_pic=")
	builder.WriteString(f.FacePic)
	builder.WriteString(", ")
	builder.WriteString("face_eigenvalue=")
	builder.WriteString(f.FaceEigenvalue)
	builder.WriteString(", ")
	builder.WriteString("face_pic_updated_time=")
	builder.WriteString(f.FacePicUpdatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Faces is a parsable slice of Face.
type Faces []*Face

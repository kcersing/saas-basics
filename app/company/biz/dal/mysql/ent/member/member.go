// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// EdgeMemberEntry holds the string denoting the member_entry edge name in mutations.
	EdgeMemberEntry = "member_entry"
	// EdgeMemberFace holds the string denoting the member_face edge name in mutations.
	EdgeMemberFace = "member_face"
	// Table holds the table name of the member in the database.
	Table = "member"
	// MemberEntryTable is the table that holds the member_entry relation/edge.
	MemberEntryTable = "entry_logs"
	// MemberEntryInverseTable is the table name for the EntryLogs entity.
	// It exists in this package in order to avoid circular dependency with the "entrylogs" package.
	MemberEntryInverseTable = "entry_logs"
	// MemberEntryColumn is the table column denoting the member_entry relation/edge.
	MemberEntryColumn = "member_member_entry"
	// MemberFaceTable is the table that holds the member_face relation/edge.
	MemberFaceTable = "faces"
	// MemberFaceInverseTable is the table name for the Face entity.
	// It exists in this package in order to avoid circular dependency with the "face" package.
	MemberFaceInverseTable = "faces"
	// MemberFaceColumn is the table column denoting the member_face relation/edge.
	MemberFaceColumn = "member_id"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldPassword,
	FieldName,
	FieldNickname,
	FieldMobile,
	FieldAvatar,
	FieldCondition,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultCondition holds the default value on creation for the "condition" field.
	DefaultCondition int64
)

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByMemberEntryCount orders the results by member_entry count.
func ByMemberEntryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberEntryStep(), opts...)
	}
}

// ByMemberEntry orders the results by member_entry terms.
func ByMemberEntry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberEntryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberFaceCount orders the results by member_face count.
func ByMemberFaceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberFaceStep(), opts...)
	}
}

// ByMemberFace orders the results by member_face terms.
func ByMemberFace(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberFaceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemberEntryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberEntryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberEntryTable, MemberEntryColumn),
	)
}
func newMemberFaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberFaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberFaceTable, MemberFaceColumn),
	)
}

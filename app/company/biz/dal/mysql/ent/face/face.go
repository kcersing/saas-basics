// Code generated by ent, DO NOT EDIT.

package face

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the face type in the database.
	Label = "face"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldIdentityCard holds the string denoting the identity_card field in the database.
	FieldIdentityCard = "identity_card"
	// FieldFaceIdentityCard holds the string denoting the face_identity_card field in the database.
	FieldFaceIdentityCard = "face_identity_card"
	// FieldBackIdentityCard holds the string denoting the back_identity_card field in the database.
	FieldBackIdentityCard = "back_identity_card"
	// FieldFacePic holds the string denoting the face_pic field in the database.
	FieldFacePic = "face_pic"
	// FieldFaceEigenvalue holds the string denoting the face_eigenvalue field in the database.
	FieldFaceEigenvalue = "face_eigenvalue"
	// FieldFacePicUpdatedTime holds the string denoting the face_pic_updated_time field in the database.
	FieldFacePicUpdatedTime = "face_pic_updated_time"
	// EdgeMemberFaces holds the string denoting the member_faces edge name in mutations.
	EdgeMemberFaces = "member_faces"
	// EdgeUserFaces holds the string denoting the user_faces edge name in mutations.
	EdgeUserFaces = "user_faces"
	// Table holds the table name of the face in the database.
	Table = "faces"
	// MemberFacesTable is the table that holds the member_faces relation/edge.
	MemberFacesTable = "faces"
	// MemberFacesInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MemberFacesInverseTable = "member"
	// MemberFacesColumn is the table column denoting the member_faces relation/edge.
	MemberFacesColumn = "member_id"
	// UserFacesTable is the table that holds the user_faces relation/edge.
	UserFacesTable = "faces"
	// UserFacesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserFacesInverseTable = "u_users"
	// UserFacesColumn is the table column denoting the user_faces relation/edge.
	UserFacesColumn = "user_id"
)

// Columns holds all SQL columns for face fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMemberID,
	FieldUserID,
	FieldIdentityCard,
	FieldFaceIdentityCard,
	FieldBackIdentityCard,
	FieldFacePic,
	FieldFaceEigenvalue,
	FieldFacePicUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFaceIdentityCard holds the default value on creation for the "face_identity_card" field.
	DefaultFaceIdentityCard string
	// DefaultBackIdentityCard holds the default value on creation for the "back_identity_card" field.
	DefaultBackIdentityCard string
	// DefaultFacePic holds the default value on creation for the "face_pic" field.
	DefaultFacePic string
	// DefaultFaceEigenvalue holds the default value on creation for the "face_eigenvalue" field.
	DefaultFaceEigenvalue string
	// DefaultFacePicUpdatedTime holds the default value on creation for the "face_pic_updated_time" field.
	DefaultFacePicUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the Face queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByIdentityCard orders the results by the identity_card field.
func ByIdentityCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityCard, opts...).ToFunc()
}

// ByFaceIdentityCard orders the results by the face_identity_card field.
func ByFaceIdentityCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaceIdentityCard, opts...).ToFunc()
}

// ByBackIdentityCard orders the results by the back_identity_card field.
func ByBackIdentityCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackIdentityCard, opts...).ToFunc()
}

// ByFacePic orders the results by the face_pic field.
func ByFacePic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacePic, opts...).ToFunc()
}

// ByFaceEigenvalue orders the results by the face_eigenvalue field.
func ByFaceEigenvalue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaceEigenvalue, opts...).ToFunc()
}

// ByFacePicUpdatedTime orders the results by the face_pic_updated_time field.
func ByFacePicUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacePicUpdatedTime, opts...).ToFunc()
}

// ByMemberFacesField orders the results by member_faces field.
func ByMemberFacesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberFacesStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserFacesField orders the results by user_faces field.
func ByUserFacesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserFacesStep(), sql.OrderByField(field, opts...))
	}
}
func newMemberFacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberFacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MemberFacesTable, MemberFacesColumn),
	)
}
func newUserFacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserFacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserFacesTable, UserFacesColumn),
	)
}

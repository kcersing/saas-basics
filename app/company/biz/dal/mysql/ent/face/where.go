// Code generated by ent, DO NOT EDIT.

package face

import (
	"company/biz/dal/mysql/ent/internal"
	"company/biz/dal/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldUpdatedAt, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldMemberID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldUserID, v))
}

// IdentityCard applies equality check predicate on the "identity_card" field. It's identical to IdentityCardEQ.
func IdentityCard(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldIdentityCard, v))
}

// FaceIdentityCard applies equality check predicate on the "face_identity_card" field. It's identical to FaceIdentityCardEQ.
func FaceIdentityCard(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFaceIdentityCard, v))
}

// BackIdentityCard applies equality check predicate on the "back_identity_card" field. It's identical to BackIdentityCardEQ.
func BackIdentityCard(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldBackIdentityCard, v))
}

// FacePic applies equality check predicate on the "face_pic" field. It's identical to FacePicEQ.
func FacePic(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFacePic, v))
}

// FaceEigenvalue applies equality check predicate on the "face_eigenvalue" field. It's identical to FaceEigenvalueEQ.
func FaceEigenvalue(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFaceEigenvalue, v))
}

// FacePicUpdatedTime applies equality check predicate on the "face_pic_updated_time" field. It's identical to FacePicUpdatedTimeEQ.
func FacePicUpdatedTime(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFacePicUpdatedTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldUpdatedAt, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int64) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int64) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int64) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldMemberID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldUserID))
}

// IdentityCardEQ applies the EQ predicate on the "identity_card" field.
func IdentityCardEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldIdentityCard, v))
}

// IdentityCardNEQ applies the NEQ predicate on the "identity_card" field.
func IdentityCardNEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldIdentityCard, v))
}

// IdentityCardIn applies the In predicate on the "identity_card" field.
func IdentityCardIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldIdentityCard, vs...))
}

// IdentityCardNotIn applies the NotIn predicate on the "identity_card" field.
func IdentityCardNotIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldIdentityCard, vs...))
}

// IdentityCardGT applies the GT predicate on the "identity_card" field.
func IdentityCardGT(v string) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldIdentityCard, v))
}

// IdentityCardGTE applies the GTE predicate on the "identity_card" field.
func IdentityCardGTE(v string) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldIdentityCard, v))
}

// IdentityCardLT applies the LT predicate on the "identity_card" field.
func IdentityCardLT(v string) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldIdentityCard, v))
}

// IdentityCardLTE applies the LTE predicate on the "identity_card" field.
func IdentityCardLTE(v string) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldIdentityCard, v))
}

// IdentityCardContains applies the Contains predicate on the "identity_card" field.
func IdentityCardContains(v string) predicate.Face {
	return predicate.Face(sql.FieldContains(FieldIdentityCard, v))
}

// IdentityCardHasPrefix applies the HasPrefix predicate on the "identity_card" field.
func IdentityCardHasPrefix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasPrefix(FieldIdentityCard, v))
}

// IdentityCardHasSuffix applies the HasSuffix predicate on the "identity_card" field.
func IdentityCardHasSuffix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasSuffix(FieldIdentityCard, v))
}

// IdentityCardIsNil applies the IsNil predicate on the "identity_card" field.
func IdentityCardIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldIdentityCard))
}

// IdentityCardNotNil applies the NotNil predicate on the "identity_card" field.
func IdentityCardNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldIdentityCard))
}

// IdentityCardEqualFold applies the EqualFold predicate on the "identity_card" field.
func IdentityCardEqualFold(v string) predicate.Face {
	return predicate.Face(sql.FieldEqualFold(FieldIdentityCard, v))
}

// IdentityCardContainsFold applies the ContainsFold predicate on the "identity_card" field.
func IdentityCardContainsFold(v string) predicate.Face {
	return predicate.Face(sql.FieldContainsFold(FieldIdentityCard, v))
}

// FaceIdentityCardEQ applies the EQ predicate on the "face_identity_card" field.
func FaceIdentityCardEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFaceIdentityCard, v))
}

// FaceIdentityCardNEQ applies the NEQ predicate on the "face_identity_card" field.
func FaceIdentityCardNEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldFaceIdentityCard, v))
}

// FaceIdentityCardIn applies the In predicate on the "face_identity_card" field.
func FaceIdentityCardIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldFaceIdentityCard, vs...))
}

// FaceIdentityCardNotIn applies the NotIn predicate on the "face_identity_card" field.
func FaceIdentityCardNotIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldFaceIdentityCard, vs...))
}

// FaceIdentityCardGT applies the GT predicate on the "face_identity_card" field.
func FaceIdentityCardGT(v string) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldFaceIdentityCard, v))
}

// FaceIdentityCardGTE applies the GTE predicate on the "face_identity_card" field.
func FaceIdentityCardGTE(v string) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldFaceIdentityCard, v))
}

// FaceIdentityCardLT applies the LT predicate on the "face_identity_card" field.
func FaceIdentityCardLT(v string) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldFaceIdentityCard, v))
}

// FaceIdentityCardLTE applies the LTE predicate on the "face_identity_card" field.
func FaceIdentityCardLTE(v string) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldFaceIdentityCard, v))
}

// FaceIdentityCardContains applies the Contains predicate on the "face_identity_card" field.
func FaceIdentityCardContains(v string) predicate.Face {
	return predicate.Face(sql.FieldContains(FieldFaceIdentityCard, v))
}

// FaceIdentityCardHasPrefix applies the HasPrefix predicate on the "face_identity_card" field.
func FaceIdentityCardHasPrefix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasPrefix(FieldFaceIdentityCard, v))
}

// FaceIdentityCardHasSuffix applies the HasSuffix predicate on the "face_identity_card" field.
func FaceIdentityCardHasSuffix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasSuffix(FieldFaceIdentityCard, v))
}

// FaceIdentityCardIsNil applies the IsNil predicate on the "face_identity_card" field.
func FaceIdentityCardIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldFaceIdentityCard))
}

// FaceIdentityCardNotNil applies the NotNil predicate on the "face_identity_card" field.
func FaceIdentityCardNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldFaceIdentityCard))
}

// FaceIdentityCardEqualFold applies the EqualFold predicate on the "face_identity_card" field.
func FaceIdentityCardEqualFold(v string) predicate.Face {
	return predicate.Face(sql.FieldEqualFold(FieldFaceIdentityCard, v))
}

// FaceIdentityCardContainsFold applies the ContainsFold predicate on the "face_identity_card" field.
func FaceIdentityCardContainsFold(v string) predicate.Face {
	return predicate.Face(sql.FieldContainsFold(FieldFaceIdentityCard, v))
}

// BackIdentityCardEQ applies the EQ predicate on the "back_identity_card" field.
func BackIdentityCardEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldBackIdentityCard, v))
}

// BackIdentityCardNEQ applies the NEQ predicate on the "back_identity_card" field.
func BackIdentityCardNEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldBackIdentityCard, v))
}

// BackIdentityCardIn applies the In predicate on the "back_identity_card" field.
func BackIdentityCardIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldBackIdentityCard, vs...))
}

// BackIdentityCardNotIn applies the NotIn predicate on the "back_identity_card" field.
func BackIdentityCardNotIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldBackIdentityCard, vs...))
}

// BackIdentityCardGT applies the GT predicate on the "back_identity_card" field.
func BackIdentityCardGT(v string) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldBackIdentityCard, v))
}

// BackIdentityCardGTE applies the GTE predicate on the "back_identity_card" field.
func BackIdentityCardGTE(v string) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldBackIdentityCard, v))
}

// BackIdentityCardLT applies the LT predicate on the "back_identity_card" field.
func BackIdentityCardLT(v string) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldBackIdentityCard, v))
}

// BackIdentityCardLTE applies the LTE predicate on the "back_identity_card" field.
func BackIdentityCardLTE(v string) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldBackIdentityCard, v))
}

// BackIdentityCardContains applies the Contains predicate on the "back_identity_card" field.
func BackIdentityCardContains(v string) predicate.Face {
	return predicate.Face(sql.FieldContains(FieldBackIdentityCard, v))
}

// BackIdentityCardHasPrefix applies the HasPrefix predicate on the "back_identity_card" field.
func BackIdentityCardHasPrefix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasPrefix(FieldBackIdentityCard, v))
}

// BackIdentityCardHasSuffix applies the HasSuffix predicate on the "back_identity_card" field.
func BackIdentityCardHasSuffix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasSuffix(FieldBackIdentityCard, v))
}

// BackIdentityCardIsNil applies the IsNil predicate on the "back_identity_card" field.
func BackIdentityCardIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldBackIdentityCard))
}

// BackIdentityCardNotNil applies the NotNil predicate on the "back_identity_card" field.
func BackIdentityCardNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldBackIdentityCard))
}

// BackIdentityCardEqualFold applies the EqualFold predicate on the "back_identity_card" field.
func BackIdentityCardEqualFold(v string) predicate.Face {
	return predicate.Face(sql.FieldEqualFold(FieldBackIdentityCard, v))
}

// BackIdentityCardContainsFold applies the ContainsFold predicate on the "back_identity_card" field.
func BackIdentityCardContainsFold(v string) predicate.Face {
	return predicate.Face(sql.FieldContainsFold(FieldBackIdentityCard, v))
}

// FacePicEQ applies the EQ predicate on the "face_pic" field.
func FacePicEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFacePic, v))
}

// FacePicNEQ applies the NEQ predicate on the "face_pic" field.
func FacePicNEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldFacePic, v))
}

// FacePicIn applies the In predicate on the "face_pic" field.
func FacePicIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldFacePic, vs...))
}

// FacePicNotIn applies the NotIn predicate on the "face_pic" field.
func FacePicNotIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldFacePic, vs...))
}

// FacePicGT applies the GT predicate on the "face_pic" field.
func FacePicGT(v string) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldFacePic, v))
}

// FacePicGTE applies the GTE predicate on the "face_pic" field.
func FacePicGTE(v string) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldFacePic, v))
}

// FacePicLT applies the LT predicate on the "face_pic" field.
func FacePicLT(v string) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldFacePic, v))
}

// FacePicLTE applies the LTE predicate on the "face_pic" field.
func FacePicLTE(v string) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldFacePic, v))
}

// FacePicContains applies the Contains predicate on the "face_pic" field.
func FacePicContains(v string) predicate.Face {
	return predicate.Face(sql.FieldContains(FieldFacePic, v))
}

// FacePicHasPrefix applies the HasPrefix predicate on the "face_pic" field.
func FacePicHasPrefix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasPrefix(FieldFacePic, v))
}

// FacePicHasSuffix applies the HasSuffix predicate on the "face_pic" field.
func FacePicHasSuffix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasSuffix(FieldFacePic, v))
}

// FacePicIsNil applies the IsNil predicate on the "face_pic" field.
func FacePicIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldFacePic))
}

// FacePicNotNil applies the NotNil predicate on the "face_pic" field.
func FacePicNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldFacePic))
}

// FacePicEqualFold applies the EqualFold predicate on the "face_pic" field.
func FacePicEqualFold(v string) predicate.Face {
	return predicate.Face(sql.FieldEqualFold(FieldFacePic, v))
}

// FacePicContainsFold applies the ContainsFold predicate on the "face_pic" field.
func FacePicContainsFold(v string) predicate.Face {
	return predicate.Face(sql.FieldContainsFold(FieldFacePic, v))
}

// FaceEigenvalueEQ applies the EQ predicate on the "face_eigenvalue" field.
func FaceEigenvalueEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFaceEigenvalue, v))
}

// FaceEigenvalueNEQ applies the NEQ predicate on the "face_eigenvalue" field.
func FaceEigenvalueNEQ(v string) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldFaceEigenvalue, v))
}

// FaceEigenvalueIn applies the In predicate on the "face_eigenvalue" field.
func FaceEigenvalueIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldFaceEigenvalue, vs...))
}

// FaceEigenvalueNotIn applies the NotIn predicate on the "face_eigenvalue" field.
func FaceEigenvalueNotIn(vs ...string) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldFaceEigenvalue, vs...))
}

// FaceEigenvalueGT applies the GT predicate on the "face_eigenvalue" field.
func FaceEigenvalueGT(v string) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldFaceEigenvalue, v))
}

// FaceEigenvalueGTE applies the GTE predicate on the "face_eigenvalue" field.
func FaceEigenvalueGTE(v string) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldFaceEigenvalue, v))
}

// FaceEigenvalueLT applies the LT predicate on the "face_eigenvalue" field.
func FaceEigenvalueLT(v string) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldFaceEigenvalue, v))
}

// FaceEigenvalueLTE applies the LTE predicate on the "face_eigenvalue" field.
func FaceEigenvalueLTE(v string) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldFaceEigenvalue, v))
}

// FaceEigenvalueContains applies the Contains predicate on the "face_eigenvalue" field.
func FaceEigenvalueContains(v string) predicate.Face {
	return predicate.Face(sql.FieldContains(FieldFaceEigenvalue, v))
}

// FaceEigenvalueHasPrefix applies the HasPrefix predicate on the "face_eigenvalue" field.
func FaceEigenvalueHasPrefix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasPrefix(FieldFaceEigenvalue, v))
}

// FaceEigenvalueHasSuffix applies the HasSuffix predicate on the "face_eigenvalue" field.
func FaceEigenvalueHasSuffix(v string) predicate.Face {
	return predicate.Face(sql.FieldHasSuffix(FieldFaceEigenvalue, v))
}

// FaceEigenvalueIsNil applies the IsNil predicate on the "face_eigenvalue" field.
func FaceEigenvalueIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldFaceEigenvalue))
}

// FaceEigenvalueNotNil applies the NotNil predicate on the "face_eigenvalue" field.
func FaceEigenvalueNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldFaceEigenvalue))
}

// FaceEigenvalueEqualFold applies the EqualFold predicate on the "face_eigenvalue" field.
func FaceEigenvalueEqualFold(v string) predicate.Face {
	return predicate.Face(sql.FieldEqualFold(FieldFaceEigenvalue, v))
}

// FaceEigenvalueContainsFold applies the ContainsFold predicate on the "face_eigenvalue" field.
func FaceEigenvalueContainsFold(v string) predicate.Face {
	return predicate.Face(sql.FieldContainsFold(FieldFaceEigenvalue, v))
}

// FacePicUpdatedTimeEQ applies the EQ predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldEQ(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeNEQ applies the NEQ predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeNEQ(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldNEQ(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeIn applies the In predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldIn(FieldFacePicUpdatedTime, vs...))
}

// FacePicUpdatedTimeNotIn applies the NotIn predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeNotIn(vs ...time.Time) predicate.Face {
	return predicate.Face(sql.FieldNotIn(FieldFacePicUpdatedTime, vs...))
}

// FacePicUpdatedTimeGT applies the GT predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeGT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGT(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeGTE applies the GTE predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeGTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldGTE(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeLT applies the LT predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeLT(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLT(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeLTE applies the LTE predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeLTE(v time.Time) predicate.Face {
	return predicate.Face(sql.FieldLTE(FieldFacePicUpdatedTime, v))
}

// FacePicUpdatedTimeIsNil applies the IsNil predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeIsNil() predicate.Face {
	return predicate.Face(sql.FieldIsNull(FieldFacePicUpdatedTime))
}

// FacePicUpdatedTimeNotNil applies the NotNil predicate on the "face_pic_updated_time" field.
func FacePicUpdatedTimeNotNil() predicate.Face {
	return predicate.Face(sql.FieldNotNull(FieldFacePicUpdatedTime))
}

// HasMemberFaces applies the HasEdge predicate on the "member_faces" edge.
func HasMemberFaces() predicate.Face {
	return predicate.Face(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberFacesTable, MemberFacesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Member
		step.Edge.Schema = schemaConfig.Face
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberFacesWith applies the HasEdge predicate on the "member_faces" edge with a given conditions (other predicates).
func HasMemberFacesWith(preds ...predicate.Member) predicate.Face {
	return predicate.Face(func(s *sql.Selector) {
		step := newMemberFacesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Member
		step.Edge.Schema = schemaConfig.Face
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserFaces applies the HasEdge predicate on the "user_faces" edge.
func HasUserFaces() predicate.Face {
	return predicate.Face(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserFacesTable, UserFacesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Face
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserFacesWith applies the HasEdge predicate on the "user_faces" edge with a given conditions (other predicates).
func HasUserFacesWith(preds ...predicate.User) predicate.Face {
	return predicate.Face(func(s *sql.Selector) {
		step := newUserFacesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Face
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Face) predicate.Face {
	return predicate.Face(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Face) predicate.Face {
	return predicate.Face(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Face) predicate.Face {
	return predicate.Face(sql.NotPredicates(p))
}

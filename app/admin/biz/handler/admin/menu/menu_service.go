// Code generated by hertz generator.

package menu

import (
	"context"
	"errors"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	menu "saas/app/admin/idl_gen/model/admin/menu"
	base "saas/app/admin/idl_gen/model/base"
)

// CreateMenu .
// @router /api/admin/menu/create [POST]
func CreateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateOrUpdateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var menuReq do.MenuInfo
	err = copier.Copy(&menuReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewMenu(ctx, c).Create(&menuReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateMenu .
// @router /api/admin/menu/update [POST]
func UpdateMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateOrUpdateMenuReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var menuReq do.MenuInfo
	err = copier.Copy(&menuReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewMenu(ctx, c).Update(&menuReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteMenu .
// @router /api/admin/menu [POST]
func DeleteMenu(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewMenu(ctx, c).Delete(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// MenuByRole .
// @router /api/admin/menu/role [GET]
func MenuByRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.Empty
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	roleIdInterface, exist := c.Get("role_id")
	if !exist || roleIdInterface == nil {
		utils.SendResponse(c, errno.Unauthorized, nil, 0, "")
		return
	}
	roleId, err := strconv.Atoi(roleIdInterface.(string))
	if err != nil {
		utils.SendResponse(c, errno.Unauthorized, nil, 0, "")
		return
	}
	menuTree, total, err := admin.NewMenu(ctx, c).ListByRole(int64(roleId))
	if err != nil {
		utils.SendResponse(c, errors.New(err.Error()), nil, 0, "")
		return
	}
	var menuInfos []*do.MenuInfo
	err = copier.Copy(&menuInfos, &menuTree)
	if err != nil {
		utils.SendResponse(c, errors.New(err.Error()), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, menuInfos, total, "")
	return
}

// MenuLists .
// @router /api/admin/menu/list [GET]
func MenuLists(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.PageInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.MenuListReq
	listReq.Page = req.Page
	listReq.PageSize = req.PageSize
	menuTree, total, err := admin.NewMenu(ctx, c).List(&listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var menuInfos []*do.MenuInfo
	err = copier.Copy(&menuInfos, &menuTree)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, menuInfos, int64(total), "")
	return
}

// CreateMenuParam .
// @router /api/admin/menu/param/create [POST]
func CreateMenuParam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateOrUpdateMenuParamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var menuParamReq do.MenuParam
	err = copier.Copy(&menuParamReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewMenu(ctx, c).CreateMenuParam(&menuParamReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateMenuParam .
// @router /api/admin/menu/param/update [POST]
func UpdateMenuParam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req menu.CreateOrUpdateMenuParamReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var menuParamReq do.MenuParam
	err = copier.Copy(&menuParamReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewMenu(ctx, c).UpdateMenuParam(&menuParamReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteMenuParam .
// @router /api/admin/menu/param [POST]
func DeleteMenuParam(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewMenu(ctx, c).DeleteMenuParam(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// MenuParamListByMenuID .
// @router /api/admin/menu/param/list [POST]
func MenuParamListByMenuID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	menuParams, total, err := admin.NewMenu(ctx, c).MenuParamListByMenuID(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, menuParams, total, "")
	return
}

// ApiTree .
// @router /api/admin/menu/tree [POST]
func ApiTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.PageInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.MenuListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	menuTree, total, err := admin.NewMenu(ctx, c).MenuTree(&listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, menuTree, int64(total), "")
	return
}

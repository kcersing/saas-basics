// Code generated by hertz generator.

package sys

import (
	"context"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"

	"github.com/cloudwego/hertz/pkg/app"
	"saas/app/admin/idl_gen/model/admin/sys"
)

// ProductList .
// @router /api/sys/product/list [POST]
func ProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).ProductList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// PropertyList .
// @router /api/sys/property/list [POST]
func PropertyList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).PropertyList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// PropertyType .
// @router /api/sys/property/type [POST]
func PropertyType(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).PropertyType(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// VenueList .
// @router /api/sys/venue/list [POST]
func VenueList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).VenueList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// ContractList .
// @router /api/sys/contract/list [POST]
func ContractList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).ContractList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// StaffList .
// @router /api/sys/staff/list [POST]
func StaffList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).StaffList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

// MemberList .
// @router /api/sys/member/list [POST]
func MemberList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.SysListReq
	err = copier.Copy(&listReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	list, err := admin.NewSys(ctx, c).MemberList(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, list, 0, "")
	return
}

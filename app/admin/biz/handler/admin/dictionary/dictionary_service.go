// Code generated by hertz generator.

package dictionary

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	dictionary "saas/app/admin/idl_gen/model/admin/dictionary"
	base "saas/app/admin/idl_gen/model/base"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"
)

// CreateDictionary .
// @router /api/admin/dict/create [POST]
func CreateDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.DictionaryInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var DictInfo do.DictionaryInfo
	err = copier.Copy(&DictInfo, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewDictionary(ctx, c).Create(&DictInfo)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateDictionary .
// @router /api/admin/dict/update [POST]
func UpdateDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.DictionaryInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var DictDetail do.DictionaryDetail
	err = copier.Copy(&DictDetail, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewDictionary(ctx, c).UpdateDetail(&DictDetail)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteDictionary .
// @router /api/admin/dict [POST]
func DeleteDictionary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewDictionary(ctx, c).DeleteDetail(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DictionaryList .
// @router /api/admin/dict/list [GET]
func DictionaryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.DictionaryPageReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var dictListReq do.DictListReq
	err = copier.Copy(&dictListReq, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err.Error())
		return
	}
	// get dict list
	dictList, total, err := admin.NewDictionary(ctx, c).List(&dictListReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, dictList, int64(total), "")
	return

}

// CreateDictionaryDetail .
// @router /api/admin/dict/detail/create [POST]
func CreateDictionaryDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.DictionaryDetail
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var DictDetail do.DictionaryDetail
	err = copier.Copy(&DictDetail, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewDictionary(ctx, c).CreateDetail(&DictDetail)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateDictionaryDetail .
// @router /api/admin/dict/detail/update [GET]
func UpdateDictionaryDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.DictionaryDetail
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var DictDetail do.DictionaryDetail
	err = copier.Copy(&DictDetail, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	err = admin.NewDictionary(ctx, c).UpdateDetail(&DictDetail)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DeleteDictionaryDetail .
// @router /api/admin/dict/detail [GET]
func DeleteDictionaryDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewDictionary(ctx, c).DeleteDetail(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// DetailByDictionaryList .
// @router /api/admin/dict/detail/list [POST]
func DetailByDictionaryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dictionary.DictionaryDetailReq

	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var DetailListReq do.DetailListReq
	err = copier.Copy(&DetailListReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	dictDetailList, total, err := admin.NewDictionary(ctx, c).DetailListByDict(&DetailListReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, dictDetailList, total, "")
	return
}

// Code generated by hertz generator.

package order

import (
	"context"
	"github.com/jinzhu/copier"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"

	"github.com/cloudwego/hertz/pkg/app"
	order "saas/app/admin/idl_gen/model/admin/order"
	base "saas/app/admin/idl_gen/model/base"
)

// CreateOrder .
// @router /api/admin/order/create [POST]
func CreateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CreateOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	var orderInfoReq do.CreateOrder
	err = copier.Copy(&orderInfoReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	sn, err := admin.NewOrder(ctx, c).Create(orderInfoReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, sn, 0, "")
	return
}

// ListOrder .
// @router /api/admin/order/list [POST]
func ListOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ListOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var listReq do.OrderListReq
	listReq.Page = *req.Page
	listReq.PageSize = *req.PageSize
	list, total, err := admin.NewOrder(ctx, c).List(listReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, list, int64(total), "")
	return
}

// GetOrderById .
// @router /api/admin/order/info [GET]
func GetOrderById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.IDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	info, err := admin.NewOrder(ctx, c).Info(req.ID)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, info, 0, "")
	return
}

// UpdateOrder .
// @router /api/admin/order/update [POST]
func UpdateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UpdateOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var orderReq do.OrderInfo
	err = copier.Copy(&orderReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewOrder(ctx, c).Update(orderReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UpdateStatus .
// @router /api/admin/order/status [POST]
func UpdateStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.StatusCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewOrder(ctx, c).UpdateStatus(int64(req.ID), req.Status)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}
	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// UnifyPay .
// @router /api/admin/order/UnifyPay [POST]
func UnifyPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UnifyPayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var unifyPayReq do.UnifyPayReq
	err = copier.Copy(&unifyPayReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	err = admin.NewOrder(ctx, c).UnifyPay(unifyPayReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, nil, 0, "")
	return
}

// QRPay .
// @router /api/admin/order/QRPay [POST]
func QRPay(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.QRPayReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	var qRPayReq do.QRPayReq
	err = copier.Copy(&qRPayReq, &req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	str, err := admin.NewOrder(ctx, c).QRPay(qRPayReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, str, 1, "")
	return
}

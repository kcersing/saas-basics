// Code generated by hertz generator.

package logs

import (
	"context"
	"saas/app/admin/pkg/errno"
	"saas/app/admin/pkg/utils"
	"saas/app/pkg/do"
	"saas/app/pkg/service/admin"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	logs "saas/app/admin/idl_gen/model/admin/logs"
	base "saas/app/admin/idl_gen/model/base"
)

// GetLogsList .
// @router /api/admin/logs/list [POST]
func GetLogsList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req logs.LogsListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	page, _ := strconv.Atoi(req.Page)
	limit, _ := strconv.Atoi(req.Limit)
	var logsListReq do.LogsListReq
	logsListReq.Page = int64(page)
	logsListReq.PageSize = int64(limit)
	logsListReq.Type = req.Type
	logsListReq.Api = req.API
	logsListReq.Method = req.Method
	logsListReq.Operator = req.Operators
	switch req.Success {
	case "true":
		success := true
		logsListReq.Success = &success
	case "false":
		success := false
		logsListReq.Success = &success
	default:
		logsListReq.Success = nil
	}
	logsList, total, err := admin.NewLogs(ctx, c).List(&logsListReq)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	utils.SendResponse(c, errno.Success, logsList, int64(total), "")
	return
}

// DeleteLogs .
// @router /api/admin/logs/deleteAll [POST]
func DeleteLogs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.Empty
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendResponse(c, errno.ConvertErr(err), nil, 0, "")
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
